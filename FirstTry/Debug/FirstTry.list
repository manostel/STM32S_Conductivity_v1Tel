
FirstTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009754  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002224  08009868  08009868  00019868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba8c  0800ba8c  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba8c  0800ba8c  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba8c  0800ba8c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba8c  0800ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ba94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e8c  20000200  0800bc94  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000108c  0800bc94  0002108c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0f8  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240c  00000000  00000000  0002f364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5b  00000000  00000000  00032750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195b0  00000000  00000000  000333ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012685  00000000  00000000  0004c95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092500  00000000  00000000  0005efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005574  00000000  00000000  000f14e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f6a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800984c 	.word	0x0800984c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800984c 	.word	0x0800984c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <calculateECSET1>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */


float calculateECSET1(float voltage) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if((voltage>1500)&&(voltage<=3300))
 80010d8:	4960      	ldr	r1, [pc, #384]	; (800125c <calculateECSET1+0x18c>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffee 	bl	80010bc <__aeabi_fcmpgt>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d027      	beq.n	8001136 <calculateECSET1+0x66>
 80010e6:	495e      	ldr	r1, [pc, #376]	; (8001260 <calculateECSET1+0x190>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffd3 	bl	8001094 <__aeabi_fcmple>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <calculateECSET1+0x66>
	{
	const float voltagePerOhm = 200;  // Voltage increase per ohm
 80010f4:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <calculateECSET1+0x194>)
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
	float resistance = voltage / voltagePerOhm;
 80010f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fed6 	bl	8000eac <__aeabi_fdiv>
 8001100:	4603      	mov	r3, r0
 8001102:	623b      	str	r3, [r7, #32]
	float conductivity = 0;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
	if (resistance != 0) {
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	6a38      	ldr	r0, [r7, #32]
 8001110:	f7ff ffac 	bl	800106c <__aeabi_fcmpeq>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10b      	bne.n	8001132 <calculateECSET1+0x62>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 800111a:	6a39      	ldr	r1, [r7, #32]
 800111c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001120:	f7ff fec4 	bl	8000eac <__aeabi_fdiv>
 8001124:	4603      	mov	r3, r0
 8001126:	4950      	ldr	r1, [pc, #320]	; (8001268 <calculateECSET1+0x198>)
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe0b 	bl	8000d44 <__aeabi_fmul>
 800112e:	4603      	mov	r3, r0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return conductivity;
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	e08d      	b.n	8001252 <calculateECSET1+0x182>
	}
	if((voltage>1000)&&(voltage<=1500))
 8001136:	494d      	ldr	r1, [pc, #308]	; (800126c <calculateECSET1+0x19c>)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ffbf 	bl	80010bc <__aeabi_fcmpgt>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d027      	beq.n	8001194 <calculateECSET1+0xc4>
 8001144:	4945      	ldr	r1, [pc, #276]	; (800125c <calculateECSET1+0x18c>)
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa4 	bl	8001094 <__aeabi_fcmple>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d020      	beq.n	8001194 <calculateECSET1+0xc4>
	{
	const float voltagePerOhm = 300;  // Voltage increase per ohm
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <calculateECSET1+0x1a0>)
 8001154:	61fb      	str	r3, [r7, #28]
	float resistance = voltage / voltagePerOhm;
 8001156:	69f9      	ldr	r1, [r7, #28]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fea7 	bl	8000eac <__aeabi_fdiv>
 800115e:	4603      	mov	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
	float conductivity = 0;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
	if (resistance != 0) {
 8001168:	f04f 0100 	mov.w	r1, #0
 800116c:	69b8      	ldr	r0, [r7, #24]
 800116e:	f7ff ff7d 	bl	800106c <__aeabi_fcmpeq>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10b      	bne.n	8001190 <calculateECSET1+0xc0>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 8001178:	69b9      	ldr	r1, [r7, #24]
 800117a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800117e:	f7ff fe95 	bl	8000eac <__aeabi_fdiv>
 8001182:	4603      	mov	r3, r0
 8001184:	4938      	ldr	r1, [pc, #224]	; (8001268 <calculateECSET1+0x198>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fddc 	bl	8000d44 <__aeabi_fmul>
 800118c:	4603      	mov	r3, r0
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
	}

	return conductivity;
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	e05e      	b.n	8001252 <calculateECSET1+0x182>
	}
	if((voltage>700)&&(voltage<=1000))
 8001194:	4937      	ldr	r1, [pc, #220]	; (8001274 <calculateECSET1+0x1a4>)
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff90 	bl	80010bc <__aeabi_fcmpgt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d027      	beq.n	80011f2 <calculateECSET1+0x122>
 80011a2:	4932      	ldr	r1, [pc, #200]	; (800126c <calculateECSET1+0x19c>)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff75 	bl	8001094 <__aeabi_fcmple>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <calculateECSET1+0x122>
	{
	const float voltagePerOhm = 450;  // Voltage increase per ohm
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <calculateECSET1+0x1a8>)
 80011b2:	617b      	str	r3, [r7, #20]
	float resistance = voltage / voltagePerOhm;
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe78 	bl	8000eac <__aeabi_fdiv>
 80011bc:	4603      	mov	r3, r0
 80011be:	613b      	str	r3, [r7, #16]
	float conductivity = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (resistance != 0) {
 80011c6:	f04f 0100 	mov.w	r1, #0
 80011ca:	6938      	ldr	r0, [r7, #16]
 80011cc:	f7ff ff4e 	bl	800106c <__aeabi_fcmpeq>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10b      	bne.n	80011ee <calculateECSET1+0x11e>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80011dc:	f7ff fe66 	bl	8000eac <__aeabi_fdiv>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4921      	ldr	r1, [pc, #132]	; (8001268 <calculateECSET1+0x198>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fdad 	bl	8000d44 <__aeabi_fmul>
 80011ea:	4603      	mov	r3, r0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return conductivity;
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f0:	e02f      	b.n	8001252 <calculateECSET1+0x182>
	}
	if((voltage>0)&&(voltage<=700))
 80011f2:	f04f 0100 	mov.w	r1, #0
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff60 	bl	80010bc <__aeabi_fcmpgt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d027      	beq.n	8001252 <calculateECSET1+0x182>
 8001202:	491c      	ldr	r1, [pc, #112]	; (8001274 <calculateECSET1+0x1a4>)
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff45 	bl	8001094 <__aeabi_fcmple>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <calculateECSET1+0x182>
	{
	const float voltagePerOhm = 600;  // Voltage increase per ohm
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <calculateECSET1+0x1ac>)
 8001212:	60fb      	str	r3, [r7, #12]
	float resistance = voltage / voltagePerOhm;
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fe48 	bl	8000eac <__aeabi_fdiv>
 800121c:	4603      	mov	r3, r0
 800121e:	60bb      	str	r3, [r7, #8]
	float conductivity = 0;
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
	if (resistance != 0) {
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f7ff ff1e 	bl	800106c <__aeabi_fcmpeq>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10b      	bne.n	800124e <calculateECSET1+0x17e>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800123c:	f7ff fe36 	bl	8000eac <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	4909      	ldr	r1, [pc, #36]	; (8001268 <calculateECSET1+0x198>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd7d 	bl	8000d44 <__aeabi_fmul>
 800124a:	4603      	mov	r3, r0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	return conductivity;
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	e7ff      	b.n	8001252 <calculateECSET1+0x182>
	}




}
 8001252:	4618      	mov	r0, r3
 8001254:	3738      	adds	r7, #56	; 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	44bb8000 	.word	0x44bb8000
 8001260:	454e4000 	.word	0x454e4000
 8001264:	43480000 	.word	0x43480000
 8001268:	41200000 	.word	0x41200000
 800126c:	447a0000 	.word	0x447a0000
 8001270:	43960000 	.word	0x43960000
 8001274:	442f0000 	.word	0x442f0000
 8001278:	43e10000 	.word	0x43e10000
 800127c:	44160000 	.word	0x44160000

08001280 <calculateECSET10>:
float calculateECSET10(float voltage) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 1.69;  // Voltage increase per ohm
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <calculateECSET10+0x50>)
 800128a:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fe0c 	bl	8000eac <__aeabi_fdiv>
 8001294:	4603      	mov	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fee2 	bl	800106c <__aeabi_fcmpeq>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10b      	bne.n	80012c6 <calculateECSET10+0x46>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 80012ae:	68f9      	ldr	r1, [r7, #12]
 80012b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012b4:	f7ff fdfa 	bl	8000eac <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4906      	ldr	r1, [pc, #24]	; (80012d4 <calculateECSET10+0x54>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fd41 	bl	8000d44 <__aeabi_fmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 80012c6:	697b      	ldr	r3, [r7, #20]

}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	3fd851ec 	.word	0x3fd851ec
 80012d4:	41200000 	.word	0x41200000

080012d8 <calculateECSET100>:
float calculateECSET100(float voltage) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 0.172;  // Voltage increase per ohm
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <calculateECSET100+0x50>)
 80012e2:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fde0 	bl	8000eac <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 80012f6:	f04f 0100 	mov.w	r1, #0
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff feb6 	bl	800106c <__aeabi_fcmpeq>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <calculateECSET100+0x46>
		conductivity = (1 / resistance) * 10000;  // uS/cm
 8001306:	68f9      	ldr	r1, [r7, #12]
 8001308:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800130c:	f7ff fdce 	bl	8000eac <__aeabi_fdiv>
 8001310:	4603      	mov	r3, r0
 8001312:	4906      	ldr	r1, [pc, #24]	; (800132c <calculateECSET100+0x54>)
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd15 	bl	8000d44 <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
 800131c:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 800131e:	697b      	ldr	r3, [r7, #20]

}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	3e3020c5 	.word	0x3e3020c5
 800132c:	461c4000 	.word	0x461c4000

08001330 <calculateECSET1000>:
float calculateECSET1000(float voltage) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 0.0172;  // Voltage increase per ohm
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <calculateECSET1000+0x50>)
 800133a:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 800133c:	6939      	ldr	r1, [r7, #16]
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fdb4 	bl	8000eac <__aeabi_fdiv>
 8001344:	4603      	mov	r3, r0
 8001346:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff fe8a 	bl	800106c <__aeabi_fcmpeq>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10b      	bne.n	8001376 <calculateECSET1000+0x46>
		conductivity = (1 / resistance) * 10000;  // uS/cm
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001364:	f7ff fda2 	bl	8000eac <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	4906      	ldr	r1, [pc, #24]	; (8001384 <calculateECSET1000+0x54>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fce9 	bl	8000d44 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 8001376:	697b      	ldr	r3, [r7, #20]

}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	3c8ce704 	.word	0x3c8ce704
 8001384:	461c4000 	.word	0x461c4000

08001388 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d129      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x66>
		counter++;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013a2:	6013      	str	r3, [r2, #0]
		counter2++;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013ac:	6013      	str	r3, [r2, #0]
		if (counter>65535)
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b6:	d302      	bcc.n	80013be <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			counter=0;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
		}
		if (counter>30)
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b1e      	cmp	r3, #30
 80013c4:	d902      	bls.n	80013cc <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			counterflagPWM=1;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]

		}
		if (counter>1000)
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d4:	d902      	bls.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			counterflagPWM2=1;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
		}
		if(counter2>20000)
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d902      	bls.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timeout=1;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	801a      	strh	r2, [r3, #0]
		}

	}
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40000400 	.word	0x40000400
 80013fc:	200003c4 	.word	0x200003c4
 8001400:	200003c8 	.word	0x200003c8
 8001404:	20000b2c 	.word	0x20000b2c
 8001408:	20000b2d 	.word	0x20000b2d
 800140c:	200003cc 	.word	0x200003cc

08001410 <salinity_fertilizer>:

void salinity_fertilizer() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
	if((SET1==1)||(SET10==1))
 8001416:	4baa      	ldr	r3, [pc, #680]	; (80016c0 <salinity_fertilizer+0x2b0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d004      	beq.n	8001428 <salinity_fertilizer+0x18>
 800141e:	4ba9      	ldr	r3, [pc, #676]	; (80016c4 <salinity_fertilizer+0x2b4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	f040 8136 	bne.w	8001694 <salinity_fertilizer+0x284>
	{
		if(conductivity==0){
 8001428:	4ba7      	ldr	r3, [pc, #668]	; (80016c8 <salinity_fertilizer+0x2b8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fe1b 	bl	800106c <__aeabi_fcmpeq>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d03b      	beq.n	80014b4 <salinity_fertilizer+0xa4>
			for(int i=0;i<5;i++){
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e035      	b.n	80014ae <salinity_fertilizer+0x9e>
				ssd1306_Fill(0);
 8001442:	2000      	movs	r0, #0
 8001444:	f002 f8f8 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001448:	f002 f90e 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f002 fa32 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("NO CONDUCTIVITY ",Font_7x10,1);
 8001454:	4a9d      	ldr	r2, [pc, #628]	; (80016cc <salinity_fertilizer+0x2bc>)
 8001456:	2301      	movs	r3, #1
 8001458:	ca06      	ldmia	r2, {r1, r2}
 800145a:	489d      	ldr	r0, [pc, #628]	; (80016d0 <salinity_fertilizer+0x2c0>)
 800145c:	f002 fa06 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001460:	210a      	movs	r1, #10
 8001462:	2000      	movs	r0, #0
 8001464:	f002 fa28 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("MEASUREMENT",Font_7x10,1);
 8001468:	4a98      	ldr	r2, [pc, #608]	; (80016cc <salinity_fertilizer+0x2bc>)
 800146a:	2301      	movs	r3, #1
 800146c:	ca06      	ldmia	r2, {r1, r2}
 800146e:	4899      	ldr	r0, [pc, #612]	; (80016d4 <salinity_fertilizer+0x2c4>)
 8001470:	f002 f9fc 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8001474:	2114      	movs	r1, #20
 8001476:	2000      	movs	r0, #0
 8001478:	f002 fa1e 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("CAN'T ESTIMATE",Font_7x10,1);
 800147c:	4a93      	ldr	r2, [pc, #588]	; (80016cc <salinity_fertilizer+0x2bc>)
 800147e:	2301      	movs	r3, #1
 8001480:	ca06      	ldmia	r2, {r1, r2}
 8001482:	4895      	ldr	r0, [pc, #596]	; (80016d8 <salinity_fertilizer+0x2c8>)
 8001484:	f002 f9f2 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8001488:	211e      	movs	r1, #30
 800148a:	2000      	movs	r0, #0
 800148c:	f002 fa14 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 8001490:	4a8e      	ldr	r2, [pc, #568]	; (80016cc <salinity_fertilizer+0x2bc>)
 8001492:	2301      	movs	r3, #1
 8001494:	ca06      	ldmia	r2, {r1, r2}
 8001496:	4891      	ldr	r0, [pc, #580]	; (80016dc <salinity_fertilizer+0x2cc>)
 8001498:	f002 f9e8 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800149c:	f002 f8e4 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 80014a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a4:	f002 fcf0 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	ddc6      	ble.n	8001442 <salinity_fertilizer+0x32>
			}
		}
		if((conductivity<=2)&&(conductivity!=0))
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <salinity_fertilizer+0x2b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fde9 	bl	8001094 <__aeabi_fcmple>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d045      	beq.n	8001554 <salinity_fertilizer+0x144>
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <salinity_fertilizer+0x2b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fdcb 	bl	800106c <__aeabi_fcmpeq>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d13b      	bne.n	8001554 <salinity_fertilizer+0x144>
		{
			for(int i=0;i<5;i++){
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	e035      	b.n	800154e <salinity_fertilizer+0x13e>
				ssd1306_Fill(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f002 f8a8 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80014e8:	f002 f8be 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	2000      	movs	r0, #0
 80014f0:	f002 f9e2 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 80014f4:	4a75      	ldr	r2, [pc, #468]	; (80016cc <salinity_fertilizer+0x2bc>)
 80014f6:	2301      	movs	r3, #1
 80014f8:	ca06      	ldmia	r2, {r1, r2}
 80014fa:	4878      	ldr	r0, [pc, #480]	; (80016dc <salinity_fertilizer+0x2cc>)
 80014fc:	f002 f9b6 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001500:	210a      	movs	r1, #10
 8001502:	2000      	movs	r0, #0
 8001504:	f002 f9d8 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("LOW",Font_7x10,1);
 8001508:	4a70      	ldr	r2, [pc, #448]	; (80016cc <salinity_fertilizer+0x2bc>)
 800150a:	2301      	movs	r3, #1
 800150c:	ca06      	ldmia	r2, {r1, r2}
 800150e:	4874      	ldr	r0, [pc, #464]	; (80016e0 <salinity_fertilizer+0x2d0>)
 8001510:	f002 f9ac 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8001514:	2114      	movs	r1, #20
 8001516:	2000      	movs	r0, #0
 8001518:	f002 f9ce 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("GOOD FOR",Font_7x10,1);
 800151c:	4a6b      	ldr	r2, [pc, #428]	; (80016cc <salinity_fertilizer+0x2bc>)
 800151e:	2301      	movs	r3, #1
 8001520:	ca06      	ldmia	r2, {r1, r2}
 8001522:	4870      	ldr	r0, [pc, #448]	; (80016e4 <salinity_fertilizer+0x2d4>)
 8001524:	f002 f9a2 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8001528:	211e      	movs	r1, #30
 800152a:	2000      	movs	r0, #0
 800152c:	f002 f9c4 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("CROPS",Font_7x10,1);
 8001530:	4a66      	ldr	r2, [pc, #408]	; (80016cc <salinity_fertilizer+0x2bc>)
 8001532:	2301      	movs	r3, #1
 8001534:	ca06      	ldmia	r2, {r1, r2}
 8001536:	486c      	ldr	r0, [pc, #432]	; (80016e8 <salinity_fertilizer+0x2d8>)
 8001538:	f002 f998 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800153c:	f002 f894 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f002 fca0 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	3301      	adds	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b04      	cmp	r3, #4
 8001552:	ddc6      	ble.n	80014e2 <salinity_fertilizer+0xd2>
			}
		}
		if((conductivity>=2)&&(conductivity<=4))
 8001554:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <salinity_fertilizer+0x2b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fda3 	bl	80010a8 <__aeabi_fcmpge>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d045      	beq.n	80015f4 <salinity_fertilizer+0x1e4>
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <salinity_fertilizer+0x2b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd8f 	bl	8001094 <__aeabi_fcmple>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d03b      	beq.n	80015f4 <salinity_fertilizer+0x1e4>
		{
			for(int i=0;i<5;i++){
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e035      	b.n	80015ee <salinity_fertilizer+0x1de>
				ssd1306_Fill(0);
 8001582:	2000      	movs	r0, #0
 8001584:	f002 f858 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001588:	f002 f86e 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 800158c:	2100      	movs	r1, #0
 800158e:	2000      	movs	r0, #0
 8001590:	f002 f992 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <salinity_fertilizer+0x2bc>)
 8001596:	2301      	movs	r3, #1
 8001598:	ca06      	ldmia	r2, {r1, r2}
 800159a:	4850      	ldr	r0, [pc, #320]	; (80016dc <salinity_fertilizer+0x2cc>)
 800159c:	f002 f966 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 80015a0:	210a      	movs	r1, #10
 80015a2:	2000      	movs	r0, #0
 80015a4:	f002 f988 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("MODERATE",Font_7x10,1);
 80015a8:	4a48      	ldr	r2, [pc, #288]	; (80016cc <salinity_fertilizer+0x2bc>)
 80015aa:	2301      	movs	r3, #1
 80015ac:	ca06      	ldmia	r2, {r1, r2}
 80015ae:	484f      	ldr	r0, [pc, #316]	; (80016ec <salinity_fertilizer+0x2dc>)
 80015b0:	f002 f95c 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 80015b4:	2114      	movs	r1, #20
 80015b6:	2000      	movs	r0, #0
 80015b8:	f002 f97e 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("MAY HARM",Font_7x10,1);
 80015bc:	4a43      	ldr	r2, [pc, #268]	; (80016cc <salinity_fertilizer+0x2bc>)
 80015be:	2301      	movs	r3, #1
 80015c0:	ca06      	ldmia	r2, {r1, r2}
 80015c2:	484b      	ldr	r0, [pc, #300]	; (80016f0 <salinity_fertilizer+0x2e0>)
 80015c4:	f002 f952 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 80015c8:	211e      	movs	r1, #30
 80015ca:	2000      	movs	r0, #0
 80015cc:	f002 f974 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("CROPS",Font_7x10,1);
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <salinity_fertilizer+0x2bc>)
 80015d2:	2301      	movs	r3, #1
 80015d4:	ca06      	ldmia	r2, {r1, r2}
 80015d6:	4844      	ldr	r0, [pc, #272]	; (80016e8 <salinity_fertilizer+0x2d8>)
 80015d8:	f002 f948 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80015dc:	f002 f844 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 80015e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e4:	f002 fc50 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	ddc6      	ble.n	8001582 <salinity_fertilizer+0x172>
			}
		}
		if((conductivity>=4)&&(conductivity!=0))
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <salinity_fertilizer+0x2b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd53 	bl	80010a8 <__aeabi_fcmpge>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d045      	beq.n	8001694 <salinity_fertilizer+0x284>
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <salinity_fertilizer+0x2b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fd2b 	bl	800106c <__aeabi_fcmpeq>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d13b      	bne.n	8001694 <salinity_fertilizer+0x284>
		{
			for(int i=0;i<5;i++){
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e035      	b.n	800168e <salinity_fertilizer+0x27e>
				ssd1306_Fill(0);
 8001622:	2000      	movs	r0, #0
 8001624:	f002 f808 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001628:	f002 f81e 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 800162c:	2100      	movs	r1, #0
 800162e:	2000      	movs	r0, #0
 8001630:	f002 f942 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 8001634:	4a25      	ldr	r2, [pc, #148]	; (80016cc <salinity_fertilizer+0x2bc>)
 8001636:	2301      	movs	r3, #1
 8001638:	ca06      	ldmia	r2, {r1, r2}
 800163a:	4828      	ldr	r0, [pc, #160]	; (80016dc <salinity_fertilizer+0x2cc>)
 800163c:	f002 f916 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001640:	210a      	movs	r1, #10
 8001642:	2000      	movs	r0, #0
 8001644:	f002 f938 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("HIGH",Font_7x10,1);
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <salinity_fertilizer+0x2bc>)
 800164a:	2301      	movs	r3, #1
 800164c:	ca06      	ldmia	r2, {r1, r2}
 800164e:	4829      	ldr	r0, [pc, #164]	; (80016f4 <salinity_fertilizer+0x2e4>)
 8001650:	f002 f90c 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8001654:	2114      	movs	r1, #20
 8001656:	2000      	movs	r0, #0
 8001658:	f002 f92e 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("BAD FOR",Font_7x10,1);
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <salinity_fertilizer+0x2bc>)
 800165e:	2301      	movs	r3, #1
 8001660:	ca06      	ldmia	r2, {r1, r2}
 8001662:	4825      	ldr	r0, [pc, #148]	; (80016f8 <salinity_fertilizer+0x2e8>)
 8001664:	f002 f902 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8001668:	211e      	movs	r1, #30
 800166a:	2000      	movs	r0, #0
 800166c:	f002 f924 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("CROPS",Font_7x10,1);
 8001670:	4a16      	ldr	r2, [pc, #88]	; (80016cc <salinity_fertilizer+0x2bc>)
 8001672:	2301      	movs	r3, #1
 8001674:	ca06      	ldmia	r2, {r1, r2}
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <salinity_fertilizer+0x2d8>)
 8001678:	f002 f8f8 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800167c:	f001 fff4 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001684:	f002 fc00 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	3301      	adds	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b04      	cmp	r3, #4
 8001692:	ddc6      	ble.n	8001622 <salinity_fertilizer+0x212>
			}
		}
	}
	if((SET100==1)||(SET1000==1))
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <salinity_fertilizer+0x2ec>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d004      	beq.n	80016a6 <salinity_fertilizer+0x296>
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <salinity_fertilizer+0x2f0>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	f040 80ff 	bne.w	80018a4 <salinity_fertilizer+0x494>
	{
		if(conductivity==0){
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <salinity_fertilizer+0x2b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fcdc 	bl	800106c <__aeabi_fcmpeq>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d05d      	beq.n	8001776 <salinity_fertilizer+0x366>
			for(int i=0;i<5;i++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e057      	b.n	8001770 <salinity_fertilizer+0x360>
 80016c0:	20000b08 	.word	0x20000b08
 80016c4:	20000b09 	.word	0x20000b09
 80016c8:	200003e0 	.word	0x200003e0
 80016cc:	2000001c 	.word	0x2000001c
 80016d0:	08009868 	.word	0x08009868
 80016d4:	0800987c 	.word	0x0800987c
 80016d8:	08009888 	.word	0x08009888
 80016dc:	08009898 	.word	0x08009898
 80016e0:	080098a4 	.word	0x080098a4
 80016e4:	080098a8 	.word	0x080098a8
 80016e8:	080098b4 	.word	0x080098b4
 80016ec:	080098bc 	.word	0x080098bc
 80016f0:	080098c8 	.word	0x080098c8
 80016f4:	080098d4 	.word	0x080098d4
 80016f8:	080098dc 	.word	0x080098dc
 80016fc:	20000b0a 	.word	0x20000b0a
 8001700:	20000b0b 	.word	0x20000b0b
				ssd1306_Fill(0);
 8001704:	2000      	movs	r0, #0
 8001706:	f001 ff97 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800170a:	f001 ffad 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 800170e:	2100      	movs	r1, #0
 8001710:	2000      	movs	r0, #0
 8001712:	f002 f8d1 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("NO CONDUCTIVITY ",Font_7x10,1);
 8001716:	4a6c      	ldr	r2, [pc, #432]	; (80018c8 <salinity_fertilizer+0x4b8>)
 8001718:	2301      	movs	r3, #1
 800171a:	ca06      	ldmia	r2, {r1, r2}
 800171c:	486b      	ldr	r0, [pc, #428]	; (80018cc <salinity_fertilizer+0x4bc>)
 800171e:	f002 f8a5 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001722:	210a      	movs	r1, #10
 8001724:	2000      	movs	r0, #0
 8001726:	f002 f8c7 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("MEASUREMENT",Font_7x10,1);
 800172a:	4a67      	ldr	r2, [pc, #412]	; (80018c8 <salinity_fertilizer+0x4b8>)
 800172c:	2301      	movs	r3, #1
 800172e:	ca06      	ldmia	r2, {r1, r2}
 8001730:	4867      	ldr	r0, [pc, #412]	; (80018d0 <salinity_fertilizer+0x4c0>)
 8001732:	f002 f89b 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8001736:	2114      	movs	r1, #20
 8001738:	2000      	movs	r0, #0
 800173a:	f002 f8bd 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("CAN'T ESTIMATE",Font_7x10,1);
 800173e:	4a62      	ldr	r2, [pc, #392]	; (80018c8 <salinity_fertilizer+0x4b8>)
 8001740:	2301      	movs	r3, #1
 8001742:	ca06      	ldmia	r2, {r1, r2}
 8001744:	4863      	ldr	r0, [pc, #396]	; (80018d4 <salinity_fertilizer+0x4c4>)
 8001746:	f002 f891 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 800174a:	211e      	movs	r1, #30
 800174c:	2000      	movs	r0, #0
 800174e:	f002 f8b3 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 8001752:	4a5d      	ldr	r2, [pc, #372]	; (80018c8 <salinity_fertilizer+0x4b8>)
 8001754:	2301      	movs	r3, #1
 8001756:	ca06      	ldmia	r2, {r1, r2}
 8001758:	485f      	ldr	r0, [pc, #380]	; (80018d8 <salinity_fertilizer+0x4c8>)
 800175a:	f002 f887 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800175e:	f001 ff83 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001766:	f002 fb8f 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b04      	cmp	r3, #4
 8001774:	ddc6      	ble.n	8001704 <salinity_fertilizer+0x2f4>
			}
		}
		if((conductivity<=5.55)&&(conductivity>=1.55))
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <salinity_fertilizer+0x4cc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe54 	bl	8000428 <__aeabi_f2d>
 8001780:	a34b      	add	r3, pc, #300	; (adr r3, 80018b0 <salinity_fertilizer+0x4a0>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f923 	bl	80009d0 <__aeabi_dcmple>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03e      	beq.n	800180e <salinity_fertilizer+0x3fe>
 8001790:	4b52      	ldr	r3, [pc, #328]	; (80018dc <salinity_fertilizer+0x4cc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe47 	bl	8000428 <__aeabi_f2d>
 800179a:	a347      	add	r3, pc, #284	; (adr r3, 80018b8 <salinity_fertilizer+0x4a8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f920 	bl	80009e4 <__aeabi_dcmpge>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d031      	beq.n	800180e <salinity_fertilizer+0x3fe>
		{
			for(int i=0;i<5;i++){
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	e02b      	b.n	8001808 <salinity_fertilizer+0x3f8>
				ssd1306_Fill(0);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f001 ff41 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80017b6:	f001 ff57 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2000      	movs	r0, #0
 80017be:	f002 f87b 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SOIL",Font_7x10,1);
 80017c2:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <salinity_fertilizer+0x4b8>)
 80017c4:	2301      	movs	r3, #1
 80017c6:	ca06      	ldmia	r2, {r1, r2}
 80017c8:	4845      	ldr	r0, [pc, #276]	; (80018e0 <salinity_fertilizer+0x4d0>)
 80017ca:	f002 f84f 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 80017ce:	210a      	movs	r1, #10
 80017d0:	2000      	movs	r0, #0
 80017d2:	f002 f871 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("LACKS OF",Font_7x10,1);
 80017d6:	4a3c      	ldr	r2, [pc, #240]	; (80018c8 <salinity_fertilizer+0x4b8>)
 80017d8:	2301      	movs	r3, #1
 80017da:	ca06      	ldmia	r2, {r1, r2}
 80017dc:	4841      	ldr	r0, [pc, #260]	; (80018e4 <salinity_fertilizer+0x4d4>)
 80017de:	f002 f845 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 80017e2:	2114      	movs	r1, #20
 80017e4:	2000      	movs	r0, #0
 80017e6:	f002 f867 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("NUTRITIENTS",Font_7x10,1);
 80017ea:	4a37      	ldr	r2, [pc, #220]	; (80018c8 <salinity_fertilizer+0x4b8>)
 80017ec:	2301      	movs	r3, #1
 80017ee:	ca06      	ldmia	r2, {r1, r2}
 80017f0:	483d      	ldr	r0, [pc, #244]	; (80018e8 <salinity_fertilizer+0x4d8>)
 80017f2:	f002 f83b 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80017f6:	f001 ff37 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 80017fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017fe:	f002 fb43 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b04      	cmp	r3, #4
 800180c:	ddd0      	ble.n	80017b0 <salinity_fertilizer+0x3a0>
			}

		}
		if((conductivity<=2.55)&&(conductivity>=0))
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <salinity_fertilizer+0x4cc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe08 	bl	8000428 <__aeabi_f2d>
 8001818:	a329      	add	r3, pc, #164	; (adr r3, 80018c0 <salinity_fertilizer+0x4b0>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7ff f8d7 	bl	80009d0 <__aeabi_dcmple>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <salinity_fertilizer+0x41a>
				ssd1306_UpdateScreen();
				HAL_Delay(1000);
			}
		}
	}
}
 8001828:	e03c      	b.n	80018a4 <salinity_fertilizer+0x494>
		if((conductivity<=2.55)&&(conductivity>=0))
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <salinity_fertilizer+0x4cc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fc38 	bl	80010a8 <__aeabi_fcmpge>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <salinity_fertilizer+0x430>
}
 800183e:	e031      	b.n	80018a4 <salinity_fertilizer+0x494>
			for(int i=0;i<5;i++){
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	e02b      	b.n	800189e <salinity_fertilizer+0x48e>
				ssd1306_Fill(0);
 8001846:	2000      	movs	r0, #0
 8001848:	f001 fef6 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800184c:	f001 ff0c 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001850:	2100      	movs	r1, #0
 8001852:	2000      	movs	r0, #0
 8001854:	f002 f830 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("SOIL",Font_7x10,1);
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <salinity_fertilizer+0x4b8>)
 800185a:	2301      	movs	r3, #1
 800185c:	ca06      	ldmia	r2, {r1, r2}
 800185e:	4820      	ldr	r0, [pc, #128]	; (80018e0 <salinity_fertilizer+0x4d0>)
 8001860:	f002 f804 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001864:	210a      	movs	r1, #10
 8001866:	2000      	movs	r0, #0
 8001868:	f002 f826 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("NEEDS",Font_7x10,1);
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <salinity_fertilizer+0x4b8>)
 800186e:	2301      	movs	r3, #1
 8001870:	ca06      	ldmia	r2, {r1, r2}
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <salinity_fertilizer+0x4dc>)
 8001874:	f001 fffa 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8001878:	2114      	movs	r1, #20
 800187a:	2000      	movs	r0, #0
 800187c:	f002 f81c 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("FERTILIZERS",Font_7x10,1);
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <salinity_fertilizer+0x4b8>)
 8001882:	2301      	movs	r3, #1
 8001884:	ca06      	ldmia	r2, {r1, r2}
 8001886:	481a      	ldr	r0, [pc, #104]	; (80018f0 <salinity_fertilizer+0x4e0>)
 8001888:	f001 fff0 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800188c:	f001 feec 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001894:	f002 faf8 	bl	8003e88 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3301      	adds	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	ddd0      	ble.n	8001846 <salinity_fertilizer+0x436>
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	33333333 	.word	0x33333333
 80018b4:	40163333 	.word	0x40163333
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	3ff8cccc 	.word	0x3ff8cccc
 80018c0:	66666666 	.word	0x66666666
 80018c4:	40046666 	.word	0x40046666
 80018c8:	2000001c 	.word	0x2000001c
 80018cc:	08009868 	.word	0x08009868
 80018d0:	0800987c 	.word	0x0800987c
 80018d4:	08009888 	.word	0x08009888
 80018d8:	08009898 	.word	0x08009898
 80018dc:	200003e0 	.word	0x200003e0
 80018e0:	080098e4 	.word	0x080098e4
 80018e4:	080098ec 	.word	0x080098ec
 80018e8:	080098f8 	.word	0x080098f8
 80018ec:	08009904 	.word	0x08009904
 80018f0:	0800990c 	.word	0x0800990c

080018f4 <PWM_COND>:

void PWM_COND() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

	counterflagPWM=0;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <PWM_COND+0x70>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
	counter=0;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <PWM_COND+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
	do{
		delay2(delay_time);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <PWM_COND+0x78>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fab5 	bl	8001e78 <delay2>
		GPIOB->BSRR = GPIO_PIN_6; // Set Pin 7 (output high)
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <PWM_COND+0x7c>)
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	611a      	str	r2, [r3, #16]
		delay2(delay_time); // Adjust delay time as needed
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <PWM_COND+0x78>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 faad 	bl	8001e78 <delay2>
		GPIOB->BSRR = GPIO_PIN_6 << 16; // Reset Pin 7 (output low)
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <PWM_COND+0x7c>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001924:	611a      	str	r2, [r3, #16]

		delay2(delay_band);
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <PWM_COND+0x80>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 faa4 	bl	8001e78 <delay2>

		// Toggle GPIOB Pin 6
		//        delay2(delay_time);
		GPIOB->BSRR = GPIO_PIN_7; // Set Pin 6 (output high)
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <PWM_COND+0x7c>)
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	611a      	str	r2, [r3, #16]
		delay2(delay_time); // Adjust delay time as needed
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <PWM_COND+0x78>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fa9c 	bl	8001e78 <delay2>
		GPIOB->BSRR = GPIO_PIN_7 << 16; // Reset Pin 6 (output low)
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <PWM_COND+0x7c>)
 8001942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001946:	611a      	str	r2, [r3, #16]
		delay2(delay_time);
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <PWM_COND+0x78>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fa93 	bl	8001e78 <delay2>
	}while(counterflagPWM==0);
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <PWM_COND+0x70>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0d3      	beq.n	8001904 <PWM_COND+0x10>


}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000b2c 	.word	0x20000b2c
 8001968:	200003c4 	.word	0x200003c4
 800196c:	20000000 	.word	0x20000000
 8001970:	40010c00 	.word	0x40010c00
 8001974:	20000004 	.word	0x20000004

08001978 <PWM_MOIST>:

void PWM_MOIST(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

	counterflagPWM2=0;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <PWM_MOIST+0x54>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	counter=0;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <PWM_MOIST+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
	// Set PB3 as output
	GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3); // Clear bits
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <PWM_MOIST+0x5c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <PWM_MOIST+0x5c>)
 800198e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001992:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0; // Set pin mode to general purpose output push-pull 10MHz
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <PWM_MOIST+0x5c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <PWM_MOIST+0x5c>)
 800199a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800199e:	6013      	str	r3, [r2, #0]
	do{

		GPIOB->ODR ^= GPIO_ODR_ODR3;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <PWM_MOIST+0x5c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <PWM_MOIST+0x5c>)
 80019a6:	f083 0308 	eor.w	r3, r3, #8
 80019aa:	60d3      	str	r3, [r2, #12]
		delay2(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f000 fa63 	bl	8001e78 <delay2>


	}while(counterflagPWM2==0);
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <PWM_MOIST+0x54>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f1      	beq.n	80019a0 <PWM_MOIST+0x28>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2108      	movs	r1, #8
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <PWM_MOIST+0x5c>)
 80019c2:	f003 f986 	bl	8004cd2 <HAL_GPIO_WritePin>

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000b2d 	.word	0x20000b2d
 80019d0:	200003c4 	.word	0x200003c4
 80019d4:	40010c00 	.word	0x40010c00

080019d8 <SSD1306_INITS>:


void SSD1306_INITS()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80019dc:	f001 fdc2 	bl	8003564 <ssd1306_Init>
	ssd1306_UpdateScreen();
 80019e0:	f001 fe42 	bl	8003668 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 80019e4:	2032      	movs	r0, #50	; 0x32
 80019e6:	f002 fa4f 	bl	8003e88 <HAL_Delay>
	ssd1306_Fill(0);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f001 fe24 	bl	8003638 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80019f0:	f001 fe3a 	bl	8003668 <ssd1306_UpdateScreen>
	ssd1306_WriteString("Telectronio",Font_11x18,1);
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <SSD1306_INITS+0x9c>)
 80019f6:	2301      	movs	r3, #1
 80019f8:	ca06      	ldmia	r2, {r1, r2}
 80019fa:	481f      	ldr	r0, [pc, #124]	; (8001a78 <SSD1306_INITS+0xa0>)
 80019fc:	f001 ff36 	bl	800386c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a00:	f001 fe32 	bl	8003668 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a08:	f002 fa3e 	bl	8003e88 <HAL_Delay>
	ssd1306_Fill(0);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f001 fe13 	bl	8003638 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001a12:	f001 fe29 	bl	8003668 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 8001a16:	2032      	movs	r0, #50	; 0x32
 8001a18:	f002 fa36 	bl	8003e88 <HAL_Delay>
	ssd1306_SetCursor(0, 0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f001 ff4a 	bl	80038b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Soil", Font_11x18,1);
 8001a24:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <SSD1306_INITS+0x9c>)
 8001a26:	2301      	movs	r3, #1
 8001a28:	ca06      	ldmia	r2, {r1, r2}
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <SSD1306_INITS+0xa4>)
 8001a2c:	f001 ff1e 	bl	800386c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 19);
 8001a30:	2113      	movs	r1, #19
 8001a32:	2000      	movs	r0, #0
 8001a34:	f001 ff40 	bl	80038b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Meaurement", Font_11x18,1);
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <SSD1306_INITS+0x9c>)
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	ca06      	ldmia	r2, {r1, r2}
 8001a3e:	4810      	ldr	r0, [pc, #64]	; (8001a80 <SSD1306_INITS+0xa8>)
 8001a40:	f001 ff14 	bl	800386c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 38);
 8001a44:	2126      	movs	r1, #38	; 0x26
 8001a46:	2000      	movs	r0, #0
 8001a48:	f001 ff36 	bl	80038b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Version1", Font_11x18,1);
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <SSD1306_INITS+0x9c>)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	ca06      	ldmia	r2, {r1, r2}
 8001a52:	480c      	ldr	r0, [pc, #48]	; (8001a84 <SSD1306_INITS+0xac>)
 8001a54:	f001 ff0a 	bl	800386c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a58:	f001 fe06 	bl	8003668 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a60:	f002 fa12 	bl	8003e88 <HAL_Delay>
	ssd1306_Fill(0);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f001 fde7 	bl	8003638 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001a6a:	f001 fdfd 	bl	8003668 <ssd1306_UpdateScreen>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000024 	.word	0x20000024
 8001a78:	08009918 	.word	0x08009918
 8001a7c:	08009924 	.word	0x08009924
 8001a80:	0800992c 	.word	0x0800992c
 8001a84:	08009938 	.word	0x08009938

08001a88 <delay>:

void delay(uint16_t delay){
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <delay+0x2c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 8001a9a:	bf00      	nop
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <delay+0x2c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d3f9      	bcc.n	8001a9c <delay+0x14>
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	200002a0 	.word	0x200002a0

08001ab8 <Set_Pin_Output>:


void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_LOW;
 8001ada:	2302      	movs	r3, #2
 8001adc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f002 ff59 	bl	800499c <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f002 ff3c 	bl	800499c <HAL_GPIO_Init>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <DS18B20_Start>:
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
uint8_t DS18B20_Start (void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	uint8_t Response=0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <DS18B20_Start+0x64>)
 8001b3c:	f7ff ffbc 	bl	8001ab8 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b46:	4812      	ldr	r0, [pc, #72]	; (8001b90 <DS18B20_Start+0x64>)
 8001b48:	f003 f8c3 	bl	8004cd2 <HAL_GPIO_WritePin>
	delay(480);
 8001b4c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001b50:	f7ff ff9a 	bl	8001a88 <delay>
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <DS18B20_Start+0x64>)
 8001b5a:	f7ff ffca 	bl	8001af2 <Set_Pin_Input>
	delay(60);
 8001b5e:	203c      	movs	r0, #60	; 0x3c
 8001b60:	f7ff ff92 	bl	8001a88 <delay>

	if(!(HAL_GPIO_ReadPin (DS18B20_PORT,DS18B20_PIN))) Response =1;
 8001b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <DS18B20_Start+0x64>)
 8001b6a:	f003 f89b 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <DS18B20_Start+0x4e>
 8001b74:	2301      	movs	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	e001      	b.n	8001b7e <DS18B20_Start+0x52>
	else Response = -1;
 8001b7a:	23ff      	movs	r3, #255	; 0xff
 8001b7c:	71fb      	strb	r3, [r7, #7]
	delay(480);
 8001b7e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001b82:	f7ff ff81 	bl	8001a88 <delay>
	return Response;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40010c00 	.word	0x40010c00

08001b94 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba2:	4821      	ldr	r0, [pc, #132]	; (8001c28 <DS18B20_Write+0x94>)
 8001ba4:	f7ff ff88 	bl	8001ab8 <Set_Pin_Output>

	for(int i=0; i<8; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e034      	b.n	8001c18 <DS18B20_Write+0x84>
	{
		if((data&(1<<i))!=0)
 8001bae:	79fa      	ldrb	r2, [r7, #7]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	fa42 f303 	asr.w	r3, r2, r3
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <DS18B20_Write+0x58>
		{
			//write 1
			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc2:	4819      	ldr	r0, [pc, #100]	; (8001c28 <DS18B20_Write+0x94>)
 8001bc4:	f7ff ff78 	bl	8001ab8 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bce:	4816      	ldr	r0, [pc, #88]	; (8001c28 <DS18B20_Write+0x94>)
 8001bd0:	f003 f87f 	bl	8004cd2 <HAL_GPIO_WritePin>
			delay(1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff ff57 	bl	8001a88 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bde:	4812      	ldr	r0, [pc, #72]	; (8001c28 <DS18B20_Write+0x94>)
 8001be0:	f7ff ff87 	bl	8001af2 <Set_Pin_Input>
			delay(60);
 8001be4:	203c      	movs	r0, #60	; 0x3c
 8001be6:	f7ff ff4f 	bl	8001a88 <delay>
 8001bea:	e012      	b.n	8001c12 <DS18B20_Write+0x7e>
		}
		else
		{
			//write 0

			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <DS18B20_Write+0x94>)
 8001bf2:	f7ff ff61 	bl	8001ab8 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfc:	480a      	ldr	r0, [pc, #40]	; (8001c28 <DS18B20_Write+0x94>)
 8001bfe:	f003 f868 	bl	8004cd2 <HAL_GPIO_WritePin>
			delay(60);
 8001c02:	203c      	movs	r0, #60	; 0x3c
 8001c04:	f7ff ff40 	bl	8001a88 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <DS18B20_Write+0x94>)
 8001c0e:	f7ff ff70 	bl	8001af2 <Set_Pin_Input>
	for(int i=0; i<8; i++)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b07      	cmp	r3, #7
 8001c1c:	ddc7      	ble.n	8001bae <DS18B20_Write+0x1a>

		}
	}
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010c00 	.word	0x40010c00

08001c2c <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3a:	481c      	ldr	r0, [pc, #112]	; (8001cac <DS18B20_Read+0x80>)
 8001c3c:	f7ff ff59 	bl	8001af2 <Set_Pin_Input>

	for(int i=0;i<8;i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	e02a      	b.n	8001c9c <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4a:	4818      	ldr	r0, [pc, #96]	; (8001cac <DS18B20_Read+0x80>)
 8001c4c:	f7ff ff34 	bl	8001ab8 <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c56:	4815      	ldr	r0, [pc, #84]	; (8001cac <DS18B20_Read+0x80>)
 8001c58:	f003 f83b 	bl	8004cd2 <HAL_GPIO_WritePin>
		delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7ff ff13 	bl	8001a88 <delay>
		Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c66:	4811      	ldr	r0, [pc, #68]	; (8001cac <DS18B20_Read+0x80>)
 8001c68:	f7ff ff43 	bl	8001af2 <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT,DS18B20_PIN))
 8001c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c70:	480e      	ldr	r0, [pc, #56]	; (8001cac <DS18B20_Read+0x80>)
 8001c72:	f003 f817 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <DS18B20_Read+0x64>
		{
			value |= 1<<i; //read=1
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	b25a      	sxtb	r2, r3
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8001c90:	203c      	movs	r0, #60	; 0x3c
 8001c92:	f7ff fef9 	bl	8001a88 <delay>
	for(int i=0;i<8;i++)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	ddd1      	ble.n	8001c46 <DS18B20_Read+0x1a>
	}
	return value;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40010c00 	.word	0x40010c00

08001cb0 <DS18B20_GetTemp>:



float DS18B20_GetTemp(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 8001cb4:	f7ff ff3a 	bl	8001b2c <DS18B20_Start>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <DS18B20_GetTemp+0xa4>)
 8001cbe:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f002 f8e1 	bl	8003e88 <HAL_Delay>

	DS18B20_Write(0xCC); // SKIP ROM
 8001cc6:	20cc      	movs	r0, #204	; 0xcc
 8001cc8:	f7ff ff64 	bl	8001b94 <DS18B20_Write>
	DS18B20_Write(0x44); // Convert T
 8001ccc:	2044      	movs	r0, #68	; 0x44
 8001cce:	f7ff ff61 	bl	8001b94 <DS18B20_Write>

	HAL_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f002 f8d8 	bl	8003e88 <HAL_Delay>

	Presence = DS18B20_Start();
 8001cd8:	f7ff ff28 	bl	8001b2c <DS18B20_Start>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <DS18B20_GetTemp+0xa4>)
 8001ce2:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f002 f8cf 	bl	8003e88 <HAL_Delay>

	DS18B20_Write(0xCC);
 8001cea:	20cc      	movs	r0, #204	; 0xcc
 8001cec:	f7ff ff52 	bl	8001b94 <DS18B20_Write>
	DS18B20_Write(0xBE); // Read scratch pad
 8001cf0:	20be      	movs	r0, #190	; 0xbe
 8001cf2:	f7ff ff4f 	bl	8001b94 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8001cf6:	f7ff ff99 	bl	8001c2c <DS18B20_Read>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <DS18B20_GetTemp+0xa8>)
 8001d00:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8001d02:	f7ff ff93 	bl	8001c2c <DS18B20_Read>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <DS18B20_GetTemp+0xac>)
 8001d0c:	701a      	strb	r2, [r3, #0]
	TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <DS18B20_GetTemp+0xac>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <DS18B20_GetTemp+0xa8>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <DS18B20_GetTemp+0xb0>)
 8001d24:	801a      	strh	r2, [r3, #0]
	Temperature = (float)TEMP / 16;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <DS18B20_GetTemp+0xb0>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffb2 	bl	8000c94 <__aeabi_ui2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f8b8 	bl	8000eac <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <DS18B20_GetTemp+0xb4>)
 8001d42:	601a      	str	r2, [r3, #0]



	HAL_Delay(10);
 8001d44:	200a      	movs	r0, #10
 8001d46:	f002 f89f 	bl	8003e88 <HAL_Delay>

	return Temperature;
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <DS18B20_GetTemp+0xb4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003f8 	.word	0x200003f8
 8001d58:	200003f9 	.word	0x200003f9
 8001d5c:	200003fa 	.word	0x200003fa
 8001d60:	200003fc 	.word	0x200003fc
 8001d64:	200003f4 	.word	0x200003f4

08001d68 <ADC_CH1>:

void ADC_CH1(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001d80:	2304      	movs	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <ADC_CH1+0x38>)
 8001d8a:	f002 fb65 	bl	8004458 <HAL_ADC_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <ADC_CH1+0x30>
	{
		Error_Handler();
 8001d94:	f001 fba8 	bl	80034e8 <Error_Handler>
	}
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000021c 	.word	0x2000021c

08001da4 <ADC_CH2>:
void ADC_CH2(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <ADC_CH2+0x38>)
 8001dc6:	f002 fb47 	bl	8004458 <HAL_ADC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <ADC_CH2+0x30>
	{
		Error_Handler();
 8001dd0:	f001 fb8a 	bl	80034e8 <Error_Handler>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000021c 	.word	0x2000021c

08001de0 <ADC_CH3>:
void ADC_CH3(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8001df0:	2303      	movs	r3, #3
 8001df2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <ADC_CH3+0x38>)
 8001e02:	f002 fb29 	bl	8004458 <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <ADC_CH3+0x30>
	{
		Error_Handler();
 8001e0c:	f001 fb6c 	bl	80034e8 <Error_Handler>
	}
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000021c 	.word	0x2000021c
 8001e1c:	00000000 	.word	0x00000000

08001e20 <adc_value_to_voltage>:
float adc_value_to_voltage(uint16_t adc_value) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
	return (adc_value / 4095.0) * VREF; // 4095 for 12-bit resolution
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fae9 	bl	8000404 <__aeabi_i2d>
 8001e32:	a30d      	add	r3, pc, #52	; (adr r3, 8001e68 <adc_value_to_voltage+0x48>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fc78 	bl	800072c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	a30a      	add	r3, pc, #40	; (adr r3, 8001e70 <adc_value_to_voltage+0x50>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fb45 	bl	80004d8 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe17 	bl	8000a88 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f3af 8000 	nop.w
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40affe00 	.word	0x40affe00
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40a9dc00 	.word	0x40a9dc00

08001e78 <delay2>:

void delay2(uint32_t delay_time) {
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < delay_time; ++i) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e003      	b.n	8001e8e <delay2+0x16>
		__NOP(); // Use NOP instruction for delay
 8001e86:	bf00      	nop
	for (uint32_t i = 0; i < delay_time; ++i) {
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3f7      	bcc.n	8001e86 <delay2+0xe>
	}
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
	...

08001ea4 <EC_out_of_range>:

void EC_out_of_range()
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
	if((final_average_cond>=3000)&& (SET1==1))
 8001eaa:	4bad      	ldr	r3, [pc, #692]	; (8002160 <EC_out_of_range+0x2bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	49ad      	ldr	r1, [pc, #692]	; (8002164 <EC_out_of_range+0x2c0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f8f9 	bl	80010a8 <__aeabi_fcmpge>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02f      	beq.n	8001f1c <EC_out_of_range+0x78>
 8001ebc:	4baa      	ldr	r3, [pc, #680]	; (8002168 <EC_out_of_range+0x2c4>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d12b      	bne.n	8001f1c <EC_out_of_range+0x78>
	{
		for(int i=0;i<5;i++){
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e025      	b.n	8001f16 <EC_out_of_range+0x72>
			ssd1306_Fill(0);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f001 fbb4 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001ed0:	f001 fbca 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f001 fcee 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001edc:	4aa3      	ldr	r2, [pc, #652]	; (800216c <EC_out_of_range+0x2c8>)
 8001ede:	2301      	movs	r3, #1
 8001ee0:	ca06      	ldmia	r2, {r1, r2}
 8001ee2:	48a3      	ldr	r0, [pc, #652]	; (8002170 <EC_out_of_range+0x2cc>)
 8001ee4:	f001 fcc2 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001ee8:	210a      	movs	r1, #10
 8001eea:	2000      	movs	r0, #0
 8001eec:	f001 fce4 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001ef0:	4a9e      	ldr	r2, [pc, #632]	; (800216c <EC_out_of_range+0x2c8>)
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	ca06      	ldmia	r2, {r1, r2}
 8001ef6:	489f      	ldr	r0, [pc, #636]	; (8002174 <EC_out_of_range+0x2d0>)
 8001ef8:	f001 fcb8 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001efc:	f001 fbb4 	bl	8003668 <ssd1306_UpdateScreen>
			conductivity=0;
 8001f00:	4b9d      	ldr	r3, [pc, #628]	; (8002178 <EC_out_of_range+0x2d4>)
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0c:	f001 ffbc 	bl	8003e88 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	ddd6      	ble.n	8001eca <EC_out_of_range+0x26>
		}
		//out of range
		//decrease sensitivity
	}
	if((final_average_cond>=3000)&& (SET10==1))
 8001f1c:	4b90      	ldr	r3, [pc, #576]	; (8002160 <EC_out_of_range+0x2bc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4990      	ldr	r1, [pc, #576]	; (8002164 <EC_out_of_range+0x2c0>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f8c0 	bl	80010a8 <__aeabi_fcmpge>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d02f      	beq.n	8001f8e <EC_out_of_range+0xea>
 8001f2e:	4b93      	ldr	r3, [pc, #588]	; (800217c <EC_out_of_range+0x2d8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d12b      	bne.n	8001f8e <EC_out_of_range+0xea>
	{
		for(int i=0;i<5;i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e025      	b.n	8001f88 <EC_out_of_range+0xe4>
			ssd1306_Fill(0);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f001 fb7b 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001f42:	f001 fb91 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001f46:	2100      	movs	r1, #0
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f001 fcb5 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001f4e:	4a87      	ldr	r2, [pc, #540]	; (800216c <EC_out_of_range+0x2c8>)
 8001f50:	2301      	movs	r3, #1
 8001f52:	ca06      	ldmia	r2, {r1, r2}
 8001f54:	4886      	ldr	r0, [pc, #536]	; (8002170 <EC_out_of_range+0x2cc>)
 8001f56:	f001 fc89 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001f5a:	210a      	movs	r1, #10
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f001 fcab 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001f62:	4a82      	ldr	r2, [pc, #520]	; (800216c <EC_out_of_range+0x2c8>)
 8001f64:	2301      	movs	r3, #1
 8001f66:	ca06      	ldmia	r2, {r1, r2}
 8001f68:	4882      	ldr	r0, [pc, #520]	; (8002174 <EC_out_of_range+0x2d0>)
 8001f6a:	f001 fc7f 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001f6e:	f001 fb7b 	bl	8003668 <ssd1306_UpdateScreen>
			conductivity=0;
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <EC_out_of_range+0x2d4>)
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f7e:	f001 ff83 	bl	8003e88 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	3301      	adds	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	ddd6      	ble.n	8001f3c <EC_out_of_range+0x98>
		}
		//out of range
		//decrease sensitivity
	}
	if((final_average_cond>=3000)&& (SET100==1))
 8001f8e:	4b74      	ldr	r3, [pc, #464]	; (8002160 <EC_out_of_range+0x2bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4974      	ldr	r1, [pc, #464]	; (8002164 <EC_out_of_range+0x2c0>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f887 	bl	80010a8 <__aeabi_fcmpge>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d02f      	beq.n	8002000 <EC_out_of_range+0x15c>
 8001fa0:	4b77      	ldr	r3, [pc, #476]	; (8002180 <EC_out_of_range+0x2dc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d12b      	bne.n	8002000 <EC_out_of_range+0x15c>
	{
		for(int i=0;i<5;i++){
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e025      	b.n	8001ffa <EC_out_of_range+0x156>
			ssd1306_Fill(0);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f001 fb42 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001fb4:	f001 fb58 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f001 fc7c 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	; (800216c <EC_out_of_range+0x2c8>)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	ca06      	ldmia	r2, {r1, r2}
 8001fc6:	486a      	ldr	r0, [pc, #424]	; (8002170 <EC_out_of_range+0x2cc>)
 8001fc8:	f001 fc50 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001fcc:	210a      	movs	r1, #10
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f001 fc72 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <EC_out_of_range+0x2c8>)
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	ca06      	ldmia	r2, {r1, r2}
 8001fda:	4866      	ldr	r0, [pc, #408]	; (8002174 <EC_out_of_range+0x2d0>)
 8001fdc:	f001 fc46 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001fe0:	f001 fb42 	bl	8003668 <ssd1306_UpdateScreen>
			conductivity=0;
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <EC_out_of_range+0x2d4>)
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff0:	f001 ff4a 	bl	8003e88 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	ddd6      	ble.n	8001fae <EC_out_of_range+0x10a>
		}
		//out of range
		//decrease sensitivity
	}
	if((final_average_cond<=650) && (SET1000==1))
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <EC_out_of_range+0x2bc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	495f      	ldr	r1, [pc, #380]	; (8002184 <EC_out_of_range+0x2e0>)
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f844 	bl	8001094 <__aeabi_fcmple>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02f      	beq.n	8002072 <EC_out_of_range+0x1ce>
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <EC_out_of_range+0x2e4>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d12b      	bne.n	8002072 <EC_out_of_range+0x1ce>
	{
		for(int i=0;i<5;i++){
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	e025      	b.n	800206c <EC_out_of_range+0x1c8>
			ssd1306_Fill(0);
 8002020:	2000      	movs	r0, #0
 8002022:	f001 fb09 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8002026:	f001 fb1f 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 800202a:	2100      	movs	r1, #0
 800202c:	2000      	movs	r0, #0
 800202e:	f001 fc43 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8002032:	4a4e      	ldr	r2, [pc, #312]	; (800216c <EC_out_of_range+0x2c8>)
 8002034:	2301      	movs	r3, #1
 8002036:	ca06      	ldmia	r2, {r1, r2}
 8002038:	484d      	ldr	r0, [pc, #308]	; (8002170 <EC_out_of_range+0x2cc>)
 800203a:	f001 fc17 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 800203e:	210a      	movs	r1, #10
 8002040:	2000      	movs	r0, #0
 8002042:	f001 fc39 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8002046:	4a49      	ldr	r2, [pc, #292]	; (800216c <EC_out_of_range+0x2c8>)
 8002048:	2301      	movs	r3, #1
 800204a:	ca06      	ldmia	r2, {r1, r2}
 800204c:	484f      	ldr	r0, [pc, #316]	; (800218c <EC_out_of_range+0x2e8>)
 800204e:	f001 fc0d 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002052:	f001 fb09 	bl	8003668 <ssd1306_UpdateScreen>
			conductivity=0;
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <EC_out_of_range+0x2d4>)
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 800205e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002062:	f001 ff11 	bl	8003e88 <HAL_Delay>
		for(int i=0;i<5;i++){
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b04      	cmp	r3, #4
 8002070:	ddd6      	ble.n	8002020 <EC_out_of_range+0x17c>
		}
		//out of range
		//increase sensitivity
	}
	if((final_average_cond<=650) && (SET100==1))
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <EC_out_of_range+0x2bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4943      	ldr	r1, [pc, #268]	; (8002184 <EC_out_of_range+0x2e0>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f80b 	bl	8001094 <__aeabi_fcmple>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02f      	beq.n	80020e4 <EC_out_of_range+0x240>
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <EC_out_of_range+0x2dc>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d12b      	bne.n	80020e4 <EC_out_of_range+0x240>
	{
		for(int i=0;i<5;i++){
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	e025      	b.n	80020de <EC_out_of_range+0x23a>
			ssd1306_Fill(0);
 8002092:	2000      	movs	r0, #0
 8002094:	f001 fad0 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8002098:	f001 fae6 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 800209c:	2100      	movs	r1, #0
 800209e:	2000      	movs	r0, #0
 80020a0:	f001 fc0a 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 80020a4:	4a31      	ldr	r2, [pc, #196]	; (800216c <EC_out_of_range+0x2c8>)
 80020a6:	2301      	movs	r3, #1
 80020a8:	ca06      	ldmia	r2, {r1, r2}
 80020aa:	4831      	ldr	r0, [pc, #196]	; (8002170 <EC_out_of_range+0x2cc>)
 80020ac:	f001 fbde 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 80020b0:	210a      	movs	r1, #10
 80020b2:	2000      	movs	r0, #0
 80020b4:	f001 fc00 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 80020b8:	4a2c      	ldr	r2, [pc, #176]	; (800216c <EC_out_of_range+0x2c8>)
 80020ba:	2301      	movs	r3, #1
 80020bc:	ca06      	ldmia	r2, {r1, r2}
 80020be:	4833      	ldr	r0, [pc, #204]	; (800218c <EC_out_of_range+0x2e8>)
 80020c0:	f001 fbd4 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80020c4:	f001 fad0 	bl	8003668 <ssd1306_UpdateScreen>
			conductivity=0;
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <EC_out_of_range+0x2d4>)
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 80020d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d4:	f001 fed8 	bl	8003e88 <HAL_Delay>
		for(int i=0;i<5;i++){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	ddd6      	ble.n	8002092 <EC_out_of_range+0x1ee>
		}
		//out of range
		//increase sensitivity
	}
	if((final_average_cond<=650) && (SET10==1))
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <EC_out_of_range+0x2bc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4926      	ldr	r1, [pc, #152]	; (8002184 <EC_out_of_range+0x2e0>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe ffd2 	bl	8001094 <__aeabi_fcmple>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <EC_out_of_range+0x254>
			HAL_Delay(1000);
		}
		//out of range
		//increase sensitivity
	}
}
 80020f6:	e02f      	b.n	8002158 <EC_out_of_range+0x2b4>
	if((final_average_cond<=650) && (SET10==1))
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <EC_out_of_range+0x2d8>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d12b      	bne.n	8002158 <EC_out_of_range+0x2b4>
		for(int i=0;i<5;i++){
 8002100:	2300      	movs	r3, #0
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	e025      	b.n	8002152 <EC_out_of_range+0x2ae>
			ssd1306_Fill(0);
 8002106:	2000      	movs	r0, #0
 8002108:	f001 fa96 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 800210c:	f001 faac 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8002110:	2100      	movs	r1, #0
 8002112:	2000      	movs	r0, #0
 8002114:	f001 fbd0 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <EC_out_of_range+0x2c8>)
 800211a:	2301      	movs	r3, #1
 800211c:	ca06      	ldmia	r2, {r1, r2}
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <EC_out_of_range+0x2cc>)
 8002120:	f001 fba4 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8002124:	210a      	movs	r1, #10
 8002126:	2000      	movs	r0, #0
 8002128:	f001 fbc6 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <EC_out_of_range+0x2c8>)
 800212e:	2301      	movs	r3, #1
 8002130:	ca06      	ldmia	r2, {r1, r2}
 8002132:	4816      	ldr	r0, [pc, #88]	; (800218c <EC_out_of_range+0x2e8>)
 8002134:	f001 fb9a 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002138:	f001 fa96 	bl	8003668 <ssd1306_UpdateScreen>
			conductivity=0;
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <EC_out_of_range+0x2d4>)
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8002144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002148:	f001 fe9e 	bl	8003e88 <HAL_Delay>
		for(int i=0;i<5;i++){
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	ddd6      	ble.n	8002106 <EC_out_of_range+0x262>
}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200003d8 	.word	0x200003d8
 8002164:	453b8000 	.word	0x453b8000
 8002168:	20000b08 	.word	0x20000b08
 800216c:	2000001c 	.word	0x2000001c
 8002170:	08009944 	.word	0x08009944
 8002174:	08009958 	.word	0x08009958
 8002178:	200003e0 	.word	0x200003e0
 800217c:	20000b09 	.word	0x20000b09
 8002180:	20000b0a 	.word	0x20000b0a
 8002184:	44228000 	.word	0x44228000
 8002188:	20000b0b 	.word	0x20000b0b
 800218c:	08009968 	.word	0x08009968

08002190 <Set_counterFREQ>:

void Set_counterFREQ(){
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==1)
 8002194:	2104      	movs	r1, #4
 8002196:	482f      	ldr	r0, [pc, #188]	; (8002254 <Set_counterFREQ+0xc4>)
 8002198:	f002 fd84 	bl	8004ca4 <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <Set_counterFREQ+0x24>
	{
		HAL_Delay(100);
 80021a2:	2064      	movs	r0, #100	; 0x64
 80021a4:	f001 fe70 	bl	8003e88 <HAL_Delay>
		counterFREQ++;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <Set_counterFREQ+0xc8>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <Set_counterFREQ+0xc8>)
 80021b2:	801a      	strh	r2, [r3, #0]
	}
	if(counterFREQ==1){
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <Set_counterFREQ+0xc8>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <Set_counterFREQ+0x3a>
		delay_time = 2000; // Initial delay time in microseconds
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <Set_counterFREQ+0xcc>)
 80021be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021c2:	601a      	str	r2, [r3, #0]
		delay_band = 100; // Initial delay band in microseconds
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <Set_counterFREQ+0xd0>)
 80021c6:	2264      	movs	r2, #100	; 0x64
 80021c8:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==2){
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <Set_counterFREQ+0xc8>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d105      	bne.n	80021de <Set_counterFREQ+0x4e>
		delay_time = 200; // Initial delay time in microseconds
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <Set_counterFREQ+0xcc>)
 80021d4:	22c8      	movs	r2, #200	; 0xc8
 80021d6:	601a      	str	r2, [r3, #0]
		delay_band = 10; // Initial delay band in microseconds
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <Set_counterFREQ+0xd0>)
 80021da:	220a      	movs	r2, #10
 80021dc:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==3){
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <Set_counterFREQ+0xc8>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d105      	bne.n	80021f2 <Set_counterFREQ+0x62>
		delay_time = 100; // Initial delay time in microseconds
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <Set_counterFREQ+0xcc>)
 80021e8:	2264      	movs	r2, #100	; 0x64
 80021ea:	601a      	str	r2, [r3, #0]
		delay_band = 5; // Initial delay band in microseconds
 80021ec:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <Set_counterFREQ+0xd0>)
 80021ee:	2205      	movs	r2, #5
 80021f0:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==4){
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <Set_counterFREQ+0xc8>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d105      	bne.n	8002206 <Set_counterFREQ+0x76>
		delay_time = 50; // Initial delay time in microseconds
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <Set_counterFREQ+0xcc>)
 80021fc:	2232      	movs	r2, #50	; 0x32
 80021fe:	601a      	str	r2, [r3, #0]
		delay_band = 2; // Initial delay band in microseconds
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <Set_counterFREQ+0xd0>)
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==5){
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <Set_counterFREQ+0xc8>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	2b05      	cmp	r3, #5
 800220c:	d105      	bne.n	800221a <Set_counterFREQ+0x8a>
		delay_time = 25; // Initial delay time in microseconds
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <Set_counterFREQ+0xcc>)
 8002210:	2219      	movs	r2, #25
 8002212:	601a      	str	r2, [r3, #0]
		delay_band = 1; // Initial delay band in microseconds
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <Set_counterFREQ+0xd0>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==6){
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <Set_counterFREQ+0xc8>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	2b06      	cmp	r3, #6
 8002220:	d105      	bne.n	800222e <Set_counterFREQ+0x9e>
		delay_time = 12; // Initial delay time in microseconds
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <Set_counterFREQ+0xcc>)
 8002224:	220c      	movs	r2, #12
 8002226:	601a      	str	r2, [r3, #0]
		delay_band = 1; // Initial delay band in microseconds
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <Set_counterFREQ+0xd0>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==7){
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <Set_counterFREQ+0xc8>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d105      	bne.n	8002242 <Set_counterFREQ+0xb2>
		delay_time = 6; // Initial delay time in microseconds
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <Set_counterFREQ+0xcc>)
 8002238:	2206      	movs	r2, #6
 800223a:	601a      	str	r2, [r3, #0]
		delay_band = 1; // Initial delay band in microseconds
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <Set_counterFREQ+0xd0>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ>7){
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <Set_counterFREQ+0xc8>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	2b07      	cmp	r3, #7
 8002248:	d902      	bls.n	8002250 <Set_counterFREQ+0xc0>
		counterFREQ=0;
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <Set_counterFREQ+0xc8>)
 800224c:	2200      	movs	r2, #0
 800224e:	801a      	strh	r2, [r3, #0]
	}
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40011000 	.word	0x40011000
 8002258:	20000008 	.word	0x20000008
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004

08002264 <Set_SENSE>:

void Set_SENSE(){
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SET_1_GPIO_Port, SET_1_Pin) == 1) {
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	4856      	ldr	r0, [pc, #344]	; (80023c4 <Set_SENSE+0x160>)
 800226c:	f002 fd1a 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d123      	bne.n	80022be <Set_SENSE+0x5a>
		SET1=1;
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <Set_SENSE+0x164>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
		SET10=0;
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <Set_SENSE+0x168>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
		SET100=0;
 8002282:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <Set_SENSE+0x16c>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
		SET1000=0;
 8002288:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <Set_SENSE+0x170>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 800228e:	4b52      	ldr	r3, [pc, #328]	; (80023d8 <Set_SENSE+0x174>)
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 8002296:	4b51      	ldr	r3, [pc, #324]	; (80023dc <Set_SENSE+0x178>)
 8002298:	4a51      	ldr	r2, [pc, #324]	; (80023e0 <Set_SENSE+0x17c>)
 800229a:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 800229c:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <Set_SENSE+0x180>)
 800229e:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <Set_SENSE+0x184>)
 80022a0:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 80022a2:	2129      	movs	r1, #41	; 0x29
 80022a4:	2000      	movs	r0, #0
 80022a6:	f001 fb07 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferSET1, "SENSE = x1     ");
 80022aa:	4950      	ldr	r1, [pc, #320]	; (80023ec <Set_SENSE+0x188>)
 80022ac:	4850      	ldr	r0, [pc, #320]	; (80023f0 <Set_SENSE+0x18c>)
 80022ae:	f005 f97f 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferSET1, Font_6x8, 1);
 80022b2:	4a50      	ldr	r2, [pc, #320]	; (80023f4 <Set_SENSE+0x190>)
 80022b4:	2301      	movs	r3, #1
 80022b6:	ca06      	ldmia	r2, {r1, r2}
 80022b8:	484d      	ldr	r0, [pc, #308]	; (80023f0 <Set_SENSE+0x18c>)
 80022ba:	f001 fad7 	bl	800386c <ssd1306_WriteString>

	}

	if (HAL_GPIO_ReadPin(SET_10_GPIO_Port, SET_10_Pin) == 1) {
 80022be:	2104      	movs	r1, #4
 80022c0:	484d      	ldr	r0, [pc, #308]	; (80023f8 <Set_SENSE+0x194>)
 80022c2:	f002 fcef 	bl	8004ca4 <HAL_GPIO_ReadPin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d123      	bne.n	8002314 <Set_SENSE+0xb0>
		SET1=0;
 80022cc:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <Set_SENSE+0x164>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
		SET10=1;
 80022d2:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <Set_SENSE+0x168>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
		SET100=0;
 80022d8:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <Set_SENSE+0x16c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
		SET1000=0;
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <Set_SENSE+0x170>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 80022e4:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <Set_SENSE+0x174>)
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 80022ec:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <Set_SENSE+0x178>)
 80022ee:	4a3c      	ldr	r2, [pc, #240]	; (80023e0 <Set_SENSE+0x17c>)
 80022f0:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 80022f2:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <Set_SENSE+0x180>)
 80022f4:	4a3c      	ldr	r2, [pc, #240]	; (80023e8 <Set_SENSE+0x184>)
 80022f6:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 80022f8:	2129      	movs	r1, #41	; 0x29
 80022fa:	2000      	movs	r0, #0
 80022fc:	f001 fadc 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferSET10, "SENSE = x10     ");
 8002300:	493e      	ldr	r1, [pc, #248]	; (80023fc <Set_SENSE+0x198>)
 8002302:	483f      	ldr	r0, [pc, #252]	; (8002400 <Set_SENSE+0x19c>)
 8002304:	f005 f954 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferSET10, Font_6x8, 1);
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <Set_SENSE+0x190>)
 800230a:	2301      	movs	r3, #1
 800230c:	ca06      	ldmia	r2, {r1, r2}
 800230e:	483c      	ldr	r0, [pc, #240]	; (8002400 <Set_SENSE+0x19c>)
 8002310:	f001 faac 	bl	800386c <ssd1306_WriteString>

	}

	if (HAL_GPIO_ReadPin(SET_100_GPIO_Port, SET_100_Pin) == 1) {
 8002314:	2102      	movs	r1, #2
 8002316:	4838      	ldr	r0, [pc, #224]	; (80023f8 <Set_SENSE+0x194>)
 8002318:	f002 fcc4 	bl	8004ca4 <HAL_GPIO_ReadPin>
 800231c:	4603      	mov	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	d123      	bne.n	800236a <Set_SENSE+0x106>
		SET1=0;
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <Set_SENSE+0x164>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
		SET10=0;
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <Set_SENSE+0x168>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
		SET100=1;
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <Set_SENSE+0x16c>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
		SET1000=0;
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <Set_SENSE+0x170>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <Set_SENSE+0x174>)
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <Set_SENSE+0x178>)
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <Set_SENSE+0x17c>)
 8002346:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <Set_SENSE+0x180>)
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <Set_SENSE+0x184>)
 800234c:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 800234e:	2129      	movs	r1, #41	; 0x29
 8002350:	2000      	movs	r0, #0
 8002352:	f001 fab1 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferSET100, "SENSE = x100     ");
 8002356:	492b      	ldr	r1, [pc, #172]	; (8002404 <Set_SENSE+0x1a0>)
 8002358:	482b      	ldr	r0, [pc, #172]	; (8002408 <Set_SENSE+0x1a4>)
 800235a:	f005 f929 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferSET100, Font_6x8, 1);
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <Set_SENSE+0x190>)
 8002360:	2301      	movs	r3, #1
 8002362:	ca06      	ldmia	r2, {r1, r2}
 8002364:	4828      	ldr	r0, [pc, #160]	; (8002408 <Set_SENSE+0x1a4>)
 8002366:	f001 fa81 	bl	800386c <ssd1306_WriteString>

	}

	if (HAL_GPIO_ReadPin(SET_1000_GPIO_Port, SET_1000_Pin) == 1) {
 800236a:	2101      	movs	r1, #1
 800236c:	4822      	ldr	r0, [pc, #136]	; (80023f8 <Set_SENSE+0x194>)
 800236e:	f002 fc99 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d123      	bne.n	80023c0 <Set_SENSE+0x15c>
		SET1=0;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <Set_SENSE+0x164>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
		SET10=0;
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <Set_SENSE+0x168>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
		SET100=0;
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <Set_SENSE+0x16c>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
		SET1000=1;
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <Set_SENSE+0x170>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <Set_SENSE+0x174>)
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <Set_SENSE+0x178>)
 800239a:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <Set_SENSE+0x17c>)
 800239c:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <Set_SENSE+0x180>)
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <Set_SENSE+0x184>)
 80023a2:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 80023a4:	2129      	movs	r1, #41	; 0x29
 80023a6:	2000      	movs	r0, #0
 80023a8:	f001 fa86 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferSET1000, "SENSE = x1000     ");
 80023ac:	4917      	ldr	r1, [pc, #92]	; (800240c <Set_SENSE+0x1a8>)
 80023ae:	4818      	ldr	r0, [pc, #96]	; (8002410 <Set_SENSE+0x1ac>)
 80023b0:	f005 f8fe 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferSET1000, Font_6x8, 1);
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <Set_SENSE+0x190>)
 80023b6:	2301      	movs	r3, #1
 80023b8:	ca06      	ldmia	r2, {r1, r2}
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <Set_SENSE+0x1ac>)
 80023bc:	f001 fa56 	bl	800386c <ssd1306_WriteString>

	}
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40011000 	.word	0x40011000
 80023c8:	20000b08 	.word	0x20000b08
 80023cc:	20000b09 	.word	0x20000b09
 80023d0:	20000b0a 	.word	0x20000b0a
 80023d4:	20000b0b 	.word	0x20000b0b
 80023d8:	200003d0 	.word	0x200003d0
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	44cbc000 	.word	0x44cbc000
 80023e4:	20000010 	.word	0x20000010
 80023e8:	451a3000 	.word	0x451a3000
 80023ec:	08009978 	.word	0x08009978
 80023f0:	20000720 	.word	0x20000720
 80023f4:	20000014 	.word	0x20000014
 80023f8:	40010c00 	.word	0x40010c00
 80023fc:	08009988 	.word	0x08009988
 8002400:	200007e8 	.word	0x200007e8
 8002404:	0800999c 	.word	0x0800999c
 8002408:	200008b0 	.word	0x200008b0
 800240c:	080099b0 	.word	0x080099b0
 8002410:	20000978 	.word	0x20000978

08002414 <Set_counterFREQ_ssd1306>:

void Set_counterFREQ_ssd1306(){
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	if (counterFREQ==0){
 8002418:	4b48      	ldr	r3, [pc, #288]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <Set_counterFREQ_ssd1306+0x28>
		ssd1306_SetCursor(0,51);
 8002420:	2133      	movs	r1, #51	; 0x33
 8002422:	2000      	movs	r0, #0
 8002424:	f001 fa48 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:0 100Hz   ");
 8002428:	4945      	ldr	r1, [pc, #276]	; (8002540 <Set_counterFREQ_ssd1306+0x12c>)
 800242a:	4846      	ldr	r0, [pc, #280]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 800242c:	f005 f8c0 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 8002432:	2301      	movs	r3, #1
 8002434:	ca06      	ldmia	r2, {r1, r2}
 8002436:	4843      	ldr	r0, [pc, #268]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002438:	f001 fa18 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==1){
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10d      	bne.n	8002460 <Set_counterFREQ_ssd1306+0x4c>
		ssd1306_SetCursor(0,51);
 8002444:	2133      	movs	r1, #51	; 0x33
 8002446:	2000      	movs	r0, #0
 8002448:	f001 fa36 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:1 1KHz  ");
 800244c:	493f      	ldr	r1, [pc, #252]	; (800254c <Set_counterFREQ_ssd1306+0x138>)
 800244e:	483d      	ldr	r0, [pc, #244]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002450:	f005 f8ae 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002454:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 8002456:	2301      	movs	r3, #1
 8002458:	ca06      	ldmia	r2, {r1, r2}
 800245a:	483a      	ldr	r0, [pc, #232]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 800245c:	f001 fa06 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==2){
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d10d      	bne.n	8002484 <Set_counterFREQ_ssd1306+0x70>
		ssd1306_SetCursor(0,51);
 8002468:	2133      	movs	r1, #51	; 0x33
 800246a:	2000      	movs	r0, #0
 800246c:	f001 fa24 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:2 6KHz  ");
 8002470:	4937      	ldr	r1, [pc, #220]	; (8002550 <Set_counterFREQ_ssd1306+0x13c>)
 8002472:	4834      	ldr	r0, [pc, #208]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002474:	f005 f89c 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002478:	4a33      	ldr	r2, [pc, #204]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 800247a:	2301      	movs	r3, #1
 800247c:	ca06      	ldmia	r2, {r1, r2}
 800247e:	4831      	ldr	r0, [pc, #196]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002480:	f001 f9f4 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==3){
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d10d      	bne.n	80024a8 <Set_counterFREQ_ssd1306+0x94>
		ssd1306_SetCursor(0,51);
 800248c:	2133      	movs	r1, #51	; 0x33
 800248e:	2000      	movs	r0, #0
 8002490:	f001 fa12 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:3 20KHz  ");
 8002494:	492f      	ldr	r1, [pc, #188]	; (8002554 <Set_counterFREQ_ssd1306+0x140>)
 8002496:	482b      	ldr	r0, [pc, #172]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002498:	f005 f88a 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 800249e:	2301      	movs	r3, #1
 80024a0:	ca06      	ldmia	r2, {r1, r2}
 80024a2:	4828      	ldr	r0, [pc, #160]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 80024a4:	f001 f9e2 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==4){
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d10d      	bne.n	80024cc <Set_counterFREQ_ssd1306+0xb8>
		ssd1306_SetCursor(0,51);
 80024b0:	2133      	movs	r1, #51	; 0x33
 80024b2:	2000      	movs	r0, #0
 80024b4:	f001 fa00 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:4 40KHz  ");
 80024b8:	4927      	ldr	r1, [pc, #156]	; (8002558 <Set_counterFREQ_ssd1306+0x144>)
 80024ba:	4822      	ldr	r0, [pc, #136]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 80024bc:	f005 f878 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 80024c2:	2301      	movs	r3, #1
 80024c4:	ca06      	ldmia	r2, {r1, r2}
 80024c6:	481f      	ldr	r0, [pc, #124]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 80024c8:	f001 f9d0 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==5){
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10d      	bne.n	80024f0 <Set_counterFREQ_ssd1306+0xdc>
		ssd1306_SetCursor(0,51);
 80024d4:	2133      	movs	r1, #51	; 0x33
 80024d6:	2000      	movs	r0, #0
 80024d8:	f001 f9ee 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:5 75KHz  ");
 80024dc:	491f      	ldr	r1, [pc, #124]	; (800255c <Set_counterFREQ_ssd1306+0x148>)
 80024de:	4819      	ldr	r0, [pc, #100]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 80024e0:	f005 f866 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80024e4:	4a18      	ldr	r2, [pc, #96]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 80024e6:	2301      	movs	r3, #1
 80024e8:	ca06      	ldmia	r2, {r1, r2}
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 80024ec:	f001 f9be 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==6){
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d10d      	bne.n	8002514 <Set_counterFREQ_ssd1306+0x100>
		ssd1306_SetCursor(0,51);
 80024f8:	2133      	movs	r1, #51	; 0x33
 80024fa:	2000      	movs	r0, #0
 80024fc:	f001 f9dc 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:6 133KHz  ");
 8002500:	4917      	ldr	r1, [pc, #92]	; (8002560 <Set_counterFREQ_ssd1306+0x14c>)
 8002502:	4810      	ldr	r0, [pc, #64]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002504:	f005 f854 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002508:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 800250a:	2301      	movs	r3, #1
 800250c:	ca06      	ldmia	r2, {r1, r2}
 800250e:	480d      	ldr	r0, [pc, #52]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002510:	f001 f9ac 	bl	800386c <ssd1306_WriteString>
	}
	if (counterFREQ==7){
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <Set_counterFREQ_ssd1306+0x128>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	2b07      	cmp	r3, #7
 800251a:	d10d      	bne.n	8002538 <Set_counterFREQ_ssd1306+0x124>
		ssd1306_SetCursor(0,51);
 800251c:	2133      	movs	r1, #51	; 0x33
 800251e:	2000      	movs	r0, #0
 8002520:	f001 f9ca 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:7 200KHz  ");
 8002524:	490f      	ldr	r1, [pc, #60]	; (8002564 <Set_counterFREQ_ssd1306+0x150>)
 8002526:	4807      	ldr	r0, [pc, #28]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002528:	f005 f842 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <Set_counterFREQ_ssd1306+0x134>)
 800252e:	2301      	movs	r3, #1
 8002530:	ca06      	ldmia	r2, {r1, r2}
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <Set_counterFREQ_ssd1306+0x130>)
 8002534:	f001 f99a 	bl	800386c <ssd1306_WriteString>
	}
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000008 	.word	0x20000008
 8002540:	080099c4 	.word	0x080099c4
 8002544:	20000a40 	.word	0x20000a40
 8002548:	20000014 	.word	0x20000014
 800254c:	080099dc 	.word	0x080099dc
 8002550:	080099f0 	.word	0x080099f0
 8002554:	08009a04 	.word	0x08009a04
 8002558:	08009a18 	.word	0x08009a18
 800255c:	08009a2c 	.word	0x08009a2c
 8002560:	08009a40 	.word	0x08009a40
 8002564:	08009a58 	.word	0x08009a58

08002568 <moistconduct>:


void moistconduct(){
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)&((SET1||SET10)||SET100||SET1000))
 800256e:	2108      	movs	r1, #8
 8002570:	4880      	ldr	r0, [pc, #512]	; (8002774 <moistconduct+0x20c>)
 8002572:	f002 fb97 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <moistconduct+0x210>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <moistconduct+0x3a>
 800258a:	4b7c      	ldr	r3, [pc, #496]	; (800277c <moistconduct+0x214>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <moistconduct+0x3a>
 8002592:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <moistconduct+0x218>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <moistconduct+0x3a>
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <moistconduct+0x21c>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <moistconduct+0x3e>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <moistconduct+0x40>
 80025a6:	2300      	movs	r3, #0
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4013      	ands	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8392 	beq.w	8002cdc <moistconduct+0x774>
	{

		counter2=0;
 80025b8:	4b73      	ldr	r3, [pc, #460]	; (8002788 <moistconduct+0x220>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
		timeout=0;
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <moistconduct+0x224>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]
		while(timeout!=1)
 80025c4:	e35f      	b.n	8002c86 <moistconduct+0x71e>
		{
			ssd1306_Fill(0);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f001 f836 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 80025cc:	f001 f84c 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 80025d0:	2100      	movs	r1, #0
 80025d2:	2000      	movs	r0, #0
 80025d4:	f001 f970 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("1.Probe in Air",Font_6x8,1);
 80025d8:	4a6d      	ldr	r2, [pc, #436]	; (8002790 <moistconduct+0x228>)
 80025da:	2301      	movs	r3, #1
 80025dc:	ca06      	ldmia	r2, {r1, r2}
 80025de:	486d      	ldr	r0, [pc, #436]	; (8002794 <moistconduct+0x22c>)
 80025e0:	f001 f944 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 10);
 80025e4:	210a      	movs	r1, #10
 80025e6:	2000      	movs	r0, #0
 80025e8:	f001 f966 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("2.Add Distilled Water",Font_6x8,1);
 80025ec:	4a68      	ldr	r2, [pc, #416]	; (8002790 <moistconduct+0x228>)
 80025ee:	2301      	movs	r3, #1
 80025f0:	ca06      	ldmia	r2, {r1, r2}
 80025f2:	4869      	ldr	r0, [pc, #420]	; (8002798 <moistconduct+0x230>)
 80025f4:	f001 f93a 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 20);
 80025f8:	2114      	movs	r1, #20
 80025fa:	2000      	movs	r0, #0
 80025fc:	f001 f95c 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("3.Mix Soil Sample",Font_6x8,1);
 8002600:	4a63      	ldr	r2, [pc, #396]	; (8002790 <moistconduct+0x228>)
 8002602:	2301      	movs	r3, #1
 8002604:	ca06      	ldmia	r2, {r1, r2}
 8002606:	4865      	ldr	r0, [pc, #404]	; (800279c <moistconduct+0x234>)
 8002608:	f001 f930 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 30);
 800260c:	211e      	movs	r1, #30
 800260e:	2000      	movs	r0, #0
 8002610:	f001 f952 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("4.Probe in Soil",Font_6x8,1);
 8002614:	4a5e      	ldr	r2, [pc, #376]	; (8002790 <moistconduct+0x228>)
 8002616:	2301      	movs	r3, #1
 8002618:	ca06      	ldmia	r2, {r1, r2}
 800261a:	4861      	ldr	r0, [pc, #388]	; (80027a0 <moistconduct+0x238>)
 800261c:	f001 f926 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 40);
 8002620:	2128      	movs	r1, #40	; 0x28
 8002622:	2000      	movs	r0, #0
 8002624:	f001 f948 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("5.Press the Button",Font_6x8,1);
 8002628:	4a59      	ldr	r2, [pc, #356]	; (8002790 <moistconduct+0x228>)
 800262a:	2301      	movs	r3, #1
 800262c:	ca06      	ldmia	r2, {r1, r2}
 800262e:	485d      	ldr	r0, [pc, #372]	; (80027a4 <moistconduct+0x23c>)
 8002630:	f001 f91c 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 50);
 8002634:	2132      	movs	r1, #50	; 0x32
 8002636:	2000      	movs	r0, #0
 8002638:	f001 f93e 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("5.Wait for the Results",Font_6x8,1);
 800263c:	4a54      	ldr	r2, [pc, #336]	; (8002790 <moistconduct+0x228>)
 800263e:	2301      	movs	r3, #1
 8002640:	ca06      	ldmia	r2, {r1, r2}
 8002642:	4859      	ldr	r0, [pc, #356]	; (80027a8 <moistconduct+0x240>)
 8002644:	f001 f912 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002648:	f001 f80e 	bl	8003668 <ssd1306_UpdateScreen>
			HAL_Delay(200);
 800264c:	20c8      	movs	r0, #200	; 0xc8
 800264e:	f001 fc1b 	bl	8003e88 <HAL_Delay>



			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)
 8002652:	2108      	movs	r1, #8
 8002654:	4847      	ldr	r0, [pc, #284]	; (8002774 <moistconduct+0x20c>)
 8002656:	f002 fb25 	bl	8004ca4 <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	f040 8312 	bne.w	8002c86 <moistconduct+0x71e>
			{

				av_cond=0;
 8002662:	4b52      	ldr	r3, [pc, #328]	; (80027ac <moistconduct+0x244>)
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
				av_moist=0;
 800266a:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <moistconduct+0x248>)
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
				final_average_cond=0;
 8002672:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <moistconduct+0x24c>)
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

				ssd1306_Fill(0);
 800267a:	2000      	movs	r0, #0
 800267c:	f000 ffdc 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002680:	f000 fff2 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8002684:	2100      	movs	r1, #0
 8002686:	2000      	movs	r0, #0
 8002688:	f001 f916 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("Preparing ",Font_7x10,1);
 800268c:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <moistconduct+0x250>)
 800268e:	2301      	movs	r3, #1
 8002690:	ca06      	ldmia	r2, {r1, r2}
 8002692:	484a      	ldr	r0, [pc, #296]	; (80027bc <moistconduct+0x254>)
 8002694:	f001 f8ea 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0, 10);
 8002698:	210a      	movs	r1, #10
 800269a:	2000      	movs	r0, #0
 800269c:	f001 f90c 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("device for ",Font_7x10,1);
 80026a0:	4a45      	ldr	r2, [pc, #276]	; (80027b8 <moistconduct+0x250>)
 80026a2:	2301      	movs	r3, #1
 80026a4:	ca06      	ldmia	r2, {r1, r2}
 80026a6:	4846      	ldr	r0, [pc, #280]	; (80027c0 <moistconduct+0x258>)
 80026a8:	f001 f8e0 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 80026ac:	2114      	movs	r1, #20
 80026ae:	2000      	movs	r0, #0
 80026b0:	f001 f902 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("moisture ",Font_7x10,1);
 80026b4:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <moistconduct+0x250>)
 80026b6:	2301      	movs	r3, #1
 80026b8:	ca06      	ldmia	r2, {r1, r2}
 80026ba:	4842      	ldr	r0, [pc, #264]	; (80027c4 <moistconduct+0x25c>)
 80026bc:	f001 f8d6 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 80026c0:	211e      	movs	r1, #30
 80026c2:	2000      	movs	r0, #0
 80026c4:	f001 f8f8 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("measurement...",Font_7x10,1);
 80026c8:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <moistconduct+0x250>)
 80026ca:	2301      	movs	r3, #1
 80026cc:	ca06      	ldmia	r2, {r1, r2}
 80026ce:	483e      	ldr	r0, [pc, #248]	; (80027c8 <moistconduct+0x260>)
 80026d0:	f001 f8cc 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80026d4:	f000 ffc8 	bl	8003668 <ssd1306_UpdateScreen>
				for(i=0;i<15;i++)
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <moistconduct+0x264>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e007      	b.n	80026f0 <moistconduct+0x188>
				{
					PWM_MOIST();
 80026e0:	f7ff f94a 	bl	8001978 <PWM_MOIST>
				for(i=0;i<15;i++)
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <moistconduct+0x264>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <moistconduct+0x264>)
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <moistconduct+0x264>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b0e      	cmp	r3, #14
 80026f6:	d9f3      	bls.n	80026e0 <moistconduct+0x178>
				}

				ssd1306_Fill(0);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f000 ff9d 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80026fe:	f000 ffb3 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8002702:	2100      	movs	r1, #0
 8002704:	2000      	movs	r0, #0
 8002706:	f001 f8d7 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("Measuring",Font_7x10,1);
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <moistconduct+0x250>)
 800270c:	2301      	movs	r3, #1
 800270e:	ca06      	ldmia	r2, {r1, r2}
 8002710:	482f      	ldr	r0, [pc, #188]	; (80027d0 <moistconduct+0x268>)
 8002712:	f001 f8ab 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0, 10);
 8002716:	210a      	movs	r1, #10
 8002718:	2000      	movs	r0, #0
 800271a:	f001 f8cd 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("Moisture...",Font_7x10,1);
 800271e:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <moistconduct+0x250>)
 8002720:	2301      	movs	r3, #1
 8002722:	ca06      	ldmia	r2, {r1, r2}
 8002724:	482b      	ldr	r0, [pc, #172]	; (80027d4 <moistconduct+0x26c>)
 8002726:	f001 f8a1 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800272a:	f000 ff9d 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_Fill(0);
 800272e:	2000      	movs	r0, #0
 8002730:	f000 ff82 	bl	8003638 <ssd1306_Fill>

				ADC_CH2();
 8002734:	f7ff fb36 	bl	8001da4 <ADC_CH2>

				// Inside your loop
				percentage_moist2 = 0; // Initialize averaged percentage variable
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <moistconduct+0x270>)
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

				av_moist_sum=0;
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <moistconduct+0x274>)
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

				for (j = 0; j < 4; j++) {
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <moistconduct+0x278>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e0dd      	b.n	800290c <moistconduct+0x3a4>
					percentage_moist=0;
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <moistconduct+0x27c>)
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
					av_moist = 0; // Reset av_moist for each iteration
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <moistconduct+0x248>)
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
					PWM_MOIST();
 8002760:	f7ff f90a 	bl	8001978 <PWM_MOIST>
					HAL_ADC_Start(&hadc2);
 8002764:	4820      	ldr	r0, [pc, #128]	; (80027e8 <moistconduct+0x280>)
 8002766:	f001 fc8b 	bl	8004080 <HAL_ADC_Start>
					for (i = 0; i < 5; i++) {
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <moistconduct+0x264>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e09f      	b.n	80028b2 <moistconduct+0x34a>
 8002772:	bf00      	nop
 8002774:	40011000 	.word	0x40011000
 8002778:	20000b08 	.word	0x20000b08
 800277c:	20000b09 	.word	0x20000b09
 8002780:	20000b0a 	.word	0x20000b0a
 8002784:	20000b0b 	.word	0x20000b0b
 8002788:	200003c8 	.word	0x200003c8
 800278c:	200003cc 	.word	0x200003cc
 8002790:	20000014 	.word	0x20000014
 8002794:	08009a70 	.word	0x08009a70
 8002798:	08009a80 	.word	0x08009a80
 800279c:	08009a98 	.word	0x08009a98
 80027a0:	08009aac 	.word	0x08009aac
 80027a4:	08009abc 	.word	0x08009abc
 80027a8:	08009ad0 	.word	0x08009ad0
 80027ac:	200003dc 	.word	0x200003dc
 80027b0:	200003e4 	.word	0x200003e4
 80027b4:	200003d8 	.word	0x200003d8
 80027b8:	2000001c 	.word	0x2000001c
 80027bc:	08009ae8 	.word	0x08009ae8
 80027c0:	08009af4 	.word	0x08009af4
 80027c4:	08009b00 	.word	0x08009b00
 80027c8:	08009b0c 	.word	0x08009b0c
 80027cc:	200003c0 	.word	0x200003c0
 80027d0:	08009b1c 	.word	0x08009b1c
 80027d4:	08009b28 	.word	0x08009b28
 80027d8:	200003ec 	.word	0x200003ec
 80027dc:	200003d4 	.word	0x200003d4
 80027e0:	200003c1 	.word	0x200003c1
 80027e4:	200003e8 	.word	0x200003e8
 80027e8:	2000021c 	.word	0x2000021c
						HAL_ADC_PollForConversion(&hadc2, 1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	489a      	ldr	r0, [pc, #616]	; (8002a58 <moistconduct+0x4f0>)
 80027f0:	f001 fd20 	bl	8004234 <HAL_ADC_PollForConversion>
						adc_buffer[1] = HAL_ADC_GetValue(&hadc2);
 80027f4:	4898      	ldr	r0, [pc, #608]	; (8002a58 <moistconduct+0x4f0>)
 80027f6:	f001 fe23 	bl	8004440 <HAL_ADC_GetValue>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a97      	ldr	r2, [pc, #604]	; (8002a5c <moistconduct+0x4f4>)
 80027fe:	6053      	str	r3, [r2, #4]
						voltage_buffer[1] = adc_value_to_voltage(adc_buffer[1]);
 8002800:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <moistconduct+0x4f4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb0a 	bl	8001e20 <adc_value_to_voltage>
 800280c:	4603      	mov	r3, r0
 800280e:	4a94      	ldr	r2, [pc, #592]	; (8002a60 <moistconduct+0x4f8>)
 8002810:	6053      	str	r3, [r2, #4]
						av_moist += voltage_buffer[1] / 5;
 8002812:	4b93      	ldr	r3, [pc, #588]	; (8002a60 <moistconduct+0x4f8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4993      	ldr	r1, [pc, #588]	; (8002a64 <moistconduct+0x4fc>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fb47 	bl	8000eac <__aeabi_fdiv>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	4b91      	ldr	r3, [pc, #580]	; (8002a68 <moistconduct+0x500>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f7fe f983 	bl	8000b34 <__addsf3>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	4b8d      	ldr	r3, [pc, #564]	; (8002a68 <moistconduct+0x500>)
 8002834:	601a      	str	r2, [r3, #0]
						percentage_moist = 100.0-(((((av_moist+moist_offset) - MIN_VOLTAGE)) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0);
 8002836:	4b8c      	ldr	r3, [pc, #560]	; (8002a68 <moistconduct+0x500>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a8c      	ldr	r2, [pc, #560]	; (8002a6c <moistconduct+0x504>)
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe f977 	bl	8000b34 <__addsf3>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <moistconduct+0x508>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7fe f96d 	bl	8000b30 <__aeabi_fsub>
 8002856:	4603      	mov	r3, r0
 8002858:	461c      	mov	r4, r3
 800285a:	4b86      	ldr	r3, [pc, #536]	; (8002a74 <moistconduct+0x50c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a84      	ldr	r2, [pc, #528]	; (8002a70 <moistconduct+0x508>)
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe f963 	bl	8000b30 <__aeabi_fsub>
 800286a:	4603      	mov	r3, r0
 800286c:	4619      	mov	r1, r3
 800286e:	4620      	mov	r0, r4
 8002870:	f7fe fb1c 	bl	8000eac <__aeabi_fdiv>
 8002874:	4603      	mov	r3, r0
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fdd6 	bl	8000428 <__aeabi_f2d>
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <moistconduct+0x510>)
 8002882:	f7fd fe29 	bl	80004d8 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	497a      	ldr	r1, [pc, #488]	; (8002a78 <moistconduct+0x510>)
 8002890:	f7fd fc6a 	bl	8000168 <__aeabi_dsub>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f8f4 	bl	8000a88 <__aeabi_d2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a76      	ldr	r2, [pc, #472]	; (8002a7c <moistconduct+0x514>)
 80028a4:	6013      	str	r3, [r2, #0]
					for (i = 0; i < 5; i++) {
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <moistconduct+0x518>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <moistconduct+0x518>)
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <moistconduct+0x518>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d998      	bls.n	80027ec <moistconduct+0x284>
					}
					HAL_ADC_Stop(&hadc2);
 80028ba:	4867      	ldr	r0, [pc, #412]	; (8002a58 <moistconduct+0x4f0>)
 80028bc:	f001 fc8e 	bl	80041dc <HAL_ADC_Stop>

					// Calculate percentage_moist for this iteration
					av_moist_sum+=(av_moist+moist_offset);
 80028c0:	4b69      	ldr	r3, [pc, #420]	; (8002a68 <moistconduct+0x500>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <moistconduct+0x504>)
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe f932 	bl	8000b34 <__addsf3>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <moistconduct+0x51c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f7fe f92a 	bl	8000b34 <__addsf3>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <moistconduct+0x51c>)
 80028e6:	601a      	str	r2, [r3, #0]

					// Accumulate the calculated percentage
					percentage_moist2 += percentage_moist;
 80028e8:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <moistconduct+0x520>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <moistconduct+0x514>)
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f91e 	bl	8000b34 <__addsf3>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <moistconduct+0x520>)
 80028fe:	601a      	str	r2, [r3, #0]
				for (j = 0; j < 4; j++) {
 8002900:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <moistconduct+0x524>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b60      	ldr	r3, [pc, #384]	; (8002a8c <moistconduct+0x524>)
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <moistconduct+0x524>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	f67f af1d 	bls.w	8002750 <moistconduct+0x1e8>

				}

				// Calculate the average of percentage_moist over 15 measurements
				av_moist_sum/=4;
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <moistconduct+0x51c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fac4 	bl	8000eac <__aeabi_fdiv>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <moistconduct+0x51c>)
 800292a:	601a      	str	r2, [r3, #0]
				percentage_moist2 /= 4;
 800292c:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <moistconduct+0x520>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fab9 	bl	8000eac <__aeabi_fdiv>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <moistconduct+0x520>)
 8002940:	601a      	str	r2, [r3, #0]
				// Manipulate the last value of percentage_moist2
				if (percentage_moist2 > 100) {
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <moistconduct+0x520>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4952      	ldr	r1, [pc, #328]	; (8002a90 <moistconduct+0x528>)
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fbb7 	bl	80010bc <__aeabi_fcmpgt>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <moistconduct+0x3f4>
					percentage_moist2 = 100;
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <moistconduct+0x520>)
 8002956:	4a4e      	ldr	r2, [pc, #312]	; (8002a90 <moistconduct+0x528>)
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e00d      	b.n	8002978 <moistconduct+0x410>
				} else if (percentage_moist2 < 0) {
 800295c:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <moistconduct+0x520>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fb8b 	bl	8001080 <__aeabi_fcmplt>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <moistconduct+0x410>
					percentage_moist2 = 0;
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <moistconduct+0x520>)
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
				}
				if(percentage_moist2>=80)
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <moistconduct+0x520>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4945      	ldr	r1, [pc, #276]	; (8002a94 <moistconduct+0x52c>)
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fb92 	bl	80010a8 <__aeabi_fcmpge>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d022      	beq.n	80029d0 <moistconduct+0x468>
				{
					ssd1306_Fill(0);
 800298a:	2000      	movs	r0, #0
 800298c:	f000 fe54 	bl	8003638 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002990:	f000 fe6a 	bl	8003668 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8002994:	2100      	movs	r1, #0
 8002996:	2000      	movs	r0, #0
 8002998:	f000 ff8e 	bl	80038b8 <ssd1306_SetCursor>
					ssd1306_WriteString("MOISTURE OK",Font_7x10,1);
 800299c:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <moistconduct+0x530>)
 800299e:	2301      	movs	r3, #1
 80029a0:	ca06      	ldmia	r2, {r1, r2}
 80029a2:	483e      	ldr	r0, [pc, #248]	; (8002a9c <moistconduct+0x534>)
 80029a4:	f000 ff62 	bl	800386c <ssd1306_WriteString>
					ssd1306_SetCursor(0, 15);
 80029a8:	210f      	movs	r1, #15
 80029aa:	2000      	movs	r0, #0
 80029ac:	f000 ff84 	bl	80038b8 <ssd1306_SetCursor>
					ssd1306_WriteString("OVER 80%",Font_7x10,1);
 80029b0:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <moistconduct+0x530>)
 80029b2:	2301      	movs	r3, #1
 80029b4:	ca06      	ldmia	r2, {r1, r2}
 80029b6:	483a      	ldr	r0, [pc, #232]	; (8002aa0 <moistconduct+0x538>)
 80029b8:	f000 ff58 	bl	800386c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80029bc:	f000 fe54 	bl	8003668 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f000 fe39 	bl	8003638 <ssd1306_Fill>
					HAL_Delay(5000);
 80029c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80029ca:	f001 fa5d 	bl	8003e88 <HAL_Delay>
 80029ce:	e073      	b.n	8002ab8 <moistconduct+0x550>
				}
				else if(percentage_moist2<80)
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <moistconduct+0x520>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	492f      	ldr	r1, [pc, #188]	; (8002a94 <moistconduct+0x52c>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fb52 	bl	8001080 <__aeabi_fcmplt>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d06a      	beq.n	8002ab8 <moistconduct+0x550>
				{
					ssd1306_Fill(0);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 fe28 	bl	8003638 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 80029e8:	f000 fe3e 	bl	8003668 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 80029ec:	2100      	movs	r1, #0
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 ff62 	bl	80038b8 <ssd1306_SetCursor>
					ssd1306_WriteString("MOISTURE LOW",Font_7x10,1);
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <moistconduct+0x530>)
 80029f6:	2301      	movs	r3, #1
 80029f8:	ca06      	ldmia	r2, {r1, r2}
 80029fa:	482a      	ldr	r0, [pc, #168]	; (8002aa4 <moistconduct+0x53c>)
 80029fc:	f000 ff36 	bl	800386c <ssd1306_WriteString>
					ssd1306_SetCursor(0, 15);
 8002a00:	210f      	movs	r1, #15
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 ff58 	bl	80038b8 <ssd1306_SetCursor>
					ssd1306_WriteString("UNDER 80%",Font_7x10,1);
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <moistconduct+0x530>)
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	ca06      	ldmia	r2, {r1, r2}
 8002a0e:	4826      	ldr	r0, [pc, #152]	; (8002aa8 <moistconduct+0x540>)
 8002a10:	f000 ff2c 	bl	800386c <ssd1306_WriteString>
					ssd1306_SetCursor(0, 30);
 8002a14:	211e      	movs	r1, #30
 8002a16:	2000      	movs	r0, #0
 8002a18:	f000 ff4e 	bl	80038b8 <ssd1306_SetCursor>
					ssd1306_WriteString("ADD DISTILLED",Font_7x10,1);
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <moistconduct+0x530>)
 8002a1e:	2301      	movs	r3, #1
 8002a20:	ca06      	ldmia	r2, {r1, r2}
 8002a22:	4822      	ldr	r0, [pc, #136]	; (8002aac <moistconduct+0x544>)
 8002a24:	f000 ff22 	bl	800386c <ssd1306_WriteString>
					ssd1306_SetCursor(0, 45);
 8002a28:	212d      	movs	r1, #45	; 0x2d
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f000 ff44 	bl	80038b8 <ssd1306_SetCursor>
					ssd1306_WriteString("WATER",Font_7x10,1);
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <moistconduct+0x530>)
 8002a32:	2301      	movs	r3, #1
 8002a34:	ca06      	ldmia	r2, {r1, r2}
 8002a36:	481e      	ldr	r0, [pc, #120]	; (8002ab0 <moistconduct+0x548>)
 8002a38:	f000 ff18 	bl	800386c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002a3c:	f000 fe14 	bl	8003668 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f000 fdf9 	bl	8003638 <ssd1306_Fill>
					HAL_Delay(5000);
 8002a46:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a4a:	f001 fa1d 	bl	8003e88 <HAL_Delay>
					timeout=0;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <moistconduct+0x54c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	801a      	strh	r2, [r3, #0]
					break;
 8002a54:	e11c      	b.n	8002c90 <moistconduct+0x728>
 8002a56:	bf00      	nop
 8002a58:	2000021c 	.word	0x2000021c
 8002a5c:	20000b0c 	.word	0x20000b0c
 8002a60:	20000b1c 	.word	0x20000b1c
 8002a64:	40a00000 	.word	0x40a00000
 8002a68:	200003e4 	.word	0x200003e4
 8002a6c:	200003d0 	.word	0x200003d0
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	20000010 	.word	0x20000010
 8002a78:	40590000 	.word	0x40590000
 8002a7c:	200003e8 	.word	0x200003e8
 8002a80:	200003c0 	.word	0x200003c0
 8002a84:	200003d4 	.word	0x200003d4
 8002a88:	200003ec 	.word	0x200003ec
 8002a8c:	200003c1 	.word	0x200003c1
 8002a90:	42c80000 	.word	0x42c80000
 8002a94:	42a00000 	.word	0x42a00000
 8002a98:	2000001c 	.word	0x2000001c
 8002a9c:	08009b34 	.word	0x08009b34
 8002aa0:	08009b40 	.word	0x08009b40
 8002aa4:	08009b4c 	.word	0x08009b4c
 8002aa8:	08009b5c 	.word	0x08009b5c
 8002aac:	08009b68 	.word	0x08009b68
 8002ab0:	08009b78 	.word	0x08009b78
 8002ab4:	200003cc 	.word	0x200003cc
				}


				ssd1306_Fill(0);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 fdbd 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002abe:	f000 fdd3 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 fef7 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("Measuring",Font_7x10,1);
 8002aca:	4a86      	ldr	r2, [pc, #536]	; (8002ce4 <moistconduct+0x77c>)
 8002acc:	2301      	movs	r3, #1
 8002ace:	ca06      	ldmia	r2, {r1, r2}
 8002ad0:	4885      	ldr	r0, [pc, #532]	; (8002ce8 <moistconduct+0x780>)
 8002ad2:	f000 fecb 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0, 10);
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 feed 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("Conductivity...",Font_7x10,1);
 8002ade:	4a81      	ldr	r2, [pc, #516]	; (8002ce4 <moistconduct+0x77c>)
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	ca06      	ldmia	r2, {r1, r2}
 8002ae4:	4881      	ldr	r0, [pc, #516]	; (8002cec <moistconduct+0x784>)
 8002ae6:	f000 fec1 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8002aea:	f000 fdbd 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_Fill(0);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f000 fda2 	bl	8003638 <ssd1306_Fill>
				HAL_Delay(1000);
 8002af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002af8:	f001 f9c6 	bl	8003e88 <HAL_Delay>

				ADC_CH1();
 8002afc:	f7ff f934 	bl	8001d68 <ADC_CH1>
				for(int i=0;i<50;i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e004      	b.n	8002b10 <moistconduct+0x5a8>
				{
					PWM_COND();
 8002b06:	f7fe fef5 	bl	80018f4 <PWM_COND>
				for(int i=0;i<50;i++)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b31      	cmp	r3, #49	; 0x31
 8002b14:	ddf7      	ble.n	8002b06 <moistconduct+0x59e>
				}



				float av_cond_sum = 0;
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]

				for(int j = 0; j < 15; j++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e041      	b.n	8002ba6 <moistconduct+0x63e>

					HAL_ADC_Start(&hadc2);
 8002b22:	4873      	ldr	r0, [pc, #460]	; (8002cf0 <moistconduct+0x788>)
 8002b24:	f001 faac 	bl	8004080 <HAL_ADC_Start>
					PWM_COND();
 8002b28:	f7fe fee4 	bl	80018f4 <PWM_COND>
					float av_cond = 0; // Initialize av_cond for each iteration
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

					for(int i = 0; i < 30; i++) {
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	e024      	b.n	8002b82 <moistconduct+0x61a>

						PWM_COND();
 8002b38:	f7fe fedc 	bl	80018f4 <PWM_COND>
						HAL_ADC_PollForConversion(&hadc2, 1);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	486c      	ldr	r0, [pc, #432]	; (8002cf0 <moistconduct+0x788>)
 8002b40:	f001 fb78 	bl	8004234 <HAL_ADC_PollForConversion>
						adc_buffer[0] = HAL_ADC_GetValue(&hadc2);
 8002b44:	486a      	ldr	r0, [pc, #424]	; (8002cf0 <moistconduct+0x788>)
 8002b46:	f001 fc7b 	bl	8004440 <HAL_ADC_GetValue>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <moistconduct+0x78c>)
 8002b4e:	6013      	str	r3, [r2, #0]
						voltage_buffer[0] = adc_value_to_voltage(adc_buffer[0]);
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <moistconduct+0x78c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f962 	bl	8001e20 <adc_value_to_voltage>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4a66      	ldr	r2, [pc, #408]	; (8002cf8 <moistconduct+0x790>)
 8002b60:	6013      	str	r3, [r2, #0]
						av_cond += voltage_buffer[0] / 30; // Accumulate the value
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <moistconduct+0x790>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4965      	ldr	r1, [pc, #404]	; (8002cfc <moistconduct+0x794>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f99f 	bl	8000eac <__aeabi_fdiv>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	68b8      	ldr	r0, [r7, #8]
 8002b74:	f7fd ffde 	bl	8000b34 <__addsf3>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60bb      	str	r3, [r7, #8]
					for(int i = 0; i < 30; i++) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b1d      	cmp	r3, #29
 8002b86:	ddd7      	ble.n	8002b38 <moistconduct+0x5d0>

					}

					HAL_ADC_Stop(&hadc2);
 8002b88:	4859      	ldr	r0, [pc, #356]	; (8002cf0 <moistconduct+0x788>)
 8002b8a:	f001 fb27 	bl	80041dc <HAL_ADC_Stop>
					HAL_Delay(100);
 8002b8e:	2064      	movs	r0, #100	; 0x64
 8002b90:	f001 f97a 	bl	8003e88 <HAL_Delay>
					//						Set_Conductivity_outputs_PD();
					//


					// Add the average of this iteration to av_cond_sum
					av_cond_sum += av_cond;
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6938      	ldr	r0, [r7, #16]
 8002b98:	f7fd ffcc 	bl	8000b34 <__addsf3>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	613b      	str	r3, [r7, #16]
				for(int j = 0; j < 15; j++) {
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b0e      	cmp	r3, #14
 8002baa:	ddba      	ble.n	8002b22 <moistconduct+0x5ba>
				}


				// Calculate the final average
				final_average_cond = av_cond_sum / 15;
 8002bac:	4954      	ldr	r1, [pc, #336]	; (8002d00 <moistconduct+0x798>)
 8002bae:	6938      	ldr	r0, [r7, #16]
 8002bb0:	f7fe f97c 	bl	8000eac <__aeabi_fdiv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b52      	ldr	r3, [pc, #328]	; (8002d04 <moistconduct+0x79c>)
 8002bba:	601a      	str	r2, [r3, #0]



				ssd1306_Fill(0);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f000 fd3b 	bl	8003638 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002bc2:	f000 fd51 	bl	8003668 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f000 fe75 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("Conductivity ",Font_7x10,1);
 8002bce:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <moistconduct+0x77c>)
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	ca06      	ldmia	r2, {r1, r2}
 8002bd4:	484c      	ldr	r0, [pc, #304]	; (8002d08 <moistconduct+0x7a0>)
 8002bd6:	f000 fe49 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8002bda:	210a      	movs	r1, #10
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f000 fe6b 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("measurement",Font_7x10,1);
 8002be2:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <moistconduct+0x77c>)
 8002be4:	2301      	movs	r3, #1
 8002be6:	ca06      	ldmia	r2, {r1, r2}
 8002be8:	4848      	ldr	r0, [pc, #288]	; (8002d0c <moistconduct+0x7a4>)
 8002bea:	f000 fe3f 	bl	800386c <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8002bee:	2114      	movs	r1, #20
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f000 fe61 	bl	80038b8 <ssd1306_SetCursor>
				ssd1306_WriteString("finished",Font_7x10,1);
 8002bf6:	4a3b      	ldr	r2, [pc, #236]	; (8002ce4 <moistconduct+0x77c>)
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	ca06      	ldmia	r2, {r1, r2}
 8002bfc:	4844      	ldr	r0, [pc, #272]	; (8002d10 <moistconduct+0x7a8>)
 8002bfe:	f000 fe35 	bl	800386c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8002c02:	f000 fd31 	bl	8003668 <ssd1306_UpdateScreen>
				HAL_Delay(4000);
 8002c06:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c0a:	f001 f93d 	bl	8003e88 <HAL_Delay>
				if(SET1==1)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <moistconduct+0x7ac>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <moistconduct+0x6be>
				{
					conductivity=calculateECSET1(final_average_cond);
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <moistconduct+0x79c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fa58 	bl	80010d0 <calculateECSET1>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <moistconduct+0x7b0>)
 8002c24:	6013      	str	r3, [r2, #0]
				}
				if(SET10==1)
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <moistconduct+0x7b4>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <moistconduct+0x6d6>
				{
					conductivity=calculateECSET10(final_average_cond);
 8002c2e:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <moistconduct+0x79c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fb24 	bl	8001280 <calculateECSET10>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a37      	ldr	r2, [pc, #220]	; (8002d18 <moistconduct+0x7b0>)
 8002c3c:	6013      	str	r3, [r2, #0]
				}
				if(SET100==1)
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <moistconduct+0x7b8>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <moistconduct+0x6ee>
				{
					conductivity=calculateECSET100(final_average_cond);
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <moistconduct+0x79c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fb44 	bl	80012d8 <calculateECSET100>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <moistconduct+0x7b0>)
 8002c54:	6013      	str	r3, [r2, #0]
				}
				if(SET1000==1)
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <moistconduct+0x7bc>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <moistconduct+0x706>
				{
					conductivity=calculateECSET1000(final_average_cond);
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <moistconduct+0x79c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fb64 	bl	8001330 <calculateECSET1000>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <moistconduct+0x7b0>)
 8002c6c:	6013      	str	r3, [r2, #0]
				}
				HAL_Delay(4000);
 8002c6e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c72:	f001 f909 	bl	8003e88 <HAL_Delay>
				EC_out_of_range();
 8002c76:	f7ff f915 	bl	8001ea4 <EC_out_of_range>
				salinity_fertilizer();
 8002c7a:	f7fe fbc9 	bl	8001410 <salinity_fertilizer>

				timeout=0;
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <moistconduct+0x7c0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	801a      	strh	r2, [r3, #0]
				break;
 8002c84:	e004      	b.n	8002c90 <moistconduct+0x728>
		while(timeout!=1)
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <moistconduct+0x7c0>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f47f ac9b 	bne.w	80025c6 <moistconduct+0x5e>

			}
		}
		if(timeout==1)
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <moistconduct+0x7c0>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d121      	bne.n	8002cdc <moistconduct+0x774>
		{
			ssd1306_Fill(0);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f000 fccd 	bl	8003638 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8002c9e:	f000 fce3 	bl	8003668 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f000 fe07 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("Timeout",Font_7x10,1);
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <moistconduct+0x77c>)
 8002cac:	2301      	movs	r3, #1
 8002cae:	ca06      	ldmia	r2, {r1, r2}
 8002cb0:	481e      	ldr	r0, [pc, #120]	; (8002d2c <moistconduct+0x7c4>)
 8002cb2:	f000 fddb 	bl	800386c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 10);
 8002cb6:	210a      	movs	r1, #10
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f000 fdfd 	bl	80038b8 <ssd1306_SetCursor>
			ssd1306_WriteString("Triggered",Font_7x10,1);
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <moistconduct+0x77c>)
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	ca06      	ldmia	r2, {r1, r2}
 8002cc4:	481a      	ldr	r0, [pc, #104]	; (8002d30 <moistconduct+0x7c8>)
 8002cc6:	f000 fdd1 	bl	800386c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002cca:	f000 fccd 	bl	8003668 <ssd1306_UpdateScreen>
			HAL_Delay(1000);
 8002cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cd2:	f001 f8d9 	bl	8003e88 <HAL_Delay>
			timeout=0;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <moistconduct+0x7c0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	2000001c 	.word	0x2000001c
 8002ce8:	08009b1c 	.word	0x08009b1c
 8002cec:	08009b80 	.word	0x08009b80
 8002cf0:	2000021c 	.word	0x2000021c
 8002cf4:	20000b0c 	.word	0x20000b0c
 8002cf8:	20000b1c 	.word	0x20000b1c
 8002cfc:	41f00000 	.word	0x41f00000
 8002d00:	41700000 	.word	0x41700000
 8002d04:	200003d8 	.word	0x200003d8
 8002d08:	08009b90 	.word	0x08009b90
 8002d0c:	08009ba0 	.word	0x08009ba0
 8002d10:	08009bac 	.word	0x08009bac
 8002d14:	20000b08 	.word	0x20000b08
 8002d18:	200003e0 	.word	0x200003e0
 8002d1c:	20000b09 	.word	0x20000b09
 8002d20:	20000b0a 	.word	0x20000b0a
 8002d24:	20000b0b 	.word	0x20000b0b
 8002d28:	200003cc 	.word	0x200003cc
 8002d2c:	08009bb8 	.word	0x08009bb8
 8002d30:	08009bc0 	.word	0x08009bc0

08002d34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002d3a:	f001 f843 	bl	8003dc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002d3e:	f000 f94d 	bl	8002fdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002d42:	f000 fb47 	bl	80033d4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002d46:	f000 f9d5 	bl	80030f4 <MX_I2C1_Init>
	MX_ADC2_Init();
 8002d4a:	f000 f9a3 	bl	8003094 <MX_ADC2_Init>
	MX_TIM1_Init();
 8002d4e:	f000 f9ff 	bl	8003150 <MX_TIM1_Init>
	MX_TIM4_Init();
 8002d52:	f000 fae7 	bl	8003324 <MX_TIM4_Init>
	MX_TIM3_Init();
 8002d56:	f000 fa97 	bl	8003288 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002d5a:	f000 fa49 	bl	80031f0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_INITS();
 8002d5e:	f7fe fe3b 	bl	80019d8 <SSD1306_INITS>
	HAL_ADC_Init(&hadc2);
 8002d62:	4883      	ldr	r0, [pc, #524]	; (8002f70 <main+0x23c>)
 8002d64:	f001 f8b4 	bl	8003ed0 <HAL_ADC_Init>
	HAL_TIM_Base_Start(&htim1);
 8002d68:	4882      	ldr	r0, [pc, #520]	; (8002f74 <main+0x240>)
 8002d6a:	f003 fa43 	bl	80061f4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8002d6e:	4882      	ldr	r0, [pc, #520]	; (8002f78 <main+0x244>)
 8002d70:	f003 fa40 	bl	80061f4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8002d74:	4881      	ldr	r0, [pc, #516]	; (8002f7c <main+0x248>)
 8002d76:	f003 fa3d 	bl	80061f4 <HAL_TIM_Base_Start>

	//  PWM_BEGIN_MOIST();
	HAL_TIM_Base_Start_IT(&htim3);
 8002d7a:	4881      	ldr	r0, [pc, #516]	; (8002f80 <main+0x24c>)
 8002d7c:	f003 fa84 	bl	8006288 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);  // Set priority and subpriority as needed
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	201d      	movs	r0, #29
 8002d86:	f001 fdd2 	bl	800492e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d8a:	201d      	movs	r0, #29
 8002d8c:	f001 fdeb 	bl	8004966 <HAL_NVIC_EnableIRQ>
	GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8002d90:	4b7c      	ldr	r3, [pc, #496]	; (8002f84 <main+0x250>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a7b      	ldr	r2, [pc, #492]	; (8002f84 <main+0x250>)
 8002d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3;  // Output mode, max speed 50 MHz
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <main+0x250>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a78      	ldr	r2, [pc, #480]	; (8002f84 <main+0x250>)
 8002da2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002da6:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7); // Pin 7
 8002da8:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <main+0x250>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a75      	ldr	r2, [pc, #468]	; (8002f84 <main+0x250>)
 8002dae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002db2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE7_0; // Output mode, max speed 10 MHz
 8002db4:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <main+0x250>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a72      	ldr	r2, [pc, #456]	; (8002f84 <main+0x250>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6); // Pin 6
 8002dc0:	4b70      	ldr	r3, [pc, #448]	; (8002f84 <main+0x250>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6f      	ldr	r2, [pc, #444]	; (8002f84 <main+0x250>)
 8002dc6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002dca:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE6_0; // Output mode, max speed 10 MHz
 8002dcc:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <main+0x250>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6c      	ldr	r2, [pc, #432]	; (8002f84 <main+0x250>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		Set_counterFREQ();
 8002dd8:	f7ff f9da 	bl	8002190 <Set_counterFREQ>
		//MEASURE SEQUENTIAL

		moistconduct();
 8002ddc:	f7ff fbc4 	bl	8002568 <moistconduct>

		//DS18B20
		Temp=DS18B20_GetTemp();
 8002de0:	f7fe ff66 	bl	8001cb0 <DS18B20_GetTemp>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4a68      	ldr	r2, [pc, #416]	; (8002f88 <main+0x254>)
 8002de8:	6013      	str	r3, [r2, #0]


		//NTC BOARD TEMP
		ADC_CH3();
 8002dea:	f7fe fff9 	bl	8001de0 <ADC_CH3>
		HAL_ADC_Start(&hadc2);
 8002dee:	4860      	ldr	r0, [pc, #384]	; (8002f70 <main+0x23c>)
 8002df0:	f001 f946 	bl	8004080 <HAL_ADC_Start>
		HAL_Delay(2);
 8002df4:	2002      	movs	r0, #2
 8002df6:	f001 f847 	bl	8003e88 <HAL_Delay>
		HAL_ADC_PollForConversion(&hadc2, 100);
 8002dfa:	2164      	movs	r1, #100	; 0x64
 8002dfc:	485c      	ldr	r0, [pc, #368]	; (8002f70 <main+0x23c>)
 8002dfe:	f001 fa19 	bl	8004234 <HAL_ADC_PollForConversion>
		adc_buffer[2]=HAL_ADC_GetValue(&hadc2);
 8002e02:	485b      	ldr	r0, [pc, #364]	; (8002f70 <main+0x23c>)
 8002e04:	f001 fb1c 	bl	8004440 <HAL_ADC_GetValue>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4a60      	ldr	r2, [pc, #384]	; (8002f8c <main+0x258>)
 8002e0c:	6093      	str	r3, [r2, #8]
		voltage_buffer[2]=adc_value_to_voltage(adc_buffer[2]);
 8002e0e:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <main+0x258>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f803 	bl	8001e20 <adc_value_to_voltage>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <main+0x25c>)
 8002e1e:	6093      	str	r3, [r2, #8]
		HAL_ADC_Stop(&hadc2);
 8002e20:	4853      	ldr	r0, [pc, #332]	; (8002f70 <main+0x23c>)
 8002e22:	f001 f9db 	bl	80041dc <HAL_ADC_Stop>
		HAL_Delay(2);
 8002e26:	2002      	movs	r0, #2
 8002e28:	f001 f82e 	bl	8003e88 <HAL_Delay>




		if((SET1==1)||SET10==1){
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <main+0x260>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d003      	beq.n	8002e3c <main+0x108>
 8002e34:	4b58      	ldr	r3, [pc, #352]	; (8002f98 <main+0x264>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11f      	bne.n	8002e7c <main+0x148>
			ssd1306_SetCursor(0, 0);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 fd3a 	bl	80038b8 <ssd1306_SetCursor>
			sprintf(bufferConduct,"EC %.fmV %.2f mS/cm",final_average_cond,conductivity);
 8002e44:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <main+0x268>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd faed 	bl	8000428 <__aeabi_f2d>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <main+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fae6 	bl	8000428 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	e9cd 2300 	strd	r2, r3, [sp]
 8002e64:	4622      	mov	r2, r4
 8002e66:	462b      	mov	r3, r5
 8002e68:	494e      	ldr	r1, [pc, #312]	; (8002fa4 <main+0x270>)
 8002e6a:	484f      	ldr	r0, [pc, #316]	; (8002fa8 <main+0x274>)
 8002e6c:	f004 fba0 	bl	80075b0 <siprintf>
			ssd1306_WriteString(bufferConduct,Font_6x8,1);
 8002e70:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <main+0x278>)
 8002e72:	2301      	movs	r3, #1
 8002e74:	ca06      	ldmia	r2, {r1, r2}
 8002e76:	484c      	ldr	r0, [pc, #304]	; (8002fa8 <main+0x274>)
 8002e78:	f000 fcf8 	bl	800386c <ssd1306_WriteString>
		}
		if((SET100==1)||SET1000==1){
 8002e7c:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <main+0x27c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d003      	beq.n	8002e8c <main+0x158>
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <main+0x280>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d11f      	bne.n	8002ecc <main+0x198>
			ssd1306_SetCursor(0, 0);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f000 fd12 	bl	80038b8 <ssd1306_SetCursor>
			sprintf(bufferConduct,"EC %.fmV %.2f uS/cm",final_average_cond,conductivity);
 8002e94:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <main+0x268>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fac5 	bl	8000428 <__aeabi_f2d>
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <main+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fabe 	bl	8000428 <__aeabi_f2d>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	493f      	ldr	r1, [pc, #252]	; (8002fb8 <main+0x284>)
 8002eba:	483b      	ldr	r0, [pc, #236]	; (8002fa8 <main+0x274>)
 8002ebc:	f004 fb78 	bl	80075b0 <siprintf>
			ssd1306_WriteString(bufferConduct,Font_6x8,1);
 8002ec0:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <main+0x278>)
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	ca06      	ldmia	r2, {r1, r2}
 8002ec6:	4838      	ldr	r0, [pc, #224]	; (8002fa8 <main+0x274>)
 8002ec8:	f000 fcd0 	bl	800386c <ssd1306_WriteString>
		}
		ssd1306_SetCursor(0, 11);
 8002ecc:	210b      	movs	r1, #11
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f000 fcf2 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferMoist,"Moist %.1fV %.1f%%",av_moist_sum,percentage_moist2);
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <main+0x288>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd faa5 	bl	8000428 <__aeabi_f2d>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	460d      	mov	r5, r1
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <main+0x28c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fa9e 	bl	8000428 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	462b      	mov	r3, r5
 8002ef8:	4932      	ldr	r1, [pc, #200]	; (8002fc4 <main+0x290>)
 8002efa:	4833      	ldr	r0, [pc, #204]	; (8002fc8 <main+0x294>)
 8002efc:	f004 fb58 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferMoist,Font_6x8,1);
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <main+0x278>)
 8002f02:	2301      	movs	r3, #1
 8002f04:	ca06      	ldmia	r2, {r1, r2}
 8002f06:	4830      	ldr	r0, [pc, #192]	; (8002fc8 <main+0x294>)
 8002f08:	f000 fcb0 	bl	800386c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 21);
 8002f0c:	2115      	movs	r1, #21
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f000 fcd2 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferTemp,"Temp MCU %.2fV",voltage_buffer[2]);
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <main+0x25c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fa85 	bl	8000428 <__aeabi_f2d>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	492a      	ldr	r1, [pc, #168]	; (8002fcc <main+0x298>)
 8002f24:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <main+0x29c>)
 8002f26:	f004 fb43 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferTemp,Font_6x8,1);
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <main+0x278>)
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	ca06      	ldmia	r2, {r1, r2}
 8002f30:	4827      	ldr	r0, [pc, #156]	; (8002fd0 <main+0x29c>)
 8002f32:	f000 fc9b 	bl	800386c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 31);
 8002f36:	211f      	movs	r1, #31
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f000 fcbd 	bl	80038b8 <ssd1306_SetCursor>
		sprintf(bufferDs18b20,"ds18b20 %.2fC",Temp);
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <main+0x254>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fa70 	bl	8000428 <__aeabi_f2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4921      	ldr	r1, [pc, #132]	; (8002fd4 <main+0x2a0>)
 8002f4e:	4822      	ldr	r0, [pc, #136]	; (8002fd8 <main+0x2a4>)
 8002f50:	f004 fb2e 	bl	80075b0 <siprintf>
		ssd1306_WriteString(bufferDs18b20,Font_6x8,1);
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <main+0x278>)
 8002f56:	2301      	movs	r3, #1
 8002f58:	ca06      	ldmia	r2, {r1, r2}
 8002f5a:	481f      	ldr	r0, [pc, #124]	; (8002fd8 <main+0x2a4>)
 8002f5c:	f000 fc86 	bl	800386c <ssd1306_WriteString>

		Set_SENSE();
 8002f60:	f7ff f980 	bl	8002264 <Set_SENSE>
		Set_counterFREQ_ssd1306();
 8002f64:	f7ff fa56 	bl	8002414 <Set_counterFREQ_ssd1306>
		ssd1306_UpdateScreen();
 8002f68:	f000 fb7e 	bl	8003668 <ssd1306_UpdateScreen>
	{
 8002f6c:	e734      	b.n	8002dd8 <main+0xa4>
 8002f6e:	bf00      	nop
 8002f70:	2000021c 	.word	0x2000021c
 8002f74:	200002a0 	.word	0x200002a0
 8002f78:	200002e8 	.word	0x200002e8
 8002f7c:	20000378 	.word	0x20000378
 8002f80:	20000330 	.word	0x20000330
 8002f84:	40010c00 	.word	0x40010c00
 8002f88:	200003f0 	.word	0x200003f0
 8002f8c:	20000b0c 	.word	0x20000b0c
 8002f90:	20000b1c 	.word	0x20000b1c
 8002f94:	20000b08 	.word	0x20000b08
 8002f98:	20000b09 	.word	0x20000b09
 8002f9c:	200003d8 	.word	0x200003d8
 8002fa0:	200003e0 	.word	0x200003e0
 8002fa4:	08009bcc 	.word	0x08009bcc
 8002fa8:	20000400 	.word	0x20000400
 8002fac:	20000014 	.word	0x20000014
 8002fb0:	20000b0a 	.word	0x20000b0a
 8002fb4:	20000b0b 	.word	0x20000b0b
 8002fb8:	08009be0 	.word	0x08009be0
 8002fbc:	200003d4 	.word	0x200003d4
 8002fc0:	200003ec 	.word	0x200003ec
 8002fc4:	08009bf4 	.word	0x08009bf4
 8002fc8:	200004c8 	.word	0x200004c8
 8002fcc:	08009c08 	.word	0x08009c08
 8002fd0:	20000590 	.word	0x20000590
 8002fd4:	08009c18 	.word	0x08009c18
 8002fd8:	20000658 	.word	0x20000658

08002fdc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b094      	sub	sp, #80	; 0x50
 8002fe0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe6:	2228      	movs	r2, #40	; 0x28
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 fb5d 	bl	80076aa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800300c:	2301      	movs	r3, #1
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800301a:	2301      	movs	r3, #1
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800301e:	2302      	movs	r3, #2
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003028:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800302c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800302e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fb12 	bl	800565c <HAL_RCC_OscConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800303e:	f000 fa53 	bl	80034e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003042:	230f      	movs	r3, #15
 8003044:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003046:	2302      	movs	r3, #2
 8003048:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800304e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003052:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fd7e 	bl	8005b60 <HAL_RCC_ClockConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <SystemClock_Config+0x92>
	{
		Error_Handler();
 800306a:	f000 fa3d 	bl	80034e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800306e:	2302      	movs	r3, #2
 8003070:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003076:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fefe 	bl	8005e7c <HAL_RCCEx_PeriphCLKConfig>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8003086:	f000 fa2f 	bl	80034e8 <Error_Handler>
	}
}
 800308a:	bf00      	nop
 800308c:	3750      	adds	r7, #80	; 0x50
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <MX_ADC2_Init+0x58>)
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <MX_ADC2_Init+0x5c>)
 80030a8:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <MX_ADC2_Init+0x58>)
 80030ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <MX_ADC2_Init+0x58>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MX_ADC2_Init+0x58>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <MX_ADC2_Init+0x58>)
 80030c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80030c4:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <MX_ADC2_Init+0x58>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <MX_ADC2_Init+0x58>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80030d2:	4806      	ldr	r0, [pc, #24]	; (80030ec <MX_ADC2_Init+0x58>)
 80030d4:	f000 fefc 	bl	8003ed0 <HAL_ADC_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_ADC2_Init+0x4e>
	{
		Error_Handler();
 80030de:	f000 fa03 	bl	80034e8 <Error_Handler>
	//  }
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000021c 	.word	0x2000021c
 80030f0:	40012800 	.word	0x40012800

080030f4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <MX_I2C1_Init+0x50>)
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <MX_I2C1_Init+0x54>)
 80030fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <MX_I2C1_Init+0x50>)
 8003100:	4a12      	ldr	r2, [pc, #72]	; (800314c <MX_I2C1_Init+0x58>)
 8003102:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <MX_I2C1_Init+0x50>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <MX_I2C1_Init+0x50>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <MX_I2C1_Init+0x50>)
 8003112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003116:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <MX_I2C1_Init+0x50>)
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <MX_I2C1_Init+0x50>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <MX_I2C1_Init+0x50>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <MX_I2C1_Init+0x50>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003130:	4804      	ldr	r0, [pc, #16]	; (8003144 <MX_I2C1_Init+0x50>)
 8003132:	f001 fde7 	bl	8004d04 <HAL_I2C_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800313c:	f000 f9d4 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000024c 	.word	0x2000024c
 8003148:	40005400 	.word	0x40005400
 800314c:	000186a0 	.word	0x000186a0

08003150 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003164:	463b      	mov	r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <MX_TIM1_Init+0x98>)
 800316e:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <MX_TIM1_Init+0x9c>)
 8003170:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <MX_TIM1_Init+0x98>)
 8003174:	2247      	movs	r2, #71	; 0x47
 8003176:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <MX_TIM1_Init+0x98>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff-1;
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <MX_TIM1_Init+0x98>)
 8003180:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003184:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003186:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <MX_TIM1_Init+0x98>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <MX_TIM1_Init+0x98>)
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <MX_TIM1_Init+0x98>)
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003198:	4813      	ldr	r0, [pc, #76]	; (80031e8 <MX_TIM1_Init+0x98>)
 800319a:	f002 ffdb 	bl	8006154 <HAL_TIM_Base_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 80031a4:	f000 f9a0 	bl	80034e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	4619      	mov	r1, r3
 80031b4:	480c      	ldr	r0, [pc, #48]	; (80031e8 <MX_TIM1_Init+0x98>)
 80031b6:	f003 fa63 	bl	8006680 <HAL_TIM_ConfigClockSource>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 80031c0:	f000 f992 	bl	80034e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031cc:	463b      	mov	r3, r7
 80031ce:	4619      	mov	r1, r3
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <MX_TIM1_Init+0x98>)
 80031d2:	f003 fc5d 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 80031dc:	f000 f984 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200002a0 	.word	0x200002a0
 80031ec:	40012c00 	.word	0x40012c00

080031f0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003204:	463b      	mov	r3, r7
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <MX_TIM2_Init+0x94>)
 800320e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003212:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <MX_TIM2_Init+0x94>)
 8003216:	2247      	movs	r2, #71	; 0x47
 8003218:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <MX_TIM2_Init+0x94>)
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535-1;
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <MX_TIM2_Init+0x94>)
 8003222:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003226:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <MX_TIM2_Init+0x94>)
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <MX_TIM2_Init+0x94>)
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003234:	4813      	ldr	r0, [pc, #76]	; (8003284 <MX_TIM2_Init+0x94>)
 8003236:	f002 ff8d 	bl	8006154 <HAL_TIM_Base_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8003240:	f000 f952 	bl	80034e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003248:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4619      	mov	r1, r3
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <MX_TIM2_Init+0x94>)
 8003252:	f003 fa15 	bl	8006680 <HAL_TIM_ConfigClockSource>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 800325c:	f000 f944 	bl	80034e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003268:	463b      	mov	r3, r7
 800326a:	4619      	mov	r1, r3
 800326c:	4805      	ldr	r0, [pc, #20]	; (8003284 <MX_TIM2_Init+0x94>)
 800326e:	f003 fc0f 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8003278:	f000 f936 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800327c:	bf00      	nop
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200002e8 	.word	0x200002e8

08003288 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329c:	463b      	mov	r3, r7
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <MX_TIM3_Init+0x94>)
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <MX_TIM3_Init+0x98>)
 80032a8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7199;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <MX_TIM3_Init+0x94>)
 80032ac:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80032b0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <MX_TIM3_Init+0x94>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10;
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <MX_TIM3_Init+0x94>)
 80032ba:	220a      	movs	r2, #10
 80032bc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <MX_TIM3_Init+0x94>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <MX_TIM3_Init+0x94>)
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032ca:	4814      	ldr	r0, [pc, #80]	; (800331c <MX_TIM3_Init+0x94>)
 80032cc:	f002 ff42 	bl	8006154 <HAL_TIM_Base_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80032d6:	f000 f907 	bl	80034e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032de:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032e0:	f107 0308 	add.w	r3, r7, #8
 80032e4:	4619      	mov	r1, r3
 80032e6:	480d      	ldr	r0, [pc, #52]	; (800331c <MX_TIM3_Init+0x94>)
 80032e8:	f003 f9ca 	bl	8006680 <HAL_TIM_ConfigClockSource>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80032f2:	f000 f8f9 	bl	80034e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032fe:	463b      	mov	r3, r7
 8003300:	4619      	mov	r1, r3
 8003302:	4806      	ldr	r0, [pc, #24]	; (800331c <MX_TIM3_Init+0x94>)
 8003304:	f003 fbc4 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 800330e:	f000 f8eb 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000330 	.word	0x20000330
 8003320:	40000400 	.word	0x40000400

08003324 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003338:	463b      	mov	r3, r7
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003342:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <MX_TIM4_Init+0xac>)
 8003344:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 47999;
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003348:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800334c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334e:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 255;
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <MX_TIM4_Init+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003366:	4819      	ldr	r0, [pc, #100]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003368:	f002 fef4 	bl	8006154 <HAL_TIM_Base_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8003372:	f000 f8b9 	bl	80034e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	4619      	mov	r1, r3
 8003382:	4812      	ldr	r0, [pc, #72]	; (80033cc <MX_TIM4_Init+0xa8>)
 8003384:	f003 f97c 	bl	8006680 <HAL_TIM_ConfigClockSource>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 800338e:	f000 f8ab 	bl	80034e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800339a:	463b      	mov	r3, r7
 800339c:	4619      	mov	r1, r3
 800339e:	480b      	ldr	r0, [pc, #44]	; (80033cc <MX_TIM4_Init+0xa8>)
 80033a0:	f003 fb76 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 80033aa:	f000 f89d 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80033ae:	2100      	movs	r1, #0
 80033b0:	4806      	ldr	r0, [pc, #24]	; (80033cc <MX_TIM4_Init+0xa8>)
 80033b2:	f002 ffbb 	bl	800632c <HAL_TIM_PWM_Start>
	HAL_Delay(100); // Introduce a delay (adjust as needed)
 80033b6:	2064      	movs	r0, #100	; 0x64
 80033b8:	f000 fd66 	bl	8003e88 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80033bc:	2104      	movs	r1, #4
 80033be:	4803      	ldr	r0, [pc, #12]	; (80033cc <MX_TIM4_Init+0xa8>)
 80033c0:	f002 ffb4 	bl	800632c <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */

}
 80033c4:	bf00      	nop
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000378 	.word	0x20000378
 80033d0:	40000800 	.word	0x40000800

080033d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033da:	f107 0310 	add.w	r3, r7, #16
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80033e8:	4b3c      	ldr	r3, [pc, #240]	; (80034dc <MX_GPIO_Init+0x108>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <MX_GPIO_Init+0x108>)
 80033ee:	f043 0320 	orr.w	r3, r3, #32
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <MX_GPIO_Init+0x108>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <MX_GPIO_Init+0x108>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a35      	ldr	r2, [pc, #212]	; (80034dc <MX_GPIO_Init+0x108>)
 8003406:	f043 0310 	orr.w	r3, r3, #16
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b33      	ldr	r3, [pc, #204]	; (80034dc <MX_GPIO_Init+0x108>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <MX_GPIO_Init+0x108>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <MX_GPIO_Init+0x108>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <MX_GPIO_Init+0x108>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <MX_GPIO_Init+0x108>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <MX_GPIO_Init+0x108>)
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6193      	str	r3, [r2, #24]
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <MX_GPIO_Init+0x108>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	21c8      	movs	r1, #200	; 0xc8
 800344c:	4824      	ldr	r0, [pc, #144]	; (80034e0 <MX_GPIO_Init+0x10c>)
 800344e:	f001 fc40 	bl	8004cd2 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC2 PC3 SET_1_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|SET_1_Pin;
 8003452:	234c      	movs	r3, #76	; 0x4c
 8003454:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800345a:	2302      	movs	r3, #2
 800345c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	4619      	mov	r1, r3
 8003464:	481f      	ldr	r0, [pc, #124]	; (80034e4 <MX_GPIO_Init+0x110>)
 8003466:	f001 fa99 	bl	800499c <HAL_GPIO_Init>

	/*Configure GPIO pins : SET_1000_Pin SET_100_Pin SET_10_Pin */
	GPIO_InitStruct.Pin = SET_1000_Pin|SET_100_Pin|SET_10_Pin;
 800346a:	2307      	movs	r3, #7
 800346c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003472:	2302      	movs	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	4619      	mov	r1, r3
 800347c:	4818      	ldr	r0, [pc, #96]	; (80034e0 <MX_GPIO_Init+0x10c>)
 800347e:	f001 fa8d 	bl	800499c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003482:	2308      	movs	r3, #8
 8003484:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	2301      	movs	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003492:	f107 0310 	add.w	r3, r7, #16
 8003496:	4619      	mov	r1, r3
 8003498:	4811      	ldr	r0, [pc, #68]	; (80034e0 <MX_GPIO_Init+0x10c>)
 800349a:	f001 fa7f 	bl	800499c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800349e:	23c0      	movs	r3, #192	; 0xc0
 80034a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2302      	movs	r3, #2
 80034ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	f107 0310 	add.w	r3, r7, #16
 80034b2:	4619      	mov	r1, r3
 80034b4:	480a      	ldr	r0, [pc, #40]	; (80034e0 <MX_GPIO_Init+0x10c>)
 80034b6:	f001 fa71 	bl	800499c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ba:	2308      	movs	r3, #8
 80034bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull
 80034be:	2302      	movs	r3, #2
 80034c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c6:	f107 0310 	add.w	r3, r7, #16
 80034ca:	4619      	mov	r1, r3
 80034cc:	4804      	ldr	r0, [pc, #16]	; (80034e0 <MX_GPIO_Init+0x10c>)
 80034ce:	f001 fa65 	bl	800499c <HAL_GPIO_Init>
	/* USER CODE END MX_GPIO_Init_2 */
}
 80034d2:	bf00      	nop
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010c00 	.word	0x40010c00
 80034e4:	40011000 	.word	0x40011000

080034e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80034f0:	e7fe      	b.n	80034f0 <Error_Handler+0x8>

080034f2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
	...

08003500 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af04      	add	r7, sp, #16
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2301      	movs	r3, #1
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2301      	movs	r3, #1
 800351a:	2200      	movs	r2, #0
 800351c:	2178      	movs	r1, #120	; 0x78
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <ssd1306_WriteCommand+0x2c>)
 8003520:	f001 fd34 	bl	8004f8c <HAL_I2C_Mem_Write>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	2000024c 	.word	0x2000024c

08003530 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af04      	add	r7, sp, #16
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	9202      	str	r2, [sp, #8]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	2178      	movs	r1, #120	; 0x78
 8003550:	4803      	ldr	r0, [pc, #12]	; (8003560 <ssd1306_WriteData+0x30>)
 8003552:	f001 fd1b 	bl	8004f8c <HAL_I2C_Mem_Write>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2000024c 	.word	0x2000024c

08003564 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003568:	f7ff ffc3 	bl	80034f2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800356c:	2064      	movs	r0, #100	; 0x64
 800356e:	f000 fc8b 	bl	8003e88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003572:	2000      	movs	r0, #0
 8003574:	f000 f9cc 	bl	8003910 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003578:	2020      	movs	r0, #32
 800357a:	f7ff ffc1 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800357e:	2000      	movs	r0, #0
 8003580:	f7ff ffbe 	bl	8003500 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003584:	20b0      	movs	r0, #176	; 0xb0
 8003586:	f7ff ffbb 	bl	8003500 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800358a:	20c8      	movs	r0, #200	; 0xc8
 800358c:	f7ff ffb8 	bl	8003500 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003590:	2000      	movs	r0, #0
 8003592:	f7ff ffb5 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003596:	2010      	movs	r0, #16
 8003598:	f7ff ffb2 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800359c:	2040      	movs	r0, #64	; 0x40
 800359e:	f7ff ffaf 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80035a2:	20ff      	movs	r0, #255	; 0xff
 80035a4:	f000 f9a0 	bl	80038e8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80035a8:	20a1      	movs	r0, #161	; 0xa1
 80035aa:	f7ff ffa9 	bl	8003500 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80035ae:	20a6      	movs	r0, #166	; 0xa6
 80035b0:	f7ff ffa6 	bl	8003500 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80035b4:	20a8      	movs	r0, #168	; 0xa8
 80035b6:	f7ff ffa3 	bl	8003500 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80035ba:	203f      	movs	r0, #63	; 0x3f
 80035bc:	f7ff ffa0 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80035c0:	20a4      	movs	r0, #164	; 0xa4
 80035c2:	f7ff ff9d 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80035c6:	20d3      	movs	r0, #211	; 0xd3
 80035c8:	f7ff ff9a 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7ff ff97 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80035d2:	20d5      	movs	r0, #213	; 0xd5
 80035d4:	f7ff ff94 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80035d8:	20f0      	movs	r0, #240	; 0xf0
 80035da:	f7ff ff91 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80035de:	20d9      	movs	r0, #217	; 0xd9
 80035e0:	f7ff ff8e 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80035e4:	2022      	movs	r0, #34	; 0x22
 80035e6:	f7ff ff8b 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80035ea:	20da      	movs	r0, #218	; 0xda
 80035ec:	f7ff ff88 	bl	8003500 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80035f0:	2012      	movs	r0, #18
 80035f2:	f7ff ff85 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80035f6:	20db      	movs	r0, #219	; 0xdb
 80035f8:	f7ff ff82 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80035fc:	2020      	movs	r0, #32
 80035fe:	f7ff ff7f 	bl	8003500 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003602:	208d      	movs	r0, #141	; 0x8d
 8003604:	f7ff ff7c 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003608:	2014      	movs	r0, #20
 800360a:	f7ff ff79 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800360e:	2001      	movs	r0, #1
 8003610:	f000 f97e 	bl	8003910 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003614:	2000      	movs	r0, #0
 8003616:	f000 f80f 	bl	8003638 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800361a:	f000 f825 	bl	8003668 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <ssd1306_Init+0xd0>)
 8003620:	2200      	movs	r2, #0
 8003622:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <ssd1306_Init+0xd0>)
 8003626:	2200      	movs	r2, #0
 8003628:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800362a:	4b02      	ldr	r3, [pc, #8]	; (8003634 <ssd1306_Init+0xd0>)
 800362c:	2201      	movs	r2, #1
 800362e:	711a      	strb	r2, [r3, #4]
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000f30 	.word	0x20000f30

08003638 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <ssd1306_Fill+0x14>
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <ssd1306_Fill+0x16>
 800364c:	23ff      	movs	r3, #255	; 0xff
 800364e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003652:	4619      	mov	r1, r3
 8003654:	4803      	ldr	r0, [pc, #12]	; (8003664 <ssd1306_Fill+0x2c>)
 8003656:	f004 f828 	bl	80076aa <memset>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000b30 	.word	0x20000b30

08003668 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800366e:	2300      	movs	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
 8003672:	e016      	b.n	80036a2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	3b50      	subs	r3, #80	; 0x50
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff40 	bl	8003500 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003680:	2000      	movs	r0, #0
 8003682:	f7ff ff3d 	bl	8003500 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003686:	2010      	movs	r0, #16
 8003688:	f7ff ff3a 	bl	8003500 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	01db      	lsls	r3, r3, #7
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <ssd1306_UpdateScreen+0x4c>)
 8003692:	4413      	add	r3, r2
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff4a 	bl	8003530 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	3301      	adds	r3, #1
 80036a0:	71fb      	strb	r3, [r7, #7]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	d9e5      	bls.n	8003674 <ssd1306_UpdateScreen+0xc>
    }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000b30 	.word	0x20000b30

080036b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
 80036c2:	460b      	mov	r3, r1
 80036c4:	71bb      	strb	r3, [r7, #6]
 80036c6:	4613      	mov	r3, r2
 80036c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db3d      	blt.n	800374e <ssd1306_DrawPixel+0x96>
 80036d2:	79bb      	ldrb	r3, [r7, #6]
 80036d4:	2b3f      	cmp	r3, #63	; 0x3f
 80036d6:	d83a      	bhi.n	800374e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80036d8:	797b      	ldrb	r3, [r7, #5]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d11a      	bne.n	8003714 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80036de:	79fa      	ldrb	r2, [r7, #7]
 80036e0:	79bb      	ldrb	r3, [r7, #6]
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	b2d8      	uxtb	r0, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	01db      	lsls	r3, r3, #7
 80036ea:	4413      	add	r3, r2
 80036ec:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <ssd1306_DrawPixel+0xa0>)
 80036ee:	5cd3      	ldrb	r3, [r2, r3]
 80036f0:	b25a      	sxtb	r2, r3
 80036f2:	79bb      	ldrb	r3, [r7, #6]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	b25b      	sxtb	r3, r3
 8003700:	4313      	orrs	r3, r2
 8003702:	b259      	sxtb	r1, r3
 8003704:	79fa      	ldrb	r2, [r7, #7]
 8003706:	4603      	mov	r3, r0
 8003708:	01db      	lsls	r3, r3, #7
 800370a:	4413      	add	r3, r2
 800370c:	b2c9      	uxtb	r1, r1
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <ssd1306_DrawPixel+0xa0>)
 8003710:	54d1      	strb	r1, [r2, r3]
 8003712:	e01d      	b.n	8003750 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	79bb      	ldrb	r3, [r7, #6]
 8003718:	08db      	lsrs	r3, r3, #3
 800371a:	b2d8      	uxtb	r0, r3
 800371c:	4603      	mov	r3, r0
 800371e:	01db      	lsls	r3, r3, #7
 8003720:	4413      	add	r3, r2
 8003722:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <ssd1306_DrawPixel+0xa0>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	b25a      	sxtb	r2, r3
 8003728:	79bb      	ldrb	r3, [r7, #6]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	b25b      	sxtb	r3, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	b25b      	sxtb	r3, r3
 800373a:	4013      	ands	r3, r2
 800373c:	b259      	sxtb	r1, r3
 800373e:	79fa      	ldrb	r2, [r7, #7]
 8003740:	4603      	mov	r3, r0
 8003742:	01db      	lsls	r3, r3, #7
 8003744:	4413      	add	r3, r2
 8003746:	b2c9      	uxtb	r1, r1
 8003748:	4a03      	ldr	r2, [pc, #12]	; (8003758 <ssd1306_DrawPixel+0xa0>)
 800374a:	54d1      	strb	r1, [r2, r3]
 800374c:	e000      	b.n	8003750 <ssd1306_DrawPixel+0x98>
        return;
 800374e:	bf00      	nop
    }
}
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	20000b30 	.word	0x20000b30

0800375c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	4604      	mov	r4, r0
 8003764:	1d38      	adds	r0, r7, #4
 8003766:	e880 0006 	stmia.w	r0, {r1, r2}
 800376a:	461a      	mov	r2, r3
 800376c:	4623      	mov	r3, r4
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	4613      	mov	r3, r2
 8003772:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b1f      	cmp	r3, #31
 8003778:	d902      	bls.n	8003780 <ssd1306_WriteChar+0x24>
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b7e      	cmp	r3, #126	; 0x7e
 800377e:	d901      	bls.n	8003784 <ssd1306_WriteChar+0x28>
        return 0;
 8003780:	2300      	movs	r3, #0
 8003782:	e06d      	b.n	8003860 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003784:	4b38      	ldr	r3, [pc, #224]	; (8003868 <ssd1306_WriteChar+0x10c>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	793b      	ldrb	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	dc06      	bgt.n	80037a0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003792:	4b35      	ldr	r3, [pc, #212]	; (8003868 <ssd1306_WriteChar+0x10c>)
 8003794:	885b      	ldrh	r3, [r3, #2]
 8003796:	461a      	mov	r2, r3
 8003798:	797b      	ldrb	r3, [r7, #5]
 800379a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	dd01      	ble.n	80037a4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e05d      	b.n	8003860 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e04c      	b.n	8003844 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	3b20      	subs	r3, #32
 80037b0:	7979      	ldrb	r1, [r7, #5]
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	440b      	add	r3, r1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e034      	b.n	8003834 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d012      	beq.n	8003800 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <ssd1306_WriteChar+0x10c>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	b2d8      	uxtb	r0, r3
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <ssd1306_WriteChar+0x10c>)
 80037ea:	885b      	ldrh	r3, [r3, #2]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	7bba      	ldrb	r2, [r7, #14]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f7ff ff5d 	bl	80036b8 <ssd1306_DrawPixel>
 80037fe:	e016      	b.n	800382e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <ssd1306_WriteChar+0x10c>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4413      	add	r3, r2
 800380c:	b2d8      	uxtb	r0, r3
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <ssd1306_WriteChar+0x10c>)
 8003810:	885b      	ldrh	r3, [r3, #2]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4413      	add	r3, r2
 800381a:	b2d9      	uxtb	r1, r3
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	f7ff ff45 	bl	80036b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3301      	adds	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	793b      	ldrb	r3, [r7, #4]
 8003836:	461a      	mov	r2, r3
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4293      	cmp	r3, r2
 800383c:	d3c5      	bcc.n	80037ca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3301      	adds	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	797b      	ldrb	r3, [r7, #5]
 8003846:	461a      	mov	r2, r3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4293      	cmp	r3, r2
 800384c:	d3ad      	bcc.n	80037aa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <ssd1306_WriteChar+0x10c>)
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	793b      	ldrb	r3, [r7, #4]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4413      	add	r3, r2
 8003858:	b29a      	uxth	r2, r3
 800385a:	4b03      	ldr	r3, [pc, #12]	; (8003868 <ssd1306_WriteChar+0x10c>)
 800385c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3724      	adds	r7, #36	; 0x24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	20000f30 	.word	0x20000f30

0800386c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	1d38      	adds	r0, r7, #4
 8003876:	e880 0006 	stmia.w	r0, {r1, r2}
 800387a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800387c:	e012      	b.n	80038a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	7818      	ldrb	r0, [r3, #0]
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	1d3a      	adds	r2, r7, #4
 8003886:	ca06      	ldmia	r2, {r1, r2}
 8003888:	f7ff ff68 	bl	800375c <ssd1306_WriteChar>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d002      	beq.n	800389e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	e008      	b.n	80038b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e8      	bne.n	800387e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	781b      	ldrb	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	460a      	mov	r2, r1
 80038c2:	71fb      	strb	r3, [r7, #7]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <ssd1306_SetCursor+0x2c>)
 80038ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80038d0:	79bb      	ldrb	r3, [r7, #6]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <ssd1306_SetCursor+0x2c>)
 80038d6:	805a      	strh	r2, [r3, #2]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000f30 	.word	0x20000f30

080038e8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80038f2:	2381      	movs	r3, #129	; 0x81
 80038f4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fe01 	bl	8003500 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fdfd 	bl	8003500 <ssd1306_WriteCommand>
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003920:	23af      	movs	r3, #175	; 0xaf
 8003922:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <ssd1306_SetDisplayOn+0x38>)
 8003926:	2201      	movs	r2, #1
 8003928:	715a      	strb	r2, [r3, #5]
 800392a:	e004      	b.n	8003936 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800392c:	23ae      	movs	r3, #174	; 0xae
 800392e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <ssd1306_SetDisplayOn+0x38>)
 8003932:	2200      	movs	r2, #0
 8003934:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fde1 	bl	8003500 <ssd1306_WriteCommand>
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000f30 	.word	0x20000f30

0800394c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_MspInit+0x5c>)
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <HAL_MspInit+0x5c>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6193      	str	r3, [r2, #24]
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_MspInit+0x5c>)
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_MspInit+0x5c>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_MspInit+0x5c>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	61d3      	str	r3, [r2, #28]
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_MspInit+0x5c>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_MspInit+0x60>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_MspInit+0x60>)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40010000 	.word	0x40010000

080039b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <HAL_ADC_MspInit+0x6c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d121      	bne.n	8003a14 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_ADC_MspInit+0x70>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <HAL_ADC_MspInit+0x70>)
 80039d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039da:	6193      	str	r3, [r2, #24]
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_ADC_MspInit+0x70>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_ADC_MspInit+0x70>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <HAL_ADC_MspInit+0x70>)
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	6193      	str	r3, [r2, #24]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_ADC_MspInit+0x70>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003a00:	230e      	movs	r3, #14
 8003a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a04:	2303      	movs	r3, #3
 8003a06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4805      	ldr	r0, [pc, #20]	; (8003a24 <HAL_ADC_MspInit+0x74>)
 8003a10:	f000 ffc4 	bl	800499c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a14:	bf00      	nop
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40012800 	.word	0x40012800
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40010800 	.word	0x40010800

08003a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_I2C_MspInit+0x90>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d132      	bne.n	8003aae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a48:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_I2C_MspInit+0x94>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_I2C_MspInit+0x94>)
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6193      	str	r3, [r2, #24]
 8003a54:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_I2C_MspInit+0x94>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a66:	2312      	movs	r3, #18
 8003a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4619      	mov	r1, r3
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <HAL_I2C_MspInit+0x98>)
 8003a76:	f000 ff91 	bl	800499c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_I2C_MspInit+0x9c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f043 0302 	orr.w	r3, r3, #2
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a90:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <HAL_I2C_MspInit+0x9c>)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_I2C_MspInit+0x94>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_I2C_MspInit+0x94>)
 8003a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aa0:	61d3      	str	r3, [r2, #28]
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_I2C_MspInit+0x94>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003aae:	bf00      	nop
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40005400 	.word	0x40005400
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010c00 	.word	0x40010c00
 8003ac4:	40010000 	.word	0x40010000

08003ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <HAL_TIM_Base_MspInit+0xb0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10c      	bne.n	8003af4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ada:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ae4:	6193      	str	r3, [r2, #24]
 8003ae6:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003af2:	e03c      	b.n	8003b6e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003afe:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	61d3      	str	r3, [r2, #28]
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
}
 8003b16:	e02a      	b.n	8003b6e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_TIM_Base_MspInit+0xb8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d114      	bne.n	8003b4c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	61d3      	str	r3, [r2, #28]
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	201d      	movs	r0, #29
 8003b40:	f000 fef5 	bl	800492e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b44:	201d      	movs	r0, #29
 8003b46:	f000 ff0e 	bl	8004966 <HAL_NVIC_EnableIRQ>
}
 8003b4a:	e010      	b.n	8003b6e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <HAL_TIM_Base_MspInit+0xbc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10b      	bne.n	8003b6e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b5c:	f043 0304 	orr.w	r3, r3, #4
 8003b60:	61d3      	str	r3, [r2, #28]
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_TIM_Base_MspInit+0xb4>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800

08003b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b8c:	e7fe      	b.n	8003b8c <NMI_Handler+0x4>

08003b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <HardFault_Handler+0x4>

08003b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <MemManage_Handler+0x4>

08003b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9e:	e7fe      	b.n	8003b9e <BusFault_Handler+0x4>

08003ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <UsageFault_Handler+0x4>

08003ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bce:	f000 f93f 	bl	8003e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <TIM3_IRQHandler+0x10>)
 8003bde:	f002 fc47 	bl	8006470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000330 	.word	0x20000330

08003bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return 1;
 8003bf0:	2301      	movs	r3, #1
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <_kill>:

int _kill(int pid, int sig)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c04:	f003 fda4 	bl	8007750 <__errno>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2216      	movs	r2, #22
 8003c0c:	601a      	str	r2, [r3, #0]
  return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_exit>:

void _exit (int status)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c22:	f04f 31ff 	mov.w	r1, #4294967295
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffe7 	bl	8003bfa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c2c:	e7fe      	b.n	8003c2c <_exit+0x12>

08003c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e00a      	b.n	8003c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c40:	f3af 8000 	nop.w
 8003c44:	4601      	mov	r1, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	60ba      	str	r2, [r7, #8]
 8003c4c:	b2ca      	uxtb	r2, r1
 8003c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dbf0      	blt.n	8003c40 <_read+0x12>
  }

  return len;
 8003c5e:	687b      	ldr	r3, [r7, #4]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e009      	b.n	8003c8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	60ba      	str	r2, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	dbf1      	blt.n	8003c7a <_write+0x12>
  }
  return len;
 8003c96:	687b      	ldr	r3, [r7, #4]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <_close>:

int _close(int file)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <_isatty>:

int _isatty(int file)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cdc:	2301      	movs	r3, #1
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <_sbrk+0x5c>)
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <_sbrk+0x60>)
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <_sbrk+0x64>)
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <_sbrk+0x68>)
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <_sbrk+0x64>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d30:	f003 fd0e 	bl	8007750 <__errno>
 8003d34:	4603      	mov	r3, r0
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e009      	b.n	8003d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <_sbrk+0x64>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <_sbrk+0x64>)
 8003d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20005000 	.word	0x20005000
 8003d60:	00000400 	.word	0x00000400
 8003d64:	20000f38 	.word	0x20000f38
 8003d68:	20001090 	.word	0x20001090

08003d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d78:	f7ff fff8 	bl	8003d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d7c:	480b      	ldr	r0, [pc, #44]	; (8003dac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d7e:	490c      	ldr	r1, [pc, #48]	; (8003db0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d84:	e002      	b.n	8003d8c <LoopCopyDataInit>

08003d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d8a:	3304      	adds	r3, #4

08003d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d90:	d3f9      	bcc.n	8003d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d94:	4c09      	ldr	r4, [pc, #36]	; (8003dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d98:	e001      	b.n	8003d9e <LoopFillZerobss>

08003d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d9c:	3204      	adds	r2, #4

08003d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003da0:	d3fb      	bcc.n	8003d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003da2:	f003 fcdb 	bl	800775c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003da6:	f7fe ffc5 	bl	8002d34 <main>
  bx lr
 8003daa:	4770      	bx	lr
  ldr r0, =_sdata
 8003dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003db0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003db4:	0800ba94 	.word	0x0800ba94
  ldr r2, =_sbss
 8003db8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003dbc:	2000108c 	.word	0x2000108c

08003dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dc0:	e7fe      	b.n	8003dc0 <ADC1_2_IRQHandler>
	...

08003dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_Init+0x28>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_Init+0x28>)
 8003dce:	f043 0310 	orr.w	r3, r3, #16
 8003dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f000 fd9f 	bl	8004918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dda:	200f      	movs	r0, #15
 8003ddc:	f000 f808 	bl	8003df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de0:	f7ff fdb4 	bl	800394c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40022000 	.word	0x40022000

08003df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_InitTick+0x54>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_InitTick+0x58>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fdb7 	bl	8004982 <HAL_SYSTICK_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e00e      	b.n	8003e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d80a      	bhi.n	8003e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e24:	2200      	movs	r2, #0
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	f000 fd7f 	bl	800492e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <HAL_InitTick+0x5c>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	2000002c 	.word	0x2000002c
 8003e48:	20000034 	.word	0x20000034
 8003e4c:	20000030 	.word	0x20000030

08003e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_IncTick+0x1c>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_IncTick+0x20>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	4a03      	ldr	r2, [pc, #12]	; (8003e70 <HAL_IncTick+0x20>)
 8003e62:	6013      	str	r3, [r2, #0]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000034 	.word	0x20000034
 8003e70:	20000f3c 	.word	0x20000f3c

08003e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return uwTick;
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <HAL_GetTick+0x10>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	20000f3c 	.word	0x20000f3c

08003e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff fff0 	bl	8003e74 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d005      	beq.n	8003eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_Delay+0x44>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eae:	bf00      	nop
 8003eb0:	f7ff ffe0 	bl	8003e74 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d8f7      	bhi.n	8003eb0 <HAL_Delay+0x28>
  {
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000034 	.word	0x20000034

08003ed0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0be      	b.n	8004070 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fd4e 	bl	80039b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fbf1 	bl	80046fc <ADC_ConversionStop_Disable>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 8099 	bne.w	800405e <HAL_ADC_Init+0x18e>
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8095 	bne.w	800405e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f3c:	f023 0302 	bic.w	r3, r3, #2
 8003f40:	f043 0202 	orr.w	r2, r3, #2
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7b1b      	ldrb	r3, [r3, #12]
 8003f56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f68:	d003      	beq.n	8003f72 <HAL_ADC_Init+0xa2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d102      	bne.n	8003f78 <HAL_ADC_Init+0xa8>
 8003f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f76:	e000      	b.n	8003f7a <HAL_ADC_Init+0xaa>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7d1b      	ldrb	r3, [r3, #20]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d119      	bne.n	8003fbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7b1b      	ldrb	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	035a      	lsls	r2, r3, #13
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e00b      	b.n	8003fbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_ADC_Init+0x1a8>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fec:	d003      	beq.n	8003ff6 <HAL_ADC_Init+0x126>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d104      	bne.n	8004000 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	430a      	orrs	r2, r1
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_ADC_Init+0x1ac>)
 800401c:	4013      	ands	r3, r2
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d10b      	bne.n	800403c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800403a:	e018      	b.n	800406e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	f023 0312 	bic.w	r3, r3, #18
 8004044:	f043 0210 	orr.w	r2, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800405c:	e007      	b.n	800406e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	f043 0210 	orr.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	ffe1f7fd 	.word	0xffe1f7fd
 800407c:	ff1f0efe 	.word	0xff1f0efe

08004080 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_ADC_Start+0x1a>
 8004096:	2302      	movs	r3, #2
 8004098:	e098      	b.n	80041cc <HAL_ADC_Start+0x14c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fad0 	bl	8004648 <ADC_Enable>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 8087 	bne.w	80041c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <HAL_ADC_Start+0x154>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d105      	bne.n	80040de <HAL_ADC_Start+0x5e>
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_ADC_Start+0x158>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d115      	bne.n	800410a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d026      	beq.n	8004146 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004100:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004108:	e01d      	b.n	8004146 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <HAL_ADC_Start+0x158>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_ADC_Start+0xaa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <HAL_ADC_Start+0x154>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10d      	bne.n	8004146 <HAL_ADC_Start+0xc6>
 800412a:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_ADC_Start+0x158>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800413e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	f023 0206 	bic.w	r2, r3, #6
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	62da      	str	r2, [r3, #44]	; 0x2c
 800415e:	e002      	b.n	8004166 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0202 	mvn.w	r2, #2
 8004176:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004182:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004186:	d113      	bne.n	80041b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800418c:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <HAL_ADC_Start+0x154>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d105      	bne.n	800419e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_ADC_Start+0x158>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800419a:	2b00      	cmp	r3, #0
 800419c:	d108      	bne.n	80041b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	e00c      	b.n	80041ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	e003      	b.n	80041ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40012800 	.word	0x40012800
 80041d8:	40012400 	.word	0x40012400

080041dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_Stop+0x1a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e01a      	b.n	800422c <HAL_ADC_Stop+0x50>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa7c 	bl	80046fc <ADC_ConversionStop_Disable>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800424a:	f7ff fe13 	bl	8003e74 <HAL_GetTick>
 800424e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0d3      	b.n	800441e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d131      	bne.n	80042e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800428e:	2b00      	cmp	r3, #0
 8004290:	d12a      	bne.n	80042e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004292:	e021      	b.n	80042d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d01d      	beq.n	80042d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_ADC_PollForConversion+0x7e>
 80042a2:	f7ff fde7 	bl	8003e74 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d212      	bcs.n	80042d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f043 0204 	orr.w	r2, r3, #4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0a2      	b.n	800441e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0d6      	beq.n	8004294 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80042e6:	e070      	b.n	80043ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80042e8:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_ADC_PollForConversion+0x1f4>)
 80042ea:	681c      	ldr	r4, [r3, #0]
 80042ec:	2002      	movs	r0, #2
 80042ee:	f001 fe7b 	bl	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 80042f2:	4603      	mov	r3, r0
 80042f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6919      	ldr	r1, [r3, #16]
 80042fe:	4b4b      	ldr	r3, [pc, #300]	; (800442c <HAL_ADC_PollForConversion+0x1f8>)
 8004300:	400b      	ands	r3, r1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d118      	bne.n	8004338 <HAL_ADC_PollForConversion+0x104>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68d9      	ldr	r1, [r3, #12]
 800430c:	4b48      	ldr	r3, [pc, #288]	; (8004430 <HAL_ADC_PollForConversion+0x1fc>)
 800430e:	400b      	ands	r3, r1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d111      	bne.n	8004338 <HAL_ADC_PollForConversion+0x104>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6919      	ldr	r1, [r3, #16]
 800431a:	4b46      	ldr	r3, [pc, #280]	; (8004434 <HAL_ADC_PollForConversion+0x200>)
 800431c:	400b      	ands	r3, r1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <HAL_ADC_PollForConversion+0x100>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68d9      	ldr	r1, [r3, #12]
 8004328:	4b43      	ldr	r3, [pc, #268]	; (8004438 <HAL_ADC_PollForConversion+0x204>)
 800432a:	400b      	ands	r3, r1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_ADC_PollForConversion+0x100>
 8004330:	2314      	movs	r3, #20
 8004332:	e020      	b.n	8004376 <HAL_ADC_PollForConversion+0x142>
 8004334:	2329      	movs	r3, #41	; 0x29
 8004336:	e01e      	b.n	8004376 <HAL_ADC_PollForConversion+0x142>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <HAL_ADC_PollForConversion+0x200>)
 8004340:	400b      	ands	r3, r1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_ADC_PollForConversion+0x120>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68d9      	ldr	r1, [r3, #12]
 800434c:	4b3a      	ldr	r3, [pc, #232]	; (8004438 <HAL_ADC_PollForConversion+0x204>)
 800434e:	400b      	ands	r3, r1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <HAL_ADC_PollForConversion+0x13c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6919      	ldr	r1, [r3, #16]
 800435a:	4b38      	ldr	r3, [pc, #224]	; (800443c <HAL_ADC_PollForConversion+0x208>)
 800435c:	400b      	ands	r3, r1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <HAL_ADC_PollForConversion+0x140>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_ADC_PollForConversion+0x208>)
 800436a:	400b      	ands	r3, r1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_ADC_PollForConversion+0x140>
 8004370:	2354      	movs	r3, #84	; 0x54
 8004372:	e000      	b.n	8004376 <HAL_ADC_PollForConversion+0x142>
 8004374:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800437c:	e021      	b.n	80043c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d01a      	beq.n	80043bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_ADC_PollForConversion+0x168>
 800438c:	f7ff fd72 	bl	8003e74 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d20f      	bcs.n	80043bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d90b      	bls.n	80043bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e030      	b.n	800441e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d8d9      	bhi.n	800437e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f06f 0212 	mvn.w	r2, #18
 80043d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80043ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80043ee:	d115      	bne.n	800441c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d111      	bne.n	800441c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	bf00      	nop
 8004428:	2000002c 	.word	0x2000002c
 800442c:	24924924 	.word	0x24924924
 8004430:	00924924 	.word	0x00924924
 8004434:	12492492 	.word	0x12492492
 8004438:	00492492 	.word	0x00492492
 800443c:	00249249 	.word	0x00249249

08004440 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x20>
 8004474:	2302      	movs	r3, #2
 8004476:	e0dc      	b.n	8004632 <HAL_ADC_ConfigChannel+0x1da>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d81c      	bhi.n	80044c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	3b05      	subs	r3, #5
 800449a:	221f      	movs	r2, #31
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	4019      	ands	r1, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	3b05      	subs	r3, #5
 80044b4:	fa00 f203 	lsl.w	r2, r0, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
 80044c0:	e03c      	b.n	800453c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d81c      	bhi.n	8004504 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	3b23      	subs	r3, #35	; 0x23
 80044dc:	221f      	movs	r2, #31
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	4019      	ands	r1, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	3b23      	subs	r3, #35	; 0x23
 80044f6:	fa00 f203 	lsl.w	r2, r0, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
 8004502:	e01b      	b.n	800453c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	3b41      	subs	r3, #65	; 0x41
 8004516:	221f      	movs	r2, #31
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	4019      	ands	r1, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	3b41      	subs	r3, #65	; 0x41
 8004530:	fa00 f203 	lsl.w	r2, r0, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b09      	cmp	r3, #9
 8004542:	d91c      	bls.n	800457e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	3b1e      	subs	r3, #30
 8004556:	2207      	movs	r2, #7
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	4019      	ands	r1, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6898      	ldr	r0, [r3, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	3b1e      	subs	r3, #30
 8004570:	fa00 f203 	lsl.w	r2, r0, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e019      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6919      	ldr	r1, [r3, #16]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	2207      	movs	r2, #7
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	4019      	ands	r1, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6898      	ldr	r0, [r3, #8]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	fa00 f203 	lsl.w	r2, r0, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d003      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045be:	2b11      	cmp	r3, #17
 80045c0:	d132      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_ADC_ConfigChannel+0x1e4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d125      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d126      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80045e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d11a      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <HAL_ADC_ConfigChannel+0x1e8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <HAL_ADC_ConfigChannel+0x1ec>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	0c9a      	lsrs	r2, r3, #18
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004608:	e002      	b.n	8004610 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3b01      	subs	r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f9      	bne.n	800460a <HAL_ADC_ConfigChannel+0x1b2>
 8004616:	e007      	b.n	8004628 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	40012400 	.word	0x40012400
 8004640:	2000002c 	.word	0x2000002c
 8004644:	431bde83 	.word	0x431bde83

08004648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d040      	beq.n	80046e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004676:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <ADC_Enable+0xac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <ADC_Enable+0xb0>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004684:	e002      	b.n	800468c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3b01      	subs	r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f9      	bne.n	8004686 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004692:	f7ff fbef 	bl	8003e74 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004698:	e01f      	b.n	80046da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800469a:	f7ff fbeb 	bl	8003e74 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d918      	bls.n	80046da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d011      	beq.n	80046da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f043 0210 	orr.w	r2, r3, #16
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e007      	b.n	80046ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d1d8      	bne.n	800469a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000002c 	.word	0x2000002c
 80046f8:	431bde83 	.word	0x431bde83

080046fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d12e      	bne.n	8004774 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004726:	f7ff fba5 	bl	8003e74 <HAL_GetTick>
 800472a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800472c:	e01b      	b.n	8004766 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800472e:	f7ff fba1 	bl	8003e74 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d914      	bls.n	8004766 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10d      	bne.n	8004766 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	f043 0210 	orr.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e007      	b.n	8004776 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d0dc      	beq.n	800472e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800479c:	4013      	ands	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60d3      	str	r3, [r2, #12]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0307 	and.w	r3, r3, #7
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0b      	blt.n	800480e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4906      	ldr	r1, [pc, #24]	; (8004818 <__NVIC_EnableIRQ+0x34>)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2001      	movs	r0, #1
 8004806:	fa00 f202 	lsl.w	r2, r0, r2
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	e000e100 	.word	0xe000e100

0800481c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	db0a      	blt.n	8004846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	490c      	ldr	r1, [pc, #48]	; (8004868 <__NVIC_SetPriority+0x4c>)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	440b      	add	r3, r1
 8004840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004844:	e00a      	b.n	800485c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4908      	ldr	r1, [pc, #32]	; (800486c <__NVIC_SetPriority+0x50>)
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	3b04      	subs	r3, #4
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	440b      	add	r3, r1
 800485a:	761a      	strb	r2, [r3, #24]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000e100 	.word	0xe000e100
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f1c3 0307 	rsb	r3, r3, #7
 800488a:	2b04      	cmp	r3, #4
 800488c:	bf28      	it	cs
 800488e:	2304      	movcs	r3, #4
 8004890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3304      	adds	r3, #4
 8004896:	2b06      	cmp	r3, #6
 8004898:	d902      	bls.n	80048a0 <NVIC_EncodePriority+0x30>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3b03      	subs	r3, #3
 800489e:	e000      	b.n	80048a2 <NVIC_EncodePriority+0x32>
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	401a      	ands	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b8:	f04f 31ff 	mov.w	r1, #4294967295
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	43d9      	mvns	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c8:	4313      	orrs	r3, r2
         );
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3b01      	subs	r3, #1
 80048e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e4:	d301      	bcc.n	80048ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048e6:	2301      	movs	r3, #1
 80048e8:	e00f      	b.n	800490a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <SysTick_Config+0x40>)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048f2:	210f      	movs	r1, #15
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	f7ff ff90 	bl	800481c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <SysTick_Config+0x40>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004902:	4b04      	ldr	r3, [pc, #16]	; (8004914 <SysTick_Config+0x40>)
 8004904:	2207      	movs	r2, #7
 8004906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	e000e010 	.word	0xe000e010

08004918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff2d 	bl	8004780 <__NVIC_SetPriorityGrouping>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004940:	f7ff ff42 	bl	80047c8 <__NVIC_GetPriorityGrouping>
 8004944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	6978      	ldr	r0, [r7, #20]
 800494c:	f7ff ff90 	bl	8004870 <NVIC_EncodePriority>
 8004950:	4602      	mov	r2, r0
 8004952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ff5f 	bl	800481c <__NVIC_SetPriority>
}
 800495e:	bf00      	nop
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ff35 	bl	80047e4 <__NVIC_EnableIRQ>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ffa2 	bl	80048d4 <SysTick_Config>
 8004990:	4603      	mov	r3, r0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800499c:	b480      	push	{r7}
 800499e:	b08b      	sub	sp, #44	; 0x2c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049aa:	2300      	movs	r3, #0
 80049ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ae:	e169      	b.n	8004c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049b0:	2201      	movs	r2, #1
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	f040 8158 	bne.w	8004c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a9a      	ldr	r2, [pc, #616]	; (8004c3c <HAL_GPIO_Init+0x2a0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d05e      	beq.n	8004a96 <HAL_GPIO_Init+0xfa>
 80049d8:	4a98      	ldr	r2, [pc, #608]	; (8004c3c <HAL_GPIO_Init+0x2a0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d875      	bhi.n	8004aca <HAL_GPIO_Init+0x12e>
 80049de:	4a98      	ldr	r2, [pc, #608]	; (8004c40 <HAL_GPIO_Init+0x2a4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d058      	beq.n	8004a96 <HAL_GPIO_Init+0xfa>
 80049e4:	4a96      	ldr	r2, [pc, #600]	; (8004c40 <HAL_GPIO_Init+0x2a4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d86f      	bhi.n	8004aca <HAL_GPIO_Init+0x12e>
 80049ea:	4a96      	ldr	r2, [pc, #600]	; (8004c44 <HAL_GPIO_Init+0x2a8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d052      	beq.n	8004a96 <HAL_GPIO_Init+0xfa>
 80049f0:	4a94      	ldr	r2, [pc, #592]	; (8004c44 <HAL_GPIO_Init+0x2a8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d869      	bhi.n	8004aca <HAL_GPIO_Init+0x12e>
 80049f6:	4a94      	ldr	r2, [pc, #592]	; (8004c48 <HAL_GPIO_Init+0x2ac>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04c      	beq.n	8004a96 <HAL_GPIO_Init+0xfa>
 80049fc:	4a92      	ldr	r2, [pc, #584]	; (8004c48 <HAL_GPIO_Init+0x2ac>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d863      	bhi.n	8004aca <HAL_GPIO_Init+0x12e>
 8004a02:	4a92      	ldr	r2, [pc, #584]	; (8004c4c <HAL_GPIO_Init+0x2b0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d046      	beq.n	8004a96 <HAL_GPIO_Init+0xfa>
 8004a08:	4a90      	ldr	r2, [pc, #576]	; (8004c4c <HAL_GPIO_Init+0x2b0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d85d      	bhi.n	8004aca <HAL_GPIO_Init+0x12e>
 8004a0e:	2b12      	cmp	r3, #18
 8004a10:	d82a      	bhi.n	8004a68 <HAL_GPIO_Init+0xcc>
 8004a12:	2b12      	cmp	r3, #18
 8004a14:	d859      	bhi.n	8004aca <HAL_GPIO_Init+0x12e>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_GPIO_Init+0x80>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a97 	.word	0x08004a97
 8004a20:	08004a71 	.word	0x08004a71
 8004a24:	08004a83 	.word	0x08004a83
 8004a28:	08004ac5 	.word	0x08004ac5
 8004a2c:	08004acb 	.word	0x08004acb
 8004a30:	08004acb 	.word	0x08004acb
 8004a34:	08004acb 	.word	0x08004acb
 8004a38:	08004acb 	.word	0x08004acb
 8004a3c:	08004acb 	.word	0x08004acb
 8004a40:	08004acb 	.word	0x08004acb
 8004a44:	08004acb 	.word	0x08004acb
 8004a48:	08004acb 	.word	0x08004acb
 8004a4c:	08004acb 	.word	0x08004acb
 8004a50:	08004acb 	.word	0x08004acb
 8004a54:	08004acb 	.word	0x08004acb
 8004a58:	08004acb 	.word	0x08004acb
 8004a5c:	08004acb 	.word	0x08004acb
 8004a60:	08004a79 	.word	0x08004a79
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	4a79      	ldr	r2, [pc, #484]	; (8004c50 <HAL_GPIO_Init+0x2b4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a6e:	e02c      	b.n	8004aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	623b      	str	r3, [r7, #32]
          break;
 8004a76:	e029      	b.n	8004acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	623b      	str	r3, [r7, #32]
          break;
 8004a80:	e024      	b.n	8004acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	3308      	adds	r3, #8
 8004a88:	623b      	str	r3, [r7, #32]
          break;
 8004a8a:	e01f      	b.n	8004acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	330c      	adds	r3, #12
 8004a92:	623b      	str	r3, [r7, #32]
          break;
 8004a94:	e01a      	b.n	8004acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	623b      	str	r3, [r7, #32]
          break;
 8004aa2:	e013      	b.n	8004acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d105      	bne.n	8004ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004aac:	2308      	movs	r3, #8
 8004aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	611a      	str	r2, [r3, #16]
          break;
 8004ab6:	e009      	b.n	8004acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ab8:	2308      	movs	r3, #8
 8004aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	615a      	str	r2, [r3, #20]
          break;
 8004ac2:	e003      	b.n	8004acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	623b      	str	r3, [r7, #32]
          break;
 8004ac8:	e000      	b.n	8004acc <HAL_GPIO_Init+0x130>
          break;
 8004aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2bff      	cmp	r3, #255	; 0xff
 8004ad0:	d801      	bhi.n	8004ad6 <HAL_GPIO_Init+0x13a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	e001      	b.n	8004ada <HAL_GPIO_Init+0x13e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2bff      	cmp	r3, #255	; 0xff
 8004ae0:	d802      	bhi.n	8004ae8 <HAL_GPIO_Init+0x14c>
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	e002      	b.n	8004aee <HAL_GPIO_Init+0x152>
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	3b08      	subs	r3, #8
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	210f      	movs	r1, #15
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	401a      	ands	r2, r3
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80b1 	beq.w	8004c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b1c:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	4a4c      	ldr	r2, [pc, #304]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6193      	str	r3, [r2, #24]
 8004b28:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b34:	4a48      	ldr	r2, [pc, #288]	; (8004c58 <HAL_GPIO_Init+0x2bc>)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	089b      	lsrs	r3, r3, #2
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	220f      	movs	r2, #15
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <HAL_GPIO_Init+0x2c0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <HAL_GPIO_Init+0x1ec>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3f      	ldr	r2, [pc, #252]	; (8004c60 <HAL_GPIO_Init+0x2c4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00d      	beq.n	8004b84 <HAL_GPIO_Init+0x1e8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <HAL_GPIO_Init+0x2c8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <HAL_GPIO_Init+0x1e4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3d      	ldr	r2, [pc, #244]	; (8004c68 <HAL_GPIO_Init+0x2cc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d101      	bne.n	8004b7c <HAL_GPIO_Init+0x1e0>
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <HAL_GPIO_Init+0x1ee>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	e004      	b.n	8004b8a <HAL_GPIO_Init+0x1ee>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e002      	b.n	8004b8a <HAL_GPIO_Init+0x1ee>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_GPIO_Init+0x1ee>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	f002 0203 	and.w	r2, r2, #3
 8004b90:	0092      	lsls	r2, r2, #2
 8004b92:	4093      	lsls	r3, r2
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b9a:	492f      	ldr	r1, [pc, #188]	; (8004c58 <HAL_GPIO_Init+0x2bc>)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	492c      	ldr	r1, [pc, #176]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	e006      	b.n	8004bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	4928      	ldr	r1, [pc, #160]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bdc:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	4922      	ldr	r1, [pc, #136]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60cb      	str	r3, [r1, #12]
 8004be8:	e006      	b.n	8004bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	491e      	ldr	r1, [pc, #120]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	4918      	ldr	r1, [pc, #96]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	e006      	b.n	8004c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	4914      	ldr	r1, [pc, #80]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d021      	beq.n	8004c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	490e      	ldr	r1, [pc, #56]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]
 8004c38:	e021      	b.n	8004c7e <HAL_GPIO_Init+0x2e2>
 8004c3a:	bf00      	nop
 8004c3c:	10320000 	.word	0x10320000
 8004c40:	10310000 	.word	0x10310000
 8004c44:	10220000 	.word	0x10220000
 8004c48:	10210000 	.word	0x10210000
 8004c4c:	10120000 	.word	0x10120000
 8004c50:	10110000 	.word	0x10110000
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40010800 	.word	0x40010800
 8004c60:	40010c00 	.word	0x40010c00
 8004c64:	40011000 	.word	0x40011000
 8004c68:	40011400 	.word	0x40011400
 8004c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_GPIO_Init+0x304>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	4909      	ldr	r1, [pc, #36]	; (8004ca0 <HAL_GPIO_Init+0x304>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	3301      	adds	r3, #1
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f47f ae8e 	bne.w	80049b0 <HAL_GPIO_Init+0x14>
  }
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	372c      	adds	r7, #44	; 0x2c
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	e001      	b.n	8004cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	807b      	strh	r3, [r7, #2]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce2:	787b      	ldrb	r3, [r7, #1]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cee:	e003      	b.n	8004cf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	611a      	str	r2, [r3, #16]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e12b      	b.n	8004f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fe fe7c 	bl	8003a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d68:	f001 f842 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4a81      	ldr	r2, [pc, #516]	; (8004f78 <HAL_I2C_Init+0x274>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d807      	bhi.n	8004d88 <HAL_I2C_Init+0x84>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a80      	ldr	r2, [pc, #512]	; (8004f7c <HAL_I2C_Init+0x278>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	bf94      	ite	ls
 8004d80:	2301      	movls	r3, #1
 8004d82:	2300      	movhi	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e006      	b.n	8004d96 <HAL_I2C_Init+0x92>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a7d      	ldr	r2, [pc, #500]	; (8004f80 <HAL_I2C_Init+0x27c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	bf94      	ite	ls
 8004d90:	2301      	movls	r3, #1
 8004d92:	2300      	movhi	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0e7      	b.n	8004f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a78      	ldr	r2, [pc, #480]	; (8004f84 <HAL_I2C_Init+0x280>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0c9b      	lsrs	r3, r3, #18
 8004da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a6a      	ldr	r2, [pc, #424]	; (8004f78 <HAL_I2C_Init+0x274>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d802      	bhi.n	8004dd8 <HAL_I2C_Init+0xd4>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	e009      	b.n	8004dec <HAL_I2C_Init+0xe8>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	4a69      	ldr	r2, [pc, #420]	; (8004f88 <HAL_I2C_Init+0x284>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	3301      	adds	r3, #1
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	495c      	ldr	r1, [pc, #368]	; (8004f78 <HAL_I2C_Init+0x274>)
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	d819      	bhi.n	8004e40 <HAL_I2C_Init+0x13c>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1e59      	subs	r1, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e20:	400b      	ands	r3, r1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_I2C_Init+0x138>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1e59      	subs	r1, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e34:	3301      	adds	r3, #1
 8004e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3a:	e051      	b.n	8004ee0 <HAL_I2C_Init+0x1dc>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	e04f      	b.n	8004ee0 <HAL_I2C_Init+0x1dc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d111      	bne.n	8004e6c <HAL_I2C_Init+0x168>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1e58      	subs	r0, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	440b      	add	r3, r1
 8004e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e012      	b.n	8004e92 <HAL_I2C_Init+0x18e>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1e58      	subs	r0, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	0099      	lsls	r1, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e82:	3301      	adds	r3, #1
 8004e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Init+0x196>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e022      	b.n	8004ee0 <HAL_I2C_Init+0x1dc>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_I2C_Init+0x1bc>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1e58      	subs	r0, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	440b      	add	r3, r1
 8004eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	e00f      	b.n	8004ee0 <HAL_I2C_Init+0x1dc>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1e58      	subs	r0, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	0099      	lsls	r1, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	6809      	ldr	r1, [r1, #0]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6911      	ldr	r1, [r2, #16]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	000186a0 	.word	0x000186a0
 8004f7c:	001e847f 	.word	0x001e847f
 8004f80:	003d08ff 	.word	0x003d08ff
 8004f84:	431bde83 	.word	0x431bde83
 8004f88:	10624dd3 	.word	0x10624dd3

08004f8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fa6:	f7fe ff65 	bl	8003e74 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	f040 80d9 	bne.w	800516c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2319      	movs	r3, #25
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	496d      	ldr	r1, [pc, #436]	; (8005178 <HAL_I2C_Mem_Write+0x1ec>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f971 	bl	80052ac <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0cc      	b.n	800516e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Mem_Write+0x56>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0c5      	b.n	800516e <HAL_I2C_Mem_Write+0x1e2>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d007      	beq.n	8005008 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2221      	movs	r2, #33	; 0x21
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a4d      	ldr	r2, [pc, #308]	; (800517c <HAL_I2C_Mem_Write+0x1f0>)
 8005048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504a:	88f8      	ldrh	r0, [r7, #6]
 800504c:	893a      	ldrh	r2, [r7, #8]
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4603      	mov	r3, r0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f890 	bl	8005180 <I2C_RequestMemoryWrite>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d052      	beq.n	800510c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e081      	b.n	800516e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fa36 	bl	80054e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b04      	cmp	r3, #4
 8005080:	d107      	bne.n	8005092 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e06b      	b.n	800516e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	781a      	ldrb	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_I2C_Mem_Write+0x180>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d017      	beq.n	800510c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1aa      	bne.n	800506a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fa29 	bl	8005570 <I2C_WaitOnBTFFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	2b04      	cmp	r3, #4
 800512a:	d107      	bne.n	800513c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e016      	b.n	800516e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	00100002 	.word	0x00100002
 800517c:	ffff0000 	.word	0xffff0000

08005180 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4603      	mov	r3, r0
 8005190:	817b      	strh	r3, [r7, #10]
 8005192:	460b      	mov	r3, r1
 8005194:	813b      	strh	r3, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f878 	bl	80052ac <I2C_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d103      	bne.n	80051da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e05f      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	492d      	ldr	r1, [pc, #180]	; (80052a8 <I2C_RequestMemoryWrite+0x128>)
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f8d3 	bl	80053a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e04c      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f95e 	bl	80054e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d107      	bne.n	8005242 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02b      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800524c:	893b      	ldrh	r3, [r7, #8]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	e021      	b.n	800529c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b29b      	uxth	r3, r3
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6a39      	ldr	r1, [r7, #32]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f938 	bl	80054e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b04      	cmp	r3, #4
 800527c:	d107      	bne.n	800528e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e005      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005292:	893b      	ldrh	r3, [r7, #8]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	00010002 	.word	0x00010002

080052ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	4613      	mov	r3, r2
 80052ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052bc:	e048      	b.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d044      	beq.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c6:	f7fe fdd5 	bl	8003e74 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d302      	bcc.n	80052dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d139      	bne.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10d      	bne.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	43da      	mvns	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	e00c      	b.n	800531c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	43da      	mvns	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	429a      	cmp	r2, r3
 8005320:	d116      	bne.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e023      	b.n	8005398 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10d      	bne.n	8005376 <I2C_WaitOnFlagUntilTimeout+0xca>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	43da      	mvns	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	e00c      	b.n	8005390 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	43da      	mvns	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	429a      	cmp	r2, r3
 8005394:	d093      	beq.n	80052be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ae:	e071      	b.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053be:	d123      	bne.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0204 	orr.w	r2, r3, #4
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e067      	b.n	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d041      	beq.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fe fd30 	bl	8003e74 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d136      	bne.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10c      	bne.n	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e00b      	b.n	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	43da      	mvns	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e021      	b.n	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	0c1b      	lsrs	r3, r3, #16
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10c      	bne.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	43da      	mvns	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e00b      	b.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf14      	ite	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	2300      	moveq	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f af6d 	bne.w	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ec:	e034      	b.n	8005558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f886 	bl	8005600 <I2C_IsAcknowledgeFailed>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e034      	b.n	8005568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d028      	beq.n	8005558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005506:	f7fe fcb5 	bl	8003e74 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11d      	bne.n	8005558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d016      	beq.n	8005558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e007      	b.n	8005568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d1c3      	bne.n	80054ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800557c:	e034      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f83e 	bl	8005600 <I2C_IsAcknowledgeFailed>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e034      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d028      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005596:	f7fe fc6d 	bl	8003e74 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d302      	bcc.n	80055ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11d      	bne.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d016      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e007      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d1c3      	bne.n	800557e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d11b      	bne.n	8005650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e272      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8087 	beq.w	800578a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800567c:	4b92      	ldr	r3, [pc, #584]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b04      	cmp	r3, #4
 8005686:	d00c      	beq.n	80056a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005688:	4b8f      	ldr	r3, [pc, #572]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b08      	cmp	r3, #8
 8005692:	d112      	bne.n	80056ba <HAL_RCC_OscConfig+0x5e>
 8005694:	4b8c      	ldr	r3, [pc, #560]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d10b      	bne.n	80056ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a2:	4b89      	ldr	r3, [pc, #548]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d06c      	beq.n	8005788 <HAL_RCC_OscConfig+0x12c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d168      	bne.n	8005788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e24c      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c2:	d106      	bne.n	80056d2 <HAL_RCC_OscConfig+0x76>
 80056c4:	4b80      	ldr	r3, [pc, #512]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7f      	ldr	r2, [pc, #508]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	e02e      	b.n	8005730 <HAL_RCC_OscConfig+0xd4>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0x98>
 80056da:	4b7b      	ldr	r3, [pc, #492]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a7a      	ldr	r2, [pc, #488]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b78      	ldr	r3, [pc, #480]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a77      	ldr	r2, [pc, #476]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e01d      	b.n	8005730 <HAL_RCC_OscConfig+0xd4>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056fc:	d10c      	bne.n	8005718 <HAL_RCC_OscConfig+0xbc>
 80056fe:	4b72      	ldr	r3, [pc, #456]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a71      	ldr	r2, [pc, #452]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4b6f      	ldr	r3, [pc, #444]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a6e      	ldr	r2, [pc, #440]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e00b      	b.n	8005730 <HAL_RCC_OscConfig+0xd4>
 8005718:	4b6b      	ldr	r3, [pc, #428]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6a      	ldr	r2, [pc, #424]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	4b68      	ldr	r3, [pc, #416]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800572a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d013      	beq.n	8005760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fe fb9c 	bl	8003e74 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005740:	f7fe fb98 	bl	8003e74 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	; 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e200      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005752:	4b5d      	ldr	r3, [pc, #372]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0xe4>
 800575e:	e014      	b.n	800578a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fe fb88 	bl	8003e74 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005768:	f7fe fb84 	bl	8003e74 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	; 0x64
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e1ec      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577a:	4b53      	ldr	r3, [pc, #332]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x10c>
 8005786:	e000      	b.n	800578a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d063      	beq.n	800585e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005796:	4b4c      	ldr	r3, [pc, #304]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057a2:	4b49      	ldr	r3, [pc, #292]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d11c      	bne.n	80057e8 <HAL_RCC_OscConfig+0x18c>
 80057ae:	4b46      	ldr	r3, [pc, #280]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ba:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_RCC_OscConfig+0x176>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d001      	beq.n	80057d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e1c0      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d2:	4b3d      	ldr	r3, [pc, #244]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4939      	ldr	r1, [pc, #228]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e6:	e03a      	b.n	800585e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d020      	beq.n	8005832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f0:	4b36      	ldr	r3, [pc, #216]	; (80058cc <HAL_RCC_OscConfig+0x270>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f6:	f7fe fb3d 	bl	8003e74 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fe:	f7fe fb39 	bl	8003e74 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e1a1      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005810:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4b2a      	ldr	r3, [pc, #168]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4927      	ldr	r1, [pc, #156]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	600b      	str	r3, [r1, #0]
 8005830:	e015      	b.n	800585e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005832:	4b26      	ldr	r3, [pc, #152]	; (80058cc <HAL_RCC_OscConfig+0x270>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fe fb1c 	bl	8003e74 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005840:	f7fe fb18 	bl	8003e74 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e180      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005852:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d03a      	beq.n	80058e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d019      	beq.n	80058a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005872:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <HAL_RCC_OscConfig+0x274>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005878:	f7fe fafc 	bl	8003e74 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005880:	f7fe faf8 	bl	8003e74 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e160      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_RCC_OscConfig+0x26c>)
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800589e:	2001      	movs	r0, #1
 80058a0:	f000 face 	bl	8005e40 <RCC_Delay>
 80058a4:	e01c      	b.n	80058e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <HAL_RCC_OscConfig+0x274>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ac:	f7fe fae2 	bl	8003e74 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b2:	e00f      	b.n	80058d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b4:	f7fe fade 	bl	8003e74 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d908      	bls.n	80058d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e146      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
 80058cc:	42420000 	.word	0x42420000
 80058d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d4:	4b92      	ldr	r3, [pc, #584]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e9      	bne.n	80058b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80a6 	beq.w	8005a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f2:	4b8b      	ldr	r3, [pc, #556]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10d      	bne.n	800591a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fe:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	4a87      	ldr	r2, [pc, #540]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005908:	61d3      	str	r3, [r2, #28]
 800590a:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	4b82      	ldr	r3, [pc, #520]	; (8005b24 <HAL_RCC_OscConfig+0x4c8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d118      	bne.n	8005958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005926:	4b7f      	ldr	r3, [pc, #508]	; (8005b24 <HAL_RCC_OscConfig+0x4c8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a7e      	ldr	r2, [pc, #504]	; (8005b24 <HAL_RCC_OscConfig+0x4c8>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005932:	f7fe fa9f 	bl	8003e74 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593a:	f7fe fa9b 	bl	8003e74 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b64      	cmp	r3, #100	; 0x64
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e103      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594c:	4b75      	ldr	r3, [pc, #468]	; (8005b24 <HAL_RCC_OscConfig+0x4c8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d106      	bne.n	800596e <HAL_RCC_OscConfig+0x312>
 8005960:	4b6f      	ldr	r3, [pc, #444]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4a6e      	ldr	r2, [pc, #440]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6213      	str	r3, [r2, #32]
 800596c:	e02d      	b.n	80059ca <HAL_RCC_OscConfig+0x36e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0x334>
 8005976:	4b6a      	ldr	r3, [pc, #424]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	4a69      	ldr	r2, [pc, #420]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	6213      	str	r3, [r2, #32]
 8005982:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4a66      	ldr	r2, [pc, #408]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005988:	f023 0304 	bic.w	r3, r3, #4
 800598c:	6213      	str	r3, [r2, #32]
 800598e:	e01c      	b.n	80059ca <HAL_RCC_OscConfig+0x36e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b05      	cmp	r3, #5
 8005996:	d10c      	bne.n	80059b2 <HAL_RCC_OscConfig+0x356>
 8005998:	4b61      	ldr	r3, [pc, #388]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	4a60      	ldr	r2, [pc, #384]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 800599e:	f043 0304 	orr.w	r3, r3, #4
 80059a2:	6213      	str	r3, [r2, #32]
 80059a4:	4b5e      	ldr	r3, [pc, #376]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4a5d      	ldr	r2, [pc, #372]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	6213      	str	r3, [r2, #32]
 80059b0:	e00b      	b.n	80059ca <HAL_RCC_OscConfig+0x36e>
 80059b2:	4b5b      	ldr	r3, [pc, #364]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	4a5a      	ldr	r2, [pc, #360]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	6213      	str	r3, [r2, #32]
 80059be:	4b58      	ldr	r3, [pc, #352]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	4a57      	ldr	r2, [pc, #348]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	f023 0304 	bic.w	r3, r3, #4
 80059c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d015      	beq.n	80059fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d2:	f7fe fa4f 	bl	8003e74 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fe fa4b 	bl	8003e74 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0b1      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ee      	beq.n	80059da <HAL_RCC_OscConfig+0x37e>
 80059fc:	e014      	b.n	8005a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059fe:	f7fe fa39 	bl	8003e74 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a04:	e00a      	b.n	8005a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a06:	f7fe fa35 	bl	8003e74 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e09b      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1c:	4b40      	ldr	r3, [pc, #256]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1ee      	bne.n	8005a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2e:	4b3c      	ldr	r3, [pc, #240]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4a3b      	ldr	r2, [pc, #236]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8087 	beq.w	8005b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a44:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d061      	beq.n	8005b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d146      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a58:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <HAL_RCC_OscConfig+0x4cc>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5e:	f7fe fa09 	bl	8003e74 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fe fa05 	bl	8003e74 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e06d      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a78:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d108      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	4921      	ldr	r1, [pc, #132]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa0:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a19      	ldr	r1, [r3, #32]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	491b      	ldr	r1, [pc, #108]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x4cc>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abe:	f7fe f9d9 	bl	8003e74 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac6:	f7fe f9d5 	bl	8003e74 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e03d      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x46a>
 8005ae4:	e035      	b.n	8005b52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_RCC_OscConfig+0x4cc>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fe f9c2 	bl	8003e74 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fe f9be 	bl	8003e74 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e026      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_RCC_OscConfig+0x4c4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x498>
 8005b12:	e01e      	b.n	8005b52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e019      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40007000 	.word	0x40007000
 8005b28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_OscConfig+0x500>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40021000 	.word	0x40021000

08005b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e0d0      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b74:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d910      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b67      	ldr	r3, [pc, #412]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 0207 	bic.w	r2, r3, #7
 8005b8a:	4965      	ldr	r1, [pc, #404]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b63      	ldr	r3, [pc, #396]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0b8      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d020      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bbc:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a58      	ldr	r2, [pc, #352]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd4:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a52      	ldr	r2, [pc, #328]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be0:	4b50      	ldr	r3, [pc, #320]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	494d      	ldr	r1, [pc, #308]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d040      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c06:	4b47      	ldr	r3, [pc, #284]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d115      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e07f      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1e:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e073      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2e:	4b3d      	ldr	r3, [pc, #244]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e06b      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3e:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f023 0203 	bic.w	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4936      	ldr	r1, [pc, #216]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c50:	f7fe f910 	bl	8003e74 <HAL_GetTick>
 8005c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c56:	e00a      	b.n	8005c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c58:	f7fe f90c 	bl	8003e74 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e053      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6e:	4b2d      	ldr	r3, [pc, #180]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 020c 	and.w	r2, r3, #12
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d1eb      	bne.n	8005c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c80:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d210      	bcs.n	8005cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8e:	4b24      	ldr	r3, [pc, #144]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 0207 	bic.w	r2, r3, #7
 8005c96:	4922      	ldr	r1, [pc, #136]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e032      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4916      	ldr	r1, [pc, #88]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	490e      	ldr	r1, [pc, #56]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cee:	f000 f821 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	490a      	ldr	r1, [pc, #40]	; (8005d28 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	5ccb      	ldrb	r3, [r1, r3]
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <HAL_RCC_ClockConfig+0x1cc>)
 8005d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d0a:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <HAL_RCC_ClockConfig+0x1d0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe f86e 	bl	8003df0 <HAL_InitTick>

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40022000 	.word	0x40022000
 8005d24:	40021000 	.word	0x40021000
 8005d28:	0800b6e0 	.word	0x0800b6e0
 8005d2c:	2000002c 	.word	0x2000002c
 8005d30:	20000030 	.word	0x20000030

08005d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 030c 	and.w	r3, r3, #12
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d002      	beq.n	8005d64 <HAL_RCC_GetSysClockFreq+0x30>
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d003      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0x36>
 8005d62:	e027      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d64:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8005d66:	613b      	str	r3, [r7, #16]
      break;
 8005d68:	e027      	b.n	8005dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0c9b      	lsrs	r3, r3, #18
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d74:	5cd3      	ldrb	r3, [r2, r3]
 8005d76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d010      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d82:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	0c5b      	lsrs	r3, r3, #17
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	4a11      	ldr	r2, [pc, #68]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d8e:	5cd3      	ldrb	r3, [r2, r3]
 8005d90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8005d96:	fb03 f202 	mul.w	r2, r3, r2
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e004      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0c      	ldr	r2, [pc, #48]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005da8:	fb02 f303 	mul.w	r3, r2, r3
 8005dac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	613b      	str	r3, [r7, #16]
      break;
 8005db2:	e002      	b.n	8005dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8005db6:	613b      	str	r3, [r7, #16]
      break;
 8005db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dba:	693b      	ldr	r3, [r7, #16]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	007a1200 	.word	0x007a1200
 8005dd0:	0800b6f8 	.word	0x0800b6f8
 8005dd4:	0800b708 	.word	0x0800b708
 8005dd8:	003d0900 	.word	0x003d0900

08005ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <HAL_RCC_GetHCLKFreq+0x10>)
 8005de2:	681b      	ldr	r3, [r3, #0]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr
 8005dec:	2000002c 	.word	0x2000002c

08005df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005df4:	f7ff fff2 	bl	8005ddc <HAL_RCC_GetHCLKFreq>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	0a1b      	lsrs	r3, r3, #8
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4903      	ldr	r1, [pc, #12]	; (8005e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000
 8005e14:	0800b6f0 	.word	0x0800b6f0

08005e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e1c:	f7ff ffde 	bl	8005ddc <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	0adb      	lsrs	r3, r3, #11
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4903      	ldr	r1, [pc, #12]	; (8005e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	0800b6f0 	.word	0x0800b6f0

08005e40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <RCC_Delay+0x34>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <RCC_Delay+0x38>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	0a5b      	lsrs	r3, r3, #9
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e5c:	bf00      	nop
  }
  while (Delay --);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1e5a      	subs	r2, r3, #1
 8005e62:	60fa      	str	r2, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f9      	bne.n	8005e5c <RCC_Delay+0x1c>
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	2000002c 	.word	0x2000002c
 8005e78:	10624dd3 	.word	0x10624dd3

08005e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d07d      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9c:	4b4f      	ldr	r3, [pc, #316]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10d      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea8:	4b4c      	ldr	r3, [pc, #304]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	4a4b      	ldr	r2, [pc, #300]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	61d3      	str	r3, [r2, #28]
 8005eb4:	4b49      	ldr	r3, [pc, #292]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d118      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed0:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a42      	ldr	r2, [pc, #264]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005edc:	f7fd ffca 	bl	8003e74 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee4:	f7fd ffc6 	bl	8003e74 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	; 0x64
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e06d      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef6:	4b3a      	ldr	r3, [pc, #232]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f02:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d02e      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d027      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f20:	4b2e      	ldr	r3, [pc, #184]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f30:	4b2c      	ldr	r3, [pc, #176]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f36:	4a29      	ldr	r2, [pc, #164]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d014      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f46:	f7fd ff95 	bl	8003e74 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4c:	e00a      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4e:	f7fd ff91 	bl	8003e74 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e036      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0ee      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f70:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4917      	ldr	r1, [pc, #92]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	490b      	ldr	r1, [pc, #44]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fbe:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4904      	ldr	r1, [pc, #16]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40007000 	.word	0x40007000
 8005fe4:	42420440 	.word	0x42420440

08005fe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b10      	cmp	r3, #16
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b10      	cmp	r3, #16
 800600e:	f200 808a 	bhi.w	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d045      	beq.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d075      	beq.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800601e:	e082      	b.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006020:	4b46      	ldr	r3, [pc, #280]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006026:	4b45      	ldr	r3, [pc, #276]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d07b      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	0c9b      	lsrs	r3, r3, #18
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	4a41      	ldr	r2, [pc, #260]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800603c:	5cd3      	ldrb	r3, [r2, r3]
 800603e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d015      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800604a:	4b3c      	ldr	r3, [pc, #240]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	0c5b      	lsrs	r3, r3, #17
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006056:	5cd3      	ldrb	r3, [r2, r3]
 8006058:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00d      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006064:	4a38      	ldr	r2, [pc, #224]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	fbb2 f2f3 	udiv	r2, r2, r3
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	e004      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4a34      	ldr	r2, [pc, #208]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800607a:	fb02 f303 	mul.w	r3, r2, r3
 800607e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006080:	4b2e      	ldr	r3, [pc, #184]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608c:	d102      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	61bb      	str	r3, [r7, #24]
      break;
 8006092:	e04a      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4a2d      	ldr	r2, [pc, #180]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	61bb      	str	r3, [r7, #24]
      break;
 80060a2:	e042      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80060a4:	4b25      	ldr	r3, [pc, #148]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b4:	d108      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80060c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e01f      	b.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d2:	d109      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80060e0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e00f      	b.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f2:	d11c      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d016      	beq.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006100:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006104:	61bb      	str	r3, [r7, #24]
      break;
 8006106:	e012      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006108:	e011      	b.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800610a:	f7ff fe85 	bl	8005e18 <HAL_RCC_GetPCLK2Freq>
 800610e:	4602      	mov	r2, r0
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	0b9b      	lsrs	r3, r3, #14
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	3301      	adds	r3, #1
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006122:	61bb      	str	r3, [r7, #24]
      break;
 8006124:	e004      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800612e:	bf00      	nop
    }
  }
  return (frequency);
 8006130:	69bb      	ldr	r3, [r7, #24]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000
 8006140:	0800b70c 	.word	0x0800b70c
 8006144:	0800b71c 	.word	0x0800b71c
 8006148:	007a1200 	.word	0x007a1200
 800614c:	003d0900 	.word	0x003d0900
 8006150:	aaaaaaab 	.word	0xaaaaaaab

08006154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e041      	b.n	80061ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fd fca4 	bl	8003ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 fb60 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e032      	b.n	8006272 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIM_Base_Start+0x88>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIM_Base_Start+0x48>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d009      	beq.n	800623c <HAL_TIM_Base_Start+0x48>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a14      	ldr	r2, [pc, #80]	; (8006280 <HAL_TIM_Base_Start+0x8c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_Base_Start+0x48>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <HAL_TIM_Base_Start+0x90>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d111      	bne.n	8006260 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b06      	cmp	r3, #6
 800624c:	d010      	beq.n	8006270 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	e007      	b.n	8006270 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800

08006288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d001      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e03a      	b.n	8006316 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_Base_Start_IT+0x98>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00e      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x58>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d009      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x58>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a14      	ldr	r2, [pc, #80]	; (8006324 <HAL_TIM_Base_Start_IT+0x9c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x58>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <HAL_TIM_Base_Start_IT+0xa0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d111      	bne.n	8006304 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d010      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006302:	e007      	b.n	8006314 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800

0800632c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <HAL_TIM_PWM_Start+0x24>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e022      	b.n	8006396 <HAL_TIM_PWM_Start+0x6a>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d109      	bne.n	800636a <HAL_TIM_PWM_Start+0x3e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	e015      	b.n	8006396 <HAL_TIM_PWM_Start+0x6a>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b08      	cmp	r3, #8
 800636e:	d109      	bne.n	8006384 <HAL_TIM_PWM_Start+0x58>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e008      	b.n	8006396 <HAL_TIM_PWM_Start+0x6a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e05e      	b.n	800645c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Start+0x82>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ac:	e013      	b.n	80063d6 <HAL_TIM_PWM_Start+0xaa>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Start+0x92>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063bc:	e00b      	b.n	80063d6 <HAL_TIM_PWM_Start+0xaa>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Start+0xa2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063cc:	e003      	b.n	80063d6 <HAL_TIM_PWM_Start+0xaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fb32 	bl	8006a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <HAL_TIM_PWM_Start+0x138>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d107      	bne.n	80063fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <HAL_TIM_PWM_Start+0x138>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00e      	beq.n	8006426 <HAL_TIM_PWM_Start+0xfa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006410:	d009      	beq.n	8006426 <HAL_TIM_PWM_Start+0xfa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a14      	ldr	r2, [pc, #80]	; (8006468 <HAL_TIM_PWM_Start+0x13c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_TIM_PWM_Start+0xfa>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a12      	ldr	r2, [pc, #72]	; (800646c <HAL_TIM_PWM_Start+0x140>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d111      	bne.n	800644a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b06      	cmp	r3, #6
 8006436:	d010      	beq.n	800645a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006448:	e007      	b.n	800645a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800

08006470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0202 	mvn.w	r2, #2
 800649c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9b4 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9a7 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f9b6 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0204 	mvn.w	r2, #4
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f98a 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f97d 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f98c 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b08      	cmp	r3, #8
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0208 	mvn.w	r2, #8
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2204      	movs	r2, #4
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f960 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f953 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f962 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b10      	cmp	r3, #16
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0210 	mvn.w	r2, #16
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2208      	movs	r2, #8
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f936 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f929 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f938 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0201 	mvn.w	r2, #1
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fa feca 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa9f 	bl	8006b5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8fc 	bl	8006844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b20      	cmp	r3, #32
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b20      	cmp	r3, #32
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0220 	mvn.w	r2, #32
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa6a 	bl	8006b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_TIM_ConfigClockSource+0x1c>
 8006698:	2302      	movs	r3, #2
 800669a:	e0b4      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x186>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d03e      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0xd4>
 80066d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066da:	f200 8087 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	f000 8086 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x172>
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ea:	d87f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b70      	cmp	r3, #112	; 0x70
 80066ee:	d01a      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0xa6>
 80066f0:	2b70      	cmp	r3, #112	; 0x70
 80066f2:	d87b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d050      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x11a>
 80066f8:	2b60      	cmp	r3, #96	; 0x60
 80066fa:	d877      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b50      	cmp	r3, #80	; 0x50
 80066fe:	d03c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0xfa>
 8006700:	2b50      	cmp	r3, #80	; 0x50
 8006702:	d873      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d058      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x13a>
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d86f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d064      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d86b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d060      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d867      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05c      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006720:	2b10      	cmp	r3, #16
 8006722:	d05a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	e062      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006736:	f000 f968 	bl	8006a0a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	609a      	str	r2, [r3, #8]
      break;
 8006752:	e04f      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006764:	f000 f951 	bl	8006a0a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006776:	609a      	str	r2, [r3, #8]
      break;
 8006778:	e03c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	461a      	mov	r2, r3
 8006788:	f000 f8c8 	bl	800691c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2150      	movs	r1, #80	; 0x50
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f91f 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 8006798:	e02c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 f8e6 	bl	8006978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2160      	movs	r1, #96	; 0x60
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f90f 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 80067b8:	e01c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 f8a8 	bl	800691c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2140      	movs	r1, #64	; 0x40
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f8ff 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f000 f8f6 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 80067ea:	e003      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	e000      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
	...

08006858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a29      	ldr	r2, [pc, #164]	; (8006910 <TIM_Base_SetConfig+0xb8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x30>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x30>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a26      	ldr	r2, [pc, #152]	; (8006914 <TIM_Base_SetConfig+0xbc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x30>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <TIM_Base_SetConfig+0xc0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <TIM_Base_SetConfig+0xb8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_Base_SetConfig+0x62>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d007      	beq.n	80068ba <TIM_Base_SetConfig+0x62>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a19      	ldr	r2, [pc, #100]	; (8006914 <TIM_Base_SetConfig+0xbc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_Base_SetConfig+0x62>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a18      	ldr	r2, [pc, #96]	; (8006918 <TIM_Base_SetConfig+0xc0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a07      	ldr	r2, [pc, #28]	; (8006910 <TIM_Base_SetConfig+0xb8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d103      	bne.n	8006900 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	615a      	str	r2, [r3, #20]
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800

0800691c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f023 0201 	bic.w	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 030a 	bic.w	r3, r3, #10
 8006958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f023 0210 	bic.w	r2, r3, #16
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	031b      	lsls	r3, r3, #12
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f043 0307 	orr.w	r3, r3, #7
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	021a      	lsls	r2, r3, #8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	609a      	str	r2, [r3, #8]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e046      	b.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af4:	d009      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a12      	ldr	r2, [pc, #72]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d10c      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40000800 	.word	0x40000800

08006b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <__cvt>:
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b76:	461f      	mov	r7, r3
 8006b78:	bfbb      	ittet	lt
 8006b7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b7e:	461f      	movlt	r7, r3
 8006b80:	2300      	movge	r3, #0
 8006b82:	232d      	movlt	r3, #45	; 0x2d
 8006b84:	b088      	sub	sp, #32
 8006b86:	4614      	mov	r4, r2
 8006b88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b8c:	7013      	strb	r3, [r2, #0]
 8006b8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006b94:	f023 0820 	bic.w	r8, r3, #32
 8006b98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b9c:	d005      	beq.n	8006baa <__cvt+0x3a>
 8006b9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ba2:	d100      	bne.n	8006ba6 <__cvt+0x36>
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e000      	b.n	8006bac <__cvt+0x3c>
 8006baa:	2303      	movs	r3, #3
 8006bac:	aa07      	add	r2, sp, #28
 8006bae:	9204      	str	r2, [sp, #16]
 8006bb0:	aa06      	add	r2, sp, #24
 8006bb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006bb6:	e9cd 3500 	strd	r3, r5, [sp]
 8006bba:	4622      	mov	r2, r4
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	f000 fe9b 	bl	80078f8 <_dtoa_r>
 8006bc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	d102      	bne.n	8006bd0 <__cvt+0x60>
 8006bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bcc:	07db      	lsls	r3, r3, #31
 8006bce:	d522      	bpl.n	8006c16 <__cvt+0xa6>
 8006bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd4:	eb06 0905 	add.w	r9, r6, r5
 8006bd8:	d110      	bne.n	8006bfc <__cvt+0x8c>
 8006bda:	7833      	ldrb	r3, [r6, #0]
 8006bdc:	2b30      	cmp	r3, #48	; 0x30
 8006bde:	d10a      	bne.n	8006bf6 <__cvt+0x86>
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	4620      	mov	r0, r4
 8006be6:	4639      	mov	r1, r7
 8006be8:	f7f9 fede 	bl	80009a8 <__aeabi_dcmpeq>
 8006bec:	b918      	cbnz	r0, 8006bf6 <__cvt+0x86>
 8006bee:	f1c5 0501 	rsb	r5, r5, #1
 8006bf2:	f8ca 5000 	str.w	r5, [sl]
 8006bf6:	f8da 3000 	ldr.w	r3, [sl]
 8006bfa:	4499      	add	r9, r3
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4620      	mov	r0, r4
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8006c08:	b108      	cbz	r0, 8006c0e <__cvt+0x9e>
 8006c0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c0e:	2230      	movs	r2, #48	; 0x30
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	454b      	cmp	r3, r9
 8006c14:	d307      	bcc.n	8006c26 <__cvt+0xb6>
 8006c16:	4630      	mov	r0, r6
 8006c18:	9b07      	ldr	r3, [sp, #28]
 8006c1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c1c:	1b9b      	subs	r3, r3, r6
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	b008      	add	sp, #32
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	1c59      	adds	r1, r3, #1
 8006c28:	9107      	str	r1, [sp, #28]
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e7f0      	b.n	8006c10 <__cvt+0xa0>

08006c2e <__exponent>:
 8006c2e:	4603      	mov	r3, r0
 8006c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c32:	2900      	cmp	r1, #0
 8006c34:	f803 2b02 	strb.w	r2, [r3], #2
 8006c38:	bfb6      	itet	lt
 8006c3a:	222d      	movlt	r2, #45	; 0x2d
 8006c3c:	222b      	movge	r2, #43	; 0x2b
 8006c3e:	4249      	neglt	r1, r1
 8006c40:	2909      	cmp	r1, #9
 8006c42:	7042      	strb	r2, [r0, #1]
 8006c44:	dd2a      	ble.n	8006c9c <__exponent+0x6e>
 8006c46:	f10d 0207 	add.w	r2, sp, #7
 8006c4a:	4617      	mov	r7, r2
 8006c4c:	260a      	movs	r6, #10
 8006c4e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c52:	4694      	mov	ip, r2
 8006c54:	fb06 1415 	mls	r4, r6, r5, r1
 8006c58:	3430      	adds	r4, #48	; 0x30
 8006c5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c5e:	460c      	mov	r4, r1
 8006c60:	2c63      	cmp	r4, #99	; 0x63
 8006c62:	4629      	mov	r1, r5
 8006c64:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c68:	dcf1      	bgt.n	8006c4e <__exponent+0x20>
 8006c6a:	3130      	adds	r1, #48	; 0x30
 8006c6c:	f1ac 0402 	sub.w	r4, ip, #2
 8006c70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c74:	4622      	mov	r2, r4
 8006c76:	1c41      	adds	r1, r0, #1
 8006c78:	42ba      	cmp	r2, r7
 8006c7a:	d30a      	bcc.n	8006c92 <__exponent+0x64>
 8006c7c:	f10d 0209 	add.w	r2, sp, #9
 8006c80:	eba2 020c 	sub.w	r2, r2, ip
 8006c84:	42bc      	cmp	r4, r7
 8006c86:	bf88      	it	hi
 8006c88:	2200      	movhi	r2, #0
 8006c8a:	4413      	add	r3, r2
 8006c8c:	1a18      	subs	r0, r3, r0
 8006c8e:	b003      	add	sp, #12
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c92:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c96:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c9a:	e7ed      	b.n	8006c78 <__exponent+0x4a>
 8006c9c:	2330      	movs	r3, #48	; 0x30
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	7083      	strb	r3, [r0, #2]
 8006ca2:	70c1      	strb	r1, [r0, #3]
 8006ca4:	1d03      	adds	r3, r0, #4
 8006ca6:	e7f1      	b.n	8006c8c <__exponent+0x5e>

08006ca8 <_printf_float>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	b091      	sub	sp, #68	; 0x44
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	461f      	mov	r7, r3
 8006cb8:	4605      	mov	r5, r0
 8006cba:	f000 fcff 	bl	80076bc <_localeconv_r>
 8006cbe:	6803      	ldr	r3, [r0, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	f7f9 fa44 	bl	8000150 <strlen>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	930e      	str	r3, [sp, #56]	; 0x38
 8006ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd0:	900a      	str	r0, [sp, #40]	; 0x28
 8006cd2:	3307      	adds	r3, #7
 8006cd4:	f023 0307 	bic.w	r3, r3, #7
 8006cd8:	f103 0208 	add.w	r2, r3, #8
 8006cdc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8006ce4:	f8c8 2000 	str.w	r2, [r8]
 8006ce8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006cec:	4652      	mov	r2, sl
 8006cee:	4643      	mov	r3, r8
 8006cf0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cf4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	4650      	mov	r0, sl
 8006d00:	4b9c      	ldr	r3, [pc, #624]	; (8006f74 <_printf_float+0x2cc>)
 8006d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d04:	f7f9 fe82 	bl	8000a0c <__aeabi_dcmpun>
 8006d08:	bb70      	cbnz	r0, 8006d68 <_printf_float+0xc0>
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	4650      	mov	r0, sl
 8006d10:	4b98      	ldr	r3, [pc, #608]	; (8006f74 <_printf_float+0x2cc>)
 8006d12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d14:	f7f9 fe5c 	bl	80009d0 <__aeabi_dcmple>
 8006d18:	bb30      	cbnz	r0, 8006d68 <_printf_float+0xc0>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4650      	mov	r0, sl
 8006d20:	4641      	mov	r1, r8
 8006d22:	f7f9 fe4b 	bl	80009bc <__aeabi_dcmplt>
 8006d26:	b110      	cbz	r0, 8006d2e <_printf_float+0x86>
 8006d28:	232d      	movs	r3, #45	; 0x2d
 8006d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d2e:	4a92      	ldr	r2, [pc, #584]	; (8006f78 <_printf_float+0x2d0>)
 8006d30:	4b92      	ldr	r3, [pc, #584]	; (8006f7c <_printf_float+0x2d4>)
 8006d32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d36:	bf94      	ite	ls
 8006d38:	4690      	movls	r8, r2
 8006d3a:	4698      	movhi	r8, r3
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	f04f 0a00 	mov.w	sl, #0
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	f02b 0304 	bic.w	r3, fp, #4
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	4633      	mov	r3, r6
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	9700      	str	r7, [sp, #0]
 8006d52:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d54:	f000 f9d6 	bl	8007104 <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	f040 8090 	bne.w	8006e7e <_printf_float+0x1d6>
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	b011      	add	sp, #68	; 0x44
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4643      	mov	r3, r8
 8006d6c:	4650      	mov	r0, sl
 8006d6e:	4641      	mov	r1, r8
 8006d70:	f7f9 fe4c 	bl	8000a0c <__aeabi_dcmpun>
 8006d74:	b148      	cbz	r0, 8006d8a <_printf_float+0xe2>
 8006d76:	f1b8 0f00 	cmp.w	r8, #0
 8006d7a:	bfb8      	it	lt
 8006d7c:	232d      	movlt	r3, #45	; 0x2d
 8006d7e:	4a80      	ldr	r2, [pc, #512]	; (8006f80 <_printf_float+0x2d8>)
 8006d80:	bfb8      	it	lt
 8006d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d86:	4b7f      	ldr	r3, [pc, #508]	; (8006f84 <_printf_float+0x2dc>)
 8006d88:	e7d3      	b.n	8006d32 <_printf_float+0x8a>
 8006d8a:	6863      	ldr	r3, [r4, #4]
 8006d8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	d142      	bne.n	8006e1a <_printf_float+0x172>
 8006d94:	2306      	movs	r3, #6
 8006d96:	6063      	str	r3, [r4, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	9206      	str	r2, [sp, #24]
 8006d9c:	aa0e      	add	r2, sp, #56	; 0x38
 8006d9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006da2:	aa0d      	add	r2, sp, #52	; 0x34
 8006da4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006da8:	9203      	str	r2, [sp, #12]
 8006daa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006dae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	4652      	mov	r2, sl
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4628      	mov	r0, r5
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8006dc0:	f7ff fed6 	bl	8006b70 <__cvt>
 8006dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	2947      	cmp	r1, #71	; 0x47
 8006dca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dcc:	d108      	bne.n	8006de0 <_printf_float+0x138>
 8006dce:	1cc8      	adds	r0, r1, #3
 8006dd0:	db02      	blt.n	8006dd8 <_printf_float+0x130>
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	dd40      	ble.n	8006e5a <_printf_float+0x1b2>
 8006dd8:	f1a9 0902 	sub.w	r9, r9, #2
 8006ddc:	fa5f f989 	uxtb.w	r9, r9
 8006de0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006de4:	d81f      	bhi.n	8006e26 <_printf_float+0x17e>
 8006de6:	464a      	mov	r2, r9
 8006de8:	3901      	subs	r1, #1
 8006dea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dee:	910d      	str	r1, [sp, #52]	; 0x34
 8006df0:	f7ff ff1d 	bl	8006c2e <__exponent>
 8006df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006df6:	4682      	mov	sl, r0
 8006df8:	1813      	adds	r3, r2, r0
 8006dfa:	2a01      	cmp	r2, #1
 8006dfc:	6123      	str	r3, [r4, #16]
 8006dfe:	dc02      	bgt.n	8006e06 <_printf_float+0x15e>
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	07d2      	lsls	r2, r2, #31
 8006e04:	d501      	bpl.n	8006e0a <_printf_float+0x162>
 8006e06:	3301      	adds	r3, #1
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d09b      	beq.n	8006d4a <_printf_float+0xa2>
 8006e12:	232d      	movs	r3, #45	; 0x2d
 8006e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e18:	e797      	b.n	8006d4a <_printf_float+0xa2>
 8006e1a:	2947      	cmp	r1, #71	; 0x47
 8006e1c:	d1bc      	bne.n	8006d98 <_printf_float+0xf0>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ba      	bne.n	8006d98 <_printf_float+0xf0>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e7b7      	b.n	8006d96 <_printf_float+0xee>
 8006e26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e2a:	d118      	bne.n	8006e5e <_printf_float+0x1b6>
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	dd0b      	ble.n	8006e4a <_printf_float+0x1a2>
 8006e32:	6121      	str	r1, [r4, #16]
 8006e34:	b913      	cbnz	r3, 8006e3c <_printf_float+0x194>
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	07d0      	lsls	r0, r2, #31
 8006e3a:	d502      	bpl.n	8006e42 <_printf_float+0x19a>
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	440b      	add	r3, r1
 8006e40:	6123      	str	r3, [r4, #16]
 8006e42:	f04f 0a00 	mov.w	sl, #0
 8006e46:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e48:	e7df      	b.n	8006e0a <_printf_float+0x162>
 8006e4a:	b913      	cbnz	r3, 8006e52 <_printf_float+0x1aa>
 8006e4c:	6822      	ldr	r2, [r4, #0]
 8006e4e:	07d2      	lsls	r2, r2, #31
 8006e50:	d501      	bpl.n	8006e56 <_printf_float+0x1ae>
 8006e52:	3302      	adds	r3, #2
 8006e54:	e7f4      	b.n	8006e40 <_printf_float+0x198>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7f2      	b.n	8006e40 <_printf_float+0x198>
 8006e5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e60:	4299      	cmp	r1, r3
 8006e62:	db05      	blt.n	8006e70 <_printf_float+0x1c8>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	6121      	str	r1, [r4, #16]
 8006e68:	07d8      	lsls	r0, r3, #31
 8006e6a:	d5ea      	bpl.n	8006e42 <_printf_float+0x19a>
 8006e6c:	1c4b      	adds	r3, r1, #1
 8006e6e:	e7e7      	b.n	8006e40 <_printf_float+0x198>
 8006e70:	2900      	cmp	r1, #0
 8006e72:	bfcc      	ite	gt
 8006e74:	2201      	movgt	r2, #1
 8006e76:	f1c1 0202 	rsble	r2, r1, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	e7e0      	b.n	8006e40 <_printf_float+0x198>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	055a      	lsls	r2, r3, #21
 8006e82:	d407      	bmi.n	8006e94 <_printf_float+0x1ec>
 8006e84:	6923      	ldr	r3, [r4, #16]
 8006e86:	4642      	mov	r2, r8
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d12b      	bne.n	8006eea <_printf_float+0x242>
 8006e92:	e764      	b.n	8006d5e <_printf_float+0xb6>
 8006e94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e98:	f240 80dd 	bls.w	8007056 <_printf_float+0x3ae>
 8006e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f7f9 fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d033      	beq.n	8006f14 <_printf_float+0x26c>
 8006eac:	2301      	movs	r3, #1
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	4a35      	ldr	r2, [pc, #212]	; (8006f88 <_printf_float+0x2e0>)
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f43f af51 	beq.w	8006d5e <_printf_float+0xb6>
 8006ebc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	db02      	blt.n	8006eca <_printf_float+0x222>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07d8      	lsls	r0, r3, #31
 8006ec8:	d50f      	bpl.n	8006eea <_printf_float+0x242>
 8006eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f43f af42 	beq.w	8006d5e <_printf_float+0xb6>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	f104 091a 	add.w	r9, r4, #26
 8006ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	4543      	cmp	r3, r8
 8006ee8:	dc09      	bgt.n	8006efe <_printf_float+0x256>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	079b      	lsls	r3, r3, #30
 8006eee:	f100 8104 	bmi.w	80070fa <_printf_float+0x452>
 8006ef2:	68e0      	ldr	r0, [r4, #12]
 8006ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	bfb8      	it	lt
 8006efa:	4618      	movlt	r0, r3
 8006efc:	e731      	b.n	8006d62 <_printf_float+0xba>
 8006efe:	2301      	movs	r3, #1
 8006f00:	464a      	mov	r2, r9
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f af28 	beq.w	8006d5e <_printf_float+0xb6>
 8006f0e:	f108 0801 	add.w	r8, r8, #1
 8006f12:	e7e6      	b.n	8006ee2 <_printf_float+0x23a>
 8006f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dc38      	bgt.n	8006f8c <_printf_float+0x2e4>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <_printf_float+0x2e0>)
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f af1a 	beq.w	8006d5e <_printf_float+0xb6>
 8006f2a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	d102      	bne.n	8006f38 <_printf_float+0x290>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	07d9      	lsls	r1, r3, #31
 8006f36:	d5d8      	bpl.n	8006eea <_printf_float+0x242>
 8006f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	f43f af0b 	beq.w	8006d5e <_printf_float+0xb6>
 8006f48:	f04f 0900 	mov.w	r9, #0
 8006f4c:	f104 0a1a 	add.w	sl, r4, #26
 8006f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f52:	425b      	negs	r3, r3
 8006f54:	454b      	cmp	r3, r9
 8006f56:	dc01      	bgt.n	8006f5c <_printf_float+0x2b4>
 8006f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5a:	e794      	b.n	8006e86 <_printf_float+0x1de>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4652      	mov	r2, sl
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f aef9 	beq.w	8006d5e <_printf_float+0xb6>
 8006f6c:	f109 0901 	add.w	r9, r9, #1
 8006f70:	e7ee      	b.n	8006f50 <_printf_float+0x2a8>
 8006f72:	bf00      	nop
 8006f74:	7fefffff 	.word	0x7fefffff
 8006f78:	0800b71e 	.word	0x0800b71e
 8006f7c:	0800b722 	.word	0x0800b722
 8006f80:	0800b726 	.word	0x0800b726
 8006f84:	0800b72a 	.word	0x0800b72a
 8006f88:	0800b72e 	.word	0x0800b72e
 8006f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f90:	429a      	cmp	r2, r3
 8006f92:	bfa8      	it	ge
 8006f94:	461a      	movge	r2, r3
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	4691      	mov	r9, r2
 8006f9a:	dc37      	bgt.n	800700c <_printf_float+0x364>
 8006f9c:	f04f 0b00 	mov.w	fp, #0
 8006fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fa4:	f104 021a 	add.w	r2, r4, #26
 8006fa8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006fac:	ebaa 0309 	sub.w	r3, sl, r9
 8006fb0:	455b      	cmp	r3, fp
 8006fb2:	dc33      	bgt.n	800701c <_printf_float+0x374>
 8006fb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	db3b      	blt.n	8007034 <_printf_float+0x38c>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	07da      	lsls	r2, r3, #31
 8006fc0:	d438      	bmi.n	8007034 <_printf_float+0x38c>
 8006fc2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006fc6:	eba2 0903 	sub.w	r9, r2, r3
 8006fca:	eba2 020a 	sub.w	r2, r2, sl
 8006fce:	4591      	cmp	r9, r2
 8006fd0:	bfa8      	it	ge
 8006fd2:	4691      	movge	r9, r2
 8006fd4:	f1b9 0f00 	cmp.w	r9, #0
 8006fd8:	dc34      	bgt.n	8007044 <_printf_float+0x39c>
 8006fda:	f04f 0800 	mov.w	r8, #0
 8006fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe2:	f104 0a1a 	add.w	sl, r4, #26
 8006fe6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	eba3 0309 	sub.w	r3, r3, r9
 8006ff0:	4543      	cmp	r3, r8
 8006ff2:	f77f af7a 	ble.w	8006eea <_printf_float+0x242>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b8      	blx	r7
 8007000:	3001      	adds	r0, #1
 8007002:	f43f aeac 	beq.w	8006d5e <_printf_float+0xb6>
 8007006:	f108 0801 	add.w	r8, r8, #1
 800700a:	e7ec      	b.n	8006fe6 <_printf_float+0x33e>
 800700c:	4613      	mov	r3, r2
 800700e:	4631      	mov	r1, r6
 8007010:	4642      	mov	r2, r8
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	d1c0      	bne.n	8006f9c <_printf_float+0x2f4>
 800701a:	e6a0      	b.n	8006d5e <_printf_float+0xb6>
 800701c:	2301      	movs	r3, #1
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	920b      	str	r2, [sp, #44]	; 0x2c
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	f43f ae99 	beq.w	8006d5e <_printf_float+0xb6>
 800702c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800702e:	f10b 0b01 	add.w	fp, fp, #1
 8007032:	e7b9      	b.n	8006fa8 <_printf_float+0x300>
 8007034:	4631      	mov	r1, r6
 8007036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	d1bf      	bne.n	8006fc2 <_printf_float+0x31a>
 8007042:	e68c      	b.n	8006d5e <_printf_float+0xb6>
 8007044:	464b      	mov	r3, r9
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	eb08 020a 	add.w	r2, r8, sl
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	d1c2      	bne.n	8006fda <_printf_float+0x332>
 8007054:	e683      	b.n	8006d5e <_printf_float+0xb6>
 8007056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007058:	2a01      	cmp	r2, #1
 800705a:	dc01      	bgt.n	8007060 <_printf_float+0x3b8>
 800705c:	07db      	lsls	r3, r3, #31
 800705e:	d539      	bpl.n	80070d4 <_printf_float+0x42c>
 8007060:	2301      	movs	r3, #1
 8007062:	4642      	mov	r2, r8
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae77 	beq.w	8006d5e <_printf_float+0xb6>
 8007070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007074:	4631      	mov	r1, r6
 8007076:	4628      	mov	r0, r5
 8007078:	47b8      	blx	r7
 800707a:	3001      	adds	r0, #1
 800707c:	f43f ae6f 	beq.w	8006d5e <_printf_float+0xb6>
 8007080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007084:	2200      	movs	r2, #0
 8007086:	2300      	movs	r3, #0
 8007088:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800708c:	f7f9 fc8c 	bl	80009a8 <__aeabi_dcmpeq>
 8007090:	b9d8      	cbnz	r0, 80070ca <_printf_float+0x422>
 8007092:	f109 33ff 	add.w	r3, r9, #4294967295
 8007096:	f108 0201 	add.w	r2, r8, #1
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	d10e      	bne.n	80070c2 <_printf_float+0x41a>
 80070a4:	e65b      	b.n	8006d5e <_printf_float+0xb6>
 80070a6:	2301      	movs	r3, #1
 80070a8:	464a      	mov	r2, r9
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae54 	beq.w	8006d5e <_printf_float+0xb6>
 80070b6:	f108 0801 	add.w	r8, r8, #1
 80070ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070bc:	3b01      	subs	r3, #1
 80070be:	4543      	cmp	r3, r8
 80070c0:	dcf1      	bgt.n	80070a6 <_printf_float+0x3fe>
 80070c2:	4653      	mov	r3, sl
 80070c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070c8:	e6de      	b.n	8006e88 <_printf_float+0x1e0>
 80070ca:	f04f 0800 	mov.w	r8, #0
 80070ce:	f104 091a 	add.w	r9, r4, #26
 80070d2:	e7f2      	b.n	80070ba <_printf_float+0x412>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4642      	mov	r2, r8
 80070d8:	e7df      	b.n	800709a <_printf_float+0x3f2>
 80070da:	2301      	movs	r3, #1
 80070dc:	464a      	mov	r2, r9
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae3a 	beq.w	8006d5e <_printf_float+0xb6>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070f2:	1a5b      	subs	r3, r3, r1
 80070f4:	4543      	cmp	r3, r8
 80070f6:	dcf0      	bgt.n	80070da <_printf_float+0x432>
 80070f8:	e6fb      	b.n	8006ef2 <_printf_float+0x24a>
 80070fa:	f04f 0800 	mov.w	r8, #0
 80070fe:	f104 0919 	add.w	r9, r4, #25
 8007102:	e7f4      	b.n	80070ee <_printf_float+0x446>

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4616      	mov	r6, r2
 800710a:	4699      	mov	r9, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	4607      	mov	r7, r0
 8007112:	4293      	cmp	r3, r2
 8007114:	bfb8      	it	lt
 8007116:	4613      	movlt	r3, r2
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800711e:	460c      	mov	r4, r1
 8007120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007124:	b10a      	cbz	r2, 800712a <_printf_common+0x26>
 8007126:	3301      	adds	r3, #1
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	0699      	lsls	r1, r3, #26
 800712e:	bf42      	ittt	mi
 8007130:	6833      	ldrmi	r3, [r6, #0]
 8007132:	3302      	addmi	r3, #2
 8007134:	6033      	strmi	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d106      	bne.n	800714c <_printf_common+0x48>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	6832      	ldr	r2, [r6, #0]
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ab      	cmp	r3, r5
 800714a:	dc2b      	bgt.n	80071a4 <_printf_common+0xa0>
 800714c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007150:	1e13      	subs	r3, r2, #0
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	bf18      	it	ne
 8007156:	2301      	movne	r3, #1
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d430      	bmi.n	80071be <_printf_common+0xba>
 800715c:	4649      	mov	r1, r9
 800715e:	4638      	mov	r0, r7
 8007160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007164:	47c0      	blx	r8
 8007166:	3001      	adds	r0, #1
 8007168:	d023      	beq.n	80071b2 <_printf_common+0xae>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	2b04      	cmp	r3, #4
 8007174:	bf14      	ite	ne
 8007176:	2500      	movne	r5, #0
 8007178:	6833      	ldreq	r3, [r6, #0]
 800717a:	f04f 0600 	mov.w	r6, #0
 800717e:	bf08      	it	eq
 8007180:	68e5      	ldreq	r5, [r4, #12]
 8007182:	f104 041a 	add.w	r4, r4, #26
 8007186:	bf08      	it	eq
 8007188:	1aed      	subeq	r5, r5, r3
 800718a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800718e:	bf08      	it	eq
 8007190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007194:	4293      	cmp	r3, r2
 8007196:	bfc4      	itt	gt
 8007198:	1a9b      	subgt	r3, r3, r2
 800719a:	18ed      	addgt	r5, r5, r3
 800719c:	42b5      	cmp	r5, r6
 800719e:	d11a      	bne.n	80071d6 <_printf_common+0xd2>
 80071a0:	2000      	movs	r0, #0
 80071a2:	e008      	b.n	80071b6 <_printf_common+0xb2>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4652      	mov	r2, sl
 80071a8:	4649      	mov	r1, r9
 80071aa:	4638      	mov	r0, r7
 80071ac:	47c0      	blx	r8
 80071ae:	3001      	adds	r0, #1
 80071b0:	d103      	bne.n	80071ba <_printf_common+0xb6>
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	3501      	adds	r5, #1
 80071bc:	e7c1      	b.n	8007142 <_printf_common+0x3e>
 80071be:	2030      	movs	r0, #48	; 0x30
 80071c0:	18e1      	adds	r1, r4, r3
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071cc:	4422      	add	r2, r4
 80071ce:	3302      	adds	r3, #2
 80071d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d4:	e7c2      	b.n	800715c <_printf_common+0x58>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4622      	mov	r2, r4
 80071da:	4649      	mov	r1, r9
 80071dc:	4638      	mov	r0, r7
 80071de:	47c0      	blx	r8
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0e6      	beq.n	80071b2 <_printf_common+0xae>
 80071e4:	3601      	adds	r6, #1
 80071e6:	e7d9      	b.n	800719c <_printf_common+0x98>

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	7e0f      	ldrb	r7, [r1, #24]
 80071ee:	4691      	mov	r9, r2
 80071f0:	2f78      	cmp	r7, #120	; 0x78
 80071f2:	4680      	mov	r8, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	469a      	mov	sl, r3
 80071f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	; 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d5 	beq.w	80073b4 <_printf_i+0x1cc>
 800720a:	2f58      	cmp	r7, #88	; 0x58
 800720c:	f000 80c1 	beq.w	8007392 <_printf_i+0x1aa>
 8007210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a101      	add	r1, pc, #4	; (adr r1, 8007228 <_printf_i+0x40>)
 8007224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	0800739b 	.word	0x0800739b
 8007258:	080072c1 	.word	0x080072c1
 800725c:	08007355 	.word	0x08007355
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073bd 	.word	0x080073bd
 800726c:	08007211 	.word	0x08007211
 8007270:	080072c1 	.word	0x080072c1
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	0800735d 	.word	0x0800735d
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	602a      	str	r2, [r5, #0]
 8007288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e0a0      	b.n	80073d6 <_printf_i+0x1ee>
 8007294:	6820      	ldr	r0, [r4, #0]
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	0607      	lsls	r7, r0, #24
 800729a:	f103 0104 	add.w	r1, r3, #4
 800729e:	6029      	str	r1, [r5, #0]
 80072a0:	d501      	bpl.n	80072a6 <_printf_i+0xbe>
 80072a2:	681e      	ldr	r6, [r3, #0]
 80072a4:	e003      	b.n	80072ae <_printf_i+0xc6>
 80072a6:	0646      	lsls	r6, r0, #25
 80072a8:	d5fb      	bpl.n	80072a2 <_printf_i+0xba>
 80072aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072ae:	2e00      	cmp	r6, #0
 80072b0:	da03      	bge.n	80072ba <_printf_i+0xd2>
 80072b2:	232d      	movs	r3, #45	; 0x2d
 80072b4:	4276      	negs	r6, r6
 80072b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ba:	230a      	movs	r3, #10
 80072bc:	4859      	ldr	r0, [pc, #356]	; (8007424 <_printf_i+0x23c>)
 80072be:	e012      	b.n	80072e6 <_printf_i+0xfe>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	1d19      	adds	r1, r3, #4
 80072c6:	6029      	str	r1, [r5, #0]
 80072c8:	0605      	lsls	r5, r0, #24
 80072ca:	d501      	bpl.n	80072d0 <_printf_i+0xe8>
 80072cc:	681e      	ldr	r6, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <_printf_i+0xee>
 80072d0:	0641      	lsls	r1, r0, #25
 80072d2:	d5fb      	bpl.n	80072cc <_printf_i+0xe4>
 80072d4:	881e      	ldrh	r6, [r3, #0]
 80072d6:	2f6f      	cmp	r7, #111	; 0x6f
 80072d8:	bf0c      	ite	eq
 80072da:	2308      	moveq	r3, #8
 80072dc:	230a      	movne	r3, #10
 80072de:	4851      	ldr	r0, [pc, #324]	; (8007424 <_printf_i+0x23c>)
 80072e0:	2100      	movs	r1, #0
 80072e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072e6:	6865      	ldr	r5, [r4, #4]
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	bfa8      	it	ge
 80072ec:	6821      	ldrge	r1, [r4, #0]
 80072ee:	60a5      	str	r5, [r4, #8]
 80072f0:	bfa4      	itt	ge
 80072f2:	f021 0104 	bicge.w	r1, r1, #4
 80072f6:	6021      	strge	r1, [r4, #0]
 80072f8:	b90e      	cbnz	r6, 80072fe <_printf_i+0x116>
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	d04b      	beq.n	8007396 <_printf_i+0x1ae>
 80072fe:	4615      	mov	r5, r2
 8007300:	fbb6 f1f3 	udiv	r1, r6, r3
 8007304:	fb03 6711 	mls	r7, r3, r1, r6
 8007308:	5dc7      	ldrb	r7, [r0, r7]
 800730a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800730e:	4637      	mov	r7, r6
 8007310:	42bb      	cmp	r3, r7
 8007312:	460e      	mov	r6, r1
 8007314:	d9f4      	bls.n	8007300 <_printf_i+0x118>
 8007316:	2b08      	cmp	r3, #8
 8007318:	d10b      	bne.n	8007332 <_printf_i+0x14a>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	07de      	lsls	r6, r3, #31
 800731e:	d508      	bpl.n	8007332 <_printf_i+0x14a>
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	6861      	ldr	r1, [r4, #4]
 8007324:	4299      	cmp	r1, r3
 8007326:	bfde      	ittt	le
 8007328:	2330      	movle	r3, #48	; 0x30
 800732a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800732e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007332:	1b52      	subs	r2, r2, r5
 8007334:	6122      	str	r2, [r4, #16]
 8007336:	464b      	mov	r3, r9
 8007338:	4621      	mov	r1, r4
 800733a:	4640      	mov	r0, r8
 800733c:	f8cd a000 	str.w	sl, [sp]
 8007340:	aa03      	add	r2, sp, #12
 8007342:	f7ff fedf 	bl	8007104 <_printf_common>
 8007346:	3001      	adds	r0, #1
 8007348:	d14a      	bne.n	80073e0 <_printf_i+0x1f8>
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	b004      	add	sp, #16
 8007350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	f043 0320 	orr.w	r3, r3, #32
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	2778      	movs	r7, #120	; 0x78
 800735e:	4832      	ldr	r0, [pc, #200]	; (8007428 <_printf_i+0x240>)
 8007360:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	6829      	ldr	r1, [r5, #0]
 8007368:	061f      	lsls	r7, r3, #24
 800736a:	f851 6b04 	ldr.w	r6, [r1], #4
 800736e:	d402      	bmi.n	8007376 <_printf_i+0x18e>
 8007370:	065f      	lsls	r7, r3, #25
 8007372:	bf48      	it	mi
 8007374:	b2b6      	uxthmi	r6, r6
 8007376:	07df      	lsls	r7, r3, #31
 8007378:	bf48      	it	mi
 800737a:	f043 0320 	orrmi.w	r3, r3, #32
 800737e:	6029      	str	r1, [r5, #0]
 8007380:	bf48      	it	mi
 8007382:	6023      	strmi	r3, [r4, #0]
 8007384:	b91e      	cbnz	r6, 800738e <_printf_i+0x1a6>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	f023 0320 	bic.w	r3, r3, #32
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	2310      	movs	r3, #16
 8007390:	e7a6      	b.n	80072e0 <_printf_i+0xf8>
 8007392:	4824      	ldr	r0, [pc, #144]	; (8007424 <_printf_i+0x23c>)
 8007394:	e7e4      	b.n	8007360 <_printf_i+0x178>
 8007396:	4615      	mov	r5, r2
 8007398:	e7bd      	b.n	8007316 <_printf_i+0x12e>
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	6826      	ldr	r6, [r4, #0]
 800739e:	1d18      	adds	r0, r3, #4
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	6028      	str	r0, [r5, #0]
 80073a4:	0635      	lsls	r5, r6, #24
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	d501      	bpl.n	80073ae <_printf_i+0x1c6>
 80073aa:	6019      	str	r1, [r3, #0]
 80073ac:	e002      	b.n	80073b4 <_printf_i+0x1cc>
 80073ae:	0670      	lsls	r0, r6, #25
 80073b0:	d5fb      	bpl.n	80073aa <_printf_i+0x1c2>
 80073b2:	8019      	strh	r1, [r3, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	4615      	mov	r5, r2
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	e7bc      	b.n	8007336 <_printf_i+0x14e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	2100      	movs	r1, #0
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	4628      	mov	r0, r5
 80073ca:	f000 f9ee 	bl	80077aa <memchr>
 80073ce:	b108      	cbz	r0, 80073d4 <_printf_i+0x1ec>
 80073d0:	1b40      	subs	r0, r0, r5
 80073d2:	6060      	str	r0, [r4, #4]
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	6123      	str	r3, [r4, #16]
 80073d8:	2300      	movs	r3, #0
 80073da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073de:	e7aa      	b.n	8007336 <_printf_i+0x14e>
 80073e0:	462a      	mov	r2, r5
 80073e2:	4649      	mov	r1, r9
 80073e4:	4640      	mov	r0, r8
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	47d0      	blx	sl
 80073ea:	3001      	adds	r0, #1
 80073ec:	d0ad      	beq.n	800734a <_printf_i+0x162>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	079b      	lsls	r3, r3, #30
 80073f2:	d413      	bmi.n	800741c <_printf_i+0x234>
 80073f4:	68e0      	ldr	r0, [r4, #12]
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	4298      	cmp	r0, r3
 80073fa:	bfb8      	it	lt
 80073fc:	4618      	movlt	r0, r3
 80073fe:	e7a6      	b.n	800734e <_printf_i+0x166>
 8007400:	2301      	movs	r3, #1
 8007402:	4632      	mov	r2, r6
 8007404:	4649      	mov	r1, r9
 8007406:	4640      	mov	r0, r8
 8007408:	47d0      	blx	sl
 800740a:	3001      	adds	r0, #1
 800740c:	d09d      	beq.n	800734a <_printf_i+0x162>
 800740e:	3501      	adds	r5, #1
 8007410:	68e3      	ldr	r3, [r4, #12]
 8007412:	9903      	ldr	r1, [sp, #12]
 8007414:	1a5b      	subs	r3, r3, r1
 8007416:	42ab      	cmp	r3, r5
 8007418:	dcf2      	bgt.n	8007400 <_printf_i+0x218>
 800741a:	e7eb      	b.n	80073f4 <_printf_i+0x20c>
 800741c:	2500      	movs	r5, #0
 800741e:	f104 0619 	add.w	r6, r4, #25
 8007422:	e7f5      	b.n	8007410 <_printf_i+0x228>
 8007424:	0800b730 	.word	0x0800b730
 8007428:	0800b741 	.word	0x0800b741

0800742c <std>:
 800742c:	2300      	movs	r3, #0
 800742e:	b510      	push	{r4, lr}
 8007430:	4604      	mov	r4, r0
 8007432:	e9c0 3300 	strd	r3, r3, [r0]
 8007436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800743a:	6083      	str	r3, [r0, #8]
 800743c:	8181      	strh	r1, [r0, #12]
 800743e:	6643      	str	r3, [r0, #100]	; 0x64
 8007440:	81c2      	strh	r2, [r0, #14]
 8007442:	6183      	str	r3, [r0, #24]
 8007444:	4619      	mov	r1, r3
 8007446:	2208      	movs	r2, #8
 8007448:	305c      	adds	r0, #92	; 0x5c
 800744a:	f000 f92e 	bl	80076aa <memset>
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <std+0x58>)
 8007450:	6224      	str	r4, [r4, #32]
 8007452:	6263      	str	r3, [r4, #36]	; 0x24
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <std+0x5c>)
 8007456:	62a3      	str	r3, [r4, #40]	; 0x28
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <std+0x60>)
 800745a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <std+0x64>)
 800745e:	6323      	str	r3, [r4, #48]	; 0x30
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <std+0x68>)
 8007462:	429c      	cmp	r4, r3
 8007464:	d006      	beq.n	8007474 <std+0x48>
 8007466:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800746a:	4294      	cmp	r4, r2
 800746c:	d002      	beq.n	8007474 <std+0x48>
 800746e:	33d0      	adds	r3, #208	; 0xd0
 8007470:	429c      	cmp	r4, r3
 8007472:	d105      	bne.n	8007480 <std+0x54>
 8007474:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800747c:	f000 b992 	b.w	80077a4 <__retarget_lock_init_recursive>
 8007480:	bd10      	pop	{r4, pc}
 8007482:	bf00      	nop
 8007484:	080075f1 	.word	0x080075f1
 8007488:	08007613 	.word	0x08007613
 800748c:	0800764b 	.word	0x0800764b
 8007490:	0800766f 	.word	0x0800766f
 8007494:	20000f40 	.word	0x20000f40

08007498 <stdio_exit_handler>:
 8007498:	4a02      	ldr	r2, [pc, #8]	; (80074a4 <stdio_exit_handler+0xc>)
 800749a:	4903      	ldr	r1, [pc, #12]	; (80074a8 <stdio_exit_handler+0x10>)
 800749c:	4803      	ldr	r0, [pc, #12]	; (80074ac <stdio_exit_handler+0x14>)
 800749e:	f000 b869 	b.w	8007574 <_fwalk_sglue>
 80074a2:	bf00      	nop
 80074a4:	20000038 	.word	0x20000038
 80074a8:	0800915d 	.word	0x0800915d
 80074ac:	20000044 	.word	0x20000044

080074b0 <cleanup_stdio>:
 80074b0:	6841      	ldr	r1, [r0, #4]
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <cleanup_stdio+0x34>)
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4299      	cmp	r1, r3
 80074b8:	4604      	mov	r4, r0
 80074ba:	d001      	beq.n	80074c0 <cleanup_stdio+0x10>
 80074bc:	f001 fe4e 	bl	800915c <_fflush_r>
 80074c0:	68a1      	ldr	r1, [r4, #8]
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <cleanup_stdio+0x38>)
 80074c4:	4299      	cmp	r1, r3
 80074c6:	d002      	beq.n	80074ce <cleanup_stdio+0x1e>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f001 fe47 	bl	800915c <_fflush_r>
 80074ce:	68e1      	ldr	r1, [r4, #12]
 80074d0:	4b06      	ldr	r3, [pc, #24]	; (80074ec <cleanup_stdio+0x3c>)
 80074d2:	4299      	cmp	r1, r3
 80074d4:	d004      	beq.n	80074e0 <cleanup_stdio+0x30>
 80074d6:	4620      	mov	r0, r4
 80074d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074dc:	f001 be3e 	b.w	800915c <_fflush_r>
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop
 80074e4:	20000f40 	.word	0x20000f40
 80074e8:	20000fa8 	.word	0x20000fa8
 80074ec:	20001010 	.word	0x20001010

080074f0 <global_stdio_init.part.0>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <global_stdio_init.part.0+0x30>)
 80074f4:	4c0b      	ldr	r4, [pc, #44]	; (8007524 <global_stdio_init.part.0+0x34>)
 80074f6:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <global_stdio_init.part.0+0x38>)
 80074f8:	4620      	mov	r0, r4
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	2104      	movs	r1, #4
 80074fe:	2200      	movs	r2, #0
 8007500:	f7ff ff94 	bl	800742c <std>
 8007504:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007508:	2201      	movs	r2, #1
 800750a:	2109      	movs	r1, #9
 800750c:	f7ff ff8e 	bl	800742c <std>
 8007510:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007514:	2202      	movs	r2, #2
 8007516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751a:	2112      	movs	r1, #18
 800751c:	f7ff bf86 	b.w	800742c <std>
 8007520:	20001078 	.word	0x20001078
 8007524:	20000f40 	.word	0x20000f40
 8007528:	08007499 	.word	0x08007499

0800752c <__sfp_lock_acquire>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sfp_lock_acquire+0x8>)
 800752e:	f000 b93a 	b.w	80077a6 <__retarget_lock_acquire_recursive>
 8007532:	bf00      	nop
 8007534:	20001081 	.word	0x20001081

08007538 <__sfp_lock_release>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__sfp_lock_release+0x8>)
 800753a:	f000 b935 	b.w	80077a8 <__retarget_lock_release_recursive>
 800753e:	bf00      	nop
 8007540:	20001081 	.word	0x20001081

08007544 <__sinit>:
 8007544:	b510      	push	{r4, lr}
 8007546:	4604      	mov	r4, r0
 8007548:	f7ff fff0 	bl	800752c <__sfp_lock_acquire>
 800754c:	6a23      	ldr	r3, [r4, #32]
 800754e:	b11b      	cbz	r3, 8007558 <__sinit+0x14>
 8007550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007554:	f7ff bff0 	b.w	8007538 <__sfp_lock_release>
 8007558:	4b04      	ldr	r3, [pc, #16]	; (800756c <__sinit+0x28>)
 800755a:	6223      	str	r3, [r4, #32]
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <__sinit+0x2c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f5      	bne.n	8007550 <__sinit+0xc>
 8007564:	f7ff ffc4 	bl	80074f0 <global_stdio_init.part.0>
 8007568:	e7f2      	b.n	8007550 <__sinit+0xc>
 800756a:	bf00      	nop
 800756c:	080074b1 	.word	0x080074b1
 8007570:	20001078 	.word	0x20001078

08007574 <_fwalk_sglue>:
 8007574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007578:	4607      	mov	r7, r0
 800757a:	4688      	mov	r8, r1
 800757c:	4614      	mov	r4, r2
 800757e:	2600      	movs	r6, #0
 8007580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007584:	f1b9 0901 	subs.w	r9, r9, #1
 8007588:	d505      	bpl.n	8007596 <_fwalk_sglue+0x22>
 800758a:	6824      	ldr	r4, [r4, #0]
 800758c:	2c00      	cmp	r4, #0
 800758e:	d1f7      	bne.n	8007580 <_fwalk_sglue+0xc>
 8007590:	4630      	mov	r0, r6
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d907      	bls.n	80075ac <_fwalk_sglue+0x38>
 800759c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075a0:	3301      	adds	r3, #1
 80075a2:	d003      	beq.n	80075ac <_fwalk_sglue+0x38>
 80075a4:	4629      	mov	r1, r5
 80075a6:	4638      	mov	r0, r7
 80075a8:	47c0      	blx	r8
 80075aa:	4306      	orrs	r6, r0
 80075ac:	3568      	adds	r5, #104	; 0x68
 80075ae:	e7e9      	b.n	8007584 <_fwalk_sglue+0x10>

080075b0 <siprintf>:
 80075b0:	b40e      	push	{r1, r2, r3}
 80075b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075b6:	b500      	push	{lr}
 80075b8:	b09c      	sub	sp, #112	; 0x70
 80075ba:	ab1d      	add	r3, sp, #116	; 0x74
 80075bc:	9002      	str	r0, [sp, #8]
 80075be:	9006      	str	r0, [sp, #24]
 80075c0:	9107      	str	r1, [sp, #28]
 80075c2:	9104      	str	r1, [sp, #16]
 80075c4:	4808      	ldr	r0, [pc, #32]	; (80075e8 <siprintf+0x38>)
 80075c6:	4909      	ldr	r1, [pc, #36]	; (80075ec <siprintf+0x3c>)
 80075c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075cc:	9105      	str	r1, [sp, #20]
 80075ce:	6800      	ldr	r0, [r0, #0]
 80075d0:	a902      	add	r1, sp, #8
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	f001 fc42 	bl	8008e5c <_svfiprintf_r>
 80075d8:	2200      	movs	r2, #0
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	b01c      	add	sp, #112	; 0x70
 80075e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e4:	b003      	add	sp, #12
 80075e6:	4770      	bx	lr
 80075e8:	20000090 	.word	0x20000090
 80075ec:	ffff0208 	.word	0xffff0208

080075f0 <__sread>:
 80075f0:	b510      	push	{r4, lr}
 80075f2:	460c      	mov	r4, r1
 80075f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f8:	f000 f886 	bl	8007708 <_read_r>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	bfab      	itete	ge
 8007600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007602:	89a3      	ldrhlt	r3, [r4, #12]
 8007604:	181b      	addge	r3, r3, r0
 8007606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800760a:	bfac      	ite	ge
 800760c:	6563      	strge	r3, [r4, #84]	; 0x54
 800760e:	81a3      	strhlt	r3, [r4, #12]
 8007610:	bd10      	pop	{r4, pc}

08007612 <__swrite>:
 8007612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007616:	461f      	mov	r7, r3
 8007618:	898b      	ldrh	r3, [r1, #12]
 800761a:	4605      	mov	r5, r0
 800761c:	05db      	lsls	r3, r3, #23
 800761e:	460c      	mov	r4, r1
 8007620:	4616      	mov	r6, r2
 8007622:	d505      	bpl.n	8007630 <__swrite+0x1e>
 8007624:	2302      	movs	r3, #2
 8007626:	2200      	movs	r2, #0
 8007628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800762c:	f000 f85a 	bl	80076e4 <_lseek_r>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	4632      	mov	r2, r6
 8007634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	4628      	mov	r0, r5
 800763c:	463b      	mov	r3, r7
 800763e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007646:	f000 b871 	b.w	800772c <_write_r>

0800764a <__sseek>:
 800764a:	b510      	push	{r4, lr}
 800764c:	460c      	mov	r4, r1
 800764e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007652:	f000 f847 	bl	80076e4 <_lseek_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	bf15      	itete	ne
 800765c:	6560      	strne	r0, [r4, #84]	; 0x54
 800765e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007666:	81a3      	strheq	r3, [r4, #12]
 8007668:	bf18      	it	ne
 800766a:	81a3      	strhne	r3, [r4, #12]
 800766c:	bd10      	pop	{r4, pc}

0800766e <__sclose>:
 800766e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007672:	f000 b827 	b.w	80076c4 <_close_r>

08007676 <memmove>:
 8007676:	4288      	cmp	r0, r1
 8007678:	b510      	push	{r4, lr}
 800767a:	eb01 0402 	add.w	r4, r1, r2
 800767e:	d902      	bls.n	8007686 <memmove+0x10>
 8007680:	4284      	cmp	r4, r0
 8007682:	4623      	mov	r3, r4
 8007684:	d807      	bhi.n	8007696 <memmove+0x20>
 8007686:	1e43      	subs	r3, r0, #1
 8007688:	42a1      	cmp	r1, r4
 800768a:	d008      	beq.n	800769e <memmove+0x28>
 800768c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007690:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007694:	e7f8      	b.n	8007688 <memmove+0x12>
 8007696:	4601      	mov	r1, r0
 8007698:	4402      	add	r2, r0
 800769a:	428a      	cmp	r2, r1
 800769c:	d100      	bne.n	80076a0 <memmove+0x2a>
 800769e:	bd10      	pop	{r4, pc}
 80076a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076a8:	e7f7      	b.n	800769a <memmove+0x24>

080076aa <memset>:
 80076aa:	4603      	mov	r3, r0
 80076ac:	4402      	add	r2, r0
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d100      	bne.n	80076b4 <memset+0xa>
 80076b2:	4770      	bx	lr
 80076b4:	f803 1b01 	strb.w	r1, [r3], #1
 80076b8:	e7f9      	b.n	80076ae <memset+0x4>
	...

080076bc <_localeconv_r>:
 80076bc:	4800      	ldr	r0, [pc, #0]	; (80076c0 <_localeconv_r+0x4>)
 80076be:	4770      	bx	lr
 80076c0:	20000184 	.word	0x20000184

080076c4 <_close_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	2300      	movs	r3, #0
 80076c8:	4d05      	ldr	r5, [pc, #20]	; (80076e0 <_close_r+0x1c>)
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	602b      	str	r3, [r5, #0]
 80076d0:	f7fc fae6 	bl	8003ca0 <_close>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_close_r+0x1a>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_close_r+0x1a>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	2000107c 	.word	0x2000107c

080076e4 <_lseek_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4604      	mov	r4, r0
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	2200      	movs	r2, #0
 80076ee:	4d05      	ldr	r5, [pc, #20]	; (8007704 <_lseek_r+0x20>)
 80076f0:	602a      	str	r2, [r5, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f7fc faf8 	bl	8003ce8 <_lseek>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_lseek_r+0x1e>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_lseek_r+0x1e>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	2000107c 	.word	0x2000107c

08007708 <_read_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4604      	mov	r4, r0
 800770c:	4608      	mov	r0, r1
 800770e:	4611      	mov	r1, r2
 8007710:	2200      	movs	r2, #0
 8007712:	4d05      	ldr	r5, [pc, #20]	; (8007728 <_read_r+0x20>)
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	f7fc fa89 	bl	8003c2e <_read>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d102      	bne.n	8007726 <_read_r+0x1e>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	b103      	cbz	r3, 8007726 <_read_r+0x1e>
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	2000107c 	.word	0x2000107c

0800772c <_write_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	2200      	movs	r2, #0
 8007736:	4d05      	ldr	r5, [pc, #20]	; (800774c <_write_r+0x20>)
 8007738:	602a      	str	r2, [r5, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	f7fc fa94 	bl	8003c68 <_write>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_write_r+0x1e>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b103      	cbz	r3, 800774a <_write_r+0x1e>
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	2000107c 	.word	0x2000107c

08007750 <__errno>:
 8007750:	4b01      	ldr	r3, [pc, #4]	; (8007758 <__errno+0x8>)
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000090 	.word	0x20000090

0800775c <__libc_init_array>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	2600      	movs	r6, #0
 8007760:	4d0c      	ldr	r5, [pc, #48]	; (8007794 <__libc_init_array+0x38>)
 8007762:	4c0d      	ldr	r4, [pc, #52]	; (8007798 <__libc_init_array+0x3c>)
 8007764:	1b64      	subs	r4, r4, r5
 8007766:	10a4      	asrs	r4, r4, #2
 8007768:	42a6      	cmp	r6, r4
 800776a:	d109      	bne.n	8007780 <__libc_init_array+0x24>
 800776c:	f002 f86e 	bl	800984c <_init>
 8007770:	2600      	movs	r6, #0
 8007772:	4d0a      	ldr	r5, [pc, #40]	; (800779c <__libc_init_array+0x40>)
 8007774:	4c0a      	ldr	r4, [pc, #40]	; (80077a0 <__libc_init_array+0x44>)
 8007776:	1b64      	subs	r4, r4, r5
 8007778:	10a4      	asrs	r4, r4, #2
 800777a:	42a6      	cmp	r6, r4
 800777c:	d105      	bne.n	800778a <__libc_init_array+0x2e>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	f855 3b04 	ldr.w	r3, [r5], #4
 8007784:	4798      	blx	r3
 8007786:	3601      	adds	r6, #1
 8007788:	e7ee      	b.n	8007768 <__libc_init_array+0xc>
 800778a:	f855 3b04 	ldr.w	r3, [r5], #4
 800778e:	4798      	blx	r3
 8007790:	3601      	adds	r6, #1
 8007792:	e7f2      	b.n	800777a <__libc_init_array+0x1e>
 8007794:	0800ba8c 	.word	0x0800ba8c
 8007798:	0800ba8c 	.word	0x0800ba8c
 800779c:	0800ba8c 	.word	0x0800ba8c
 80077a0:	0800ba90 	.word	0x0800ba90

080077a4 <__retarget_lock_init_recursive>:
 80077a4:	4770      	bx	lr

080077a6 <__retarget_lock_acquire_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <__retarget_lock_release_recursive>:
 80077a8:	4770      	bx	lr

080077aa <memchr>:
 80077aa:	4603      	mov	r3, r0
 80077ac:	b510      	push	{r4, lr}
 80077ae:	b2c9      	uxtb	r1, r1
 80077b0:	4402      	add	r2, r0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	d101      	bne.n	80077bc <memchr+0x12>
 80077b8:	2000      	movs	r0, #0
 80077ba:	e003      	b.n	80077c4 <memchr+0x1a>
 80077bc:	7804      	ldrb	r4, [r0, #0]
 80077be:	3301      	adds	r3, #1
 80077c0:	428c      	cmp	r4, r1
 80077c2:	d1f6      	bne.n	80077b2 <memchr+0x8>
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <memcpy>:
 80077c6:	440a      	add	r2, r1
 80077c8:	4291      	cmp	r1, r2
 80077ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ce:	d100      	bne.n	80077d2 <memcpy+0xc>
 80077d0:	4770      	bx	lr
 80077d2:	b510      	push	{r4, lr}
 80077d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d8:	4291      	cmp	r1, r2
 80077da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077de:	d1f9      	bne.n	80077d4 <memcpy+0xe>
 80077e0:	bd10      	pop	{r4, pc}

080077e2 <quorem>:
 80077e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e6:	6903      	ldr	r3, [r0, #16]
 80077e8:	690c      	ldr	r4, [r1, #16]
 80077ea:	4607      	mov	r7, r0
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	db7f      	blt.n	80078f0 <quorem+0x10e>
 80077f0:	3c01      	subs	r4, #1
 80077f2:	f100 0514 	add.w	r5, r0, #20
 80077f6:	f101 0814 	add.w	r8, r1, #20
 80077fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007808:	3301      	adds	r3, #1
 800780a:	429a      	cmp	r2, r3
 800780c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007810:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007818:	d331      	bcc.n	800787e <quorem+0x9c>
 800781a:	f04f 0e00 	mov.w	lr, #0
 800781e:	4640      	mov	r0, r8
 8007820:	46ac      	mov	ip, r5
 8007822:	46f2      	mov	sl, lr
 8007824:	f850 2b04 	ldr.w	r2, [r0], #4
 8007828:	b293      	uxth	r3, r2
 800782a:	fb06 e303 	mla	r3, r6, r3, lr
 800782e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007832:	0c1a      	lsrs	r2, r3, #16
 8007834:	b29b      	uxth	r3, r3
 8007836:	fb06 220e 	mla	r2, r6, lr, r2
 800783a:	ebaa 0303 	sub.w	r3, sl, r3
 800783e:	f8dc a000 	ldr.w	sl, [ip]
 8007842:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007846:	fa1f fa8a 	uxth.w	sl, sl
 800784a:	4453      	add	r3, sl
 800784c:	f8dc a000 	ldr.w	sl, [ip]
 8007850:	b292      	uxth	r2, r2
 8007852:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800785a:	b29b      	uxth	r3, r3
 800785c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007860:	4581      	cmp	r9, r0
 8007862:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007866:	f84c 3b04 	str.w	r3, [ip], #4
 800786a:	d2db      	bcs.n	8007824 <quorem+0x42>
 800786c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007870:	b92b      	cbnz	r3, 800787e <quorem+0x9c>
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	3b04      	subs	r3, #4
 8007876:	429d      	cmp	r5, r3
 8007878:	461a      	mov	r2, r3
 800787a:	d32d      	bcc.n	80078d8 <quorem+0xf6>
 800787c:	613c      	str	r4, [r7, #16]
 800787e:	4638      	mov	r0, r7
 8007880:	f001 f994 	bl	8008bac <__mcmp>
 8007884:	2800      	cmp	r0, #0
 8007886:	db23      	blt.n	80078d0 <quorem+0xee>
 8007888:	4629      	mov	r1, r5
 800788a:	2000      	movs	r0, #0
 800788c:	3601      	adds	r6, #1
 800788e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007892:	f8d1 c000 	ldr.w	ip, [r1]
 8007896:	b293      	uxth	r3, r2
 8007898:	1ac3      	subs	r3, r0, r3
 800789a:	0c12      	lsrs	r2, r2, #16
 800789c:	fa1f f08c 	uxth.w	r0, ip
 80078a0:	4403      	add	r3, r0
 80078a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80078a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078b0:	45c1      	cmp	r9, r8
 80078b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078b6:	f841 3b04 	str.w	r3, [r1], #4
 80078ba:	d2e8      	bcs.n	800788e <quorem+0xac>
 80078bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c4:	b922      	cbnz	r2, 80078d0 <quorem+0xee>
 80078c6:	3b04      	subs	r3, #4
 80078c8:	429d      	cmp	r5, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	d30a      	bcc.n	80078e4 <quorem+0x102>
 80078ce:	613c      	str	r4, [r7, #16]
 80078d0:	4630      	mov	r0, r6
 80078d2:	b003      	add	sp, #12
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	3b04      	subs	r3, #4
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d1cd      	bne.n	800787c <quorem+0x9a>
 80078e0:	3c01      	subs	r4, #1
 80078e2:	e7c8      	b.n	8007876 <quorem+0x94>
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	3b04      	subs	r3, #4
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	d1f0      	bne.n	80078ce <quorem+0xec>
 80078ec:	3c01      	subs	r4, #1
 80078ee:	e7eb      	b.n	80078c8 <quorem+0xe6>
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7ee      	b.n	80078d2 <quorem+0xf0>
 80078f4:	0000      	movs	r0, r0
	...

080078f8 <_dtoa_r>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	4616      	mov	r6, r2
 80078fe:	461f      	mov	r7, r3
 8007900:	69c4      	ldr	r4, [r0, #28]
 8007902:	b099      	sub	sp, #100	; 0x64
 8007904:	4605      	mov	r5, r0
 8007906:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800790a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800790e:	b974      	cbnz	r4, 800792e <_dtoa_r+0x36>
 8007910:	2010      	movs	r0, #16
 8007912:	f000 fe1d 	bl	8008550 <malloc>
 8007916:	4602      	mov	r2, r0
 8007918:	61e8      	str	r0, [r5, #28]
 800791a:	b920      	cbnz	r0, 8007926 <_dtoa_r+0x2e>
 800791c:	21ef      	movs	r1, #239	; 0xef
 800791e:	4bac      	ldr	r3, [pc, #688]	; (8007bd0 <_dtoa_r+0x2d8>)
 8007920:	48ac      	ldr	r0, [pc, #688]	; (8007bd4 <_dtoa_r+0x2dc>)
 8007922:	f001 fc53 	bl	80091cc <__assert_func>
 8007926:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800792a:	6004      	str	r4, [r0, #0]
 800792c:	60c4      	str	r4, [r0, #12]
 800792e:	69eb      	ldr	r3, [r5, #28]
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	b151      	cbz	r1, 800794a <_dtoa_r+0x52>
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	2301      	movs	r3, #1
 8007938:	4093      	lsls	r3, r2
 800793a:	604a      	str	r2, [r1, #4]
 800793c:	608b      	str	r3, [r1, #8]
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fefa 	bl	8008738 <_Bfree>
 8007944:	2200      	movs	r2, #0
 8007946:	69eb      	ldr	r3, [r5, #28]
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	1e3b      	subs	r3, r7, #0
 800794c:	bfaf      	iteee	ge
 800794e:	2300      	movge	r3, #0
 8007950:	2201      	movlt	r2, #1
 8007952:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007956:	9305      	strlt	r3, [sp, #20]
 8007958:	bfa8      	it	ge
 800795a:	f8c8 3000 	strge.w	r3, [r8]
 800795e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007962:	4b9d      	ldr	r3, [pc, #628]	; (8007bd8 <_dtoa_r+0x2e0>)
 8007964:	bfb8      	it	lt
 8007966:	f8c8 2000 	strlt.w	r2, [r8]
 800796a:	ea33 0309 	bics.w	r3, r3, r9
 800796e:	d119      	bne.n	80079a4 <_dtoa_r+0xac>
 8007970:	f242 730f 	movw	r3, #9999	; 0x270f
 8007974:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800797c:	4333      	orrs	r3, r6
 800797e:	f000 8589 	beq.w	8008494 <_dtoa_r+0xb9c>
 8007982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007984:	b953      	cbnz	r3, 800799c <_dtoa_r+0xa4>
 8007986:	4b95      	ldr	r3, [pc, #596]	; (8007bdc <_dtoa_r+0x2e4>)
 8007988:	e023      	b.n	80079d2 <_dtoa_r+0xda>
 800798a:	4b95      	ldr	r3, [pc, #596]	; (8007be0 <_dtoa_r+0x2e8>)
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	3308      	adds	r3, #8
 8007990:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	9803      	ldr	r0, [sp, #12]
 8007996:	b019      	add	sp, #100	; 0x64
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799c:	4b8f      	ldr	r3, [pc, #572]	; (8007bdc <_dtoa_r+0x2e4>)
 800799e:	9303      	str	r3, [sp, #12]
 80079a0:	3303      	adds	r3, #3
 80079a2:	e7f5      	b.n	8007990 <_dtoa_r+0x98>
 80079a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80079a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80079ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079b0:	2200      	movs	r2, #0
 80079b2:	2300      	movs	r3, #0
 80079b4:	f7f8 fff8 	bl	80009a8 <__aeabi_dcmpeq>
 80079b8:	4680      	mov	r8, r0
 80079ba:	b160      	cbz	r0, 80079d6 <_dtoa_r+0xde>
 80079bc:	2301      	movs	r3, #1
 80079be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8562 	beq.w	800848e <_dtoa_r+0xb96>
 80079ca:	4b86      	ldr	r3, [pc, #536]	; (8007be4 <_dtoa_r+0x2ec>)
 80079cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	9303      	str	r3, [sp, #12]
 80079d4:	e7de      	b.n	8007994 <_dtoa_r+0x9c>
 80079d6:	ab16      	add	r3, sp, #88	; 0x58
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	ab17      	add	r3, sp, #92	; 0x5c
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4628      	mov	r0, r5
 80079e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079e4:	f001 f98a 	bl	8008cfc <__d2b>
 80079e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80079ec:	4682      	mov	sl, r0
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	d07e      	beq.n	8007af0 <_dtoa_r+0x1f8>
 80079f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80079fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007a04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4b75      	ldr	r3, [pc, #468]	; (8007be8 <_dtoa_r+0x2f0>)
 8007a12:	f7f8 fba9 	bl	8000168 <__aeabi_dsub>
 8007a16:	a368      	add	r3, pc, #416	; (adr r3, 8007bb8 <_dtoa_r+0x2c0>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 fd5c 	bl	80004d8 <__aeabi_dmul>
 8007a20:	a367      	add	r3, pc, #412	; (adr r3, 8007bc0 <_dtoa_r+0x2c8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 fba1 	bl	800016c <__adddf3>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	460f      	mov	r7, r1
 8007a30:	f7f8 fce8 	bl	8000404 <__aeabi_i2d>
 8007a34:	a364      	add	r3, pc, #400	; (adr r3, 8007bc8 <_dtoa_r+0x2d0>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fd4d 	bl	80004d8 <__aeabi_dmul>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4630      	mov	r0, r6
 8007a44:	4639      	mov	r1, r7
 8007a46:	f7f8 fb91 	bl	800016c <__adddf3>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	f7f8 fff3 	bl	8000a38 <__aeabi_d2iz>
 8007a52:	2200      	movs	r2, #0
 8007a54:	4683      	mov	fp, r0
 8007a56:	2300      	movs	r3, #0
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f8 ffae 	bl	80009bc <__aeabi_dcmplt>
 8007a60:	b148      	cbz	r0, 8007a76 <_dtoa_r+0x17e>
 8007a62:	4658      	mov	r0, fp
 8007a64:	f7f8 fcce 	bl	8000404 <__aeabi_i2d>
 8007a68:	4632      	mov	r2, r6
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	f7f8 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8007a70:	b908      	cbnz	r0, 8007a76 <_dtoa_r+0x17e>
 8007a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a76:	f1bb 0f16 	cmp.w	fp, #22
 8007a7a:	d857      	bhi.n	8007b2c <_dtoa_r+0x234>
 8007a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a80:	4b5a      	ldr	r3, [pc, #360]	; (8007bec <_dtoa_r+0x2f4>)
 8007a82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f7f8 ff97 	bl	80009bc <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d04e      	beq.n	8007b30 <_dtoa_r+0x238>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a9c:	1b1b      	subs	r3, r3, r4
 8007a9e:	1e5a      	subs	r2, r3, #1
 8007aa0:	bf46      	itte	mi
 8007aa2:	f1c3 0901 	rsbmi	r9, r3, #1
 8007aa6:	2300      	movmi	r3, #0
 8007aa8:	f04f 0900 	movpl.w	r9, #0
 8007aac:	9209      	str	r2, [sp, #36]	; 0x24
 8007aae:	bf48      	it	mi
 8007ab0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ab2:	f1bb 0f00 	cmp.w	fp, #0
 8007ab6:	db3d      	blt.n	8007b34 <_dtoa_r+0x23c>
 8007ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007abe:	445b      	add	r3, fp
 8007ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d867      	bhi.n	8007b9c <_dtoa_r+0x2a4>
 8007acc:	2b05      	cmp	r3, #5
 8007ace:	bfc4      	itt	gt
 8007ad0:	3b04      	subgt	r3, #4
 8007ad2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad6:	bfc8      	it	gt
 8007ad8:	2400      	movgt	r4, #0
 8007ada:	f1a3 0302 	sub.w	r3, r3, #2
 8007ade:	bfd8      	it	le
 8007ae0:	2401      	movle	r4, #1
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	f200 8086 	bhi.w	8007bf4 <_dtoa_r+0x2fc>
 8007ae8:	e8df f003 	tbb	[pc, r3]
 8007aec:	5637392c 	.word	0x5637392c
 8007af0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007af4:	441c      	add	r4, r3
 8007af6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	bfc1      	itttt	gt
 8007afe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b02:	fa09 f903 	lslgt.w	r9, r9, r3
 8007b06:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007b0a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007b0e:	bfd6      	itet	le
 8007b10:	f1c3 0320 	rsble	r3, r3, #32
 8007b14:	ea49 0003 	orrgt.w	r0, r9, r3
 8007b18:	fa06 f003 	lslle.w	r0, r6, r3
 8007b1c:	f7f8 fc62 	bl	80003e4 <__aeabi_ui2d>
 8007b20:	2201      	movs	r2, #1
 8007b22:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007b26:	3c01      	subs	r4, #1
 8007b28:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b2a:	e76f      	b.n	8007a0c <_dtoa_r+0x114>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e7b3      	b.n	8007a98 <_dtoa_r+0x1a0>
 8007b30:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b32:	e7b2      	b.n	8007a9a <_dtoa_r+0x1a2>
 8007b34:	f1cb 0300 	rsb	r3, fp, #0
 8007b38:	930a      	str	r3, [sp, #40]	; 0x28
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	eba9 090b 	sub.w	r9, r9, fp
 8007b40:	930e      	str	r3, [sp, #56]	; 0x38
 8007b42:	e7c0      	b.n	8007ac6 <_dtoa_r+0x1ce>
 8007b44:	2300      	movs	r3, #0
 8007b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dc55      	bgt.n	8007bfa <_dtoa_r+0x302>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	461a      	mov	r2, r3
 8007b52:	9306      	str	r3, [sp, #24]
 8007b54:	9308      	str	r3, [sp, #32]
 8007b56:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b58:	e00b      	b.n	8007b72 <_dtoa_r+0x27a>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e7f3      	b.n	8007b46 <_dtoa_r+0x24e>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b64:	445b      	add	r3, fp
 8007b66:	9306      	str	r3, [sp, #24]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	9308      	str	r3, [sp, #32]
 8007b6e:	bfb8      	it	lt
 8007b70:	2301      	movlt	r3, #1
 8007b72:	2100      	movs	r1, #0
 8007b74:	2204      	movs	r2, #4
 8007b76:	69e8      	ldr	r0, [r5, #28]
 8007b78:	f102 0614 	add.w	r6, r2, #20
 8007b7c:	429e      	cmp	r6, r3
 8007b7e:	d940      	bls.n	8007c02 <_dtoa_r+0x30a>
 8007b80:	6041      	str	r1, [r0, #4]
 8007b82:	4628      	mov	r0, r5
 8007b84:	f000 fd98 	bl	80086b8 <_Balloc>
 8007b88:	9003      	str	r0, [sp, #12]
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d13c      	bne.n	8007c08 <_dtoa_r+0x310>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	f240 11af 	movw	r1, #431	; 0x1af
 8007b94:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <_dtoa_r+0x2f8>)
 8007b96:	e6c3      	b.n	8007920 <_dtoa_r+0x28>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e7e1      	b.n	8007b60 <_dtoa_r+0x268>
 8007b9c:	2401      	movs	r4, #1
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ba2:	9322      	str	r3, [sp, #136]	; 0x88
 8007ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba8:	2200      	movs	r2, #0
 8007baa:	9306      	str	r3, [sp, #24]
 8007bac:	9308      	str	r3, [sp, #32]
 8007bae:	2312      	movs	r3, #18
 8007bb0:	e7d1      	b.n	8007b56 <_dtoa_r+0x25e>
 8007bb2:	bf00      	nop
 8007bb4:	f3af 8000 	nop.w
 8007bb8:	636f4361 	.word	0x636f4361
 8007bbc:	3fd287a7 	.word	0x3fd287a7
 8007bc0:	8b60c8b3 	.word	0x8b60c8b3
 8007bc4:	3fc68a28 	.word	0x3fc68a28
 8007bc8:	509f79fb 	.word	0x509f79fb
 8007bcc:	3fd34413 	.word	0x3fd34413
 8007bd0:	0800b75f 	.word	0x0800b75f
 8007bd4:	0800b776 	.word	0x0800b776
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	0800b75b 	.word	0x0800b75b
 8007be0:	0800b752 	.word	0x0800b752
 8007be4:	0800b72f 	.word	0x0800b72f
 8007be8:	3ff80000 	.word	0x3ff80000
 8007bec:	0800b860 	.word	0x0800b860
 8007bf0:	0800b7ce 	.word	0x0800b7ce
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf8:	e7d4      	b.n	8007ba4 <_dtoa_r+0x2ac>
 8007bfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	9308      	str	r3, [sp, #32]
 8007c00:	e7b7      	b.n	8007b72 <_dtoa_r+0x27a>
 8007c02:	3101      	adds	r1, #1
 8007c04:	0052      	lsls	r2, r2, #1
 8007c06:	e7b7      	b.n	8007b78 <_dtoa_r+0x280>
 8007c08:	69eb      	ldr	r3, [r5, #28]
 8007c0a:	9a03      	ldr	r2, [sp, #12]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	9b08      	ldr	r3, [sp, #32]
 8007c10:	2b0e      	cmp	r3, #14
 8007c12:	f200 80a8 	bhi.w	8007d66 <_dtoa_r+0x46e>
 8007c16:	2c00      	cmp	r4, #0
 8007c18:	f000 80a5 	beq.w	8007d66 <_dtoa_r+0x46e>
 8007c1c:	f1bb 0f00 	cmp.w	fp, #0
 8007c20:	dd34      	ble.n	8007c8c <_dtoa_r+0x394>
 8007c22:	4b9a      	ldr	r3, [pc, #616]	; (8007e8c <_dtoa_r+0x594>)
 8007c24:	f00b 020f 	and.w	r2, fp, #15
 8007c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c38:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007c3c:	d016      	beq.n	8007c6c <_dtoa_r+0x374>
 8007c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c42:	4b93      	ldr	r3, [pc, #588]	; (8007e90 <_dtoa_r+0x598>)
 8007c44:	2703      	movs	r7, #3
 8007c46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c4a:	f7f8 fd6f 	bl	800072c <__aeabi_ddiv>
 8007c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c52:	f004 040f 	and.w	r4, r4, #15
 8007c56:	4e8e      	ldr	r6, [pc, #568]	; (8007e90 <_dtoa_r+0x598>)
 8007c58:	b954      	cbnz	r4, 8007c70 <_dtoa_r+0x378>
 8007c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c62:	f7f8 fd63 	bl	800072c <__aeabi_ddiv>
 8007c66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c6a:	e029      	b.n	8007cc0 <_dtoa_r+0x3c8>
 8007c6c:	2702      	movs	r7, #2
 8007c6e:	e7f2      	b.n	8007c56 <_dtoa_r+0x35e>
 8007c70:	07e1      	lsls	r1, r4, #31
 8007c72:	d508      	bpl.n	8007c86 <_dtoa_r+0x38e>
 8007c74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c7c:	f7f8 fc2c 	bl	80004d8 <__aeabi_dmul>
 8007c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c84:	3701      	adds	r7, #1
 8007c86:	1064      	asrs	r4, r4, #1
 8007c88:	3608      	adds	r6, #8
 8007c8a:	e7e5      	b.n	8007c58 <_dtoa_r+0x360>
 8007c8c:	f000 80a5 	beq.w	8007dda <_dtoa_r+0x4e2>
 8007c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c94:	f1cb 0400 	rsb	r4, fp, #0
 8007c98:	4b7c      	ldr	r3, [pc, #496]	; (8007e8c <_dtoa_r+0x594>)
 8007c9a:	f004 020f 	and.w	r2, r4, #15
 8007c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fc17 	bl	80004d8 <__aeabi_dmul>
 8007caa:	2702      	movs	r7, #2
 8007cac:	2300      	movs	r3, #0
 8007cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cb2:	4e77      	ldr	r6, [pc, #476]	; (8007e90 <_dtoa_r+0x598>)
 8007cb4:	1124      	asrs	r4, r4, #4
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	f040 8084 	bne.w	8007dc4 <_dtoa_r+0x4cc>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1d2      	bne.n	8007c66 <_dtoa_r+0x36e>
 8007cc0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007cc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8087 	beq.w	8007dde <_dtoa_r+0x4e6>
 8007cd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4b6f      	ldr	r3, [pc, #444]	; (8007e94 <_dtoa_r+0x59c>)
 8007cd8:	f7f8 fe70 	bl	80009bc <__aeabi_dcmplt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d07e      	beq.n	8007dde <_dtoa_r+0x4e6>
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d07b      	beq.n	8007dde <_dtoa_r+0x4e6>
 8007ce6:	9b06      	ldr	r3, [sp, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	dd38      	ble.n	8007d5e <_dtoa_r+0x466>
 8007cec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4b69      	ldr	r3, [pc, #420]	; (8007e98 <_dtoa_r+0x5a0>)
 8007cf4:	f7f8 fbf0 	bl	80004d8 <__aeabi_dmul>
 8007cf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cfc:	9c06      	ldr	r4, [sp, #24]
 8007cfe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007d02:	3701      	adds	r7, #1
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7f8 fb7d 	bl	8000404 <__aeabi_i2d>
 8007d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d0e:	f7f8 fbe3 	bl	80004d8 <__aeabi_dmul>
 8007d12:	2200      	movs	r2, #0
 8007d14:	4b61      	ldr	r3, [pc, #388]	; (8007e9c <_dtoa_r+0x5a4>)
 8007d16:	f7f8 fa29 	bl	800016c <__adddf3>
 8007d1a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d22:	9611      	str	r6, [sp, #68]	; 0x44
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	d15d      	bne.n	8007de4 <_dtoa_r+0x4ec>
 8007d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4b5c      	ldr	r3, [pc, #368]	; (8007ea0 <_dtoa_r+0x5a8>)
 8007d30:	f7f8 fa1a 	bl	8000168 <__aeabi_dsub>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d40:	f7f8 fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f040 8295 	bne.w	8008274 <_dtoa_r+0x97c>
 8007d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d54:	f7f8 fe32 	bl	80009bc <__aeabi_dcmplt>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	f040 8289 	bne.w	8008270 <_dtoa_r+0x978>
 8007d5e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007d62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f2c0 8151 	blt.w	8008010 <_dtoa_r+0x718>
 8007d6e:	f1bb 0f0e 	cmp.w	fp, #14
 8007d72:	f300 814d 	bgt.w	8008010 <_dtoa_r+0x718>
 8007d76:	4b45      	ldr	r3, [pc, #276]	; (8007e8c <_dtoa_r+0x594>)
 8007d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d80:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f280 80da 	bge.w	8007f40 <_dtoa_r+0x648>
 8007d8c:	9b08      	ldr	r3, [sp, #32]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f300 80d6 	bgt.w	8007f40 <_dtoa_r+0x648>
 8007d94:	f040 826b 	bne.w	800826e <_dtoa_r+0x976>
 8007d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4b40      	ldr	r3, [pc, #256]	; (8007ea0 <_dtoa_r+0x5a8>)
 8007da0:	f7f8 fb9a 	bl	80004d8 <__aeabi_dmul>
 8007da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da8:	f7f8 fe1c 	bl	80009e4 <__aeabi_dcmpge>
 8007dac:	9c08      	ldr	r4, [sp, #32]
 8007dae:	4626      	mov	r6, r4
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f040 8241 	bne.w	8008238 <_dtoa_r+0x940>
 8007db6:	2331      	movs	r3, #49	; 0x31
 8007db8:	9f03      	ldr	r7, [sp, #12]
 8007dba:	f10b 0b01 	add.w	fp, fp, #1
 8007dbe:	f807 3b01 	strb.w	r3, [r7], #1
 8007dc2:	e23d      	b.n	8008240 <_dtoa_r+0x948>
 8007dc4:	07e2      	lsls	r2, r4, #31
 8007dc6:	d505      	bpl.n	8007dd4 <_dtoa_r+0x4dc>
 8007dc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dcc:	f7f8 fb84 	bl	80004d8 <__aeabi_dmul>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	3701      	adds	r7, #1
 8007dd4:	1064      	asrs	r4, r4, #1
 8007dd6:	3608      	adds	r6, #8
 8007dd8:	e76d      	b.n	8007cb6 <_dtoa_r+0x3be>
 8007dda:	2702      	movs	r7, #2
 8007ddc:	e770      	b.n	8007cc0 <_dtoa_r+0x3c8>
 8007dde:	46d8      	mov	r8, fp
 8007de0:	9c08      	ldr	r4, [sp, #32]
 8007de2:	e78f      	b.n	8007d04 <_dtoa_r+0x40c>
 8007de4:	9903      	ldr	r1, [sp, #12]
 8007de6:	4b29      	ldr	r3, [pc, #164]	; (8007e8c <_dtoa_r+0x594>)
 8007de8:	4421      	add	r1, r4
 8007dea:	9112      	str	r1, [sp, #72]	; 0x48
 8007dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007df2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007df6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	d054      	beq.n	8007ea8 <_dtoa_r+0x5b0>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	4928      	ldr	r1, [pc, #160]	; (8007ea4 <_dtoa_r+0x5ac>)
 8007e02:	f7f8 fc93 	bl	800072c <__aeabi_ddiv>
 8007e06:	463b      	mov	r3, r7
 8007e08:	4632      	mov	r2, r6
 8007e0a:	f7f8 f9ad 	bl	8000168 <__aeabi_dsub>
 8007e0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e12:	9f03      	ldr	r7, [sp, #12]
 8007e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e18:	f7f8 fe0e 	bl	8000a38 <__aeabi_d2iz>
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	f7f8 faf1 	bl	8000404 <__aeabi_i2d>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e2a:	f7f8 f99d 	bl	8000168 <__aeabi_dsub>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	3430      	adds	r4, #48	; 0x30
 8007e34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e3c:	f807 4b01 	strb.w	r4, [r7], #1
 8007e40:	f7f8 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d173      	bne.n	8007f30 <_dtoa_r+0x638>
 8007e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	4911      	ldr	r1, [pc, #68]	; (8007e94 <_dtoa_r+0x59c>)
 8007e50:	f7f8 f98a 	bl	8000168 <__aeabi_dsub>
 8007e54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e58:	f7f8 fdb0 	bl	80009bc <__aeabi_dcmplt>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f040 80b6 	bne.w	8007fce <_dtoa_r+0x6d6>
 8007e62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e64:	429f      	cmp	r7, r3
 8007e66:	f43f af7a 	beq.w	8007d5e <_dtoa_r+0x466>
 8007e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e6e:	2200      	movs	r2, #0
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <_dtoa_r+0x5a0>)
 8007e72:	f7f8 fb31 	bl	80004d8 <__aeabi_dmul>
 8007e76:	2200      	movs	r2, #0
 8007e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <_dtoa_r+0x5a0>)
 8007e82:	f7f8 fb29 	bl	80004d8 <__aeabi_dmul>
 8007e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e8a:	e7c3      	b.n	8007e14 <_dtoa_r+0x51c>
 8007e8c:	0800b860 	.word	0x0800b860
 8007e90:	0800b838 	.word	0x0800b838
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	40240000 	.word	0x40240000
 8007e9c:	401c0000 	.word	0x401c0000
 8007ea0:	40140000 	.word	0x40140000
 8007ea4:	3fe00000 	.word	0x3fe00000
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 fb14 	bl	80004d8 <__aeabi_dmul>
 8007eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007eb6:	9c03      	ldr	r4, [sp, #12]
 8007eb8:	9314      	str	r3, [sp, #80]	; 0x50
 8007eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ebe:	f7f8 fdbb 	bl	8000a38 <__aeabi_d2iz>
 8007ec2:	9015      	str	r0, [sp, #84]	; 0x54
 8007ec4:	f7f8 fa9e 	bl	8000404 <__aeabi_i2d>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ed0:	f7f8 f94a 	bl	8000168 <__aeabi_dsub>
 8007ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	3330      	adds	r3, #48	; 0x30
 8007eda:	f804 3b01 	strb.w	r3, [r4], #1
 8007ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	429c      	cmp	r4, r3
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	d124      	bne.n	8007f34 <_dtoa_r+0x63c>
 8007eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007eee:	4baf      	ldr	r3, [pc, #700]	; (80081ac <_dtoa_r+0x8b4>)
 8007ef0:	f7f8 f93c 	bl	800016c <__adddf3>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4630      	mov	r0, r6
 8007efa:	4639      	mov	r1, r7
 8007efc:	f7f8 fd7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d163      	bne.n	8007fcc <_dtoa_r+0x6d4>
 8007f04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f08:	2000      	movs	r0, #0
 8007f0a:	49a8      	ldr	r1, [pc, #672]	; (80081ac <_dtoa_r+0x8b4>)
 8007f0c:	f7f8 f92c 	bl	8000168 <__aeabi_dsub>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4630      	mov	r0, r6
 8007f16:	4639      	mov	r1, r7
 8007f18:	f7f8 fd50 	bl	80009bc <__aeabi_dcmplt>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f43f af1e 	beq.w	8007d5e <_dtoa_r+0x466>
 8007f22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f24:	1e7b      	subs	r3, r7, #1
 8007f26:	9314      	str	r3, [sp, #80]	; 0x50
 8007f28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007f2c:	2b30      	cmp	r3, #48	; 0x30
 8007f2e:	d0f8      	beq.n	8007f22 <_dtoa_r+0x62a>
 8007f30:	46c3      	mov	fp, r8
 8007f32:	e03b      	b.n	8007fac <_dtoa_r+0x6b4>
 8007f34:	4b9e      	ldr	r3, [pc, #632]	; (80081b0 <_dtoa_r+0x8b8>)
 8007f36:	f7f8 facf 	bl	80004d8 <__aeabi_dmul>
 8007f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f3e:	e7bc      	b.n	8007eba <_dtoa_r+0x5c2>
 8007f40:	9f03      	ldr	r7, [sp, #12]
 8007f42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 fbed 	bl	800072c <__aeabi_ddiv>
 8007f52:	f7f8 fd71 	bl	8000a38 <__aeabi_d2iz>
 8007f56:	4604      	mov	r4, r0
 8007f58:	f7f8 fa54 	bl	8000404 <__aeabi_i2d>
 8007f5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f60:	f7f8 faba 	bl	80004d8 <__aeabi_dmul>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4640      	mov	r0, r8
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 f8fc 	bl	8000168 <__aeabi_dsub>
 8007f70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007f74:	f807 6b01 	strb.w	r6, [r7], #1
 8007f78:	9e03      	ldr	r6, [sp, #12]
 8007f7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007f7e:	1bbe      	subs	r6, r7, r6
 8007f80:	45b4      	cmp	ip, r6
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	d136      	bne.n	8007ff6 <_dtoa_r+0x6fe>
 8007f88:	f7f8 f8f0 	bl	800016c <__adddf3>
 8007f8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f90:	4680      	mov	r8, r0
 8007f92:	4689      	mov	r9, r1
 8007f94:	f7f8 fd30 	bl	80009f8 <__aeabi_dcmpgt>
 8007f98:	bb58      	cbnz	r0, 8007ff2 <_dtoa_r+0x6fa>
 8007f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	f7f8 fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8007fa6:	b108      	cbz	r0, 8007fac <_dtoa_r+0x6b4>
 8007fa8:	07e3      	lsls	r3, r4, #31
 8007faa:	d422      	bmi.n	8007ff2 <_dtoa_r+0x6fa>
 8007fac:	4651      	mov	r1, sl
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 fbc2 	bl	8008738 <_Bfree>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fb8:	703b      	strb	r3, [r7, #0]
 8007fba:	f10b 0301 	add.w	r3, fp, #1
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f43f ace6 	beq.w	8007994 <_dtoa_r+0x9c>
 8007fc8:	601f      	str	r7, [r3, #0]
 8007fca:	e4e3      	b.n	8007994 <_dtoa_r+0x9c>
 8007fcc:	4627      	mov	r7, r4
 8007fce:	463b      	mov	r3, r7
 8007fd0:	461f      	mov	r7, r3
 8007fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fd6:	2a39      	cmp	r2, #57	; 0x39
 8007fd8:	d107      	bne.n	8007fea <_dtoa_r+0x6f2>
 8007fda:	9a03      	ldr	r2, [sp, #12]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d1f7      	bne.n	8007fd0 <_dtoa_r+0x6d8>
 8007fe0:	2230      	movs	r2, #48	; 0x30
 8007fe2:	9903      	ldr	r1, [sp, #12]
 8007fe4:	f108 0801 	add.w	r8, r8, #1
 8007fe8:	700a      	strb	r2, [r1, #0]
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	3201      	adds	r2, #1
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e79e      	b.n	8007f30 <_dtoa_r+0x638>
 8007ff2:	46d8      	mov	r8, fp
 8007ff4:	e7eb      	b.n	8007fce <_dtoa_r+0x6d6>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4b6d      	ldr	r3, [pc, #436]	; (80081b0 <_dtoa_r+0x8b8>)
 8007ffa:	f7f8 fa6d 	bl	80004d8 <__aeabi_dmul>
 8007ffe:	2200      	movs	r2, #0
 8008000:	2300      	movs	r3, #0
 8008002:	4680      	mov	r8, r0
 8008004:	4689      	mov	r9, r1
 8008006:	f7f8 fccf 	bl	80009a8 <__aeabi_dcmpeq>
 800800a:	2800      	cmp	r0, #0
 800800c:	d09b      	beq.n	8007f46 <_dtoa_r+0x64e>
 800800e:	e7cd      	b.n	8007fac <_dtoa_r+0x6b4>
 8008010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008012:	2a00      	cmp	r2, #0
 8008014:	f000 80c4 	beq.w	80081a0 <_dtoa_r+0x8a8>
 8008018:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800801a:	2a01      	cmp	r2, #1
 800801c:	f300 80a8 	bgt.w	8008170 <_dtoa_r+0x878>
 8008020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008022:	2a00      	cmp	r2, #0
 8008024:	f000 80a0 	beq.w	8008168 <_dtoa_r+0x870>
 8008028:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800802c:	464f      	mov	r7, r9
 800802e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008032:	2101      	movs	r1, #1
 8008034:	441a      	add	r2, r3
 8008036:	4628      	mov	r0, r5
 8008038:	4499      	add	r9, r3
 800803a:	9209      	str	r2, [sp, #36]	; 0x24
 800803c:	f000 fc32 	bl	80088a4 <__i2b>
 8008040:	4606      	mov	r6, r0
 8008042:	b15f      	cbz	r7, 800805c <_dtoa_r+0x764>
 8008044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd08      	ble.n	800805c <_dtoa_r+0x764>
 800804a:	42bb      	cmp	r3, r7
 800804c:	bfa8      	it	ge
 800804e:	463b      	movge	r3, r7
 8008050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008052:	eba9 0903 	sub.w	r9, r9, r3
 8008056:	1aff      	subs	r7, r7, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	9309      	str	r3, [sp, #36]	; 0x24
 800805c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805e:	b1f3      	cbz	r3, 800809e <_dtoa_r+0x7a6>
 8008060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80a0 	beq.w	80081a8 <_dtoa_r+0x8b0>
 8008068:	2c00      	cmp	r4, #0
 800806a:	dd10      	ble.n	800808e <_dtoa_r+0x796>
 800806c:	4631      	mov	r1, r6
 800806e:	4622      	mov	r2, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f000 fcd5 	bl	8008a20 <__pow5mult>
 8008076:	4652      	mov	r2, sl
 8008078:	4601      	mov	r1, r0
 800807a:	4606      	mov	r6, r0
 800807c:	4628      	mov	r0, r5
 800807e:	f000 fc27 	bl	80088d0 <__multiply>
 8008082:	4680      	mov	r8, r0
 8008084:	4651      	mov	r1, sl
 8008086:	4628      	mov	r0, r5
 8008088:	f000 fb56 	bl	8008738 <_Bfree>
 800808c:	46c2      	mov	sl, r8
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	1b1a      	subs	r2, r3, r4
 8008092:	d004      	beq.n	800809e <_dtoa_r+0x7a6>
 8008094:	4651      	mov	r1, sl
 8008096:	4628      	mov	r0, r5
 8008098:	f000 fcc2 	bl	8008a20 <__pow5mult>
 800809c:	4682      	mov	sl, r0
 800809e:	2101      	movs	r1, #1
 80080a0:	4628      	mov	r0, r5
 80080a2:	f000 fbff 	bl	80088a4 <__i2b>
 80080a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a8:	4604      	mov	r4, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f340 8082 	ble.w	80081b4 <_dtoa_r+0x8bc>
 80080b0:	461a      	mov	r2, r3
 80080b2:	4601      	mov	r1, r0
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 fcb3 	bl	8008a20 <__pow5mult>
 80080ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080bc:	4604      	mov	r4, r0
 80080be:	2b01      	cmp	r3, #1
 80080c0:	dd7b      	ble.n	80081ba <_dtoa_r+0x8c2>
 80080c2:	f04f 0800 	mov.w	r8, #0
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080cc:	6918      	ldr	r0, [r3, #16]
 80080ce:	f000 fb9b 	bl	8008808 <__hi0bits>
 80080d2:	f1c0 0020 	rsb	r0, r0, #32
 80080d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d8:	4418      	add	r0, r3
 80080da:	f010 001f 	ands.w	r0, r0, #31
 80080de:	f000 8092 	beq.w	8008206 <_dtoa_r+0x90e>
 80080e2:	f1c0 0320 	rsb	r3, r0, #32
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	f340 8085 	ble.w	80081f6 <_dtoa_r+0x8fe>
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	f1c0 001c 	rsb	r0, r0, #28
 80080f2:	4403      	add	r3, r0
 80080f4:	4481      	add	r9, r0
 80080f6:	4407      	add	r7, r0
 80080f8:	9309      	str	r3, [sp, #36]	; 0x24
 80080fa:	f1b9 0f00 	cmp.w	r9, #0
 80080fe:	dd05      	ble.n	800810c <_dtoa_r+0x814>
 8008100:	4651      	mov	r1, sl
 8008102:	464a      	mov	r2, r9
 8008104:	4628      	mov	r0, r5
 8008106:	f000 fce5 	bl	8008ad4 <__lshift>
 800810a:	4682      	mov	sl, r0
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	dd05      	ble.n	800811e <_dtoa_r+0x826>
 8008112:	4621      	mov	r1, r4
 8008114:	461a      	mov	r2, r3
 8008116:	4628      	mov	r0, r5
 8008118:	f000 fcdc 	bl	8008ad4 <__lshift>
 800811c:	4604      	mov	r4, r0
 800811e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d072      	beq.n	800820a <_dtoa_r+0x912>
 8008124:	4621      	mov	r1, r4
 8008126:	4650      	mov	r0, sl
 8008128:	f000 fd40 	bl	8008bac <__mcmp>
 800812c:	2800      	cmp	r0, #0
 800812e:	da6c      	bge.n	800820a <_dtoa_r+0x912>
 8008130:	2300      	movs	r3, #0
 8008132:	4651      	mov	r1, sl
 8008134:	220a      	movs	r2, #10
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fb20 	bl	800877c <__multadd>
 800813c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813e:	4682      	mov	sl, r0
 8008140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 81ac 	beq.w	80084a2 <_dtoa_r+0xbaa>
 800814a:	2300      	movs	r3, #0
 800814c:	4631      	mov	r1, r6
 800814e:	220a      	movs	r2, #10
 8008150:	4628      	mov	r0, r5
 8008152:	f000 fb13 	bl	800877c <__multadd>
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	4606      	mov	r6, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f300 8093 	bgt.w	8008286 <_dtoa_r+0x98e>
 8008160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008162:	2b02      	cmp	r3, #2
 8008164:	dc59      	bgt.n	800821a <_dtoa_r+0x922>
 8008166:	e08e      	b.n	8008286 <_dtoa_r+0x98e>
 8008168:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800816a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800816e:	e75d      	b.n	800802c <_dtoa_r+0x734>
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	1e5c      	subs	r4, r3, #1
 8008174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008176:	42a3      	cmp	r3, r4
 8008178:	bfbf      	itttt	lt
 800817a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800817c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800817e:	1ae3      	sublt	r3, r4, r3
 8008180:	18d2      	addlt	r2, r2, r3
 8008182:	bfa8      	it	ge
 8008184:	1b1c      	subge	r4, r3, r4
 8008186:	9b08      	ldr	r3, [sp, #32]
 8008188:	bfbe      	ittt	lt
 800818a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800818c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800818e:	2400      	movlt	r4, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfb5      	itete	lt
 8008194:	eba9 0703 	sublt.w	r7, r9, r3
 8008198:	464f      	movge	r7, r9
 800819a:	2300      	movlt	r3, #0
 800819c:	9b08      	ldrge	r3, [sp, #32]
 800819e:	e747      	b.n	8008030 <_dtoa_r+0x738>
 80081a0:	464f      	mov	r7, r9
 80081a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80081a6:	e74c      	b.n	8008042 <_dtoa_r+0x74a>
 80081a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081aa:	e773      	b.n	8008094 <_dtoa_r+0x79c>
 80081ac:	3fe00000 	.word	0x3fe00000
 80081b0:	40240000 	.word	0x40240000
 80081b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	dc18      	bgt.n	80081ec <_dtoa_r+0x8f4>
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	b9b3      	cbnz	r3, 80081ec <_dtoa_r+0x8f4>
 80081be:	9b05      	ldr	r3, [sp, #20]
 80081c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081c4:	b993      	cbnz	r3, 80081ec <_dtoa_r+0x8f4>
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	0d1b      	lsrs	r3, r3, #20
 80081ce:	051b      	lsls	r3, r3, #20
 80081d0:	b17b      	cbz	r3, 80081f2 <_dtoa_r+0x8fa>
 80081d2:	f04f 0801 	mov.w	r8, #1
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	f109 0901 	add.w	r9, r9, #1
 80081dc:	3301      	adds	r3, #1
 80081de:	9309      	str	r3, [sp, #36]	; 0x24
 80081e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f47f af6f 	bne.w	80080c6 <_dtoa_r+0x7ce>
 80081e8:	2001      	movs	r0, #1
 80081ea:	e774      	b.n	80080d6 <_dtoa_r+0x7de>
 80081ec:	f04f 0800 	mov.w	r8, #0
 80081f0:	e7f6      	b.n	80081e0 <_dtoa_r+0x8e8>
 80081f2:	4698      	mov	r8, r3
 80081f4:	e7f4      	b.n	80081e0 <_dtoa_r+0x8e8>
 80081f6:	d080      	beq.n	80080fa <_dtoa_r+0x802>
 80081f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081fa:	331c      	adds	r3, #28
 80081fc:	441a      	add	r2, r3
 80081fe:	4499      	add	r9, r3
 8008200:	441f      	add	r7, r3
 8008202:	9209      	str	r2, [sp, #36]	; 0x24
 8008204:	e779      	b.n	80080fa <_dtoa_r+0x802>
 8008206:	4603      	mov	r3, r0
 8008208:	e7f6      	b.n	80081f8 <_dtoa_r+0x900>
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dc34      	bgt.n	800827a <_dtoa_r+0x982>
 8008210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008212:	2b02      	cmp	r3, #2
 8008214:	dd31      	ble.n	800827a <_dtoa_r+0x982>
 8008216:	9b08      	ldr	r3, [sp, #32]
 8008218:	9306      	str	r3, [sp, #24]
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	b963      	cbnz	r3, 8008238 <_dtoa_r+0x940>
 800821e:	4621      	mov	r1, r4
 8008220:	2205      	movs	r2, #5
 8008222:	4628      	mov	r0, r5
 8008224:	f000 faaa 	bl	800877c <__multadd>
 8008228:	4601      	mov	r1, r0
 800822a:	4604      	mov	r4, r0
 800822c:	4650      	mov	r0, sl
 800822e:	f000 fcbd 	bl	8008bac <__mcmp>
 8008232:	2800      	cmp	r0, #0
 8008234:	f73f adbf 	bgt.w	8007db6 <_dtoa_r+0x4be>
 8008238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800823a:	9f03      	ldr	r7, [sp, #12]
 800823c:	ea6f 0b03 	mvn.w	fp, r3
 8008240:	f04f 0800 	mov.w	r8, #0
 8008244:	4621      	mov	r1, r4
 8008246:	4628      	mov	r0, r5
 8008248:	f000 fa76 	bl	8008738 <_Bfree>
 800824c:	2e00      	cmp	r6, #0
 800824e:	f43f aead 	beq.w	8007fac <_dtoa_r+0x6b4>
 8008252:	f1b8 0f00 	cmp.w	r8, #0
 8008256:	d005      	beq.n	8008264 <_dtoa_r+0x96c>
 8008258:	45b0      	cmp	r8, r6
 800825a:	d003      	beq.n	8008264 <_dtoa_r+0x96c>
 800825c:	4641      	mov	r1, r8
 800825e:	4628      	mov	r0, r5
 8008260:	f000 fa6a 	bl	8008738 <_Bfree>
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	f000 fa66 	bl	8008738 <_Bfree>
 800826c:	e69e      	b.n	8007fac <_dtoa_r+0x6b4>
 800826e:	2400      	movs	r4, #0
 8008270:	4626      	mov	r6, r4
 8008272:	e7e1      	b.n	8008238 <_dtoa_r+0x940>
 8008274:	46c3      	mov	fp, r8
 8008276:	4626      	mov	r6, r4
 8008278:	e59d      	b.n	8007db6 <_dtoa_r+0x4be>
 800827a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80c8 	beq.w	8008412 <_dtoa_r+0xb1a>
 8008282:	9b08      	ldr	r3, [sp, #32]
 8008284:	9306      	str	r3, [sp, #24]
 8008286:	2f00      	cmp	r7, #0
 8008288:	dd05      	ble.n	8008296 <_dtoa_r+0x99e>
 800828a:	4631      	mov	r1, r6
 800828c:	463a      	mov	r2, r7
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fc20 	bl	8008ad4 <__lshift>
 8008294:	4606      	mov	r6, r0
 8008296:	f1b8 0f00 	cmp.w	r8, #0
 800829a:	d05b      	beq.n	8008354 <_dtoa_r+0xa5c>
 800829c:	4628      	mov	r0, r5
 800829e:	6871      	ldr	r1, [r6, #4]
 80082a0:	f000 fa0a 	bl	80086b8 <_Balloc>
 80082a4:	4607      	mov	r7, r0
 80082a6:	b928      	cbnz	r0, 80082b4 <_dtoa_r+0x9bc>
 80082a8:	4602      	mov	r2, r0
 80082aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80082ae:	4b81      	ldr	r3, [pc, #516]	; (80084b4 <_dtoa_r+0xbbc>)
 80082b0:	f7ff bb36 	b.w	8007920 <_dtoa_r+0x28>
 80082b4:	6932      	ldr	r2, [r6, #16]
 80082b6:	f106 010c 	add.w	r1, r6, #12
 80082ba:	3202      	adds	r2, #2
 80082bc:	0092      	lsls	r2, r2, #2
 80082be:	300c      	adds	r0, #12
 80082c0:	f7ff fa81 	bl	80077c6 <memcpy>
 80082c4:	2201      	movs	r2, #1
 80082c6:	4639      	mov	r1, r7
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 fc03 	bl	8008ad4 <__lshift>
 80082ce:	46b0      	mov	r8, r6
 80082d0:	4606      	mov	r6, r0
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	9a03      	ldr	r2, [sp, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b06      	ldr	r3, [sp, #24]
 80082dc:	4413      	add	r3, r2
 80082de:	930b      	str	r3, [sp, #44]	; 0x2c
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	930a      	str	r3, [sp, #40]	; 0x28
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	4621      	mov	r1, r4
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4650      	mov	r0, sl
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	f7ff fa76 	bl	80077e2 <quorem>
 80082f6:	4641      	mov	r1, r8
 80082f8:	9006      	str	r0, [sp, #24]
 80082fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082fe:	4650      	mov	r0, sl
 8008300:	f000 fc54 	bl	8008bac <__mcmp>
 8008304:	4632      	mov	r2, r6
 8008306:	9009      	str	r0, [sp, #36]	; 0x24
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f000 fc6a 	bl	8008be4 <__mdiff>
 8008310:	68c2      	ldr	r2, [r0, #12]
 8008312:	4607      	mov	r7, r0
 8008314:	bb02      	cbnz	r2, 8008358 <_dtoa_r+0xa60>
 8008316:	4601      	mov	r1, r0
 8008318:	4650      	mov	r0, sl
 800831a:	f000 fc47 	bl	8008bac <__mcmp>
 800831e:	4602      	mov	r2, r0
 8008320:	4639      	mov	r1, r7
 8008322:	4628      	mov	r0, r5
 8008324:	920c      	str	r2, [sp, #48]	; 0x30
 8008326:	f000 fa07 	bl	8008738 <_Bfree>
 800832a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800832c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800832e:	9f08      	ldr	r7, [sp, #32]
 8008330:	ea43 0102 	orr.w	r1, r3, r2
 8008334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008336:	4319      	orrs	r1, r3
 8008338:	d110      	bne.n	800835c <_dtoa_r+0xa64>
 800833a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800833e:	d029      	beq.n	8008394 <_dtoa_r+0xa9c>
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	2b00      	cmp	r3, #0
 8008344:	dd02      	ble.n	800834c <_dtoa_r+0xa54>
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	f883 9000 	strb.w	r9, [r3]
 8008352:	e777      	b.n	8008244 <_dtoa_r+0x94c>
 8008354:	4630      	mov	r0, r6
 8008356:	e7ba      	b.n	80082ce <_dtoa_r+0x9d6>
 8008358:	2201      	movs	r2, #1
 800835a:	e7e1      	b.n	8008320 <_dtoa_r+0xa28>
 800835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	db04      	blt.n	800836c <_dtoa_r+0xa74>
 8008362:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008364:	430b      	orrs	r3, r1
 8008366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008368:	430b      	orrs	r3, r1
 800836a:	d120      	bne.n	80083ae <_dtoa_r+0xab6>
 800836c:	2a00      	cmp	r2, #0
 800836e:	dded      	ble.n	800834c <_dtoa_r+0xa54>
 8008370:	4651      	mov	r1, sl
 8008372:	2201      	movs	r2, #1
 8008374:	4628      	mov	r0, r5
 8008376:	f000 fbad 	bl	8008ad4 <__lshift>
 800837a:	4621      	mov	r1, r4
 800837c:	4682      	mov	sl, r0
 800837e:	f000 fc15 	bl	8008bac <__mcmp>
 8008382:	2800      	cmp	r0, #0
 8008384:	dc03      	bgt.n	800838e <_dtoa_r+0xa96>
 8008386:	d1e1      	bne.n	800834c <_dtoa_r+0xa54>
 8008388:	f019 0f01 	tst.w	r9, #1
 800838c:	d0de      	beq.n	800834c <_dtoa_r+0xa54>
 800838e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008392:	d1d8      	bne.n	8008346 <_dtoa_r+0xa4e>
 8008394:	2339      	movs	r3, #57	; 0x39
 8008396:	9a04      	ldr	r2, [sp, #16]
 8008398:	7013      	strb	r3, [r2, #0]
 800839a:	463b      	mov	r3, r7
 800839c:	461f      	mov	r7, r3
 800839e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	2a39      	cmp	r2, #57	; 0x39
 80083a6:	d06b      	beq.n	8008480 <_dtoa_r+0xb88>
 80083a8:	3201      	adds	r2, #1
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e74a      	b.n	8008244 <_dtoa_r+0x94c>
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	dd07      	ble.n	80083c2 <_dtoa_r+0xaca>
 80083b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083b6:	d0ed      	beq.n	8008394 <_dtoa_r+0xa9c>
 80083b8:	9a04      	ldr	r2, [sp, #16]
 80083ba:	f109 0301 	add.w	r3, r9, #1
 80083be:	7013      	strb	r3, [r2, #0]
 80083c0:	e740      	b.n	8008244 <_dtoa_r+0x94c>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d042      	beq.n	8008454 <_dtoa_r+0xb5c>
 80083ce:	4651      	mov	r1, sl
 80083d0:	2300      	movs	r3, #0
 80083d2:	220a      	movs	r2, #10
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 f9d1 	bl	800877c <__multadd>
 80083da:	45b0      	cmp	r8, r6
 80083dc:	4682      	mov	sl, r0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	f04f 020a 	mov.w	r2, #10
 80083e6:	4641      	mov	r1, r8
 80083e8:	4628      	mov	r0, r5
 80083ea:	d107      	bne.n	80083fc <_dtoa_r+0xb04>
 80083ec:	f000 f9c6 	bl	800877c <__multadd>
 80083f0:	4680      	mov	r8, r0
 80083f2:	4606      	mov	r6, r0
 80083f4:	9b08      	ldr	r3, [sp, #32]
 80083f6:	3301      	adds	r3, #1
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	e775      	b.n	80082e8 <_dtoa_r+0x9f0>
 80083fc:	f000 f9be 	bl	800877c <__multadd>
 8008400:	4631      	mov	r1, r6
 8008402:	4680      	mov	r8, r0
 8008404:	2300      	movs	r3, #0
 8008406:	220a      	movs	r2, #10
 8008408:	4628      	mov	r0, r5
 800840a:	f000 f9b7 	bl	800877c <__multadd>
 800840e:	4606      	mov	r6, r0
 8008410:	e7f0      	b.n	80083f4 <_dtoa_r+0xafc>
 8008412:	9b08      	ldr	r3, [sp, #32]
 8008414:	9306      	str	r3, [sp, #24]
 8008416:	9f03      	ldr	r7, [sp, #12]
 8008418:	4621      	mov	r1, r4
 800841a:	4650      	mov	r0, sl
 800841c:	f7ff f9e1 	bl	80077e2 <quorem>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008426:	f807 9b01 	strb.w	r9, [r7], #1
 800842a:	1afa      	subs	r2, r7, r3
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	4293      	cmp	r3, r2
 8008430:	dd07      	ble.n	8008442 <_dtoa_r+0xb4a>
 8008432:	4651      	mov	r1, sl
 8008434:	2300      	movs	r3, #0
 8008436:	220a      	movs	r2, #10
 8008438:	4628      	mov	r0, r5
 800843a:	f000 f99f 	bl	800877c <__multadd>
 800843e:	4682      	mov	sl, r0
 8008440:	e7ea      	b.n	8008418 <_dtoa_r+0xb20>
 8008442:	9b06      	ldr	r3, [sp, #24]
 8008444:	f04f 0800 	mov.w	r8, #0
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfcc      	ite	gt
 800844c:	461f      	movgt	r7, r3
 800844e:	2701      	movle	r7, #1
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	441f      	add	r7, r3
 8008454:	4651      	mov	r1, sl
 8008456:	2201      	movs	r2, #1
 8008458:	4628      	mov	r0, r5
 800845a:	f000 fb3b 	bl	8008ad4 <__lshift>
 800845e:	4621      	mov	r1, r4
 8008460:	4682      	mov	sl, r0
 8008462:	f000 fba3 	bl	8008bac <__mcmp>
 8008466:	2800      	cmp	r0, #0
 8008468:	dc97      	bgt.n	800839a <_dtoa_r+0xaa2>
 800846a:	d102      	bne.n	8008472 <_dtoa_r+0xb7a>
 800846c:	f019 0f01 	tst.w	r9, #1
 8008470:	d193      	bne.n	800839a <_dtoa_r+0xaa2>
 8008472:	463b      	mov	r3, r7
 8008474:	461f      	mov	r7, r3
 8008476:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800847a:	2a30      	cmp	r2, #48	; 0x30
 800847c:	d0fa      	beq.n	8008474 <_dtoa_r+0xb7c>
 800847e:	e6e1      	b.n	8008244 <_dtoa_r+0x94c>
 8008480:	9a03      	ldr	r2, [sp, #12]
 8008482:	429a      	cmp	r2, r3
 8008484:	d18a      	bne.n	800839c <_dtoa_r+0xaa4>
 8008486:	2331      	movs	r3, #49	; 0x31
 8008488:	f10b 0b01 	add.w	fp, fp, #1
 800848c:	e797      	b.n	80083be <_dtoa_r+0xac6>
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <_dtoa_r+0xbc0>)
 8008490:	f7ff ba9f 	b.w	80079d2 <_dtoa_r+0xda>
 8008494:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008496:	2b00      	cmp	r3, #0
 8008498:	f47f aa77 	bne.w	800798a <_dtoa_r+0x92>
 800849c:	4b07      	ldr	r3, [pc, #28]	; (80084bc <_dtoa_r+0xbc4>)
 800849e:	f7ff ba98 	b.w	80079d2 <_dtoa_r+0xda>
 80084a2:	9b06      	ldr	r3, [sp, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dcb6      	bgt.n	8008416 <_dtoa_r+0xb1e>
 80084a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	f73f aeb5 	bgt.w	800821a <_dtoa_r+0x922>
 80084b0:	e7b1      	b.n	8008416 <_dtoa_r+0xb1e>
 80084b2:	bf00      	nop
 80084b4:	0800b7ce 	.word	0x0800b7ce
 80084b8:	0800b72e 	.word	0x0800b72e
 80084bc:	0800b752 	.word	0x0800b752

080084c0 <_free_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4605      	mov	r5, r0
 80084c4:	2900      	cmp	r1, #0
 80084c6:	d040      	beq.n	800854a <_free_r+0x8a>
 80084c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084cc:	1f0c      	subs	r4, r1, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bfb8      	it	lt
 80084d2:	18e4      	addlt	r4, r4, r3
 80084d4:	f000 f8e4 	bl	80086a0 <__malloc_lock>
 80084d8:	4a1c      	ldr	r2, [pc, #112]	; (800854c <_free_r+0x8c>)
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	b933      	cbnz	r3, 80084ec <_free_r+0x2c>
 80084de:	6063      	str	r3, [r4, #4]
 80084e0:	6014      	str	r4, [r2, #0]
 80084e2:	4628      	mov	r0, r5
 80084e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e8:	f000 b8e0 	b.w	80086ac <__malloc_unlock>
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	d908      	bls.n	8008502 <_free_r+0x42>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	1821      	adds	r1, r4, r0
 80084f4:	428b      	cmp	r3, r1
 80084f6:	bf01      	itttt	eq
 80084f8:	6819      	ldreq	r1, [r3, #0]
 80084fa:	685b      	ldreq	r3, [r3, #4]
 80084fc:	1809      	addeq	r1, r1, r0
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	e7ed      	b.n	80084de <_free_r+0x1e>
 8008502:	461a      	mov	r2, r3
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	b10b      	cbz	r3, 800850c <_free_r+0x4c>
 8008508:	42a3      	cmp	r3, r4
 800850a:	d9fa      	bls.n	8008502 <_free_r+0x42>
 800850c:	6811      	ldr	r1, [r2, #0]
 800850e:	1850      	adds	r0, r2, r1
 8008510:	42a0      	cmp	r0, r4
 8008512:	d10b      	bne.n	800852c <_free_r+0x6c>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	4401      	add	r1, r0
 8008518:	1850      	adds	r0, r2, r1
 800851a:	4283      	cmp	r3, r0
 800851c:	6011      	str	r1, [r2, #0]
 800851e:	d1e0      	bne.n	80084e2 <_free_r+0x22>
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4408      	add	r0, r1
 8008526:	6010      	str	r0, [r2, #0]
 8008528:	6053      	str	r3, [r2, #4]
 800852a:	e7da      	b.n	80084e2 <_free_r+0x22>
 800852c:	d902      	bls.n	8008534 <_free_r+0x74>
 800852e:	230c      	movs	r3, #12
 8008530:	602b      	str	r3, [r5, #0]
 8008532:	e7d6      	b.n	80084e2 <_free_r+0x22>
 8008534:	6820      	ldr	r0, [r4, #0]
 8008536:	1821      	adds	r1, r4, r0
 8008538:	428b      	cmp	r3, r1
 800853a:	bf01      	itttt	eq
 800853c:	6819      	ldreq	r1, [r3, #0]
 800853e:	685b      	ldreq	r3, [r3, #4]
 8008540:	1809      	addeq	r1, r1, r0
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	6063      	str	r3, [r4, #4]
 8008546:	6054      	str	r4, [r2, #4]
 8008548:	e7cb      	b.n	80084e2 <_free_r+0x22>
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	20001084 	.word	0x20001084

08008550 <malloc>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <malloc+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f000 b823 	b.w	80085a0 <_malloc_r>
 800855a:	bf00      	nop
 800855c:	20000090 	.word	0x20000090

08008560 <sbrk_aligned>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	4e0e      	ldr	r6, [pc, #56]	; (800859c <sbrk_aligned+0x3c>)
 8008564:	460c      	mov	r4, r1
 8008566:	6831      	ldr	r1, [r6, #0]
 8008568:	4605      	mov	r5, r0
 800856a:	b911      	cbnz	r1, 8008572 <sbrk_aligned+0x12>
 800856c:	f000 fe1e 	bl	80091ac <_sbrk_r>
 8008570:	6030      	str	r0, [r6, #0]
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	f000 fe19 	bl	80091ac <_sbrk_r>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	d00a      	beq.n	8008594 <sbrk_aligned+0x34>
 800857e:	1cc4      	adds	r4, r0, #3
 8008580:	f024 0403 	bic.w	r4, r4, #3
 8008584:	42a0      	cmp	r0, r4
 8008586:	d007      	beq.n	8008598 <sbrk_aligned+0x38>
 8008588:	1a21      	subs	r1, r4, r0
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fe0e 	bl	80091ac <_sbrk_r>
 8008590:	3001      	adds	r0, #1
 8008592:	d101      	bne.n	8008598 <sbrk_aligned+0x38>
 8008594:	f04f 34ff 	mov.w	r4, #4294967295
 8008598:	4620      	mov	r0, r4
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	20001088 	.word	0x20001088

080085a0 <_malloc_r>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	1ccd      	adds	r5, r1, #3
 80085a6:	f025 0503 	bic.w	r5, r5, #3
 80085aa:	3508      	adds	r5, #8
 80085ac:	2d0c      	cmp	r5, #12
 80085ae:	bf38      	it	cc
 80085b0:	250c      	movcc	r5, #12
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	4607      	mov	r7, r0
 80085b6:	db01      	blt.n	80085bc <_malloc_r+0x1c>
 80085b8:	42a9      	cmp	r1, r5
 80085ba:	d905      	bls.n	80085c8 <_malloc_r+0x28>
 80085bc:	230c      	movs	r3, #12
 80085be:	2600      	movs	r6, #0
 80085c0:	603b      	str	r3, [r7, #0]
 80085c2:	4630      	mov	r0, r6
 80085c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800869c <_malloc_r+0xfc>
 80085cc:	f000 f868 	bl	80086a0 <__malloc_lock>
 80085d0:	f8d8 3000 	ldr.w	r3, [r8]
 80085d4:	461c      	mov	r4, r3
 80085d6:	bb5c      	cbnz	r4, 8008630 <_malloc_r+0x90>
 80085d8:	4629      	mov	r1, r5
 80085da:	4638      	mov	r0, r7
 80085dc:	f7ff ffc0 	bl	8008560 <sbrk_aligned>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	4604      	mov	r4, r0
 80085e4:	d155      	bne.n	8008692 <_malloc_r+0xf2>
 80085e6:	f8d8 4000 	ldr.w	r4, [r8]
 80085ea:	4626      	mov	r6, r4
 80085ec:	2e00      	cmp	r6, #0
 80085ee:	d145      	bne.n	800867c <_malloc_r+0xdc>
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	d048      	beq.n	8008686 <_malloc_r+0xe6>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	4631      	mov	r1, r6
 80085f8:	4638      	mov	r0, r7
 80085fa:	eb04 0903 	add.w	r9, r4, r3
 80085fe:	f000 fdd5 	bl	80091ac <_sbrk_r>
 8008602:	4581      	cmp	r9, r0
 8008604:	d13f      	bne.n	8008686 <_malloc_r+0xe6>
 8008606:	6821      	ldr	r1, [r4, #0]
 8008608:	4638      	mov	r0, r7
 800860a:	1a6d      	subs	r5, r5, r1
 800860c:	4629      	mov	r1, r5
 800860e:	f7ff ffa7 	bl	8008560 <sbrk_aligned>
 8008612:	3001      	adds	r0, #1
 8008614:	d037      	beq.n	8008686 <_malloc_r+0xe6>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	442b      	add	r3, r5
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	f8d8 3000 	ldr.w	r3, [r8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d038      	beq.n	8008696 <_malloc_r+0xf6>
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	42a2      	cmp	r2, r4
 8008628:	d12b      	bne.n	8008682 <_malloc_r+0xe2>
 800862a:	2200      	movs	r2, #0
 800862c:	605a      	str	r2, [r3, #4]
 800862e:	e00f      	b.n	8008650 <_malloc_r+0xb0>
 8008630:	6822      	ldr	r2, [r4, #0]
 8008632:	1b52      	subs	r2, r2, r5
 8008634:	d41f      	bmi.n	8008676 <_malloc_r+0xd6>
 8008636:	2a0b      	cmp	r2, #11
 8008638:	d917      	bls.n	800866a <_malloc_r+0xca>
 800863a:	1961      	adds	r1, r4, r5
 800863c:	42a3      	cmp	r3, r4
 800863e:	6025      	str	r5, [r4, #0]
 8008640:	bf18      	it	ne
 8008642:	6059      	strne	r1, [r3, #4]
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	bf08      	it	eq
 8008648:	f8c8 1000 	streq.w	r1, [r8]
 800864c:	5162      	str	r2, [r4, r5]
 800864e:	604b      	str	r3, [r1, #4]
 8008650:	4638      	mov	r0, r7
 8008652:	f104 060b 	add.w	r6, r4, #11
 8008656:	f000 f829 	bl	80086ac <__malloc_unlock>
 800865a:	f026 0607 	bic.w	r6, r6, #7
 800865e:	1d23      	adds	r3, r4, #4
 8008660:	1af2      	subs	r2, r6, r3
 8008662:	d0ae      	beq.n	80085c2 <_malloc_r+0x22>
 8008664:	1b9b      	subs	r3, r3, r6
 8008666:	50a3      	str	r3, [r4, r2]
 8008668:	e7ab      	b.n	80085c2 <_malloc_r+0x22>
 800866a:	42a3      	cmp	r3, r4
 800866c:	6862      	ldr	r2, [r4, #4]
 800866e:	d1dd      	bne.n	800862c <_malloc_r+0x8c>
 8008670:	f8c8 2000 	str.w	r2, [r8]
 8008674:	e7ec      	b.n	8008650 <_malloc_r+0xb0>
 8008676:	4623      	mov	r3, r4
 8008678:	6864      	ldr	r4, [r4, #4]
 800867a:	e7ac      	b.n	80085d6 <_malloc_r+0x36>
 800867c:	4634      	mov	r4, r6
 800867e:	6876      	ldr	r6, [r6, #4]
 8008680:	e7b4      	b.n	80085ec <_malloc_r+0x4c>
 8008682:	4613      	mov	r3, r2
 8008684:	e7cc      	b.n	8008620 <_malloc_r+0x80>
 8008686:	230c      	movs	r3, #12
 8008688:	4638      	mov	r0, r7
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	f000 f80e 	bl	80086ac <__malloc_unlock>
 8008690:	e797      	b.n	80085c2 <_malloc_r+0x22>
 8008692:	6025      	str	r5, [r4, #0]
 8008694:	e7dc      	b.n	8008650 <_malloc_r+0xb0>
 8008696:	605b      	str	r3, [r3, #4]
 8008698:	deff      	udf	#255	; 0xff
 800869a:	bf00      	nop
 800869c:	20001084 	.word	0x20001084

080086a0 <__malloc_lock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__malloc_lock+0x8>)
 80086a2:	f7ff b880 	b.w	80077a6 <__retarget_lock_acquire_recursive>
 80086a6:	bf00      	nop
 80086a8:	20001080 	.word	0x20001080

080086ac <__malloc_unlock>:
 80086ac:	4801      	ldr	r0, [pc, #4]	; (80086b4 <__malloc_unlock+0x8>)
 80086ae:	f7ff b87b 	b.w	80077a8 <__retarget_lock_release_recursive>
 80086b2:	bf00      	nop
 80086b4:	20001080 	.word	0x20001080

080086b8 <_Balloc>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	69c6      	ldr	r6, [r0, #28]
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	b976      	cbnz	r6, 80086e0 <_Balloc+0x28>
 80086c2:	2010      	movs	r0, #16
 80086c4:	f7ff ff44 	bl	8008550 <malloc>
 80086c8:	4602      	mov	r2, r0
 80086ca:	61e0      	str	r0, [r4, #28]
 80086cc:	b920      	cbnz	r0, 80086d8 <_Balloc+0x20>
 80086ce:	216b      	movs	r1, #107	; 0x6b
 80086d0:	4b17      	ldr	r3, [pc, #92]	; (8008730 <_Balloc+0x78>)
 80086d2:	4818      	ldr	r0, [pc, #96]	; (8008734 <_Balloc+0x7c>)
 80086d4:	f000 fd7a 	bl	80091cc <__assert_func>
 80086d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086dc:	6006      	str	r6, [r0, #0]
 80086de:	60c6      	str	r6, [r0, #12]
 80086e0:	69e6      	ldr	r6, [r4, #28]
 80086e2:	68f3      	ldr	r3, [r6, #12]
 80086e4:	b183      	cbz	r3, 8008708 <_Balloc+0x50>
 80086e6:	69e3      	ldr	r3, [r4, #28]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086ee:	b9b8      	cbnz	r0, 8008720 <_Balloc+0x68>
 80086f0:	2101      	movs	r1, #1
 80086f2:	fa01 f605 	lsl.w	r6, r1, r5
 80086f6:	1d72      	adds	r2, r6, #5
 80086f8:	4620      	mov	r0, r4
 80086fa:	0092      	lsls	r2, r2, #2
 80086fc:	f000 fd84 	bl	8009208 <_calloc_r>
 8008700:	b160      	cbz	r0, 800871c <_Balloc+0x64>
 8008702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008706:	e00e      	b.n	8008726 <_Balloc+0x6e>
 8008708:	2221      	movs	r2, #33	; 0x21
 800870a:	2104      	movs	r1, #4
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fd7b 	bl	8009208 <_calloc_r>
 8008712:	69e3      	ldr	r3, [r4, #28]
 8008714:	60f0      	str	r0, [r6, #12]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e4      	bne.n	80086e6 <_Balloc+0x2e>
 800871c:	2000      	movs	r0, #0
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	6802      	ldr	r2, [r0, #0]
 8008722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008726:	2300      	movs	r3, #0
 8008728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800872c:	e7f7      	b.n	800871e <_Balloc+0x66>
 800872e:	bf00      	nop
 8008730:	0800b75f 	.word	0x0800b75f
 8008734:	0800b7df 	.word	0x0800b7df

08008738 <_Bfree>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	69c6      	ldr	r6, [r0, #28]
 800873c:	4605      	mov	r5, r0
 800873e:	460c      	mov	r4, r1
 8008740:	b976      	cbnz	r6, 8008760 <_Bfree+0x28>
 8008742:	2010      	movs	r0, #16
 8008744:	f7ff ff04 	bl	8008550 <malloc>
 8008748:	4602      	mov	r2, r0
 800874a:	61e8      	str	r0, [r5, #28]
 800874c:	b920      	cbnz	r0, 8008758 <_Bfree+0x20>
 800874e:	218f      	movs	r1, #143	; 0x8f
 8008750:	4b08      	ldr	r3, [pc, #32]	; (8008774 <_Bfree+0x3c>)
 8008752:	4809      	ldr	r0, [pc, #36]	; (8008778 <_Bfree+0x40>)
 8008754:	f000 fd3a 	bl	80091cc <__assert_func>
 8008758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800875c:	6006      	str	r6, [r0, #0]
 800875e:	60c6      	str	r6, [r0, #12]
 8008760:	b13c      	cbz	r4, 8008772 <_Bfree+0x3a>
 8008762:	69eb      	ldr	r3, [r5, #28]
 8008764:	6862      	ldr	r2, [r4, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800876c:	6021      	str	r1, [r4, #0]
 800876e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	0800b75f 	.word	0x0800b75f
 8008778:	0800b7df 	.word	0x0800b7df

0800877c <__multadd>:
 800877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008780:	4607      	mov	r7, r0
 8008782:	460c      	mov	r4, r1
 8008784:	461e      	mov	r6, r3
 8008786:	2000      	movs	r0, #0
 8008788:	690d      	ldr	r5, [r1, #16]
 800878a:	f101 0c14 	add.w	ip, r1, #20
 800878e:	f8dc 3000 	ldr.w	r3, [ip]
 8008792:	3001      	adds	r0, #1
 8008794:	b299      	uxth	r1, r3
 8008796:	fb02 6101 	mla	r1, r2, r1, r6
 800879a:	0c1e      	lsrs	r6, r3, #16
 800879c:	0c0b      	lsrs	r3, r1, #16
 800879e:	fb02 3306 	mla	r3, r2, r6, r3
 80087a2:	b289      	uxth	r1, r1
 80087a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087a8:	4285      	cmp	r5, r0
 80087aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087ae:	f84c 1b04 	str.w	r1, [ip], #4
 80087b2:	dcec      	bgt.n	800878e <__multadd+0x12>
 80087b4:	b30e      	cbz	r6, 80087fa <__multadd+0x7e>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dc19      	bgt.n	80087f0 <__multadd+0x74>
 80087bc:	6861      	ldr	r1, [r4, #4]
 80087be:	4638      	mov	r0, r7
 80087c0:	3101      	adds	r1, #1
 80087c2:	f7ff ff79 	bl	80086b8 <_Balloc>
 80087c6:	4680      	mov	r8, r0
 80087c8:	b928      	cbnz	r0, 80087d6 <__multadd+0x5a>
 80087ca:	4602      	mov	r2, r0
 80087cc:	21ba      	movs	r1, #186	; 0xba
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <__multadd+0x84>)
 80087d0:	480c      	ldr	r0, [pc, #48]	; (8008804 <__multadd+0x88>)
 80087d2:	f000 fcfb 	bl	80091cc <__assert_func>
 80087d6:	6922      	ldr	r2, [r4, #16]
 80087d8:	f104 010c 	add.w	r1, r4, #12
 80087dc:	3202      	adds	r2, #2
 80087de:	0092      	lsls	r2, r2, #2
 80087e0:	300c      	adds	r0, #12
 80087e2:	f7fe fff0 	bl	80077c6 <memcpy>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ffa5 	bl	8008738 <_Bfree>
 80087ee:	4644      	mov	r4, r8
 80087f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087f4:	3501      	adds	r5, #1
 80087f6:	615e      	str	r6, [r3, #20]
 80087f8:	6125      	str	r5, [r4, #16]
 80087fa:	4620      	mov	r0, r4
 80087fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008800:	0800b7ce 	.word	0x0800b7ce
 8008804:	0800b7df 	.word	0x0800b7df

08008808 <__hi0bits>:
 8008808:	0c02      	lsrs	r2, r0, #16
 800880a:	0412      	lsls	r2, r2, #16
 800880c:	4603      	mov	r3, r0
 800880e:	b9ca      	cbnz	r2, 8008844 <__hi0bits+0x3c>
 8008810:	0403      	lsls	r3, r0, #16
 8008812:	2010      	movs	r0, #16
 8008814:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008818:	bf04      	itt	eq
 800881a:	021b      	lsleq	r3, r3, #8
 800881c:	3008      	addeq	r0, #8
 800881e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008822:	bf04      	itt	eq
 8008824:	011b      	lsleq	r3, r3, #4
 8008826:	3004      	addeq	r0, #4
 8008828:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800882c:	bf04      	itt	eq
 800882e:	009b      	lsleq	r3, r3, #2
 8008830:	3002      	addeq	r0, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	db05      	blt.n	8008842 <__hi0bits+0x3a>
 8008836:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800883a:	f100 0001 	add.w	r0, r0, #1
 800883e:	bf08      	it	eq
 8008840:	2020      	moveq	r0, #32
 8008842:	4770      	bx	lr
 8008844:	2000      	movs	r0, #0
 8008846:	e7e5      	b.n	8008814 <__hi0bits+0xc>

08008848 <__lo0bits>:
 8008848:	6803      	ldr	r3, [r0, #0]
 800884a:	4602      	mov	r2, r0
 800884c:	f013 0007 	ands.w	r0, r3, #7
 8008850:	d00b      	beq.n	800886a <__lo0bits+0x22>
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d421      	bmi.n	800889a <__lo0bits+0x52>
 8008856:	0798      	lsls	r0, r3, #30
 8008858:	bf49      	itett	mi
 800885a:	085b      	lsrmi	r3, r3, #1
 800885c:	089b      	lsrpl	r3, r3, #2
 800885e:	2001      	movmi	r0, #1
 8008860:	6013      	strmi	r3, [r2, #0]
 8008862:	bf5c      	itt	pl
 8008864:	2002      	movpl	r0, #2
 8008866:	6013      	strpl	r3, [r2, #0]
 8008868:	4770      	bx	lr
 800886a:	b299      	uxth	r1, r3
 800886c:	b909      	cbnz	r1, 8008872 <__lo0bits+0x2a>
 800886e:	2010      	movs	r0, #16
 8008870:	0c1b      	lsrs	r3, r3, #16
 8008872:	b2d9      	uxtb	r1, r3
 8008874:	b909      	cbnz	r1, 800887a <__lo0bits+0x32>
 8008876:	3008      	adds	r0, #8
 8008878:	0a1b      	lsrs	r3, r3, #8
 800887a:	0719      	lsls	r1, r3, #28
 800887c:	bf04      	itt	eq
 800887e:	091b      	lsreq	r3, r3, #4
 8008880:	3004      	addeq	r0, #4
 8008882:	0799      	lsls	r1, r3, #30
 8008884:	bf04      	itt	eq
 8008886:	089b      	lsreq	r3, r3, #2
 8008888:	3002      	addeq	r0, #2
 800888a:	07d9      	lsls	r1, r3, #31
 800888c:	d403      	bmi.n	8008896 <__lo0bits+0x4e>
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	f100 0001 	add.w	r0, r0, #1
 8008894:	d003      	beq.n	800889e <__lo0bits+0x56>
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	4770      	bx	lr
 800889a:	2000      	movs	r0, #0
 800889c:	4770      	bx	lr
 800889e:	2020      	movs	r0, #32
 80088a0:	4770      	bx	lr
	...

080088a4 <__i2b>:
 80088a4:	b510      	push	{r4, lr}
 80088a6:	460c      	mov	r4, r1
 80088a8:	2101      	movs	r1, #1
 80088aa:	f7ff ff05 	bl	80086b8 <_Balloc>
 80088ae:	4602      	mov	r2, r0
 80088b0:	b928      	cbnz	r0, 80088be <__i2b+0x1a>
 80088b2:	f240 1145 	movw	r1, #325	; 0x145
 80088b6:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <__i2b+0x24>)
 80088b8:	4804      	ldr	r0, [pc, #16]	; (80088cc <__i2b+0x28>)
 80088ba:	f000 fc87 	bl	80091cc <__assert_func>
 80088be:	2301      	movs	r3, #1
 80088c0:	6144      	str	r4, [r0, #20]
 80088c2:	6103      	str	r3, [r0, #16]
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	bf00      	nop
 80088c8:	0800b7ce 	.word	0x0800b7ce
 80088cc:	0800b7df 	.word	0x0800b7df

080088d0 <__multiply>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	4691      	mov	r9, r2
 80088d6:	690a      	ldr	r2, [r1, #16]
 80088d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088dc:	460c      	mov	r4, r1
 80088de:	429a      	cmp	r2, r3
 80088e0:	bfbe      	ittt	lt
 80088e2:	460b      	movlt	r3, r1
 80088e4:	464c      	movlt	r4, r9
 80088e6:	4699      	movlt	r9, r3
 80088e8:	6927      	ldr	r7, [r4, #16]
 80088ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	6861      	ldr	r1, [r4, #4]
 80088f2:	eb07 060a 	add.w	r6, r7, sl
 80088f6:	42b3      	cmp	r3, r6
 80088f8:	b085      	sub	sp, #20
 80088fa:	bfb8      	it	lt
 80088fc:	3101      	addlt	r1, #1
 80088fe:	f7ff fedb 	bl	80086b8 <_Balloc>
 8008902:	b930      	cbnz	r0, 8008912 <__multiply+0x42>
 8008904:	4602      	mov	r2, r0
 8008906:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800890a:	4b43      	ldr	r3, [pc, #268]	; (8008a18 <__multiply+0x148>)
 800890c:	4843      	ldr	r0, [pc, #268]	; (8008a1c <__multiply+0x14c>)
 800890e:	f000 fc5d 	bl	80091cc <__assert_func>
 8008912:	f100 0514 	add.w	r5, r0, #20
 8008916:	462b      	mov	r3, r5
 8008918:	2200      	movs	r2, #0
 800891a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800891e:	4543      	cmp	r3, r8
 8008920:	d321      	bcc.n	8008966 <__multiply+0x96>
 8008922:	f104 0314 	add.w	r3, r4, #20
 8008926:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800892a:	f109 0314 	add.w	r3, r9, #20
 800892e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008932:	9202      	str	r2, [sp, #8]
 8008934:	1b3a      	subs	r2, r7, r4
 8008936:	3a15      	subs	r2, #21
 8008938:	f022 0203 	bic.w	r2, r2, #3
 800893c:	3204      	adds	r2, #4
 800893e:	f104 0115 	add.w	r1, r4, #21
 8008942:	428f      	cmp	r7, r1
 8008944:	bf38      	it	cc
 8008946:	2204      	movcc	r2, #4
 8008948:	9201      	str	r2, [sp, #4]
 800894a:	9a02      	ldr	r2, [sp, #8]
 800894c:	9303      	str	r3, [sp, #12]
 800894e:	429a      	cmp	r2, r3
 8008950:	d80c      	bhi.n	800896c <__multiply+0x9c>
 8008952:	2e00      	cmp	r6, #0
 8008954:	dd03      	ble.n	800895e <__multiply+0x8e>
 8008956:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800895a:	2b00      	cmp	r3, #0
 800895c:	d05a      	beq.n	8008a14 <__multiply+0x144>
 800895e:	6106      	str	r6, [r0, #16]
 8008960:	b005      	add	sp, #20
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	f843 2b04 	str.w	r2, [r3], #4
 800896a:	e7d8      	b.n	800891e <__multiply+0x4e>
 800896c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008970:	f1ba 0f00 	cmp.w	sl, #0
 8008974:	d023      	beq.n	80089be <__multiply+0xee>
 8008976:	46a9      	mov	r9, r5
 8008978:	f04f 0c00 	mov.w	ip, #0
 800897c:	f104 0e14 	add.w	lr, r4, #20
 8008980:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008984:	f8d9 1000 	ldr.w	r1, [r9]
 8008988:	fa1f fb82 	uxth.w	fp, r2
 800898c:	b289      	uxth	r1, r1
 800898e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008992:	4461      	add	r1, ip
 8008994:	f8d9 c000 	ldr.w	ip, [r9]
 8008998:	0c12      	lsrs	r2, r2, #16
 800899a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800899e:	fb0a c202 	mla	r2, sl, r2, ip
 80089a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089a6:	b289      	uxth	r1, r1
 80089a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089ac:	4577      	cmp	r7, lr
 80089ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089b2:	f849 1b04 	str.w	r1, [r9], #4
 80089b6:	d8e3      	bhi.n	8008980 <__multiply+0xb0>
 80089b8:	9a01      	ldr	r2, [sp, #4]
 80089ba:	f845 c002 	str.w	ip, [r5, r2]
 80089be:	9a03      	ldr	r2, [sp, #12]
 80089c0:	3304      	adds	r3, #4
 80089c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089c6:	f1b9 0f00 	cmp.w	r9, #0
 80089ca:	d021      	beq.n	8008a10 <__multiply+0x140>
 80089cc:	46ae      	mov	lr, r5
 80089ce:	f04f 0a00 	mov.w	sl, #0
 80089d2:	6829      	ldr	r1, [r5, #0]
 80089d4:	f104 0c14 	add.w	ip, r4, #20
 80089d8:	f8bc b000 	ldrh.w	fp, [ip]
 80089dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089e0:	b289      	uxth	r1, r1
 80089e2:	fb09 220b 	mla	r2, r9, fp, r2
 80089e6:	4452      	add	r2, sl
 80089e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089ec:	f84e 1b04 	str.w	r1, [lr], #4
 80089f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80089f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089f8:	f8be 1000 	ldrh.w	r1, [lr]
 80089fc:	4567      	cmp	r7, ip
 80089fe:	fb09 110a 	mla	r1, r9, sl, r1
 8008a02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a0a:	d8e5      	bhi.n	80089d8 <__multiply+0x108>
 8008a0c:	9a01      	ldr	r2, [sp, #4]
 8008a0e:	50a9      	str	r1, [r5, r2]
 8008a10:	3504      	adds	r5, #4
 8008a12:	e79a      	b.n	800894a <__multiply+0x7a>
 8008a14:	3e01      	subs	r6, #1
 8008a16:	e79c      	b.n	8008952 <__multiply+0x82>
 8008a18:	0800b7ce 	.word	0x0800b7ce
 8008a1c:	0800b7df 	.word	0x0800b7df

08008a20 <__pow5mult>:
 8008a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a24:	4615      	mov	r5, r2
 8008a26:	f012 0203 	ands.w	r2, r2, #3
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	d007      	beq.n	8008a40 <__pow5mult+0x20>
 8008a30:	4c25      	ldr	r4, [pc, #148]	; (8008ac8 <__pow5mult+0xa8>)
 8008a32:	3a01      	subs	r2, #1
 8008a34:	2300      	movs	r3, #0
 8008a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a3a:	f7ff fe9f 	bl	800877c <__multadd>
 8008a3e:	4607      	mov	r7, r0
 8008a40:	10ad      	asrs	r5, r5, #2
 8008a42:	d03d      	beq.n	8008ac0 <__pow5mult+0xa0>
 8008a44:	69f4      	ldr	r4, [r6, #28]
 8008a46:	b97c      	cbnz	r4, 8008a68 <__pow5mult+0x48>
 8008a48:	2010      	movs	r0, #16
 8008a4a:	f7ff fd81 	bl	8008550 <malloc>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	61f0      	str	r0, [r6, #28]
 8008a52:	b928      	cbnz	r0, 8008a60 <__pow5mult+0x40>
 8008a54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008a58:	4b1c      	ldr	r3, [pc, #112]	; (8008acc <__pow5mult+0xac>)
 8008a5a:	481d      	ldr	r0, [pc, #116]	; (8008ad0 <__pow5mult+0xb0>)
 8008a5c:	f000 fbb6 	bl	80091cc <__assert_func>
 8008a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a64:	6004      	str	r4, [r0, #0]
 8008a66:	60c4      	str	r4, [r0, #12]
 8008a68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a70:	b94c      	cbnz	r4, 8008a86 <__pow5mult+0x66>
 8008a72:	f240 2171 	movw	r1, #625	; 0x271
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ff14 	bl	80088a4 <__i2b>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a84:	6003      	str	r3, [r0, #0]
 8008a86:	f04f 0900 	mov.w	r9, #0
 8008a8a:	07eb      	lsls	r3, r5, #31
 8008a8c:	d50a      	bpl.n	8008aa4 <__pow5mult+0x84>
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4622      	mov	r2, r4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff ff1c 	bl	80088d0 <__multiply>
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff fe4b 	bl	8008738 <_Bfree>
 8008aa2:	4647      	mov	r7, r8
 8008aa4:	106d      	asrs	r5, r5, #1
 8008aa6:	d00b      	beq.n	8008ac0 <__pow5mult+0xa0>
 8008aa8:	6820      	ldr	r0, [r4, #0]
 8008aaa:	b938      	cbnz	r0, 8008abc <__pow5mult+0x9c>
 8008aac:	4622      	mov	r2, r4
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff ff0d 	bl	80088d0 <__multiply>
 8008ab6:	6020      	str	r0, [r4, #0]
 8008ab8:	f8c0 9000 	str.w	r9, [r0]
 8008abc:	4604      	mov	r4, r0
 8008abe:	e7e4      	b.n	8008a8a <__pow5mult+0x6a>
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	bf00      	nop
 8008ac8:	0800b928 	.word	0x0800b928
 8008acc:	0800b75f 	.word	0x0800b75f
 8008ad0:	0800b7df 	.word	0x0800b7df

08008ad4 <__lshift>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	460c      	mov	r4, r1
 8008ada:	4607      	mov	r7, r0
 8008adc:	4691      	mov	r9, r2
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	6849      	ldr	r1, [r1, #4]
 8008ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aec:	f108 0601 	add.w	r6, r8, #1
 8008af0:	42b3      	cmp	r3, r6
 8008af2:	db0b      	blt.n	8008b0c <__lshift+0x38>
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff fddf 	bl	80086b8 <_Balloc>
 8008afa:	4605      	mov	r5, r0
 8008afc:	b948      	cbnz	r0, 8008b12 <__lshift+0x3e>
 8008afe:	4602      	mov	r2, r0
 8008b00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <__lshift+0xd0>)
 8008b06:	4828      	ldr	r0, [pc, #160]	; (8008ba8 <__lshift+0xd4>)
 8008b08:	f000 fb60 	bl	80091cc <__assert_func>
 8008b0c:	3101      	adds	r1, #1
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	e7ee      	b.n	8008af0 <__lshift+0x1c>
 8008b12:	2300      	movs	r3, #0
 8008b14:	f100 0114 	add.w	r1, r0, #20
 8008b18:	f100 0210 	add.w	r2, r0, #16
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	4553      	cmp	r3, sl
 8008b20:	db33      	blt.n	8008b8a <__lshift+0xb6>
 8008b22:	6920      	ldr	r0, [r4, #16]
 8008b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b28:	f104 0314 	add.w	r3, r4, #20
 8008b2c:	f019 091f 	ands.w	r9, r9, #31
 8008b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b38:	d02b      	beq.n	8008b92 <__lshift+0xbe>
 8008b3a:	468a      	mov	sl, r1
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	fa00 f009 	lsl.w	r0, r0, r9
 8008b48:	4310      	orrs	r0, r2
 8008b4a:	f84a 0b04 	str.w	r0, [sl], #4
 8008b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b52:	459c      	cmp	ip, r3
 8008b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b58:	d8f3      	bhi.n	8008b42 <__lshift+0x6e>
 8008b5a:	ebac 0304 	sub.w	r3, ip, r4
 8008b5e:	3b15      	subs	r3, #21
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	3304      	adds	r3, #4
 8008b66:	f104 0015 	add.w	r0, r4, #21
 8008b6a:	4584      	cmp	ip, r0
 8008b6c:	bf38      	it	cc
 8008b6e:	2304      	movcc	r3, #4
 8008b70:	50ca      	str	r2, [r1, r3]
 8008b72:	b10a      	cbz	r2, 8008b78 <__lshift+0xa4>
 8008b74:	f108 0602 	add.w	r6, r8, #2
 8008b78:	3e01      	subs	r6, #1
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	612e      	str	r6, [r5, #16]
 8008b80:	f7ff fdda 	bl	8008738 <_Bfree>
 8008b84:	4628      	mov	r0, r5
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b8e:	3301      	adds	r3, #1
 8008b90:	e7c5      	b.n	8008b1e <__lshift+0x4a>
 8008b92:	3904      	subs	r1, #4
 8008b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b98:	459c      	cmp	ip, r3
 8008b9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b9e:	d8f9      	bhi.n	8008b94 <__lshift+0xc0>
 8008ba0:	e7ea      	b.n	8008b78 <__lshift+0xa4>
 8008ba2:	bf00      	nop
 8008ba4:	0800b7ce 	.word	0x0800b7ce
 8008ba8:	0800b7df 	.word	0x0800b7df

08008bac <__mcmp>:
 8008bac:	4603      	mov	r3, r0
 8008bae:	690a      	ldr	r2, [r1, #16]
 8008bb0:	6900      	ldr	r0, [r0, #16]
 8008bb2:	b530      	push	{r4, r5, lr}
 8008bb4:	1a80      	subs	r0, r0, r2
 8008bb6:	d10d      	bne.n	8008bd4 <__mcmp+0x28>
 8008bb8:	3314      	adds	r3, #20
 8008bba:	3114      	adds	r1, #20
 8008bbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bcc:	4295      	cmp	r5, r2
 8008bce:	d002      	beq.n	8008bd6 <__mcmp+0x2a>
 8008bd0:	d304      	bcc.n	8008bdc <__mcmp+0x30>
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	bd30      	pop	{r4, r5, pc}
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	d3f4      	bcc.n	8008bc4 <__mcmp+0x18>
 8008bda:	e7fb      	b.n	8008bd4 <__mcmp+0x28>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e7f8      	b.n	8008bd4 <__mcmp+0x28>
	...

08008be4 <__mdiff>:
 8008be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	460d      	mov	r5, r1
 8008bea:	4607      	mov	r7, r0
 8008bec:	4611      	mov	r1, r2
 8008bee:	4628      	mov	r0, r5
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	f7ff ffdb 	bl	8008bac <__mcmp>
 8008bf6:	1e06      	subs	r6, r0, #0
 8008bf8:	d111      	bne.n	8008c1e <__mdiff+0x3a>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff fd5b 	bl	80086b8 <_Balloc>
 8008c02:	4602      	mov	r2, r0
 8008c04:	b928      	cbnz	r0, 8008c12 <__mdiff+0x2e>
 8008c06:	f240 2137 	movw	r1, #567	; 0x237
 8008c0a:	4b3a      	ldr	r3, [pc, #232]	; (8008cf4 <__mdiff+0x110>)
 8008c0c:	483a      	ldr	r0, [pc, #232]	; (8008cf8 <__mdiff+0x114>)
 8008c0e:	f000 fadd 	bl	80091cc <__assert_func>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c18:	4610      	mov	r0, r2
 8008c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1e:	bfa4      	itt	ge
 8008c20:	4623      	movge	r3, r4
 8008c22:	462c      	movge	r4, r5
 8008c24:	4638      	mov	r0, r7
 8008c26:	6861      	ldr	r1, [r4, #4]
 8008c28:	bfa6      	itte	ge
 8008c2a:	461d      	movge	r5, r3
 8008c2c:	2600      	movge	r6, #0
 8008c2e:	2601      	movlt	r6, #1
 8008c30:	f7ff fd42 	bl	80086b8 <_Balloc>
 8008c34:	4602      	mov	r2, r0
 8008c36:	b918      	cbnz	r0, 8008c40 <__mdiff+0x5c>
 8008c38:	f240 2145 	movw	r1, #581	; 0x245
 8008c3c:	4b2d      	ldr	r3, [pc, #180]	; (8008cf4 <__mdiff+0x110>)
 8008c3e:	e7e5      	b.n	8008c0c <__mdiff+0x28>
 8008c40:	f102 0814 	add.w	r8, r2, #20
 8008c44:	46c2      	mov	sl, r8
 8008c46:	f04f 0c00 	mov.w	ip, #0
 8008c4a:	6927      	ldr	r7, [r4, #16]
 8008c4c:	60c6      	str	r6, [r0, #12]
 8008c4e:	692e      	ldr	r6, [r5, #16]
 8008c50:	f104 0014 	add.w	r0, r4, #20
 8008c54:	f105 0914 	add.w	r9, r5, #20
 8008c58:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008c5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c60:	3410      	adds	r4, #16
 8008c62:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008c66:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c6a:	fa1f f18b 	uxth.w	r1, fp
 8008c6e:	4461      	add	r1, ip
 8008c70:	fa1f fc83 	uxth.w	ip, r3
 8008c74:	0c1b      	lsrs	r3, r3, #16
 8008c76:	eba1 010c 	sub.w	r1, r1, ip
 8008c7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c82:	b289      	uxth	r1, r1
 8008c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c88:	454e      	cmp	r6, r9
 8008c8a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c8e:	f84a 1b04 	str.w	r1, [sl], #4
 8008c92:	d8e6      	bhi.n	8008c62 <__mdiff+0x7e>
 8008c94:	1b73      	subs	r3, r6, r5
 8008c96:	3b15      	subs	r3, #21
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3515      	adds	r5, #21
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	42ae      	cmp	r6, r5
 8008ca2:	bf38      	it	cc
 8008ca4:	2304      	movcc	r3, #4
 8008ca6:	4418      	add	r0, r3
 8008ca8:	4443      	add	r3, r8
 8008caa:	461e      	mov	r6, r3
 8008cac:	4605      	mov	r5, r0
 8008cae:	4575      	cmp	r5, lr
 8008cb0:	d30e      	bcc.n	8008cd0 <__mdiff+0xec>
 8008cb2:	f10e 0103 	add.w	r1, lr, #3
 8008cb6:	1a09      	subs	r1, r1, r0
 8008cb8:	f021 0103 	bic.w	r1, r1, #3
 8008cbc:	3803      	subs	r0, #3
 8008cbe:	4586      	cmp	lr, r0
 8008cc0:	bf38      	it	cc
 8008cc2:	2100      	movcc	r1, #0
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cca:	b189      	cbz	r1, 8008cf0 <__mdiff+0x10c>
 8008ccc:	6117      	str	r7, [r2, #16]
 8008cce:	e7a3      	b.n	8008c18 <__mdiff+0x34>
 8008cd0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008cd4:	fa1f f188 	uxth.w	r1, r8
 8008cd8:	4461      	add	r1, ip
 8008cda:	140c      	asrs	r4, r1, #16
 8008cdc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ce0:	b289      	uxth	r1, r1
 8008ce2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ce6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008cea:	f846 1b04 	str.w	r1, [r6], #4
 8008cee:	e7de      	b.n	8008cae <__mdiff+0xca>
 8008cf0:	3f01      	subs	r7, #1
 8008cf2:	e7e8      	b.n	8008cc6 <__mdiff+0xe2>
 8008cf4:	0800b7ce 	.word	0x0800b7ce
 8008cf8:	0800b7df 	.word	0x0800b7df

08008cfc <__d2b>:
 8008cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cfe:	2101      	movs	r1, #1
 8008d00:	4617      	mov	r7, r2
 8008d02:	461c      	mov	r4, r3
 8008d04:	9e08      	ldr	r6, [sp, #32]
 8008d06:	f7ff fcd7 	bl	80086b8 <_Balloc>
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	b930      	cbnz	r0, 8008d1c <__d2b+0x20>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f240 310f 	movw	r1, #783	; 0x30f
 8008d14:	4b22      	ldr	r3, [pc, #136]	; (8008da0 <__d2b+0xa4>)
 8008d16:	4823      	ldr	r0, [pc, #140]	; (8008da4 <__d2b+0xa8>)
 8008d18:	f000 fa58 	bl	80091cc <__assert_func>
 8008d1c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008d20:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008d24:	bb24      	cbnz	r4, 8008d70 <__d2b+0x74>
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	d026      	beq.n	8008d7a <__d2b+0x7e>
 8008d2c:	4668      	mov	r0, sp
 8008d2e:	9700      	str	r7, [sp, #0]
 8008d30:	f7ff fd8a 	bl	8008848 <__lo0bits>
 8008d34:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d38:	b1e8      	cbz	r0, 8008d76 <__d2b+0x7a>
 8008d3a:	f1c0 0320 	rsb	r3, r0, #32
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	430b      	orrs	r3, r1
 8008d44:	40c2      	lsrs	r2, r0
 8008d46:	616b      	str	r3, [r5, #20]
 8008d48:	9201      	str	r2, [sp, #4]
 8008d4a:	9b01      	ldr	r3, [sp, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bf14      	ite	ne
 8008d50:	2102      	movne	r1, #2
 8008d52:	2101      	moveq	r1, #1
 8008d54:	61ab      	str	r3, [r5, #24]
 8008d56:	6129      	str	r1, [r5, #16]
 8008d58:	b1bc      	cbz	r4, 8008d8a <__d2b+0x8e>
 8008d5a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008d5e:	4404      	add	r4, r0
 8008d60:	6034      	str	r4, [r6, #0]
 8008d62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	6018      	str	r0, [r3, #0]
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	b003      	add	sp, #12
 8008d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d74:	e7d7      	b.n	8008d26 <__d2b+0x2a>
 8008d76:	6169      	str	r1, [r5, #20]
 8008d78:	e7e7      	b.n	8008d4a <__d2b+0x4e>
 8008d7a:	a801      	add	r0, sp, #4
 8008d7c:	f7ff fd64 	bl	8008848 <__lo0bits>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	2101      	movs	r1, #1
 8008d84:	616b      	str	r3, [r5, #20]
 8008d86:	3020      	adds	r0, #32
 8008d88:	e7e5      	b.n	8008d56 <__d2b+0x5a>
 8008d8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d8e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008d92:	6030      	str	r0, [r6, #0]
 8008d94:	6918      	ldr	r0, [r3, #16]
 8008d96:	f7ff fd37 	bl	8008808 <__hi0bits>
 8008d9a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d9e:	e7e2      	b.n	8008d66 <__d2b+0x6a>
 8008da0:	0800b7ce 	.word	0x0800b7ce
 8008da4:	0800b7df 	.word	0x0800b7df

08008da8 <__ssputs_r>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	461f      	mov	r7, r3
 8008dae:	688e      	ldr	r6, [r1, #8]
 8008db0:	4682      	mov	sl, r0
 8008db2:	42be      	cmp	r6, r7
 8008db4:	460c      	mov	r4, r1
 8008db6:	4690      	mov	r8, r2
 8008db8:	680b      	ldr	r3, [r1, #0]
 8008dba:	d82c      	bhi.n	8008e16 <__ssputs_r+0x6e>
 8008dbc:	898a      	ldrh	r2, [r1, #12]
 8008dbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc2:	d026      	beq.n	8008e12 <__ssputs_r+0x6a>
 8008dc4:	6965      	ldr	r5, [r4, #20]
 8008dc6:	6909      	ldr	r1, [r1, #16]
 8008dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dcc:	eba3 0901 	sub.w	r9, r3, r1
 8008dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dd4:	1c7b      	adds	r3, r7, #1
 8008dd6:	444b      	add	r3, r9
 8008dd8:	106d      	asrs	r5, r5, #1
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	bf38      	it	cc
 8008dde:	461d      	movcc	r5, r3
 8008de0:	0553      	lsls	r3, r2, #21
 8008de2:	d527      	bpl.n	8008e34 <__ssputs_r+0x8c>
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7ff fbdb 	bl	80085a0 <_malloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	b360      	cbz	r0, 8008e48 <__ssputs_r+0xa0>
 8008dee:	464a      	mov	r2, r9
 8008df0:	6921      	ldr	r1, [r4, #16]
 8008df2:	f7fe fce8 	bl	80077c6 <memcpy>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	6126      	str	r6, [r4, #16]
 8008e04:	444e      	add	r6, r9
 8008e06:	6026      	str	r6, [r4, #0]
 8008e08:	463e      	mov	r6, r7
 8008e0a:	6165      	str	r5, [r4, #20]
 8008e0c:	eba5 0509 	sub.w	r5, r5, r9
 8008e10:	60a5      	str	r5, [r4, #8]
 8008e12:	42be      	cmp	r6, r7
 8008e14:	d900      	bls.n	8008e18 <__ssputs_r+0x70>
 8008e16:	463e      	mov	r6, r7
 8008e18:	4632      	mov	r2, r6
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	f7fe fc2a 	bl	8007676 <memmove>
 8008e22:	2000      	movs	r0, #0
 8008e24:	68a3      	ldr	r3, [r4, #8]
 8008e26:	1b9b      	subs	r3, r3, r6
 8008e28:	60a3      	str	r3, [r4, #8]
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	4433      	add	r3, r6
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e34:	462a      	mov	r2, r5
 8008e36:	f000 fa0d 	bl	8009254 <_realloc_r>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1e0      	bne.n	8008e02 <__ssputs_r+0x5a>
 8008e40:	4650      	mov	r0, sl
 8008e42:	6921      	ldr	r1, [r4, #16]
 8008e44:	f7ff fb3c 	bl	80084c0 <_free_r>
 8008e48:	230c      	movs	r3, #12
 8008e4a:	f8ca 3000 	str.w	r3, [sl]
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	e7e9      	b.n	8008e30 <__ssputs_r+0x88>

08008e5c <_svfiprintf_r>:
 8008e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	4698      	mov	r8, r3
 8008e62:	898b      	ldrh	r3, [r1, #12]
 8008e64:	4607      	mov	r7, r0
 8008e66:	061b      	lsls	r3, r3, #24
 8008e68:	460d      	mov	r5, r1
 8008e6a:	4614      	mov	r4, r2
 8008e6c:	b09d      	sub	sp, #116	; 0x74
 8008e6e:	d50e      	bpl.n	8008e8e <_svfiprintf_r+0x32>
 8008e70:	690b      	ldr	r3, [r1, #16]
 8008e72:	b963      	cbnz	r3, 8008e8e <_svfiprintf_r+0x32>
 8008e74:	2140      	movs	r1, #64	; 0x40
 8008e76:	f7ff fb93 	bl	80085a0 <_malloc_r>
 8008e7a:	6028      	str	r0, [r5, #0]
 8008e7c:	6128      	str	r0, [r5, #16]
 8008e7e:	b920      	cbnz	r0, 8008e8a <_svfiprintf_r+0x2e>
 8008e80:	230c      	movs	r3, #12
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e0d0      	b.n	800902c <_svfiprintf_r+0x1d0>
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	616b      	str	r3, [r5, #20]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9309      	str	r3, [sp, #36]	; 0x24
 8008e92:	2320      	movs	r3, #32
 8008e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e98:	2330      	movs	r3, #48	; 0x30
 8008e9a:	f04f 0901 	mov.w	r9, #1
 8008e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009044 <_svfiprintf_r+0x1e8>
 8008ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eaa:	4623      	mov	r3, r4
 8008eac:	469a      	mov	sl, r3
 8008eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb2:	b10a      	cbz	r2, 8008eb8 <_svfiprintf_r+0x5c>
 8008eb4:	2a25      	cmp	r2, #37	; 0x25
 8008eb6:	d1f9      	bne.n	8008eac <_svfiprintf_r+0x50>
 8008eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ebc:	d00b      	beq.n	8008ed6 <_svfiprintf_r+0x7a>
 8008ebe:	465b      	mov	r3, fp
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff6f 	bl	8008da8 <__ssputs_r>
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f000 80a9 	beq.w	8009022 <_svfiprintf_r+0x1c6>
 8008ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed2:	445a      	add	r2, fp
 8008ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 80a1 	beq.w	8009022 <_svfiprintf_r+0x1c6>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eea:	f10a 0a01 	add.w	sl, sl, #1
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef8:	4654      	mov	r4, sl
 8008efa:	2205      	movs	r2, #5
 8008efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f00:	4850      	ldr	r0, [pc, #320]	; (8009044 <_svfiprintf_r+0x1e8>)
 8008f02:	f7fe fc52 	bl	80077aa <memchr>
 8008f06:	9a04      	ldr	r2, [sp, #16]
 8008f08:	b9d8      	cbnz	r0, 8008f42 <_svfiprintf_r+0xe6>
 8008f0a:	06d0      	lsls	r0, r2, #27
 8008f0c:	bf44      	itt	mi
 8008f0e:	2320      	movmi	r3, #32
 8008f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f14:	0711      	lsls	r1, r2, #28
 8008f16:	bf44      	itt	mi
 8008f18:	232b      	movmi	r3, #43	; 0x2b
 8008f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f22:	2b2a      	cmp	r3, #42	; 0x2a
 8008f24:	d015      	beq.n	8008f52 <_svfiprintf_r+0xf6>
 8008f26:	4654      	mov	r4, sl
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f04f 0c0a 	mov.w	ip, #10
 8008f2e:	9a07      	ldr	r2, [sp, #28]
 8008f30:	4621      	mov	r1, r4
 8008f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f36:	3b30      	subs	r3, #48	; 0x30
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d94d      	bls.n	8008fd8 <_svfiprintf_r+0x17c>
 8008f3c:	b1b0      	cbz	r0, 8008f6c <_svfiprintf_r+0x110>
 8008f3e:	9207      	str	r2, [sp, #28]
 8008f40:	e014      	b.n	8008f6c <_svfiprintf_r+0x110>
 8008f42:	eba0 0308 	sub.w	r3, r0, r8
 8008f46:	fa09 f303 	lsl.w	r3, r9, r3
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	46a2      	mov	sl, r4
 8008f4e:	9304      	str	r3, [sp, #16]
 8008f50:	e7d2      	b.n	8008ef8 <_svfiprintf_r+0x9c>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	9103      	str	r1, [sp, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfbb      	ittet	lt
 8008f5e:	425b      	neglt	r3, r3
 8008f60:	f042 0202 	orrlt.w	r2, r2, #2
 8008f64:	9307      	strge	r3, [sp, #28]
 8008f66:	9307      	strlt	r3, [sp, #28]
 8008f68:	bfb8      	it	lt
 8008f6a:	9204      	strlt	r2, [sp, #16]
 8008f6c:	7823      	ldrb	r3, [r4, #0]
 8008f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f70:	d10c      	bne.n	8008f8c <_svfiprintf_r+0x130>
 8008f72:	7863      	ldrb	r3, [r4, #1]
 8008f74:	2b2a      	cmp	r3, #42	; 0x2a
 8008f76:	d134      	bne.n	8008fe2 <_svfiprintf_r+0x186>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	3402      	adds	r4, #2
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	9203      	str	r2, [sp, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfb8      	it	lt
 8008f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f8a:	9305      	str	r3, [sp, #20]
 8008f8c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009048 <_svfiprintf_r+0x1ec>
 8008f90:	2203      	movs	r2, #3
 8008f92:	4650      	mov	r0, sl
 8008f94:	7821      	ldrb	r1, [r4, #0]
 8008f96:	f7fe fc08 	bl	80077aa <memchr>
 8008f9a:	b138      	cbz	r0, 8008fac <_svfiprintf_r+0x150>
 8008f9c:	2240      	movs	r2, #64	; 0x40
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	eba0 000a 	sub.w	r0, r0, sl
 8008fa4:	4082      	lsls	r2, r0
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	3401      	adds	r4, #1
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb0:	2206      	movs	r2, #6
 8008fb2:	4826      	ldr	r0, [pc, #152]	; (800904c <_svfiprintf_r+0x1f0>)
 8008fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb8:	f7fe fbf7 	bl	80077aa <memchr>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d038      	beq.n	8009032 <_svfiprintf_r+0x1d6>
 8008fc0:	4b23      	ldr	r3, [pc, #140]	; (8009050 <_svfiprintf_r+0x1f4>)
 8008fc2:	bb1b      	cbnz	r3, 800900c <_svfiprintf_r+0x1b0>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	3307      	adds	r3, #7
 8008fc8:	f023 0307 	bic.w	r3, r3, #7
 8008fcc:	3308      	adds	r3, #8
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	4433      	add	r3, r6
 8008fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd6:	e768      	b.n	8008eaa <_svfiprintf_r+0x4e>
 8008fd8:	460c      	mov	r4, r1
 8008fda:	2001      	movs	r0, #1
 8008fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe0:	e7a6      	b.n	8008f30 <_svfiprintf_r+0xd4>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f04f 0c0a 	mov.w	ip, #10
 8008fe8:	4619      	mov	r1, r3
 8008fea:	3401      	adds	r4, #1
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff4:	3a30      	subs	r2, #48	; 0x30
 8008ff6:	2a09      	cmp	r2, #9
 8008ff8:	d903      	bls.n	8009002 <_svfiprintf_r+0x1a6>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0c6      	beq.n	8008f8c <_svfiprintf_r+0x130>
 8008ffe:	9105      	str	r1, [sp, #20]
 8009000:	e7c4      	b.n	8008f8c <_svfiprintf_r+0x130>
 8009002:	4604      	mov	r4, r0
 8009004:	2301      	movs	r3, #1
 8009006:	fb0c 2101 	mla	r1, ip, r1, r2
 800900a:	e7f0      	b.n	8008fee <_svfiprintf_r+0x192>
 800900c:	ab03      	add	r3, sp, #12
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	462a      	mov	r2, r5
 8009012:	4638      	mov	r0, r7
 8009014:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <_svfiprintf_r+0x1f8>)
 8009016:	a904      	add	r1, sp, #16
 8009018:	f7fd fe46 	bl	8006ca8 <_printf_float>
 800901c:	1c42      	adds	r2, r0, #1
 800901e:	4606      	mov	r6, r0
 8009020:	d1d6      	bne.n	8008fd0 <_svfiprintf_r+0x174>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	065b      	lsls	r3, r3, #25
 8009026:	f53f af2d 	bmi.w	8008e84 <_svfiprintf_r+0x28>
 800902a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902c:	b01d      	add	sp, #116	; 0x74
 800902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009032:	ab03      	add	r3, sp, #12
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	462a      	mov	r2, r5
 8009038:	4638      	mov	r0, r7
 800903a:	4b06      	ldr	r3, [pc, #24]	; (8009054 <_svfiprintf_r+0x1f8>)
 800903c:	a904      	add	r1, sp, #16
 800903e:	f7fe f8d3 	bl	80071e8 <_printf_i>
 8009042:	e7eb      	b.n	800901c <_svfiprintf_r+0x1c0>
 8009044:	0800b934 	.word	0x0800b934
 8009048:	0800b93a 	.word	0x0800b93a
 800904c:	0800b93e 	.word	0x0800b93e
 8009050:	08006ca9 	.word	0x08006ca9
 8009054:	08008da9 	.word	0x08008da9

08009058 <__sflush_r>:
 8009058:	898a      	ldrh	r2, [r1, #12]
 800905a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905c:	4605      	mov	r5, r0
 800905e:	0710      	lsls	r0, r2, #28
 8009060:	460c      	mov	r4, r1
 8009062:	d457      	bmi.n	8009114 <__sflush_r+0xbc>
 8009064:	684b      	ldr	r3, [r1, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	dc04      	bgt.n	8009074 <__sflush_r+0x1c>
 800906a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc01      	bgt.n	8009074 <__sflush_r+0x1c>
 8009070:	2000      	movs	r0, #0
 8009072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009076:	2e00      	cmp	r6, #0
 8009078:	d0fa      	beq.n	8009070 <__sflush_r+0x18>
 800907a:	2300      	movs	r3, #0
 800907c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009080:	682f      	ldr	r7, [r5, #0]
 8009082:	6a21      	ldr	r1, [r4, #32]
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	d032      	beq.n	80090ee <__sflush_r+0x96>
 8009088:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	075a      	lsls	r2, r3, #29
 800908e:	d505      	bpl.n	800909c <__sflush_r+0x44>
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	1ac0      	subs	r0, r0, r3
 8009094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009096:	b10b      	cbz	r3, 800909c <__sflush_r+0x44>
 8009098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800909a:	1ac0      	subs	r0, r0, r3
 800909c:	2300      	movs	r3, #0
 800909e:	4602      	mov	r2, r0
 80090a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090a2:	4628      	mov	r0, r5
 80090a4:	6a21      	ldr	r1, [r4, #32]
 80090a6:	47b0      	blx	r6
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	d106      	bne.n	80090bc <__sflush_r+0x64>
 80090ae:	6829      	ldr	r1, [r5, #0]
 80090b0:	291d      	cmp	r1, #29
 80090b2:	d82b      	bhi.n	800910c <__sflush_r+0xb4>
 80090b4:	4a28      	ldr	r2, [pc, #160]	; (8009158 <__sflush_r+0x100>)
 80090b6:	410a      	asrs	r2, r1
 80090b8:	07d6      	lsls	r6, r2, #31
 80090ba:	d427      	bmi.n	800910c <__sflush_r+0xb4>
 80090bc:	2200      	movs	r2, #0
 80090be:	6062      	str	r2, [r4, #4]
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	04d9      	lsls	r1, r3, #19
 80090c4:	6022      	str	r2, [r4, #0]
 80090c6:	d504      	bpl.n	80090d2 <__sflush_r+0x7a>
 80090c8:	1c42      	adds	r2, r0, #1
 80090ca:	d101      	bne.n	80090d0 <__sflush_r+0x78>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b903      	cbnz	r3, 80090d2 <__sflush_r+0x7a>
 80090d0:	6560      	str	r0, [r4, #84]	; 0x54
 80090d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d4:	602f      	str	r7, [r5, #0]
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d0ca      	beq.n	8009070 <__sflush_r+0x18>
 80090da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090de:	4299      	cmp	r1, r3
 80090e0:	d002      	beq.n	80090e8 <__sflush_r+0x90>
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7ff f9ec 	bl	80084c0 <_free_r>
 80090e8:	2000      	movs	r0, #0
 80090ea:	6360      	str	r0, [r4, #52]	; 0x34
 80090ec:	e7c1      	b.n	8009072 <__sflush_r+0x1a>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b0      	blx	r6
 80090f4:	1c41      	adds	r1, r0, #1
 80090f6:	d1c8      	bne.n	800908a <__sflush_r+0x32>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c5      	beq.n	800908a <__sflush_r+0x32>
 80090fe:	2b1d      	cmp	r3, #29
 8009100:	d001      	beq.n	8009106 <__sflush_r+0xae>
 8009102:	2b16      	cmp	r3, #22
 8009104:	d101      	bne.n	800910a <__sflush_r+0xb2>
 8009106:	602f      	str	r7, [r5, #0]
 8009108:	e7b2      	b.n	8009070 <__sflush_r+0x18>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	e7ae      	b.n	8009072 <__sflush_r+0x1a>
 8009114:	690f      	ldr	r7, [r1, #16]
 8009116:	2f00      	cmp	r7, #0
 8009118:	d0aa      	beq.n	8009070 <__sflush_r+0x18>
 800911a:	0793      	lsls	r3, r2, #30
 800911c:	bf18      	it	ne
 800911e:	2300      	movne	r3, #0
 8009120:	680e      	ldr	r6, [r1, #0]
 8009122:	bf08      	it	eq
 8009124:	694b      	ldreq	r3, [r1, #20]
 8009126:	1bf6      	subs	r6, r6, r7
 8009128:	600f      	str	r7, [r1, #0]
 800912a:	608b      	str	r3, [r1, #8]
 800912c:	2e00      	cmp	r6, #0
 800912e:	dd9f      	ble.n	8009070 <__sflush_r+0x18>
 8009130:	4633      	mov	r3, r6
 8009132:	463a      	mov	r2, r7
 8009134:	4628      	mov	r0, r5
 8009136:	6a21      	ldr	r1, [r4, #32]
 8009138:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800913c:	47e0      	blx	ip
 800913e:	2800      	cmp	r0, #0
 8009140:	dc06      	bgt.n	8009150 <__sflush_r+0xf8>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	e790      	b.n	8009072 <__sflush_r+0x1a>
 8009150:	4407      	add	r7, r0
 8009152:	1a36      	subs	r6, r6, r0
 8009154:	e7ea      	b.n	800912c <__sflush_r+0xd4>
 8009156:	bf00      	nop
 8009158:	dfbffffe 	.word	0xdfbffffe

0800915c <_fflush_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	690b      	ldr	r3, [r1, #16]
 8009160:	4605      	mov	r5, r0
 8009162:	460c      	mov	r4, r1
 8009164:	b913      	cbnz	r3, 800916c <_fflush_r+0x10>
 8009166:	2500      	movs	r5, #0
 8009168:	4628      	mov	r0, r5
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	b118      	cbz	r0, 8009176 <_fflush_r+0x1a>
 800916e:	6a03      	ldr	r3, [r0, #32]
 8009170:	b90b      	cbnz	r3, 8009176 <_fflush_r+0x1a>
 8009172:	f7fe f9e7 	bl	8007544 <__sinit>
 8009176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0f3      	beq.n	8009166 <_fflush_r+0xa>
 800917e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009180:	07d0      	lsls	r0, r2, #31
 8009182:	d404      	bmi.n	800918e <_fflush_r+0x32>
 8009184:	0599      	lsls	r1, r3, #22
 8009186:	d402      	bmi.n	800918e <_fflush_r+0x32>
 8009188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800918a:	f7fe fb0c 	bl	80077a6 <__retarget_lock_acquire_recursive>
 800918e:	4628      	mov	r0, r5
 8009190:	4621      	mov	r1, r4
 8009192:	f7ff ff61 	bl	8009058 <__sflush_r>
 8009196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009198:	4605      	mov	r5, r0
 800919a:	07da      	lsls	r2, r3, #31
 800919c:	d4e4      	bmi.n	8009168 <_fflush_r+0xc>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	059b      	lsls	r3, r3, #22
 80091a2:	d4e1      	bmi.n	8009168 <_fflush_r+0xc>
 80091a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091a6:	f7fe faff 	bl	80077a8 <__retarget_lock_release_recursive>
 80091aa:	e7dd      	b.n	8009168 <_fflush_r+0xc>

080091ac <_sbrk_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	2300      	movs	r3, #0
 80091b0:	4d05      	ldr	r5, [pc, #20]	; (80091c8 <_sbrk_r+0x1c>)
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7fa fda2 	bl	8003d00 <_sbrk>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_sbrk_r+0x1a>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_sbrk_r+0x1a>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	2000107c 	.word	0x2000107c

080091cc <__assert_func>:
 80091cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091ce:	4614      	mov	r4, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	4b09      	ldr	r3, [pc, #36]	; (80091f8 <__assert_func+0x2c>)
 80091d4:	4605      	mov	r5, r0
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68d8      	ldr	r0, [r3, #12]
 80091da:	b14c      	cbz	r4, 80091f0 <__assert_func+0x24>
 80091dc:	4b07      	ldr	r3, [pc, #28]	; (80091fc <__assert_func+0x30>)
 80091de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091e2:	9100      	str	r1, [sp, #0]
 80091e4:	462b      	mov	r3, r5
 80091e6:	4906      	ldr	r1, [pc, #24]	; (8009200 <__assert_func+0x34>)
 80091e8:	f000 f870 	bl	80092cc <fiprintf>
 80091ec:	f000 f880 	bl	80092f0 <abort>
 80091f0:	4b04      	ldr	r3, [pc, #16]	; (8009204 <__assert_func+0x38>)
 80091f2:	461c      	mov	r4, r3
 80091f4:	e7f3      	b.n	80091de <__assert_func+0x12>
 80091f6:	bf00      	nop
 80091f8:	20000090 	.word	0x20000090
 80091fc:	0800b94f 	.word	0x0800b94f
 8009200:	0800b95c 	.word	0x0800b95c
 8009204:	0800b98a 	.word	0x0800b98a

08009208 <_calloc_r>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	fba1 5402 	umull	r5, r4, r1, r2
 800920e:	b934      	cbnz	r4, 800921e <_calloc_r+0x16>
 8009210:	4629      	mov	r1, r5
 8009212:	f7ff f9c5 	bl	80085a0 <_malloc_r>
 8009216:	4606      	mov	r6, r0
 8009218:	b928      	cbnz	r0, 8009226 <_calloc_r+0x1e>
 800921a:	4630      	mov	r0, r6
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	220c      	movs	r2, #12
 8009220:	2600      	movs	r6, #0
 8009222:	6002      	str	r2, [r0, #0]
 8009224:	e7f9      	b.n	800921a <_calloc_r+0x12>
 8009226:	462a      	mov	r2, r5
 8009228:	4621      	mov	r1, r4
 800922a:	f7fe fa3e 	bl	80076aa <memset>
 800922e:	e7f4      	b.n	800921a <_calloc_r+0x12>

08009230 <__ascii_mbtowc>:
 8009230:	b082      	sub	sp, #8
 8009232:	b901      	cbnz	r1, 8009236 <__ascii_mbtowc+0x6>
 8009234:	a901      	add	r1, sp, #4
 8009236:	b142      	cbz	r2, 800924a <__ascii_mbtowc+0x1a>
 8009238:	b14b      	cbz	r3, 800924e <__ascii_mbtowc+0x1e>
 800923a:	7813      	ldrb	r3, [r2, #0]
 800923c:	600b      	str	r3, [r1, #0]
 800923e:	7812      	ldrb	r2, [r2, #0]
 8009240:	1e10      	subs	r0, r2, #0
 8009242:	bf18      	it	ne
 8009244:	2001      	movne	r0, #1
 8009246:	b002      	add	sp, #8
 8009248:	4770      	bx	lr
 800924a:	4610      	mov	r0, r2
 800924c:	e7fb      	b.n	8009246 <__ascii_mbtowc+0x16>
 800924e:	f06f 0001 	mvn.w	r0, #1
 8009252:	e7f8      	b.n	8009246 <__ascii_mbtowc+0x16>

08009254 <_realloc_r>:
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	4680      	mov	r8, r0
 800925a:	4614      	mov	r4, r2
 800925c:	460e      	mov	r6, r1
 800925e:	b921      	cbnz	r1, 800926a <_realloc_r+0x16>
 8009260:	4611      	mov	r1, r2
 8009262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009266:	f7ff b99b 	b.w	80085a0 <_malloc_r>
 800926a:	b92a      	cbnz	r2, 8009278 <_realloc_r+0x24>
 800926c:	f7ff f928 	bl	80084c0 <_free_r>
 8009270:	4625      	mov	r5, r4
 8009272:	4628      	mov	r0, r5
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	f000 f841 	bl	80092fe <_malloc_usable_size_r>
 800927c:	4284      	cmp	r4, r0
 800927e:	4607      	mov	r7, r0
 8009280:	d802      	bhi.n	8009288 <_realloc_r+0x34>
 8009282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009286:	d812      	bhi.n	80092ae <_realloc_r+0x5a>
 8009288:	4621      	mov	r1, r4
 800928a:	4640      	mov	r0, r8
 800928c:	f7ff f988 	bl	80085a0 <_malloc_r>
 8009290:	4605      	mov	r5, r0
 8009292:	2800      	cmp	r0, #0
 8009294:	d0ed      	beq.n	8009272 <_realloc_r+0x1e>
 8009296:	42bc      	cmp	r4, r7
 8009298:	4622      	mov	r2, r4
 800929a:	4631      	mov	r1, r6
 800929c:	bf28      	it	cs
 800929e:	463a      	movcs	r2, r7
 80092a0:	f7fe fa91 	bl	80077c6 <memcpy>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4640      	mov	r0, r8
 80092a8:	f7ff f90a 	bl	80084c0 <_free_r>
 80092ac:	e7e1      	b.n	8009272 <_realloc_r+0x1e>
 80092ae:	4635      	mov	r5, r6
 80092b0:	e7df      	b.n	8009272 <_realloc_r+0x1e>

080092b2 <__ascii_wctomb>:
 80092b2:	4603      	mov	r3, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	b141      	cbz	r1, 80092ca <__ascii_wctomb+0x18>
 80092b8:	2aff      	cmp	r2, #255	; 0xff
 80092ba:	d904      	bls.n	80092c6 <__ascii_wctomb+0x14>
 80092bc:	228a      	movs	r2, #138	; 0x8a
 80092be:	f04f 30ff 	mov.w	r0, #4294967295
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	4770      	bx	lr
 80092c6:	2001      	movs	r0, #1
 80092c8:	700a      	strb	r2, [r1, #0]
 80092ca:	4770      	bx	lr

080092cc <fiprintf>:
 80092cc:	b40e      	push	{r1, r2, r3}
 80092ce:	b503      	push	{r0, r1, lr}
 80092d0:	4601      	mov	r1, r0
 80092d2:	ab03      	add	r3, sp, #12
 80092d4:	4805      	ldr	r0, [pc, #20]	; (80092ec <fiprintf+0x20>)
 80092d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	f000 f83d 	bl	800935c <_vfiprintf_r>
 80092e2:	b002      	add	sp, #8
 80092e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e8:	b003      	add	sp, #12
 80092ea:	4770      	bx	lr
 80092ec:	20000090 	.word	0x20000090

080092f0 <abort>:
 80092f0:	2006      	movs	r0, #6
 80092f2:	b508      	push	{r3, lr}
 80092f4:	f000 fa0a 	bl	800970c <raise>
 80092f8:	2001      	movs	r0, #1
 80092fa:	f7fa fc8e 	bl	8003c1a <_exit>

080092fe <_malloc_usable_size_r>:
 80092fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009302:	1f18      	subs	r0, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	bfbc      	itt	lt
 8009308:	580b      	ldrlt	r3, [r1, r0]
 800930a:	18c0      	addlt	r0, r0, r3
 800930c:	4770      	bx	lr

0800930e <__sfputc_r>:
 800930e:	6893      	ldr	r3, [r2, #8]
 8009310:	b410      	push	{r4}
 8009312:	3b01      	subs	r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	6093      	str	r3, [r2, #8]
 8009318:	da07      	bge.n	800932a <__sfputc_r+0x1c>
 800931a:	6994      	ldr	r4, [r2, #24]
 800931c:	42a3      	cmp	r3, r4
 800931e:	db01      	blt.n	8009324 <__sfputc_r+0x16>
 8009320:	290a      	cmp	r1, #10
 8009322:	d102      	bne.n	800932a <__sfputc_r+0x1c>
 8009324:	bc10      	pop	{r4}
 8009326:	f000 b933 	b.w	8009590 <__swbuf_r>
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	1c58      	adds	r0, r3, #1
 800932e:	6010      	str	r0, [r2, #0]
 8009330:	7019      	strb	r1, [r3, #0]
 8009332:	4608      	mov	r0, r1
 8009334:	bc10      	pop	{r4}
 8009336:	4770      	bx	lr

08009338 <__sfputs_r>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	4614      	mov	r4, r2
 8009340:	18d5      	adds	r5, r2, r3
 8009342:	42ac      	cmp	r4, r5
 8009344:	d101      	bne.n	800934a <__sfputs_r+0x12>
 8009346:	2000      	movs	r0, #0
 8009348:	e007      	b.n	800935a <__sfputs_r+0x22>
 800934a:	463a      	mov	r2, r7
 800934c:	4630      	mov	r0, r6
 800934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009352:	f7ff ffdc 	bl	800930e <__sfputc_r>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d1f3      	bne.n	8009342 <__sfputs_r+0xa>
 800935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800935c <_vfiprintf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	460d      	mov	r5, r1
 8009362:	4614      	mov	r4, r2
 8009364:	4698      	mov	r8, r3
 8009366:	4606      	mov	r6, r0
 8009368:	b09d      	sub	sp, #116	; 0x74
 800936a:	b118      	cbz	r0, 8009374 <_vfiprintf_r+0x18>
 800936c:	6a03      	ldr	r3, [r0, #32]
 800936e:	b90b      	cbnz	r3, 8009374 <_vfiprintf_r+0x18>
 8009370:	f7fe f8e8 	bl	8007544 <__sinit>
 8009374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	d405      	bmi.n	8009386 <_vfiprintf_r+0x2a>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	059a      	lsls	r2, r3, #22
 800937e:	d402      	bmi.n	8009386 <_vfiprintf_r+0x2a>
 8009380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009382:	f7fe fa10 	bl	80077a6 <__retarget_lock_acquire_recursive>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	d501      	bpl.n	8009390 <_vfiprintf_r+0x34>
 800938c:	692b      	ldr	r3, [r5, #16]
 800938e:	b99b      	cbnz	r3, 80093b8 <_vfiprintf_r+0x5c>
 8009390:	4629      	mov	r1, r5
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f93a 	bl	800960c <__swsetup_r>
 8009398:	b170      	cbz	r0, 80093b8 <_vfiprintf_r+0x5c>
 800939a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800939c:	07dc      	lsls	r4, r3, #31
 800939e:	d504      	bpl.n	80093aa <_vfiprintf_r+0x4e>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b01d      	add	sp, #116	; 0x74
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	0598      	lsls	r0, r3, #22
 80093ae:	d4f7      	bmi.n	80093a0 <_vfiprintf_r+0x44>
 80093b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093b2:	f7fe f9f9 	bl	80077a8 <__retarget_lock_release_recursive>
 80093b6:	e7f3      	b.n	80093a0 <_vfiprintf_r+0x44>
 80093b8:	2300      	movs	r3, #0
 80093ba:	9309      	str	r3, [sp, #36]	; 0x24
 80093bc:	2320      	movs	r3, #32
 80093be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093c2:	2330      	movs	r3, #48	; 0x30
 80093c4:	f04f 0901 	mov.w	r9, #1
 80093c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800957c <_vfiprintf_r+0x220>
 80093d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093d4:	4623      	mov	r3, r4
 80093d6:	469a      	mov	sl, r3
 80093d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093dc:	b10a      	cbz	r2, 80093e2 <_vfiprintf_r+0x86>
 80093de:	2a25      	cmp	r2, #37	; 0x25
 80093e0:	d1f9      	bne.n	80093d6 <_vfiprintf_r+0x7a>
 80093e2:	ebba 0b04 	subs.w	fp, sl, r4
 80093e6:	d00b      	beq.n	8009400 <_vfiprintf_r+0xa4>
 80093e8:	465b      	mov	r3, fp
 80093ea:	4622      	mov	r2, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ffa2 	bl	8009338 <__sfputs_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	f000 80a9 	beq.w	800954c <_vfiprintf_r+0x1f0>
 80093fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093fc:	445a      	add	r2, fp
 80093fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009400:	f89a 3000 	ldrb.w	r3, [sl]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 80a1 	beq.w	800954c <_vfiprintf_r+0x1f0>
 800940a:	2300      	movs	r3, #0
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009414:	f10a 0a01 	add.w	sl, sl, #1
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	9307      	str	r3, [sp, #28]
 800941c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009420:	931a      	str	r3, [sp, #104]	; 0x68
 8009422:	4654      	mov	r4, sl
 8009424:	2205      	movs	r2, #5
 8009426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942a:	4854      	ldr	r0, [pc, #336]	; (800957c <_vfiprintf_r+0x220>)
 800942c:	f7fe f9bd 	bl	80077aa <memchr>
 8009430:	9a04      	ldr	r2, [sp, #16]
 8009432:	b9d8      	cbnz	r0, 800946c <_vfiprintf_r+0x110>
 8009434:	06d1      	lsls	r1, r2, #27
 8009436:	bf44      	itt	mi
 8009438:	2320      	movmi	r3, #32
 800943a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800943e:	0713      	lsls	r3, r2, #28
 8009440:	bf44      	itt	mi
 8009442:	232b      	movmi	r3, #43	; 0x2b
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009448:	f89a 3000 	ldrb.w	r3, [sl]
 800944c:	2b2a      	cmp	r3, #42	; 0x2a
 800944e:	d015      	beq.n	800947c <_vfiprintf_r+0x120>
 8009450:	4654      	mov	r4, sl
 8009452:	2000      	movs	r0, #0
 8009454:	f04f 0c0a 	mov.w	ip, #10
 8009458:	9a07      	ldr	r2, [sp, #28]
 800945a:	4621      	mov	r1, r4
 800945c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009460:	3b30      	subs	r3, #48	; 0x30
 8009462:	2b09      	cmp	r3, #9
 8009464:	d94d      	bls.n	8009502 <_vfiprintf_r+0x1a6>
 8009466:	b1b0      	cbz	r0, 8009496 <_vfiprintf_r+0x13a>
 8009468:	9207      	str	r2, [sp, #28]
 800946a:	e014      	b.n	8009496 <_vfiprintf_r+0x13a>
 800946c:	eba0 0308 	sub.w	r3, r0, r8
 8009470:	fa09 f303 	lsl.w	r3, r9, r3
 8009474:	4313      	orrs	r3, r2
 8009476:	46a2      	mov	sl, r4
 8009478:	9304      	str	r3, [sp, #16]
 800947a:	e7d2      	b.n	8009422 <_vfiprintf_r+0xc6>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	1d19      	adds	r1, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	9103      	str	r1, [sp, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfbb      	ittet	lt
 8009488:	425b      	neglt	r3, r3
 800948a:	f042 0202 	orrlt.w	r2, r2, #2
 800948e:	9307      	strge	r3, [sp, #28]
 8009490:	9307      	strlt	r3, [sp, #28]
 8009492:	bfb8      	it	lt
 8009494:	9204      	strlt	r2, [sp, #16]
 8009496:	7823      	ldrb	r3, [r4, #0]
 8009498:	2b2e      	cmp	r3, #46	; 0x2e
 800949a:	d10c      	bne.n	80094b6 <_vfiprintf_r+0x15a>
 800949c:	7863      	ldrb	r3, [r4, #1]
 800949e:	2b2a      	cmp	r3, #42	; 0x2a
 80094a0:	d134      	bne.n	800950c <_vfiprintf_r+0x1b0>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	3402      	adds	r4, #2
 80094a6:	1d1a      	adds	r2, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9203      	str	r2, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfb8      	it	lt
 80094b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80094b4:	9305      	str	r3, [sp, #20]
 80094b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009580 <_vfiprintf_r+0x224>
 80094ba:	2203      	movs	r2, #3
 80094bc:	4650      	mov	r0, sl
 80094be:	7821      	ldrb	r1, [r4, #0]
 80094c0:	f7fe f973 	bl	80077aa <memchr>
 80094c4:	b138      	cbz	r0, 80094d6 <_vfiprintf_r+0x17a>
 80094c6:	2240      	movs	r2, #64	; 0x40
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	eba0 000a 	sub.w	r0, r0, sl
 80094ce:	4082      	lsls	r2, r0
 80094d0:	4313      	orrs	r3, r2
 80094d2:	3401      	adds	r4, #1
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094da:	2206      	movs	r2, #6
 80094dc:	4829      	ldr	r0, [pc, #164]	; (8009584 <_vfiprintf_r+0x228>)
 80094de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094e2:	f7fe f962 	bl	80077aa <memchr>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d03f      	beq.n	800956a <_vfiprintf_r+0x20e>
 80094ea:	4b27      	ldr	r3, [pc, #156]	; (8009588 <_vfiprintf_r+0x22c>)
 80094ec:	bb1b      	cbnz	r3, 8009536 <_vfiprintf_r+0x1da>
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	3307      	adds	r3, #7
 80094f2:	f023 0307 	bic.w	r3, r3, #7
 80094f6:	3308      	adds	r3, #8
 80094f8:	9303      	str	r3, [sp, #12]
 80094fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fc:	443b      	add	r3, r7
 80094fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009500:	e768      	b.n	80093d4 <_vfiprintf_r+0x78>
 8009502:	460c      	mov	r4, r1
 8009504:	2001      	movs	r0, #1
 8009506:	fb0c 3202 	mla	r2, ip, r2, r3
 800950a:	e7a6      	b.n	800945a <_vfiprintf_r+0xfe>
 800950c:	2300      	movs	r3, #0
 800950e:	f04f 0c0a 	mov.w	ip, #10
 8009512:	4619      	mov	r1, r3
 8009514:	3401      	adds	r4, #1
 8009516:	9305      	str	r3, [sp, #20]
 8009518:	4620      	mov	r0, r4
 800951a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800951e:	3a30      	subs	r2, #48	; 0x30
 8009520:	2a09      	cmp	r2, #9
 8009522:	d903      	bls.n	800952c <_vfiprintf_r+0x1d0>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0c6      	beq.n	80094b6 <_vfiprintf_r+0x15a>
 8009528:	9105      	str	r1, [sp, #20]
 800952a:	e7c4      	b.n	80094b6 <_vfiprintf_r+0x15a>
 800952c:	4604      	mov	r4, r0
 800952e:	2301      	movs	r3, #1
 8009530:	fb0c 2101 	mla	r1, ip, r1, r2
 8009534:	e7f0      	b.n	8009518 <_vfiprintf_r+0x1bc>
 8009536:	ab03      	add	r3, sp, #12
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	462a      	mov	r2, r5
 800953c:	4630      	mov	r0, r6
 800953e:	4b13      	ldr	r3, [pc, #76]	; (800958c <_vfiprintf_r+0x230>)
 8009540:	a904      	add	r1, sp, #16
 8009542:	f7fd fbb1 	bl	8006ca8 <_printf_float>
 8009546:	4607      	mov	r7, r0
 8009548:	1c78      	adds	r0, r7, #1
 800954a:	d1d6      	bne.n	80094fa <_vfiprintf_r+0x19e>
 800954c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800954e:	07d9      	lsls	r1, r3, #31
 8009550:	d405      	bmi.n	800955e <_vfiprintf_r+0x202>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	059a      	lsls	r2, r3, #22
 8009556:	d402      	bmi.n	800955e <_vfiprintf_r+0x202>
 8009558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955a:	f7fe f925 	bl	80077a8 <__retarget_lock_release_recursive>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	065b      	lsls	r3, r3, #25
 8009562:	f53f af1d 	bmi.w	80093a0 <_vfiprintf_r+0x44>
 8009566:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009568:	e71c      	b.n	80093a4 <_vfiprintf_r+0x48>
 800956a:	ab03      	add	r3, sp, #12
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	462a      	mov	r2, r5
 8009570:	4630      	mov	r0, r6
 8009572:	4b06      	ldr	r3, [pc, #24]	; (800958c <_vfiprintf_r+0x230>)
 8009574:	a904      	add	r1, sp, #16
 8009576:	f7fd fe37 	bl	80071e8 <_printf_i>
 800957a:	e7e4      	b.n	8009546 <_vfiprintf_r+0x1ea>
 800957c:	0800b934 	.word	0x0800b934
 8009580:	0800b93a 	.word	0x0800b93a
 8009584:	0800b93e 	.word	0x0800b93e
 8009588:	08006ca9 	.word	0x08006ca9
 800958c:	08009339 	.word	0x08009339

08009590 <__swbuf_r>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	460e      	mov	r6, r1
 8009594:	4614      	mov	r4, r2
 8009596:	4605      	mov	r5, r0
 8009598:	b118      	cbz	r0, 80095a2 <__swbuf_r+0x12>
 800959a:	6a03      	ldr	r3, [r0, #32]
 800959c:	b90b      	cbnz	r3, 80095a2 <__swbuf_r+0x12>
 800959e:	f7fd ffd1 	bl	8007544 <__sinit>
 80095a2:	69a3      	ldr	r3, [r4, #24]
 80095a4:	60a3      	str	r3, [r4, #8]
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	071a      	lsls	r2, r3, #28
 80095aa:	d525      	bpl.n	80095f8 <__swbuf_r+0x68>
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	b31b      	cbz	r3, 80095f8 <__swbuf_r+0x68>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	6922      	ldr	r2, [r4, #16]
 80095b4:	b2f6      	uxtb	r6, r6
 80095b6:	1a98      	subs	r0, r3, r2
 80095b8:	6963      	ldr	r3, [r4, #20]
 80095ba:	4637      	mov	r7, r6
 80095bc:	4283      	cmp	r3, r0
 80095be:	dc04      	bgt.n	80095ca <__swbuf_r+0x3a>
 80095c0:	4621      	mov	r1, r4
 80095c2:	4628      	mov	r0, r5
 80095c4:	f7ff fdca 	bl	800915c <_fflush_r>
 80095c8:	b9e0      	cbnz	r0, 8009604 <__swbuf_r+0x74>
 80095ca:	68a3      	ldr	r3, [r4, #8]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	60a3      	str	r3, [r4, #8]
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	6022      	str	r2, [r4, #0]
 80095d6:	701e      	strb	r6, [r3, #0]
 80095d8:	6962      	ldr	r2, [r4, #20]
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	429a      	cmp	r2, r3
 80095de:	d004      	beq.n	80095ea <__swbuf_r+0x5a>
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	07db      	lsls	r3, r3, #31
 80095e4:	d506      	bpl.n	80095f4 <__swbuf_r+0x64>
 80095e6:	2e0a      	cmp	r6, #10
 80095e8:	d104      	bne.n	80095f4 <__swbuf_r+0x64>
 80095ea:	4621      	mov	r1, r4
 80095ec:	4628      	mov	r0, r5
 80095ee:	f7ff fdb5 	bl	800915c <_fflush_r>
 80095f2:	b938      	cbnz	r0, 8009604 <__swbuf_r+0x74>
 80095f4:	4638      	mov	r0, r7
 80095f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f8:	4621      	mov	r1, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f806 	bl	800960c <__swsetup_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0d5      	beq.n	80095b0 <__swbuf_r+0x20>
 8009604:	f04f 37ff 	mov.w	r7, #4294967295
 8009608:	e7f4      	b.n	80095f4 <__swbuf_r+0x64>
	...

0800960c <__swsetup_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4b2a      	ldr	r3, [pc, #168]	; (80096b8 <__swsetup_r+0xac>)
 8009610:	4605      	mov	r5, r0
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	460c      	mov	r4, r1
 8009616:	b118      	cbz	r0, 8009620 <__swsetup_r+0x14>
 8009618:	6a03      	ldr	r3, [r0, #32]
 800961a:	b90b      	cbnz	r3, 8009620 <__swsetup_r+0x14>
 800961c:	f7fd ff92 	bl	8007544 <__sinit>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009626:	0718      	lsls	r0, r3, #28
 8009628:	d422      	bmi.n	8009670 <__swsetup_r+0x64>
 800962a:	06d9      	lsls	r1, r3, #27
 800962c:	d407      	bmi.n	800963e <__swsetup_r+0x32>
 800962e:	2309      	movs	r3, #9
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009636:	f04f 30ff 	mov.w	r0, #4294967295
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	e034      	b.n	80096a8 <__swsetup_r+0x9c>
 800963e:	0758      	lsls	r0, r3, #29
 8009640:	d512      	bpl.n	8009668 <__swsetup_r+0x5c>
 8009642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009644:	b141      	cbz	r1, 8009658 <__swsetup_r+0x4c>
 8009646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800964a:	4299      	cmp	r1, r3
 800964c:	d002      	beq.n	8009654 <__swsetup_r+0x48>
 800964e:	4628      	mov	r0, r5
 8009650:	f7fe ff36 	bl	80084c0 <_free_r>
 8009654:	2300      	movs	r3, #0
 8009656:	6363      	str	r3, [r4, #52]	; 0x34
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	2300      	movs	r3, #0
 8009662:	6063      	str	r3, [r4, #4]
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f043 0308 	orr.w	r3, r3, #8
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	b94b      	cbnz	r3, 8009688 <__swsetup_r+0x7c>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800967a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800967e:	d003      	beq.n	8009688 <__swsetup_r+0x7c>
 8009680:	4621      	mov	r1, r4
 8009682:	4628      	mov	r0, r5
 8009684:	f000 f883 	bl	800978e <__smakebuf_r>
 8009688:	89a0      	ldrh	r0, [r4, #12]
 800968a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800968e:	f010 0301 	ands.w	r3, r0, #1
 8009692:	d00a      	beq.n	80096aa <__swsetup_r+0x9e>
 8009694:	2300      	movs	r3, #0
 8009696:	60a3      	str	r3, [r4, #8]
 8009698:	6963      	ldr	r3, [r4, #20]
 800969a:	425b      	negs	r3, r3
 800969c:	61a3      	str	r3, [r4, #24]
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	b943      	cbnz	r3, 80096b4 <__swsetup_r+0xa8>
 80096a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096a6:	d1c4      	bne.n	8009632 <__swsetup_r+0x26>
 80096a8:	bd38      	pop	{r3, r4, r5, pc}
 80096aa:	0781      	lsls	r1, r0, #30
 80096ac:	bf58      	it	pl
 80096ae:	6963      	ldrpl	r3, [r4, #20]
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	e7f4      	b.n	800969e <__swsetup_r+0x92>
 80096b4:	2000      	movs	r0, #0
 80096b6:	e7f7      	b.n	80096a8 <__swsetup_r+0x9c>
 80096b8:	20000090 	.word	0x20000090

080096bc <_raise_r>:
 80096bc:	291f      	cmp	r1, #31
 80096be:	b538      	push	{r3, r4, r5, lr}
 80096c0:	4604      	mov	r4, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	d904      	bls.n	80096d0 <_raise_r+0x14>
 80096c6:	2316      	movs	r3, #22
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80096d2:	b112      	cbz	r2, 80096da <_raise_r+0x1e>
 80096d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d8:	b94b      	cbnz	r3, 80096ee <_raise_r+0x32>
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f830 	bl	8009740 <_getpid_r>
 80096e0:	462a      	mov	r2, r5
 80096e2:	4601      	mov	r1, r0
 80096e4:	4620      	mov	r0, r4
 80096e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ea:	f000 b817 	b.w	800971c <_kill_r>
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d00a      	beq.n	8009708 <_raise_r+0x4c>
 80096f2:	1c59      	adds	r1, r3, #1
 80096f4:	d103      	bne.n	80096fe <_raise_r+0x42>
 80096f6:	2316      	movs	r3, #22
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	2001      	movs	r0, #1
 80096fc:	e7e7      	b.n	80096ce <_raise_r+0x12>
 80096fe:	2400      	movs	r4, #0
 8009700:	4628      	mov	r0, r5
 8009702:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009706:	4798      	blx	r3
 8009708:	2000      	movs	r0, #0
 800970a:	e7e0      	b.n	80096ce <_raise_r+0x12>

0800970c <raise>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <raise+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f7ff bfd3 	b.w	80096bc <_raise_r>
 8009716:	bf00      	nop
 8009718:	20000090 	.word	0x20000090

0800971c <_kill_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	2300      	movs	r3, #0
 8009720:	4d06      	ldr	r5, [pc, #24]	; (800973c <_kill_r+0x20>)
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	4611      	mov	r1, r2
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	f7fa fa66 	bl	8003bfa <_kill>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d102      	bne.n	8009738 <_kill_r+0x1c>
 8009732:	682b      	ldr	r3, [r5, #0]
 8009734:	b103      	cbz	r3, 8009738 <_kill_r+0x1c>
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	bf00      	nop
 800973c:	2000107c 	.word	0x2000107c

08009740 <_getpid_r>:
 8009740:	f7fa ba54 	b.w	8003bec <_getpid>

08009744 <__swhatbuf_r>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	460c      	mov	r4, r1
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	4615      	mov	r5, r2
 800974e:	2900      	cmp	r1, #0
 8009750:	461e      	mov	r6, r3
 8009752:	b096      	sub	sp, #88	; 0x58
 8009754:	da0c      	bge.n	8009770 <__swhatbuf_r+0x2c>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	2100      	movs	r1, #0
 800975a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800975e:	bf0c      	ite	eq
 8009760:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009764:	2340      	movne	r3, #64	; 0x40
 8009766:	2000      	movs	r0, #0
 8009768:	6031      	str	r1, [r6, #0]
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	b016      	add	sp, #88	; 0x58
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	466a      	mov	r2, sp
 8009772:	f000 f849 	bl	8009808 <_fstat_r>
 8009776:	2800      	cmp	r0, #0
 8009778:	dbed      	blt.n	8009756 <__swhatbuf_r+0x12>
 800977a:	9901      	ldr	r1, [sp, #4]
 800977c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009780:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009784:	4259      	negs	r1, r3
 8009786:	4159      	adcs	r1, r3
 8009788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978c:	e7eb      	b.n	8009766 <__swhatbuf_r+0x22>

0800978e <__smakebuf_r>:
 800978e:	898b      	ldrh	r3, [r1, #12]
 8009790:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009792:	079d      	lsls	r5, r3, #30
 8009794:	4606      	mov	r6, r0
 8009796:	460c      	mov	r4, r1
 8009798:	d507      	bpl.n	80097aa <__smakebuf_r+0x1c>
 800979a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	2301      	movs	r3, #1
 80097a4:	6163      	str	r3, [r4, #20]
 80097a6:	b002      	add	sp, #8
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	466a      	mov	r2, sp
 80097ac:	ab01      	add	r3, sp, #4
 80097ae:	f7ff ffc9 	bl	8009744 <__swhatbuf_r>
 80097b2:	9900      	ldr	r1, [sp, #0]
 80097b4:	4605      	mov	r5, r0
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7fe fef2 	bl	80085a0 <_malloc_r>
 80097bc:	b948      	cbnz	r0, 80097d2 <__smakebuf_r+0x44>
 80097be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c2:	059a      	lsls	r2, r3, #22
 80097c4:	d4ef      	bmi.n	80097a6 <__smakebuf_r+0x18>
 80097c6:	f023 0303 	bic.w	r3, r3, #3
 80097ca:	f043 0302 	orr.w	r3, r3, #2
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	e7e3      	b.n	800979a <__smakebuf_r+0xc>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	6020      	str	r0, [r4, #0]
 80097d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	9b00      	ldr	r3, [sp, #0]
 80097de:	6120      	str	r0, [r4, #16]
 80097e0:	6163      	str	r3, [r4, #20]
 80097e2:	9b01      	ldr	r3, [sp, #4]
 80097e4:	b15b      	cbz	r3, 80097fe <__smakebuf_r+0x70>
 80097e6:	4630      	mov	r0, r6
 80097e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ec:	f000 f81e 	bl	800982c <_isatty_r>
 80097f0:	b128      	cbz	r0, 80097fe <__smakebuf_r+0x70>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f023 0303 	bic.w	r3, r3, #3
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	431d      	orrs	r5, r3
 8009802:	81a5      	strh	r5, [r4, #12]
 8009804:	e7cf      	b.n	80097a6 <__smakebuf_r+0x18>
	...

08009808 <_fstat_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	2300      	movs	r3, #0
 800980c:	4d06      	ldr	r5, [pc, #24]	; (8009828 <_fstat_r+0x20>)
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7fa fa4e 	bl	8003cb6 <_fstat>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d102      	bne.n	8009824 <_fstat_r+0x1c>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	b103      	cbz	r3, 8009824 <_fstat_r+0x1c>
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	2000107c 	.word	0x2000107c

0800982c <_isatty_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	2300      	movs	r3, #0
 8009830:	4d05      	ldr	r5, [pc, #20]	; (8009848 <_isatty_r+0x1c>)
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7fa fa4c 	bl	8003cd4 <_isatty>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_isatty_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_isatty_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	2000107c 	.word	0x2000107c

0800984c <_init>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

08009858 <_fini>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr
