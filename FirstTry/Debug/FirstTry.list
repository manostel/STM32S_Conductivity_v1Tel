
FirstTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008644  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f84  08008758  08008758  00018758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6dc  0800a6dc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6dc  0800a6dc  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6dc  0800a6dc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6dc  0800a6dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a6e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e80  200001f4  0800a8d8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001074  0800a8d8  00021074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e587  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023db  00000000  00000000  0002e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00030bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c18  00000000  00000000  00031b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019597  00000000  00000000  00032770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f16  00000000  00000000  0004bd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000923d0  00000000  00000000  0005dc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000541c  00000000  00000000  000efff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f540c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800873c 	.word	0x0800873c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800873c 	.word	0x0800873c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d11d      	bne.n	800111e <HAL_TIM_PeriodElapsedCallback+0x4e>
    counter++;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010ea:	6013      	str	r3, [r2, #0]
    if (counter>65535)
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d302      	bcc.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
    	counter=0;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    }
    if (counter>1000)
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001104:	d902      	bls.n	800110c <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
    	counterflagPWM=1;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]

    }
    if (counter>3000)
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001114:	4293      	cmp	r3, r2
 8001116:	d902      	bls.n	800111e <HAL_TIM_PeriodElapsedCallback+0x4e>
    {
    	counterflagPWM2=1;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
    }

  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40000400 	.word	0x40000400
 800112c:	200003b8 	.word	0x200003b8
 8001130:	20000b14 	.word	0x20000b14
 8001134:	20000b15 	.word	0x20000b15

08001138 <PWM_COND>:
//        delay2(200);
//    }
//}


void PWM_COND() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	if(counterFREQ==0)
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <PWM_COND+0xb4>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <PWM_COND+0x12>
	{
		PWM_loop=10;
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <PWM_COND+0xb8>)
 8001146:	220a      	movs	r2, #10
 8001148:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==1)
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <PWM_COND+0xb4>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <PWM_COND+0x20>
	{
		PWM_loop=100;
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <PWM_COND+0xb8>)
 8001154:	2264      	movs	r2, #100	; 0x64
 8001156:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==2)
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <PWM_COND+0xb4>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d102      	bne.n	8001166 <PWM_COND+0x2e>
	{
		PWM_loop=100;
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <PWM_COND+0xb8>)
 8001162:	2264      	movs	r2, #100	; 0x64
 8001164:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==3)
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <PWM_COND+0xb4>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d103      	bne.n	8001176 <PWM_COND+0x3e>
	{
		PWM_loop=1000;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <PWM_COND+0xb8>)
 8001170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001174:	601a      	str	r2, [r3, #0]
	}


    for(i=0;i<PWM_loop;i++){
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <PWM_COND+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e02c      	b.n	80011d8 <PWM_COND+0xa0>
        // Toggle GPIOB Pin 7
        delay2(delay_time);
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <PWM_COND+0xc0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fafc 	bl	8001780 <delay2>
        GPIOB->BSRR = GPIO_PIN_6; // Set Pin 7 (output high)
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <PWM_COND+0xc4>)
 800118a:	2240      	movs	r2, #64	; 0x40
 800118c:	611a      	str	r2, [r3, #16]
        delay2(delay_time); // Adjust delay time as needed
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <PWM_COND+0xc0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 faf4 	bl	8001780 <delay2>
        GPIOB->BSRR = GPIO_PIN_6 << 16; // Reset Pin 7 (output low)
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <PWM_COND+0xc4>)
 800119a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800119e:	611a      	str	r2, [r3, #16]

        delay2(delay_band);
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <PWM_COND+0xc8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 faeb 	bl	8001780 <delay2>

        // Toggle GPIOB Pin 6
        delay2(delay_time);
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <PWM_COND+0xc0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fae6 	bl	8001780 <delay2>
        GPIOB->BSRR = GPIO_PIN_7; // Set Pin 6 (output high)
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <PWM_COND+0xc4>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	611a      	str	r2, [r3, #16]
        delay2(delay_time); // Adjust delay time as needed
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <PWM_COND+0xc0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fade 	bl	8001780 <delay2>
        GPIOB->BSRR = GPIO_PIN_7 << 16; // Reset Pin 6 (output low)
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <PWM_COND+0xc4>)
 80011c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ca:	611a      	str	r2, [r3, #16]
    for(i=0;i<PWM_loop;i++){
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <PWM_COND+0xbc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <PWM_COND+0xbc>)
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <PWM_COND+0xbc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <PWM_COND+0xb8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dbcb      	blt.n	800117e <PWM_COND+0x46>




    }
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200003bc 	.word	0x200003bc
 80011f0:	200003c0 	.word	0x200003c0
 80011f4:	200003b4 	.word	0x200003b4
 80011f8:	20000000 	.word	0x20000000
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	20000004 	.word	0x20000004

08001204 <PWM_MOIST>:
//}
void PWM_MOIST(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

	  counterflagPWM2=0;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <PWM_MOIST+0xd0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	  counter=0;
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <PWM_MOIST+0xd4>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]



	    // Set PB3 as output
	    GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3); // Clear bits
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <PWM_MOIST+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a30      	ldr	r2, [pc, #192]	; (80012dc <PWM_MOIST+0xd8>)
 800121a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800121e:	6013      	str	r3, [r2, #0]
	    GPIOB->CRL |= GPIO_CRL_MODE3_0; // Set pin mode to general purpose output push-pull 10MHz
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <PWM_MOIST+0xd8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <PWM_MOIST+0xd8>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122a:	6013      	str	r3, [r2, #0]
//



	    do{
			  GPIOB->ODR ^= GPIO_ODR_ODR3;
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <PWM_MOIST+0xd8>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a2a      	ldr	r2, [pc, #168]	; (80012dc <PWM_MOIST+0xd8>)
 8001232:	f083 0308 	eor.w	r3, r3, #8
 8001236:	60d3      	str	r3, [r2, #12]
//			  delay(4);    // 100Khz  0.6V 100%		2.6V 0%
//			  delay(1);    // 230Khz  0.6V 100%		2.6V 0%
			  __NOP();
 8001238:	bf00      	nop
			  __NOP();
 800123a:	bf00      	nop
			  __NOP();
 800123c:	bf00      	nop
			  __NOP();
 800123e:	bf00      	nop
			  __NOP();
 8001240:	bf00      	nop
			  __NOP();
 8001242:	bf00      	nop
			  __NOP();
 8001244:	bf00      	nop
			  __NOP();
 8001246:	bf00      	nop
			  __NOP();
 8001248:	bf00      	nop
			  __NOP();
 800124a:	bf00      	nop
			  __NOP();
 800124c:	bf00      	nop
			  __NOP();
 800124e:	bf00      	nop
			  __NOP();
 8001250:	bf00      	nop
			  __NOP();
 8001252:	bf00      	nop
			  __NOP();
 8001254:	bf00      	nop
			  __NOP();
 8001256:	bf00      	nop
			  __NOP();
 8001258:	bf00      	nop
			  __NOP();
 800125a:	bf00      	nop
			  __NOP();
 800125c:	bf00      	nop
			  __NOP();
 800125e:	bf00      	nop
			  __NOP();
 8001260:	bf00      	nop
			  __NOP();
 8001262:	bf00      	nop
			  __NOP();
 8001264:	bf00      	nop
			  __NOP();
 8001266:	bf00      	nop
			  __NOP();
 8001268:	bf00      	nop
			  __NOP();
 800126a:	bf00      	nop
			  __NOP();
 800126c:	bf00      	nop
			  __NOP();
 800126e:	bf00      	nop
			  __NOP();
 8001270:	bf00      	nop
			  __NOP();
 8001272:	bf00      	nop
			  __NOP();
 8001274:	bf00      	nop
			  __NOP();
 8001276:	bf00      	nop
			  __NOP();
 8001278:	bf00      	nop
			  __NOP();
 800127a:	bf00      	nop
			  __NOP();
 800127c:	bf00      	nop
			  __NOP();
 800127e:	bf00      	nop
			  __NOP();
 8001280:	bf00      	nop
			  __NOP();
 8001282:	bf00      	nop
			  __NOP();
 8001284:	bf00      	nop
			  __NOP();
 8001286:	bf00      	nop
			  __NOP();
 8001288:	bf00      	nop
			  __NOP();
 800128a:	bf00      	nop
			  __NOP();
 800128c:	bf00      	nop
			  __NOP();
 800128e:	bf00      	nop
			  __NOP();
 8001290:	bf00      	nop
			  __NOP();
 8001292:	bf00      	nop
			  __NOP();
 8001294:	bf00      	nop
			  __NOP();
 8001296:	bf00      	nop
			  __NOP();
 8001298:	bf00      	nop
			  __NOP();
 800129a:	bf00      	nop
			  __NOP();
 800129c:	bf00      	nop
			  __NOP();
 800129e:	bf00      	nop
			  __NOP();
 80012a0:	bf00      	nop
			  __NOP();
 80012a2:	bf00      	nop
			  __NOP();
 80012a4:	bf00      	nop
			  __NOP();
 80012a6:	bf00      	nop
			  __NOP();
 80012a8:	bf00      	nop
			  __NOP();
 80012aa:	bf00      	nop
			  __NOP();
 80012ac:	bf00      	nop
			  __NOP();
 80012ae:	bf00      	nop
			  __NOP();
 80012b0:	bf00      	nop
			  __NOP();
 80012b2:	bf00      	nop
			  __NOP();
 80012b4:	bf00      	nop
			  __NOP();
 80012b6:	bf00      	nop
			  __NOP();
 80012b8:	bf00      	nop
// 325khz


		}while(counterflagPWM2==0);
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <PWM_MOIST+0xd0>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0b3      	beq.n	800122c <PWM_MOIST+0x28>





	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2108      	movs	r1, #8
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <PWM_MOIST+0xd8>)
 80012ca:	f002 fc7c 	bl	8003bc6 <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000b15 	.word	0x20000b15
 80012d8:	200003b8 	.word	0x200003b8
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <SSD1306_INITS>:
    return slope * (voltage - voltage_low) + conductivity_low;
}


void SSD1306_INITS()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	  ssd1306_Init();
 80012e4:	f001 f8b8 	bl	8002458 <ssd1306_Init>
	  ssd1306_UpdateScreen();
 80012e8:	f001 f938 	bl	800255c <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 80012ec:	2032      	movs	r0, #50	; 0x32
 80012ee:	f001 fd45 	bl	8002d7c <HAL_Delay>
	  ssd1306_Fill(0);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f001 f91a 	bl	800252c <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 80012f8:	f001 f930 	bl	800255c <ssd1306_UpdateScreen>
	  ssd1306_WriteString("Telectronio",Font_11x18,1);
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <SSD1306_INITS+0x9c>)
 80012fe:	2301      	movs	r3, #1
 8001300:	ca06      	ldmia	r2, {r1, r2}
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <SSD1306_INITS+0xa0>)
 8001304:	f001 fa2c 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001308:	f001 f928 	bl	800255c <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 800130c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001310:	f001 fd34 	bl	8002d7c <HAL_Delay>
	  ssd1306_Fill(0);
 8001314:	2000      	movs	r0, #0
 8001316:	f001 f909 	bl	800252c <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 800131a:	f001 f91f 	bl	800255c <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 800131e:	2032      	movs	r0, #50	; 0x32
 8001320:	f001 fd2c 	bl	8002d7c <HAL_Delay>
	  ssd1306_SetCursor(0, 0);
 8001324:	2100      	movs	r1, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f001 fa40 	bl	80027ac <ssd1306_SetCursor>
	  ssd1306_WriteString("Soil", Font_11x18,1);
 800132c:	4a13      	ldr	r2, [pc, #76]	; (800137c <SSD1306_INITS+0x9c>)
 800132e:	2301      	movs	r3, #1
 8001330:	ca06      	ldmia	r2, {r1, r2}
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <SSD1306_INITS+0xa4>)
 8001334:	f001 fa14 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 19);
 8001338:	2113      	movs	r1, #19
 800133a:	2000      	movs	r0, #0
 800133c:	f001 fa36 	bl	80027ac <ssd1306_SetCursor>
	  ssd1306_WriteString("Meaurement", Font_11x18,1);
 8001340:	4a0e      	ldr	r2, [pc, #56]	; (800137c <SSD1306_INITS+0x9c>)
 8001342:	2301      	movs	r3, #1
 8001344:	ca06      	ldmia	r2, {r1, r2}
 8001346:	4810      	ldr	r0, [pc, #64]	; (8001388 <SSD1306_INITS+0xa8>)
 8001348:	f001 fa0a 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 38);
 800134c:	2126      	movs	r1, #38	; 0x26
 800134e:	2000      	movs	r0, #0
 8001350:	f001 fa2c 	bl	80027ac <ssd1306_SetCursor>
	  ssd1306_WriteString("Version1", Font_11x18,1);
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <SSD1306_INITS+0x9c>)
 8001356:	2301      	movs	r3, #1
 8001358:	ca06      	ldmia	r2, {r1, r2}
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <SSD1306_INITS+0xac>)
 800135c:	f001 fa00 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001360:	f001 f8fc 	bl	800255c <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 8001364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001368:	f001 fd08 	bl	8002d7c <HAL_Delay>
	  ssd1306_Fill(0);
 800136c:	2000      	movs	r0, #0
 800136e:	f001 f8dd 	bl	800252c <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 8001372:	f001 f8f3 	bl	800255c <ssd1306_UpdateScreen>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000018 	.word	0x20000018
 8001380:	08008758 	.word	0x08008758
 8001384:	08008764 	.word	0x08008764
 8001388:	0800876c 	.word	0x0800876c
 800138c:	08008778 	.word	0x08008778

08001390 <delay>:

void delay(uint16_t delay){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <delay+0x2c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 80013a2:	bf00      	nop
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <delay+0x2c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3f9      	bcc.n	80013a4 <delay+0x14>
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000294 	.word	0x20000294

080013c0 <Set_Pin_Output>:


void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f002 fa4f 	bl	8003890 <HAL_GPIO_Init>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f002 fa32 	bl	8003890 <HAL_GPIO_Init>
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <DS18B20_Start>:
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull=GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
}
uint8_t DS18B20_Start (void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	uint8_t Response=0;
 800143a:	2300      	movs	r3, #0
 800143c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 800143e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <DS18B20_Start+0x64>)
 8001444:	f7ff ffbc 	bl	80013c0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4812      	ldr	r0, [pc, #72]	; (8001498 <DS18B20_Start+0x64>)
 8001450:	f002 fbb9 	bl	8003bc6 <HAL_GPIO_WritePin>
	delay(480);
 8001454:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001458:	f7ff ff9a 	bl	8001390 <delay>
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800145c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <DS18B20_Start+0x64>)
 8001462:	f7ff ffca 	bl	80013fa <Set_Pin_Input>
	delay(60);
 8001466:	203c      	movs	r0, #60	; 0x3c
 8001468:	f7ff ff92 	bl	8001390 <delay>

	if(!(HAL_GPIO_ReadPin (DS18B20_PORT,DS18B20_PIN))) Response =1;
 800146c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <DS18B20_Start+0x64>)
 8001472:	f002 fb91 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <DS18B20_Start+0x4e>
 800147c:	2301      	movs	r3, #1
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e001      	b.n	8001486 <DS18B20_Start+0x52>
	else Response = -1;
 8001482:	23ff      	movs	r3, #255	; 0xff
 8001484:	71fb      	strb	r3, [r7, #7]
	delay(480);
 8001486:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800148a:	f7ff ff81 	bl	8001390 <delay>
	return Response;
 800148e:	79fb      	ldrb	r3, [r7, #7]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40010c00 	.word	0x40010c00

0800149c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80014a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014aa:	4821      	ldr	r0, [pc, #132]	; (8001530 <DS18B20_Write+0x94>)
 80014ac:	f7ff ff88 	bl	80013c0 <Set_Pin_Output>

	for(int i=0; i<8; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e034      	b.n	8001520 <DS18B20_Write+0x84>
	{
		if((data&(1<<i))!=0)
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	fa42 f303 	asr.w	r3, r2, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <DS18B20_Write+0x58>
		{
			//write 1
			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80014c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ca:	4819      	ldr	r0, [pc, #100]	; (8001530 <DS18B20_Write+0x94>)
 80014cc:	f7ff ff78 	bl	80013c0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <DS18B20_Write+0x94>)
 80014d8:	f002 fb75 	bl	8003bc6 <HAL_GPIO_WritePin>
			delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ff57 	bl	8001390 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 80014e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <DS18B20_Write+0x94>)
 80014e8:	f7ff ff87 	bl	80013fa <Set_Pin_Input>
			delay(60);
 80014ec:	203c      	movs	r0, #60	; 0x3c
 80014ee:	f7ff ff4f 	bl	8001390 <delay>
 80014f2:	e012      	b.n	800151a <DS18B20_Write+0x7e>
		}
		else
		{
			//write 0

			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <DS18B20_Write+0x94>)
 80014fa:	f7ff ff61 	bl	80013c0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <DS18B20_Write+0x94>)
 8001506:	f002 fb5e 	bl	8003bc6 <HAL_GPIO_WritePin>
			delay(60);
 800150a:	203c      	movs	r0, #60	; 0x3c
 800150c:	f7ff ff40 	bl	8001390 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <DS18B20_Write+0x94>)
 8001516:	f7ff ff70 	bl	80013fa <Set_Pin_Input>
	for(int i=0; i<8; i++)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b07      	cmp	r3, #7
 8001524:	ddc7      	ble.n	80014b6 <DS18B20_Write+0x1a>

		}
	}
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40010c00 	.word	0x40010c00

08001534 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800153a:	2300      	movs	r3, #0
 800153c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800153e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001542:	481c      	ldr	r0, [pc, #112]	; (80015b4 <DS18B20_Read+0x80>)
 8001544:	f7ff ff59 	bl	80013fa <Set_Pin_Input>

	for(int i=0;i<8;i++)
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	e02a      	b.n	80015a4 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 800154e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <DS18B20_Read+0x80>)
 8001554:	f7ff ff34 	bl	80013c0 <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155e:	4815      	ldr	r0, [pc, #84]	; (80015b4 <DS18B20_Read+0x80>)
 8001560:	f002 fb31 	bl	8003bc6 <HAL_GPIO_WritePin>
		delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff ff13 	bl	8001390 <delay>
		Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800156a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156e:	4811      	ldr	r0, [pc, #68]	; (80015b4 <DS18B20_Read+0x80>)
 8001570:	f7ff ff43 	bl	80013fa <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT,DS18B20_PIN))
 8001574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001578:	480e      	ldr	r0, [pc, #56]	; (80015b4 <DS18B20_Read+0x80>)
 800157a:	f002 fb0d 	bl	8003b98 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <DS18B20_Read+0x64>
		{
			value |= 1<<i; //read=1
 8001584:	2201      	movs	r2, #1
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	b25a      	sxtb	r2, r3
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	4313      	orrs	r3, r2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8001598:	203c      	movs	r0, #60	; 0x3c
 800159a:	f7ff fef9 	bl	8001390 <delay>
	for(int i=0;i<8;i++)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	ddd1      	ble.n	800154e <DS18B20_Read+0x1a>
	}
	return value;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40010c00 	.word	0x40010c00

080015b8 <DS18B20_GetTemp>:



float DS18B20_GetTemp(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    Presence = DS18B20_Start();
 80015bc:	f7ff ff3a 	bl	8001434 <DS18B20_Start>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <DS18B20_GetTemp+0xa4>)
 80015c6:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f001 fbd7 	bl	8002d7c <HAL_Delay>

    DS18B20_Write(0xCC); // SKIP ROM
 80015ce:	20cc      	movs	r0, #204	; 0xcc
 80015d0:	f7ff ff64 	bl	800149c <DS18B20_Write>
    DS18B20_Write(0x44); // Convert T
 80015d4:	2044      	movs	r0, #68	; 0x44
 80015d6:	f7ff ff61 	bl	800149c <DS18B20_Write>

    HAL_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f001 fbce 	bl	8002d7c <HAL_Delay>

    Presence = DS18B20_Start();
 80015e0:	f7ff ff28 	bl	8001434 <DS18B20_Start>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <DS18B20_GetTemp+0xa4>)
 80015ea:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f001 fbc5 	bl	8002d7c <HAL_Delay>

    DS18B20_Write(0xCC);
 80015f2:	20cc      	movs	r0, #204	; 0xcc
 80015f4:	f7ff ff52 	bl	800149c <DS18B20_Write>
    DS18B20_Write(0xBE); // Read scratch pad
 80015f8:	20be      	movs	r0, #190	; 0xbe
 80015fa:	f7ff ff4f 	bl	800149c <DS18B20_Write>

    Temp_byte1 = DS18B20_Read();
 80015fe:	f7ff ff99 	bl	8001534 <DS18B20_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <DS18B20_GetTemp+0xa8>)
 8001608:	701a      	strb	r2, [r3, #0]
    Temp_byte2 = DS18B20_Read();
 800160a:	f7ff ff93 	bl	8001534 <DS18B20_Read>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <DS18B20_GetTemp+0xac>)
 8001614:	701a      	strb	r2, [r3, #0]
    TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <DS18B20_GetTemp+0xac>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <DS18B20_GetTemp+0xa8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <DS18B20_GetTemp+0xb0>)
 800162c:	801a      	strh	r2, [r3, #0]
    Temperature = (float)TEMP / 16;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <DS18B20_GetTemp+0xb0>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb2e 	bl	8000c94 <__aeabi_ui2f>
 8001638:	4603      	mov	r3, r0
 800163a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc34 	bl	8000eac <__aeabi_fdiv>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <DS18B20_GetTemp+0xb4>)
 800164a:	601a      	str	r2, [r3, #0]



    HAL_Delay(10);
 800164c:	200a      	movs	r0, #10
 800164e:	f001 fb95 	bl	8002d7c <HAL_Delay>

    return Temperature;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <DS18B20_GetTemp+0xb4>)
 8001654:	681b      	ldr	r3, [r3, #0]
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200003e4 	.word	0x200003e4
 8001660:	200003e5 	.word	0x200003e5
 8001664:	200003e6 	.word	0x200003e6
 8001668:	200003e8 	.word	0x200003e8
 800166c:	200003e0 	.word	0x200003e0

08001670 <ADC_CH1>:

void ADC_CH1(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8001680:	2301      	movs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001684:	2301      	movs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001688:	2304      	movs	r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <ADC_CH1+0x38>)
 8001692:	f001 fe5b 	bl	800334c <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <ADC_CH1+0x30>
	{
	Error_Handler();
 800169c:	f000 fe9e 	bl	80023dc <Error_Handler>
	}
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000210 	.word	0x20000210

080016ac <ADC_CH2>:
void ADC_CH2(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 80016bc:	2302      	movs	r3, #2
 80016be:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80016c4:	2304      	movs	r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <ADC_CH2+0x38>)
 80016ce:	f001 fe3d 	bl	800334c <HAL_ADC_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <ADC_CH2+0x30>
	{
	Error_Handler();
 80016d8:	f000 fe80 	bl	80023dc <Error_Handler>
	}
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000210 	.word	0x20000210

080016e8 <ADC_CH3>:
void ADC_CH3(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 80016f8:	2303      	movs	r3, #3
 80016fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001700:	2304      	movs	r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <ADC_CH3+0x38>)
 800170a:	f001 fe1f 	bl	800334c <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <ADC_CH3+0x30>
	{
	Error_Handler();
 8001714:	f000 fe62 	bl	80023dc <Error_Handler>
	}
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000210 	.word	0x20000210
 8001724:	00000000 	.word	0x00000000

08001728 <adc_value_to_voltage>:
float adc_value_to_voltage(uint16_t adc_value) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
    return (adc_value / 4095.0) * VREF; // 4095 for 12-bit resolution
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fe65 	bl	8000404 <__aeabi_i2d>
 800173a:	a30d      	add	r3, pc, #52	; (adr r3, 8001770 <adc_value_to_voltage+0x48>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe fff4 	bl	800072c <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	a30a      	add	r3, pc, #40	; (adr r3, 8001778 <adc_value_to_voltage+0x50>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe fec1 	bl	80004d8 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f993 	bl	8000a88 <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	f3af 8000 	nop.w
 8001770:	00000000 	.word	0x00000000
 8001774:	40affe00 	.word	0x40affe00
 8001778:	00000000 	.word	0x00000000
 800177c:	40a9dc00 	.word	0x40a9dc00

08001780 <delay2>:

void delay2(uint32_t delay_time) {
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < delay_time; ++i) {
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e003      	b.n	8001796 <delay2+0x16>
        __NOP(); // Use NOP instruction for delay
 800178e:	bf00      	nop
    for (uint32_t i = 0; i < delay_time; ++i) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	d3f7      	bcc.n	800178e <delay2+0xe>
    }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
	...

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b2:	f001 fa81 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b6:	f000 fb8b 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ba:	f000 fd85 	bl	80022c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017be:	f000 fc13 	bl	8001fe8 <MX_I2C1_Init>
  MX_ADC2_Init();
 80017c2:	f000 fbe1 	bl	8001f88 <MX_ADC2_Init>
  MX_TIM1_Init();
 80017c6:	f000 fc3d 	bl	8002044 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017ca:	f000 fd25 	bl	8002218 <MX_TIM4_Init>
  MX_TIM3_Init();
 80017ce:	f000 fcd5 	bl	800217c <MX_TIM3_Init>
  MX_TIM2_Init();
 80017d2:	f000 fc87 	bl	80020e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_INITS();
 80017d6:	f7ff fd83 	bl	80012e0 <SSD1306_INITS>
  HAL_ADC_Init(&hadc2);
 80017da:	4891      	ldr	r0, [pc, #580]	; (8001a20 <main+0x274>)
 80017dc:	f001 faf2 	bl	8002dc4 <HAL_ADC_Init>
  HAL_TIM_Base_Start(&htim1);
 80017e0:	4890      	ldr	r0, [pc, #576]	; (8001a24 <main+0x278>)
 80017e2:	f003 fc81 	bl	80050e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80017e6:	4890      	ldr	r0, [pc, #576]	; (8001a28 <main+0x27c>)
 80017e8:	f003 fc7e 	bl	80050e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80017ec:	488f      	ldr	r0, [pc, #572]	; (8001a2c <main+0x280>)
 80017ee:	f003 fc7b 	bl	80050e8 <HAL_TIM_Base_Start>

//  PWM_BEGIN_MOIST();
  HAL_TIM_Base_Start_IT(&htim3);
 80017f2:	488f      	ldr	r0, [pc, #572]	; (8001a30 <main+0x284>)
 80017f4:	f003 fcc2 	bl	800517c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);  // Set priority and subpriority as needed
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	201d      	movs	r0, #29
 80017fe:	f002 f810 	bl	8003822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001802:	201d      	movs	r0, #29
 8001804:	f002 f829 	bl	800385a <HAL_NVIC_EnableIRQ>
  GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8001808:	4b8a      	ldr	r3, [pc, #552]	; (8001a34 <main+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a89      	ldr	r2, [pc, #548]	; (8001a34 <main+0x288>)
 800180e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001812:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= GPIO_CRL_MODE3;  // Output mode, max speed 50 MHz
 8001814:	4b87      	ldr	r3, [pc, #540]	; (8001a34 <main+0x288>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a86      	ldr	r2, [pc, #536]	; (8001a34 <main+0x288>)
 800181a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800181e:	6013      	str	r3, [r2, #0]
  GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7); // Pin 7
 8001820:	4b84      	ldr	r3, [pc, #528]	; (8001a34 <main+0x288>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a83      	ldr	r2, [pc, #524]	; (8001a34 <main+0x288>)
 8001826:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800182a:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= GPIO_CRL_MODE7_0; // Output mode, max speed 10 MHz
 800182c:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <main+0x288>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a80      	ldr	r2, [pc, #512]	; (8001a34 <main+0x288>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	6013      	str	r3, [r2, #0]
  GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6); // Pin 6
 8001838:	4b7e      	ldr	r3, [pc, #504]	; (8001a34 <main+0x288>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a7d      	ldr	r2, [pc, #500]	; (8001a34 <main+0x288>)
 800183e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001842:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= GPIO_CRL_MODE6_0; // Output mode, max speed 10 MHz
 8001844:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <main+0x288>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <main+0x288>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==1)
 8001850:	2104      	movs	r1, #4
 8001852:	4879      	ldr	r0, [pc, #484]	; (8001a38 <main+0x28c>)
 8001854:	f002 f9a0 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <main+0xc4>
	  {
		  HAL_Delay(100);
 800185e:	2064      	movs	r0, #100	; 0x64
 8001860:	f001 fa8c 	bl	8002d7c <HAL_Delay>
		  counterFREQ++;
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <main+0x290>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <main+0x290>)
 800186e:	801a      	strh	r2, [r3, #0]
	  }
	  if(counterFREQ==1){
 8001870:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <main+0x290>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <main+0xda>
		    delay_time = 2000; // Initial delay time in microseconds
 8001878:	4b71      	ldr	r3, [pc, #452]	; (8001a40 <main+0x294>)
 800187a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800187e:	601a      	str	r2, [r3, #0]
		    delay_band = 100; // Initial delay band in microseconds
 8001880:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <main+0x298>)
 8001882:	2264      	movs	r2, #100	; 0x64
 8001884:	601a      	str	r2, [r3, #0]
	  }
	  if(counterFREQ==2){
 8001886:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <main+0x290>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d105      	bne.n	800189a <main+0xee>
		    delay_time = 200; // Initial delay time in microseconds
 800188e:	4b6c      	ldr	r3, [pc, #432]	; (8001a40 <main+0x294>)
 8001890:	22c8      	movs	r2, #200	; 0xc8
 8001892:	601a      	str	r2, [r3, #0]
		    delay_band = 10; // Initial delay band in microseconds
 8001894:	4b6b      	ldr	r3, [pc, #428]	; (8001a44 <main+0x298>)
 8001896:	220a      	movs	r2, #10
 8001898:	601a      	str	r2, [r3, #0]
	  }
	  if(counterFREQ==3){
 800189a:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <main+0x290>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d105      	bne.n	80018ae <main+0x102>
		    delay_time = 20; // Initial delay time in microseconds
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <main+0x294>)
 80018a4:	2214      	movs	r2, #20
 80018a6:	601a      	str	r2, [r3, #0]
		    delay_band = 1; // Initial delay band in microseconds
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <main+0x298>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
	  }
	  if(counterFREQ>3){
 80018ae:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <main+0x290>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d902      	bls.n	80018bc <main+0x110>
		  counterFREQ=0;
 80018b6:	4b61      	ldr	r3, [pc, #388]	; (8001a3c <main+0x290>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]
	  }
	  //MEASURE SEQUENTIAL
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)
 80018bc:	2108      	movs	r1, #8
 80018be:	485e      	ldr	r0, [pc, #376]	; (8001a38 <main+0x28c>)
 80018c0:	f002 f96a 	bl	8003b98 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 8190 	bne.w	8001bec <main+0x440>
	  {	  av_cond=0;
 80018cc:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <main+0x29c>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
	  	  av_moist=0;
 80018d4:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <main+0x2a0>)
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
		  ssd1306_Fill(0);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 fe25 	bl	800252c <ssd1306_Fill>
		  ssd1306_UpdateScreen();
 80018e2:	f000 fe3b 	bl	800255c <ssd1306_UpdateScreen>
		  ssd1306_SetCursor(0, 0);
 80018e6:	2100      	movs	r1, #0
 80018e8:	2000      	movs	r0, #0
 80018ea:	f000 ff5f 	bl	80027ac <ssd1306_SetCursor>
		  ssd1306_WriteString("Conductivity...",Font_7x10,1);
 80018ee:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <main+0x2a4>)
 80018f0:	2301      	movs	r3, #1
 80018f2:	ca06      	ldmia	r2, {r1, r2}
 80018f4:	4857      	ldr	r0, [pc, #348]	; (8001a54 <main+0x2a8>)
 80018f6:	f000 ff33 	bl	8002760 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80018fa:	f000 fe2f 	bl	800255c <ssd1306_UpdateScreen>
		  ssd1306_Fill(0);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 fe14 	bl	800252c <ssd1306_Fill>


		  ADC_CH1();
 8001904:	f7ff feb4 	bl	8001670 <ADC_CH1>

		  float av_cond_sum = 0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]

		  for(int j = 0; j < 15; j++) {
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	e03f      	b.n	8001994 <main+0x1e8>

		      HAL_ADC_Start(&hadc2);
 8001914:	4842      	ldr	r0, [pc, #264]	; (8001a20 <main+0x274>)
 8001916:	f001 fb2d 	bl	8002f74 <HAL_ADC_Start>
		      float av_cond = 0; // Initialize av_cond for each iteration
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	607b      	str	r3, [r7, #4]

		      for(int i = 0; i < 5; i++) {
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	e024      	b.n	8001970 <main+0x1c4>
		    	  PWM_COND();
 8001926:	f7ff fc07 	bl	8001138 <PWM_COND>
		          HAL_ADC_PollForConversion(&hadc2, 1);
 800192a:	2101      	movs	r1, #1
 800192c:	483c      	ldr	r0, [pc, #240]	; (8001a20 <main+0x274>)
 800192e:	f001 fbfb 	bl	8003128 <HAL_ADC_PollForConversion>
		          adc_buffer[0] = HAL_ADC_GetValue(&hadc2);
 8001932:	483b      	ldr	r0, [pc, #236]	; (8001a20 <main+0x274>)
 8001934:	f001 fcfe 	bl	8003334 <HAL_ADC_GetValue>
 8001938:	4603      	mov	r3, r0
 800193a:	4a47      	ldr	r2, [pc, #284]	; (8001a58 <main+0x2ac>)
 800193c:	6013      	str	r3, [r2, #0]
		          voltage_buffer[0] = adc_value_to_voltage(adc_buffer[0]);
 800193e:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <main+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff feef 	bl	8001728 <adc_value_to_voltage>
 800194a:	4603      	mov	r3, r0
 800194c:	4a43      	ldr	r2, [pc, #268]	; (8001a5c <main+0x2b0>)
 800194e:	6013      	str	r3, [r2, #0]
		          av_cond += voltage_buffer[0] / 5; // Accumulate the value
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <main+0x2b0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4942      	ldr	r1, [pc, #264]	; (8001a60 <main+0x2b4>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff faa8 	bl	8000eac <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff f8e7 	bl	8000b34 <__addsf3>
 8001966:	4603      	mov	r3, r0
 8001968:	607b      	str	r3, [r7, #4]
		      for(int i = 0; i < 5; i++) {
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b04      	cmp	r3, #4
 8001974:	ddd7      	ble.n	8001926 <main+0x17a>
		      }

		      HAL_ADC_Stop(&hadc2);
 8001976:	482a      	ldr	r0, [pc, #168]	; (8001a20 <main+0x274>)
 8001978:	f001 fbaa 	bl	80030d0 <HAL_ADC_Stop>
		      HAL_Delay(100);
 800197c:	2064      	movs	r0, #100	; 0x64
 800197e:	f001 f9fd 	bl	8002d7c <HAL_Delay>



		      // Add the average of this iteration to av_cond_sum
		      av_cond_sum += av_cond;
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff f8d5 	bl	8000b34 <__addsf3>
 800198a:	4603      	mov	r3, r0
 800198c:	60fb      	str	r3, [r7, #12]
		  for(int j = 0; j < 15; j++) {
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3301      	adds	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b0e      	cmp	r3, #14
 8001998:	ddbc      	ble.n	8001914 <main+0x168>
		  }

		  // Calculate the final average
		  final_average_cond = av_cond_sum / 15;
 800199a:	4932      	ldr	r1, [pc, #200]	; (8001a64 <main+0x2b8>)
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fa85 	bl	8000eac <__aeabi_fdiv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <main+0x2bc>)
 80019a8:	601a      	str	r2, [r3, #0]


		  HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ae:	f001 f9e5 	bl	8002d7c <HAL_Delay>
		  ssd1306_Fill(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 fdba 	bl	800252c <ssd1306_Fill>
		  ssd1306_UpdateScreen();
 80019b8:	f000 fdd0 	bl	800255c <ssd1306_UpdateScreen>
		  ssd1306_SetCursor(0, 0);
 80019bc:	2100      	movs	r1, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 fef4 	bl	80027ac <ssd1306_SetCursor>
		  ssd1306_WriteString("Moisture...",Font_7x10,1);
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <main+0x2a4>)
 80019c6:	2301      	movs	r3, #1
 80019c8:	ca06      	ldmia	r2, {r1, r2}
 80019ca:	4828      	ldr	r0, [pc, #160]	; (8001a6c <main+0x2c0>)
 80019cc:	f000 fec8 	bl	8002760 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80019d0:	f000 fdc4 	bl	800255c <ssd1306_UpdateScreen>
		  ssd1306_Fill(0);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f000 fda9 	bl	800252c <ssd1306_Fill>
		  PWM_MOIST();
 80019da:	f7ff fc13 	bl	8001204 <PWM_MOIST>
		  PWM_MOIST();
 80019de:	f7ff fc11 	bl	8001204 <PWM_MOIST>
		  PWM_MOIST();
 80019e2:	f7ff fc0f 	bl	8001204 <PWM_MOIST>
		  PWM_MOIST();
 80019e6:	f7ff fc0d 	bl	8001204 <PWM_MOIST>
		  ADC_CH2();
 80019ea:	f7ff fe5f 	bl	80016ac <ADC_CH2>

		  // Inside your loop
		  percentage_moist2 = 0; // Initialize averaged percentage variable
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <main+0x2c4>)
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

		  for (j = 0; j < 4; j++) {
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <main+0x2c8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e0b1      	b.n	8001b62 <main+0x3b6>
		      av_moist = 0; // Reset av_moist for each iteration
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <main+0x2a0>)
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
		      percentage_moist=0;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <main+0x2cc>)
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
		      PWM_MOIST();
 8001a0e:	f7ff fbf9 	bl	8001204 <PWM_MOIST>
		      HAL_ADC_Start(&hadc2);
 8001a12:	4803      	ldr	r0, [pc, #12]	; (8001a20 <main+0x274>)
 8001a14:	f001 faae 	bl	8002f74 <HAL_ADC_Start>
		      for (i = 0; i < 50; i++) {
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <main+0x2d0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e087      	b.n	8001b30 <main+0x384>
 8001a20:	20000210 	.word	0x20000210
 8001a24:	20000294 	.word	0x20000294
 8001a28:	200002dc 	.word	0x200002dc
 8001a2c:	2000036c 	.word	0x2000036c
 8001a30:	20000324 	.word	0x20000324
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	200003bc 	.word	0x200003bc
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004
 8001a48:	200003c8 	.word	0x200003c8
 8001a4c:	200003d0 	.word	0x200003d0
 8001a50:	20000010 	.word	0x20000010
 8001a54:	08008784 	.word	0x08008784
 8001a58:	20000af4 	.word	0x20000af4
 8001a5c:	20000b04 	.word	0x20000b04
 8001a60:	40a00000 	.word	0x40a00000
 8001a64:	41700000 	.word	0x41700000
 8001a68:	200003c4 	.word	0x200003c4
 8001a6c:	08008794 	.word	0x08008794
 8001a70:	200003d8 	.word	0x200003d8
 8001a74:	200003b5 	.word	0x200003b5
 8001a78:	200003d4 	.word	0x200003d4
 8001a7c:	200003b4 	.word	0x200003b4
		          HAL_ADC_PollForConversion(&hadc2, 1);
 8001a80:	2101      	movs	r1, #1
 8001a82:	4846      	ldr	r0, [pc, #280]	; (8001b9c <main+0x3f0>)
 8001a84:	f001 fb50 	bl	8003128 <HAL_ADC_PollForConversion>
		          adc_buffer[1] = HAL_ADC_GetValue(&hadc2);
 8001a88:	4844      	ldr	r0, [pc, #272]	; (8001b9c <main+0x3f0>)
 8001a8a:	f001 fc53 	bl	8003334 <HAL_ADC_GetValue>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a43      	ldr	r2, [pc, #268]	; (8001ba0 <main+0x3f4>)
 8001a92:	6053      	str	r3, [r2, #4]
		          voltage_buffer[1] = adc_value_to_voltage(adc_buffer[1]);
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <main+0x3f4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe44 	bl	8001728 <adc_value_to_voltage>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a40      	ldr	r2, [pc, #256]	; (8001ba4 <main+0x3f8>)
 8001aa4:	6053      	str	r3, [r2, #4]
		          av_moist += voltage_buffer[1] / 50;
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <main+0x3f8>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	493f      	ldr	r1, [pc, #252]	; (8001ba8 <main+0x3fc>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff f9fd 	bl	8000eac <__aeabi_fdiv>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <main+0x400>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f7ff f839 	bl	8000b34 <__addsf3>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <main+0x400>)
 8001ac8:	601a      	str	r2, [r3, #0]
		          percentage_moist = 100.0-(((av_moist - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0);
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <main+0x400>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <main+0x404>)
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f82c 	bl	8000b30 <__aeabi_fsub>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461c      	mov	r4, r3
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <main+0x408>)
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <main+0x404>)
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f824 	bl	8000b30 <__aeabi_fsub>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff f9dd 	bl	8000eac <__aeabi_fdiv>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fc97 	bl	8000428 <__aeabi_f2d>
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <main+0x40c>)
 8001b00:	f7fe fcea 	bl	80004d8 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	492a      	ldr	r1, [pc, #168]	; (8001bb8 <main+0x40c>)
 8001b0e:	f7fe fb2b 	bl	8000168 <__aeabi_dsub>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe ffb5 	bl	8000a88 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <main+0x410>)
 8001b22:	6013      	str	r3, [r2, #0]
		      for (i = 0; i < 50; i++) {
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <main+0x414>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <main+0x414>)
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <main+0x414>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b31      	cmp	r3, #49	; 0x31
 8001b36:	d9a3      	bls.n	8001a80 <main+0x2d4>
		      }
		      HAL_ADC_Stop(&hadc2);
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <main+0x3f0>)
 8001b3a:	f001 fac9 	bl	80030d0 <HAL_ADC_Stop>

		      // Calculate percentage_moist for this iteration


		      // Accumulate the calculated percentage
		      percentage_moist2 += percentage_moist;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <main+0x418>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <main+0x410>)
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fff3 	bl	8000b34 <__addsf3>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <main+0x418>)
 8001b54:	601a      	str	r2, [r3, #0]
		  for (j = 0; j < 4; j++) {
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <main+0x41c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <main+0x41c>)
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <main+0x41c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	f67f af49 	bls.w	80019fe <main+0x252>

		  }

		  // Calculate the average of percentage_moist over 15 measurements
		  percentage_moist2 /= 4;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <main+0x418>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f999 	bl	8000eac <__aeabi_fdiv>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <main+0x418>)
 8001b80:	601a      	str	r2, [r3, #0]
		  // Manipulate the last value of percentage_moist2
		  if (percentage_moist2 > 100) {
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <main+0x418>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4911      	ldr	r1, [pc, #68]	; (8001bcc <main+0x420>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fa97 	bl	80010bc <__aeabi_fcmpgt>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01d      	beq.n	8001bd0 <main+0x424>
		      percentage_moist2 = 100;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <main+0x418>)
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <main+0x420>)
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e027      	b.n	8001bec <main+0x440>
 8001b9c:	20000210 	.word	0x20000210
 8001ba0:	20000af4 	.word	0x20000af4
 8001ba4:	20000b04 	.word	0x20000b04
 8001ba8:	42480000 	.word	0x42480000
 8001bac:	200003d0 	.word	0x200003d0
 8001bb0:	44834000 	.word	0x44834000
 8001bb4:	450fc000 	.word	0x450fc000
 8001bb8:	40590000 	.word	0x40590000
 8001bbc:	200003d4 	.word	0x200003d4
 8001bc0:	200003b4 	.word	0x200003b4
 8001bc4:	200003d8 	.word	0x200003d8
 8001bc8:	200003b5 	.word	0x200003b5
 8001bcc:	42c80000 	.word	0x42c80000
		  } else if (percentage_moist2 < 0) {
 8001bd0:	4b9e      	ldr	r3, [pc, #632]	; (8001e4c <main+0x6a0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fa51 	bl	8001080 <__aeabi_fcmplt>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <main+0x440>
		      percentage_moist2 = 0;
 8001be4:	4b99      	ldr	r3, [pc, #612]	; (8001e4c <main+0x6a0>)
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
	  }




	  Temp=DS18B20_GetTemp();
 8001bec:	f7ff fce4 	bl	80015b8 <DS18B20_GetTemp>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a97      	ldr	r2, [pc, #604]	; (8001e50 <main+0x6a4>)
 8001bf4:	6013      	str	r3, [r2, #0]
//	  voltage_buffer[1]=adc_value_to_voltage(adc_buffer[1]);
//	  HAL_ADC_Stop(&hadc2);
//	  HAL_Delay(2);

	  //NTC BOARD TEMP
	  ADC_CH3();
 8001bf6:	f7ff fd77 	bl	80016e8 <ADC_CH3>
	  HAL_ADC_Start(&hadc2);
 8001bfa:	4896      	ldr	r0, [pc, #600]	; (8001e54 <main+0x6a8>)
 8001bfc:	f001 f9ba 	bl	8002f74 <HAL_ADC_Start>
	  HAL_Delay(2);
 8001c00:	2002      	movs	r0, #2
 8001c02:	f001 f8bb 	bl	8002d7c <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 8001c06:	2164      	movs	r1, #100	; 0x64
 8001c08:	4892      	ldr	r0, [pc, #584]	; (8001e54 <main+0x6a8>)
 8001c0a:	f001 fa8d 	bl	8003128 <HAL_ADC_PollForConversion>
	  adc_buffer[2]=HAL_ADC_GetValue(&hadc2);
 8001c0e:	4891      	ldr	r0, [pc, #580]	; (8001e54 <main+0x6a8>)
 8001c10:	f001 fb90 	bl	8003334 <HAL_ADC_GetValue>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a90      	ldr	r2, [pc, #576]	; (8001e58 <main+0x6ac>)
 8001c18:	6093      	str	r3, [r2, #8]
	  voltage_buffer[2]=adc_value_to_voltage(adc_buffer[2]);
 8001c1a:	4b8f      	ldr	r3, [pc, #572]	; (8001e58 <main+0x6ac>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fd81 	bl	8001728 <adc_value_to_voltage>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a8c      	ldr	r2, [pc, #560]	; (8001e5c <main+0x6b0>)
 8001c2a:	6093      	str	r3, [r2, #8]
	  HAL_ADC_Stop(&hadc2);
 8001c2c:	4889      	ldr	r0, [pc, #548]	; (8001e54 <main+0x6a8>)
 8001c2e:	f001 fa4f 	bl	80030d0 <HAL_ADC_Stop>
	  HAL_Delay(2);
 8001c32:	2002      	movs	r0, #2
 8001c34:	f001 f8a2 	bl	8002d7c <HAL_Delay>





	  ssd1306_SetCursor(0, 0);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 fdb6 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferConduct,"Cond %.2fV %.f",final_average_cond,conductivity);
 8001c40:	4b87      	ldr	r3, [pc, #540]	; (8001e60 <main+0x6b4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fbef 	bl	8000428 <__aeabi_f2d>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <main+0x6b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fbe8 	bl	8000428 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c60:	4622      	mov	r2, r4
 8001c62:	462b      	mov	r3, r5
 8001c64:	4980      	ldr	r1, [pc, #512]	; (8001e68 <main+0x6bc>)
 8001c66:	4881      	ldr	r0, [pc, #516]	; (8001e6c <main+0x6c0>)
 8001c68:	f004 fc1c 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferConduct,Font_6x8,1);
 8001c6c:	4a80      	ldr	r2, [pc, #512]	; (8001e70 <main+0x6c4>)
 8001c6e:	2301      	movs	r3, #1
 8001c70:	ca06      	ldmia	r2, {r1, r2}
 8001c72:	487e      	ldr	r0, [pc, #504]	; (8001e6c <main+0x6c0>)
 8001c74:	f000 fd74 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 11);
 8001c78:	210b      	movs	r1, #11
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 fd96 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferMoist,"Moist %.1fV %.1f%%",av_moist,percentage_moist2);
 8001c80:	4b7c      	ldr	r3, [pc, #496]	; (8001e74 <main+0x6c8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fbcf 	bl	8000428 <__aeabi_f2d>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460d      	mov	r5, r1
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <main+0x6a0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fbc8 	bl	8000428 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	4974      	ldr	r1, [pc, #464]	; (8001e78 <main+0x6cc>)
 8001ca6:	4875      	ldr	r0, [pc, #468]	; (8001e7c <main+0x6d0>)
 8001ca8:	f004 fbfc 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferMoist,Font_6x8,1);
 8001cac:	4a70      	ldr	r2, [pc, #448]	; (8001e70 <main+0x6c4>)
 8001cae:	2301      	movs	r3, #1
 8001cb0:	ca06      	ldmia	r2, {r1, r2}
 8001cb2:	4872      	ldr	r0, [pc, #456]	; (8001e7c <main+0x6d0>)
 8001cb4:	f000 fd54 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 21);
 8001cb8:	2115      	movs	r1, #21
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 fd76 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferTemp,"Temp MCU %.2fV",voltage_buffer[2]);
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <main+0x6b0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fbaf 	bl	8000428 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	496c      	ldr	r1, [pc, #432]	; (8001e80 <main+0x6d4>)
 8001cd0:	486c      	ldr	r0, [pc, #432]	; (8001e84 <main+0x6d8>)
 8001cd2:	f004 fbe7 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferTemp,Font_6x8,1);
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <main+0x6c4>)
 8001cd8:	2301      	movs	r3, #1
 8001cda:	ca06      	ldmia	r2, {r1, r2}
 8001cdc:	4869      	ldr	r0, [pc, #420]	; (8001e84 <main+0x6d8>)
 8001cde:	f000 fd3f 	bl	8002760 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 31);
 8001ce2:	211f      	movs	r1, #31
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 fd61 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferDs18b20,"ds18b20 %.2fC",Temp);
 8001cea:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <main+0x6a4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb9a 	bl	8000428 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4963      	ldr	r1, [pc, #396]	; (8001e88 <main+0x6dc>)
 8001cfa:	4864      	ldr	r0, [pc, #400]	; (8001e8c <main+0x6e0>)
 8001cfc:	f004 fbd2 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferDs18b20,Font_6x8,1);
 8001d00:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <main+0x6c4>)
 8001d02:	2301      	movs	r3, #1
 8001d04:	ca06      	ldmia	r2, {r1, r2}
 8001d06:	4861      	ldr	r0, [pc, #388]	; (8001e8c <main+0x6e0>)
 8001d08:	f000 fd2a 	bl	8002760 <ssd1306_WriteString>

	  if (HAL_GPIO_ReadPin(SET_1_GPIO_Port, SET_1_Pin) == 1) {
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	4860      	ldr	r0, [pc, #384]	; (8001e90 <main+0x6e4>)
 8001d10:	f001 ff42 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <main+0x58a>
		  ssd1306_SetCursor(0, 41);
 8001d1a:	2129      	movs	r1, #41	; 0x29
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 fd45 	bl	80027ac <ssd1306_SetCursor>
	      sprintf(bufferSET1, "SET = x1     ");
 8001d22:	495c      	ldr	r1, [pc, #368]	; (8001e94 <main+0x6e8>)
 8001d24:	485c      	ldr	r0, [pc, #368]	; (8001e98 <main+0x6ec>)
 8001d26:	f004 fbbd 	bl	80064a4 <siprintf>
	      ssd1306_WriteString(bufferSET1, Font_6x8, 1);
 8001d2a:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <main+0x6c4>)
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	ca06      	ldmia	r2, {r1, r2}
 8001d30:	4859      	ldr	r0, [pc, #356]	; (8001e98 <main+0x6ec>)
 8001d32:	f000 fd15 	bl	8002760 <ssd1306_WriteString>

	  }

	  if (HAL_GPIO_ReadPin(SET_10_GPIO_Port, SET_10_Pin) == 1) {
 8001d36:	2104      	movs	r1, #4
 8001d38:	4858      	ldr	r0, [pc, #352]	; (8001e9c <main+0x6f0>)
 8001d3a:	f001 ff2d 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10d      	bne.n	8001d60 <main+0x5b4>
		  ssd1306_SetCursor(0, 41);
 8001d44:	2129      	movs	r1, #41	; 0x29
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 fd30 	bl	80027ac <ssd1306_SetCursor>
	      sprintf(bufferSET10, "SET = x10     ");
 8001d4c:	4954      	ldr	r1, [pc, #336]	; (8001ea0 <main+0x6f4>)
 8001d4e:	4855      	ldr	r0, [pc, #340]	; (8001ea4 <main+0x6f8>)
 8001d50:	f004 fba8 	bl	80064a4 <siprintf>
	      ssd1306_WriteString(bufferSET10, Font_6x8, 1);
 8001d54:	4a46      	ldr	r2, [pc, #280]	; (8001e70 <main+0x6c4>)
 8001d56:	2301      	movs	r3, #1
 8001d58:	ca06      	ldmia	r2, {r1, r2}
 8001d5a:	4852      	ldr	r0, [pc, #328]	; (8001ea4 <main+0x6f8>)
 8001d5c:	f000 fd00 	bl	8002760 <ssd1306_WriteString>

	  }

	  if (HAL_GPIO_ReadPin(SET_100_GPIO_Port, SET_100_Pin) == 1) {
 8001d60:	2102      	movs	r1, #2
 8001d62:	484e      	ldr	r0, [pc, #312]	; (8001e9c <main+0x6f0>)
 8001d64:	f001 ff18 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10d      	bne.n	8001d8a <main+0x5de>
		  ssd1306_SetCursor(0, 41);
 8001d6e:	2129      	movs	r1, #41	; 0x29
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 fd1b 	bl	80027ac <ssd1306_SetCursor>
	      sprintf(bufferSET100, "SET = x100     ");
 8001d76:	494c      	ldr	r1, [pc, #304]	; (8001ea8 <main+0x6fc>)
 8001d78:	484c      	ldr	r0, [pc, #304]	; (8001eac <main+0x700>)
 8001d7a:	f004 fb93 	bl	80064a4 <siprintf>
	      ssd1306_WriteString(bufferSET100, Font_6x8, 1);
 8001d7e:	4a3c      	ldr	r2, [pc, #240]	; (8001e70 <main+0x6c4>)
 8001d80:	2301      	movs	r3, #1
 8001d82:	ca06      	ldmia	r2, {r1, r2}
 8001d84:	4849      	ldr	r0, [pc, #292]	; (8001eac <main+0x700>)
 8001d86:	f000 fceb 	bl	8002760 <ssd1306_WriteString>

	  }

	  if (HAL_GPIO_ReadPin(SET_1000_GPIO_Port, SET_1000_Pin) == 1) {
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4843      	ldr	r0, [pc, #268]	; (8001e9c <main+0x6f0>)
 8001d8e:	f001 ff03 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10d      	bne.n	8001db4 <main+0x608>
		  ssd1306_SetCursor(0, 41);
 8001d98:	2129      	movs	r1, #41	; 0x29
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 fd06 	bl	80027ac <ssd1306_SetCursor>
	      sprintf(bufferSET1000, "SET = x1000     ");
 8001da0:	4943      	ldr	r1, [pc, #268]	; (8001eb0 <main+0x704>)
 8001da2:	4844      	ldr	r0, [pc, #272]	; (8001eb4 <main+0x708>)
 8001da4:	f004 fb7e 	bl	80064a4 <siprintf>
	      ssd1306_WriteString(bufferSET1000, Font_6x8, 1);
 8001da8:	4a31      	ldr	r2, [pc, #196]	; (8001e70 <main+0x6c4>)
 8001daa:	2301      	movs	r3, #1
 8001dac:	ca06      	ldmia	r2, {r1, r2}
 8001dae:	4841      	ldr	r0, [pc, #260]	; (8001eb4 <main+0x708>)
 8001db0:	f000 fcd6 	bl	8002760 <ssd1306_WriteString>

	  }
	  if (counterFREQ==0){
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <main+0x70c>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <main+0x62c>
	  ssd1306_SetCursor(0,51);
 8001dbc:	2133      	movs	r1, #51	; 0x33
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 fcf4 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferFREQ,"Frequency: 70Hz   ");
 8001dc4:	493d      	ldr	r1, [pc, #244]	; (8001ebc <main+0x710>)
 8001dc6:	483e      	ldr	r0, [pc, #248]	; (8001ec0 <main+0x714>)
 8001dc8:	f004 fb6c 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <main+0x6c4>)
 8001dce:	2301      	movs	r3, #1
 8001dd0:	ca06      	ldmia	r2, {r1, r2}
 8001dd2:	483b      	ldr	r0, [pc, #236]	; (8001ec0 <main+0x714>)
 8001dd4:	f000 fcc4 	bl	8002760 <ssd1306_WriteString>
	  }
	  if (counterFREQ==1){
 8001dd8:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <main+0x70c>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10d      	bne.n	8001dfc <main+0x650>
	  ssd1306_SetCursor(0,51);
 8001de0:	2133      	movs	r1, #51	; 0x33
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 fce2 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferFREQ,"Frequency: 700Hz  ");
 8001de8:	4936      	ldr	r1, [pc, #216]	; (8001ec4 <main+0x718>)
 8001dea:	4835      	ldr	r0, [pc, #212]	; (8001ec0 <main+0x714>)
 8001dec:	f004 fb5a 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <main+0x6c4>)
 8001df2:	2301      	movs	r3, #1
 8001df4:	ca06      	ldmia	r2, {r1, r2}
 8001df6:	4832      	ldr	r0, [pc, #200]	; (8001ec0 <main+0x714>)
 8001df8:	f000 fcb2 	bl	8002760 <ssd1306_WriteString>
	  }
	  if (counterFREQ==2){
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <main+0x70c>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d10d      	bne.n	8001e20 <main+0x674>
	  ssd1306_SetCursor(0,51);
 8001e04:	2133      	movs	r1, #51	; 0x33
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 fcd0 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferFREQ,"Frequency: 7KHz  ");
 8001e0c:	492e      	ldr	r1, [pc, #184]	; (8001ec8 <main+0x71c>)
 8001e0e:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <main+0x714>)
 8001e10:	f004 fb48 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <main+0x6c4>)
 8001e16:	2301      	movs	r3, #1
 8001e18:	ca06      	ldmia	r2, {r1, r2}
 8001e1a:	4829      	ldr	r0, [pc, #164]	; (8001ec0 <main+0x714>)
 8001e1c:	f000 fca0 	bl	8002760 <ssd1306_WriteString>
	  }
	  if (counterFREQ==3){
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <main+0x70c>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10d      	bne.n	8001e44 <main+0x698>
	  ssd1306_SetCursor(0,51);
 8001e28:	2133      	movs	r1, #51	; 0x33
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f000 fcbe 	bl	80027ac <ssd1306_SetCursor>
	  sprintf(bufferFREQ,"Frequency: 70KHz  ");
 8001e30:	4926      	ldr	r1, [pc, #152]	; (8001ecc <main+0x720>)
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <main+0x714>)
 8001e34:	f004 fb36 	bl	80064a4 <siprintf>
	  ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <main+0x6c4>)
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	ca06      	ldmia	r2, {r1, r2}
 8001e3e:	4820      	ldr	r0, [pc, #128]	; (8001ec0 <main+0x714>)
 8001e40:	f000 fc8e 	bl	8002760 <ssd1306_WriteString>
	  }
	  ssd1306_UpdateScreen();
 8001e44:	f000 fb8a 	bl	800255c <ssd1306_UpdateScreen>
  {
 8001e48:	e502      	b.n	8001850 <main+0xa4>
 8001e4a:	bf00      	nop
 8001e4c:	200003d8 	.word	0x200003d8
 8001e50:	200003dc 	.word	0x200003dc
 8001e54:	20000210 	.word	0x20000210
 8001e58:	20000af4 	.word	0x20000af4
 8001e5c:	20000b04 	.word	0x20000b04
 8001e60:	200003c4 	.word	0x200003c4
 8001e64:	200003cc 	.word	0x200003cc
 8001e68:	080087a0 	.word	0x080087a0
 8001e6c:	200003ec 	.word	0x200003ec
 8001e70:	20000008 	.word	0x20000008
 8001e74:	200003d0 	.word	0x200003d0
 8001e78:	080087b0 	.word	0x080087b0
 8001e7c:	200004b4 	.word	0x200004b4
 8001e80:	080087c4 	.word	0x080087c4
 8001e84:	2000057c 	.word	0x2000057c
 8001e88:	080087d4 	.word	0x080087d4
 8001e8c:	20000644 	.word	0x20000644
 8001e90:	40011000 	.word	0x40011000
 8001e94:	080087e4 	.word	0x080087e4
 8001e98:	2000070c 	.word	0x2000070c
 8001e9c:	40010c00 	.word	0x40010c00
 8001ea0:	080087f4 	.word	0x080087f4
 8001ea4:	200007d4 	.word	0x200007d4
 8001ea8:	08008804 	.word	0x08008804
 8001eac:	2000089c 	.word	0x2000089c
 8001eb0:	08008814 	.word	0x08008814
 8001eb4:	20000964 	.word	0x20000964
 8001eb8:	200003bc 	.word	0x200003bc
 8001ebc:	08008828 	.word	0x08008828
 8001ec0:	20000a2c 	.word	0x20000a2c
 8001ec4:	0800883c 	.word	0x0800883c
 8001ec8:	08008850 	.word	0x08008850
 8001ecc:	08008864 	.word	0x08008864

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eda:	2228      	movs	r2, #40	; 0x28
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fb5d 	bl	800659e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f12:	2302      	movs	r3, #2
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fb12 	bl	8004550 <HAL_RCC_OscConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f32:	f000 fa53 	bl	80023dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f36:	230f      	movs	r3, #15
 8001f38:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2102      	movs	r1, #2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fd7e 	bl	8004a54 <HAL_RCC_ClockConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f5e:	f000 fa3d 	bl	80023dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f62:	2302      	movs	r3, #2
 8001f64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fefe 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f7a:	f000 fa2f 	bl	80023dc <Error_Handler>
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3750      	adds	r7, #80	; 0x50
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_ADC2_Init+0x5c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fb4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001fb8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <MX_ADC2_Init+0x58>)
 8001fc8:	f000 fefc 	bl	8002dc4 <HAL_ADC_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8001fd2:	f000 fa03 	bl	80023dc <Error_Handler>
//  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000210 	.word	0x20000210
 8001fe4:	40012800 	.word	0x40012800

08001fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C1_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C1_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C1_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C1_Init+0x50>)
 8002026:	f001 fde7 	bl	8003bf8 <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002030:	f000 f9d4 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000240 	.word	0x20000240
 800203c:	40005400 	.word	0x40005400
 8002040:	000186a0 	.word	0x000186a0

08002044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <MX_TIM1_Init+0x98>)
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <MX_TIM1_Init+0x9c>)
 8002064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <MX_TIM1_Init+0x98>)
 8002068:	2247      	movs	r2, #71	; 0x47
 800206a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <MX_TIM1_Init+0x98>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MX_TIM1_Init+0x98>)
 8002074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <MX_TIM1_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002080:	4b16      	ldr	r3, [pc, #88]	; (80020dc <MX_TIM1_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <MX_TIM1_Init+0x98>)
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800208c:	4813      	ldr	r0, [pc, #76]	; (80020dc <MX_TIM1_Init+0x98>)
 800208e:	f002 ffdb 	bl	8005048 <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002098:	f000 f9a0 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <MX_TIM1_Init+0x98>)
 80020aa:	f003 fa63 	bl	8005574 <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020b4:	f000 f992 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c0:	463b      	mov	r3, r7
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_TIM1_Init+0x98>)
 80020c6:	f003 fc5d 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020d0:	f000 f984 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000294 	.word	0x20000294
 80020e0:	40012c00 	.word	0x40012c00

080020e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <MX_TIM2_Init+0x94>)
 8002102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <MX_TIM2_Init+0x94>)
 800210a:	2247      	movs	r2, #71	; 0x47
 800210c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <MX_TIM2_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_TIM2_Init+0x94>)
 8002116:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800211a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_TIM2_Init+0x94>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <MX_TIM2_Init+0x94>)
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002128:	4813      	ldr	r0, [pc, #76]	; (8002178 <MX_TIM2_Init+0x94>)
 800212a:	f002 ff8d 	bl	8005048 <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002134:	f000 f952 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <MX_TIM2_Init+0x94>)
 8002146:	f003 fa15 	bl	8005574 <HAL_TIM_ConfigClockSource>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002150:	f000 f944 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_TIM2_Init+0x94>)
 8002162:	f003 fc0f 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800216c:	f000 f936 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200002dc 	.word	0x200002dc

0800217c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	463b      	mov	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <MX_TIM3_Init+0x94>)
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <MX_TIM3_Init+0x98>)
 800219c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_TIM3_Init+0x94>)
 80021a0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80021a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_TIM3_Init+0x94>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_TIM3_Init+0x94>)
 80021ae:	220a      	movs	r2, #10
 80021b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <MX_TIM3_Init+0x94>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_TIM3_Init+0x94>)
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021be:	4814      	ldr	r0, [pc, #80]	; (8002210 <MX_TIM3_Init+0x94>)
 80021c0:	f002 ff42 	bl	8005048 <HAL_TIM_Base_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021ca:	f000 f907 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	4619      	mov	r1, r3
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <MX_TIM3_Init+0x94>)
 80021dc:	f003 f9ca 	bl	8005574 <HAL_TIM_ConfigClockSource>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021e6:	f000 f8f9 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f2:	463b      	mov	r3, r7
 80021f4:	4619      	mov	r1, r3
 80021f6:	4806      	ldr	r0, [pc, #24]	; (8002210 <MX_TIM3_Init+0x94>)
 80021f8:	f003 fbc4 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002202:	f000 f8eb 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000324 	.word	0x20000324
 8002214:	40000400 	.word	0x40000400

08002218 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <MX_TIM4_Init+0xa8>)
 8002236:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <MX_TIM4_Init+0xac>)
 8002238:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <MX_TIM4_Init+0xa8>)
 800223c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002240:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_TIM4_Init+0xa8>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_TIM4_Init+0xa8>)
 800224a:	22ff      	movs	r2, #255	; 0xff
 800224c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_TIM4_Init+0xa8>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_TIM4_Init+0xa8>)
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800225a:	4819      	ldr	r0, [pc, #100]	; (80022c0 <MX_TIM4_Init+0xa8>)
 800225c:	f002 fef4 	bl	8005048 <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002266:	f000 f8b9 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4619      	mov	r1, r3
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MX_TIM4_Init+0xa8>)
 8002278:	f003 f97c 	bl	8005574 <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002282:	f000 f8ab 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800228e:	463b      	mov	r3, r7
 8002290:	4619      	mov	r1, r3
 8002292:	480b      	ldr	r0, [pc, #44]	; (80022c0 <MX_TIM4_Init+0xa8>)
 8002294:	f003 fb76 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800229e:	f000 f89d 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80022a2:	2100      	movs	r1, #0
 80022a4:	4806      	ldr	r0, [pc, #24]	; (80022c0 <MX_TIM4_Init+0xa8>)
 80022a6:	f002 ffbb 	bl	8005220 <HAL_TIM_PWM_Start>
  HAL_Delay(100); // Introduce a delay (adjust as needed)
 80022aa:	2064      	movs	r0, #100	; 0x64
 80022ac:	f000 fd66 	bl	8002d7c <HAL_Delay>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80022b0:	2104      	movs	r1, #4
 80022b2:	4803      	ldr	r0, [pc, #12]	; (80022c0 <MX_TIM4_Init+0xa8>)
 80022b4:	f002 ffb4 	bl	8005220 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000036c 	.word	0x2000036c
 80022c4:	40000800 	.word	0x40000800

080022c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <MX_GPIO_Init+0x108>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a3b      	ldr	r2, [pc, #236]	; (80023d0 <MX_GPIO_Init+0x108>)
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <MX_GPIO_Init+0x108>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <MX_GPIO_Init+0x108>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a35      	ldr	r2, [pc, #212]	; (80023d0 <MX_GPIO_Init+0x108>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <MX_GPIO_Init+0x108>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <MX_GPIO_Init+0x108>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <MX_GPIO_Init+0x108>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <MX_GPIO_Init+0x108>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <MX_GPIO_Init+0x108>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a29      	ldr	r2, [pc, #164]	; (80023d0 <MX_GPIO_Init+0x108>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <MX_GPIO_Init+0x108>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	21c8      	movs	r1, #200	; 0xc8
 8002340:	4824      	ldr	r0, [pc, #144]	; (80023d4 <MX_GPIO_Init+0x10c>)
 8002342:	f001 fc40 	bl	8003bc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 SET_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|SET_1_Pin;
 8002346:	234c      	movs	r3, #76	; 0x4c
 8002348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4619      	mov	r1, r3
 8002358:	481f      	ldr	r0, [pc, #124]	; (80023d8 <MX_GPIO_Init+0x110>)
 800235a:	f001 fa99 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_1000_Pin SET_100_Pin SET_10_Pin */
  GPIO_InitStruct.Pin = SET_1000_Pin|SET_100_Pin|SET_10_Pin;
 800235e:	2307      	movs	r3, #7
 8002360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	4619      	mov	r1, r3
 8002370:	4818      	ldr	r0, [pc, #96]	; (80023d4 <MX_GPIO_Init+0x10c>)
 8002372:	f001 fa8d 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002376:	2308      	movs	r3, #8
 8002378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	4811      	ldr	r0, [pc, #68]	; (80023d4 <MX_GPIO_Init+0x10c>)
 800238e:	f001 fa7f 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002392:	23c0      	movs	r3, #192	; 0xc0
 8002394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2302      	movs	r3, #2
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4619      	mov	r1, r3
 80023a8:	480a      	ldr	r0, [pc, #40]	; (80023d4 <MX_GPIO_Init+0x10c>)
 80023aa:	f001 fa71 	bl	8003890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023ae:	2308      	movs	r3, #8
 80023b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull
 80023b2:	2302      	movs	r3, #2
 80023b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	4619      	mov	r1, r3
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_GPIO_Init+0x10c>)
 80023c2:	f001 fa65 	bl	8003890 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c6:	bf00      	nop
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010c00 	.word	0x40010c00
 80023d8:	40011000 	.word	0x40011000

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <Error_Handler+0x8>

080023e6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
	...

080023f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af04      	add	r7, sp, #16
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	2301      	movs	r3, #1
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2301      	movs	r3, #1
 800240e:	2200      	movs	r2, #0
 8002410:	2178      	movs	r1, #120	; 0x78
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <ssd1306_WriteCommand+0x2c>)
 8002414:	f001 fd34 	bl	8003e80 <HAL_I2C_Mem_Write>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000240 	.word	0x20000240

08002424 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af04      	add	r7, sp, #16
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	9202      	str	r2, [sp, #8]
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2301      	movs	r3, #1
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	2178      	movs	r1, #120	; 0x78
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <ssd1306_WriteData+0x30>)
 8002446:	f001 fd1b 	bl	8003e80 <HAL_I2C_Mem_Write>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000240 	.word	0x20000240

08002458 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800245c:	f7ff ffc3 	bl	80023e6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002460:	2064      	movs	r0, #100	; 0x64
 8002462:	f000 fc8b 	bl	8002d7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f9cc 	bl	8002804 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800246c:	2020      	movs	r0, #32
 800246e:	f7ff ffc1 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002472:	2000      	movs	r0, #0
 8002474:	f7ff ffbe 	bl	80023f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002478:	20b0      	movs	r0, #176	; 0xb0
 800247a:	f7ff ffbb 	bl	80023f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800247e:	20c8      	movs	r0, #200	; 0xc8
 8002480:	f7ff ffb8 	bl	80023f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff ffb5 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800248a:	2010      	movs	r0, #16
 800248c:	f7ff ffb2 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002490:	2040      	movs	r0, #64	; 0x40
 8002492:	f7ff ffaf 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002496:	20ff      	movs	r0, #255	; 0xff
 8002498:	f000 f9a0 	bl	80027dc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800249c:	20a1      	movs	r0, #161	; 0xa1
 800249e:	f7ff ffa9 	bl	80023f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80024a2:	20a6      	movs	r0, #166	; 0xa6
 80024a4:	f7ff ffa6 	bl	80023f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80024a8:	20a8      	movs	r0, #168	; 0xa8
 80024aa:	f7ff ffa3 	bl	80023f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80024ae:	203f      	movs	r0, #63	; 0x3f
 80024b0:	f7ff ffa0 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024b4:	20a4      	movs	r0, #164	; 0xa4
 80024b6:	f7ff ff9d 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80024ba:	20d3      	movs	r0, #211	; 0xd3
 80024bc:	f7ff ff9a 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff ff97 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80024c6:	20d5      	movs	r0, #213	; 0xd5
 80024c8:	f7ff ff94 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80024cc:	20f0      	movs	r0, #240	; 0xf0
 80024ce:	f7ff ff91 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80024d2:	20d9      	movs	r0, #217	; 0xd9
 80024d4:	f7ff ff8e 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80024d8:	2022      	movs	r0, #34	; 0x22
 80024da:	f7ff ff8b 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024de:	20da      	movs	r0, #218	; 0xda
 80024e0:	f7ff ff88 	bl	80023f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024e4:	2012      	movs	r0, #18
 80024e6:	f7ff ff85 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024ea:	20db      	movs	r0, #219	; 0xdb
 80024ec:	f7ff ff82 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024f0:	2020      	movs	r0, #32
 80024f2:	f7ff ff7f 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024f6:	208d      	movs	r0, #141	; 0x8d
 80024f8:	f7ff ff7c 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024fc:	2014      	movs	r0, #20
 80024fe:	f7ff ff79 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002502:	2001      	movs	r0, #1
 8002504:	f000 f97e 	bl	8002804 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002508:	2000      	movs	r0, #0
 800250a:	f000 f80f 	bl	800252c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800250e:	f000 f825 	bl	800255c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <ssd1306_Init+0xd0>)
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <ssd1306_Init+0xd0>)
 800251a:	2200      	movs	r2, #0
 800251c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800251e:	4b02      	ldr	r3, [pc, #8]	; (8002528 <ssd1306_Init+0xd0>)
 8002520:	2201      	movs	r2, #1
 8002522:	711a      	strb	r2, [r3, #4]
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000f18 	.word	0x20000f18

0800252c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <ssd1306_Fill+0x14>
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <ssd1306_Fill+0x16>
 8002540:	23ff      	movs	r3, #255	; 0xff
 8002542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002546:	4619      	mov	r1, r3
 8002548:	4803      	ldr	r0, [pc, #12]	; (8002558 <ssd1306_Fill+0x2c>)
 800254a:	f004 f828 	bl	800659e <memset>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000b18 	.word	0x20000b18

0800255c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	e016      	b.n	8002596 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3b50      	subs	r3, #80	; 0x50
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff40 	bl	80023f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff ff3d 	bl	80023f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800257a:	2010      	movs	r0, #16
 800257c:	f7ff ff3a 	bl	80023f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	01db      	lsls	r3, r3, #7
 8002584:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <ssd1306_UpdateScreen+0x4c>)
 8002586:	4413      	add	r3, r2
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff4a 	bl	8002424 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	3301      	adds	r3, #1
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b07      	cmp	r3, #7
 800259a:	d9e5      	bls.n	8002568 <ssd1306_UpdateScreen+0xc>
    }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000b18 	.word	0x20000b18

080025ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	460b      	mov	r3, r1
 80025b8:	71bb      	strb	r3, [r7, #6]
 80025ba:	4613      	mov	r3, r2
 80025bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db3d      	blt.n	8002642 <ssd1306_DrawPixel+0x96>
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	2b3f      	cmp	r3, #63	; 0x3f
 80025ca:	d83a      	bhi.n	8002642 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80025cc:	797b      	ldrb	r3, [r7, #5]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d11a      	bne.n	8002608 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2d8      	uxtb	r0, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4413      	add	r3, r2
 80025e0:	4a1a      	ldr	r2, [pc, #104]	; (800264c <ssd1306_DrawPixel+0xa0>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	b25a      	sxtb	r2, r3
 80025e6:	79bb      	ldrb	r3, [r7, #6]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b259      	sxtb	r1, r3
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	4603      	mov	r3, r0
 80025fc:	01db      	lsls	r3, r3, #7
 80025fe:	4413      	add	r3, r2
 8002600:	b2c9      	uxtb	r1, r1
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <ssd1306_DrawPixel+0xa0>)
 8002604:	54d1      	strb	r1, [r2, r3]
 8002606:	e01d      	b.n	8002644 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	b2d8      	uxtb	r0, r3
 8002610:	4603      	mov	r3, r0
 8002612:	01db      	lsls	r3, r3, #7
 8002614:	4413      	add	r3, r2
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <ssd1306_DrawPixel+0xa0>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	b25a      	sxtb	r2, r3
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	b25b      	sxtb	r3, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	b25b      	sxtb	r3, r3
 800262e:	4013      	ands	r3, r2
 8002630:	b259      	sxtb	r1, r3
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	4603      	mov	r3, r0
 8002636:	01db      	lsls	r3, r3, #7
 8002638:	4413      	add	r3, r2
 800263a:	b2c9      	uxtb	r1, r1
 800263c:	4a03      	ldr	r2, [pc, #12]	; (800264c <ssd1306_DrawPixel+0xa0>)
 800263e:	54d1      	strb	r1, [r2, r3]
 8002640:	e000      	b.n	8002644 <ssd1306_DrawPixel+0x98>
        return;
 8002642:	bf00      	nop
    }
}
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000b18 	.word	0x20000b18

08002650 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	4604      	mov	r4, r0
 8002658:	1d38      	adds	r0, r7, #4
 800265a:	e880 0006 	stmia.w	r0, {r1, r2}
 800265e:	461a      	mov	r2, r3
 8002660:	4623      	mov	r3, r4
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	4613      	mov	r3, r2
 8002666:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b1f      	cmp	r3, #31
 800266c:	d902      	bls.n	8002674 <ssd1306_WriteChar+0x24>
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b7e      	cmp	r3, #126	; 0x7e
 8002672:	d901      	bls.n	8002678 <ssd1306_WriteChar+0x28>
        return 0;
 8002674:	2300      	movs	r3, #0
 8002676:	e06d      	b.n	8002754 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <ssd1306_WriteChar+0x10c>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	793b      	ldrb	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	dc06      	bgt.n	8002694 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002686:	4b35      	ldr	r3, [pc, #212]	; (800275c <ssd1306_WriteChar+0x10c>)
 8002688:	885b      	ldrh	r3, [r3, #2]
 800268a:	461a      	mov	r2, r3
 800268c:	797b      	ldrb	r3, [r7, #5]
 800268e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	dd01      	ble.n	8002698 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002694:	2300      	movs	r3, #0
 8002696:	e05d      	b.n	8002754 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	e04c      	b.n	8002738 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	3b20      	subs	r3, #32
 80026a4:	7979      	ldrb	r1, [r7, #5]
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	440b      	add	r3, r1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e034      	b.n	8002728 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <ssd1306_WriteChar+0x10c>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b2d8      	uxtb	r0, r3
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <ssd1306_WriteChar+0x10c>)
 80026de:	885b      	ldrh	r3, [r3, #2]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7bba      	ldrb	r2, [r7, #14]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7ff ff5d 	bl	80025ac <ssd1306_DrawPixel>
 80026f2:	e016      	b.n	8002722 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <ssd1306_WriteChar+0x10c>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4413      	add	r3, r2
 8002700:	b2d8      	uxtb	r0, r3
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <ssd1306_WriteChar+0x10c>)
 8002704:	885b      	ldrh	r3, [r3, #2]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4413      	add	r3, r2
 800270e:	b2d9      	uxtb	r1, r3
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	f7ff ff45 	bl	80025ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3301      	adds	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	793b      	ldrb	r3, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4293      	cmp	r3, r2
 8002730:	d3c5      	bcc.n	80026be <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	797b      	ldrb	r3, [r7, #5]
 800273a:	461a      	mov	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4293      	cmp	r3, r2
 8002740:	d3ad      	bcc.n	800269e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <ssd1306_WriteChar+0x10c>)
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	793b      	ldrb	r3, [r7, #4]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <ssd1306_WriteChar+0x10c>)
 8002750:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3724      	adds	r7, #36	; 0x24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	20000f18 	.word	0x20000f18

08002760 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	1d38      	adds	r0, r7, #4
 800276a:	e880 0006 	stmia.w	r0, {r1, r2}
 800276e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002770:	e012      	b.n	8002798 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	7818      	ldrb	r0, [r3, #0]
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	1d3a      	adds	r2, r7, #4
 800277a:	ca06      	ldmia	r2, {r1, r2}
 800277c:	f7ff ff68 	bl	8002650 <ssd1306_WriteChar>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d002      	beq.n	8002792 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	e008      	b.n	80027a4 <ssd1306_WriteString+0x44>
        }
        str++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e8      	bne.n	8002772 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	781b      	ldrb	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	460a      	mov	r2, r1
 80027b6:	71fb      	strb	r3, [r7, #7]
 80027b8:	4613      	mov	r3, r2
 80027ba:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <ssd1306_SetCursor+0x2c>)
 80027c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <ssd1306_SetCursor+0x2c>)
 80027ca:	805a      	strh	r2, [r3, #2]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000f18 	.word	0x20000f18

080027dc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80027e6:	2381      	movs	r3, #129	; 0x81
 80027e8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe01 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fdfd 	bl	80023f4 <ssd1306_WriteCommand>
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002814:	23af      	movs	r3, #175	; 0xaf
 8002816:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <ssd1306_SetDisplayOn+0x38>)
 800281a:	2201      	movs	r2, #1
 800281c:	715a      	strb	r2, [r3, #5]
 800281e:	e004      	b.n	800282a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002820:	23ae      	movs	r3, #174	; 0xae
 8002822:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <ssd1306_SetDisplayOn+0x38>)
 8002826:	2200      	movs	r2, #0
 8002828:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fde1 	bl	80023f4 <ssd1306_WriteCommand>
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000f18 	.word	0x20000f18

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_MspInit+0x5c>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_MspInit+0x5c>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6193      	str	r3, [r2, #24]
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_MspInit+0x5c>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_MspInit+0x5c>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <HAL_MspInit+0x5c>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_MspInit+0x5c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_MspInit+0x60>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_MspInit+0x60>)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010000 	.word	0x40010000

080028a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_ADC_MspInit+0x6c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d121      	bne.n	8002908 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_ADC_MspInit+0x70>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_ADC_MspInit+0x70>)
 80028ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_ADC_MspInit+0x70>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_ADC_MspInit+0x70>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_ADC_MspInit+0x70>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_ADC_MspInit+0x70>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028f4:	230e      	movs	r3, #14
 80028f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f8:	2303      	movs	r3, #3
 80028fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4619      	mov	r1, r3
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_ADC_MspInit+0x74>)
 8002904:	f000 ffc4 	bl	8003890 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40012800 	.word	0x40012800
 8002914:	40021000 	.word	0x40021000
 8002918:	40010800 	.word	0x40010800

0800291c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_I2C_MspInit+0x90>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d132      	bne.n	80029a2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_I2C_MspInit+0x94>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_I2C_MspInit+0x94>)
 8002942:	f043 0308 	orr.w	r3, r3, #8
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_I2C_MspInit+0x94>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002954:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295a:	2312      	movs	r3, #18
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800295e:	2303      	movs	r3, #3
 8002960:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4812      	ldr	r0, [pc, #72]	; (80029b4 <HAL_I2C_MspInit+0x98>)
 800296a:	f000 ff91 	bl	8003890 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_I2C_MspInit+0x9c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_I2C_MspInit+0x9c>)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_I2C_MspInit+0x94>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_I2C_MspInit+0x94>)
 8002990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_I2C_MspInit+0x94>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40005400 	.word	0x40005400
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	40010000 	.word	0x40010000

080029bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_TIM_Base_MspInit+0xb0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10c      	bne.n	80029e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ce:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 80029d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029d8:	6193      	str	r3, [r2, #24]
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029e6:	e03c      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d10c      	bne.n	8002a0c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f2:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
}
 8002a0a:	e02a      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_TIM_Base_MspInit+0xb8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d114      	bne.n	8002a40 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	61d3      	str	r3, [r2, #28]
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	201d      	movs	r0, #29
 8002a34:	f000 fef5 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a38:	201d      	movs	r0, #29
 8002a3a:	f000 ff0e 	bl	800385a <HAL_NVIC_EnableIRQ>
}
 8002a3e:	e010      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_TIM_Base_MspInit+0xbc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10b      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	61d3      	str	r3, [r2, #28]
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_TIM_Base_MspInit+0xb4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a80:	e7fe      	b.n	8002a80 <NMI_Handler+0x4>

08002a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <MemManage_Handler+0x4>

08002a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <BusFault_Handler+0x4>

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <UsageFault_Handler+0x4>

08002a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac2:	f000 f93f 	bl	8002d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <TIM3_IRQHandler+0x10>)
 8002ad2:	f002 fc47 	bl	8005364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000324 	.word	0x20000324

08002ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return 1;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <_kill>:

int _kill(int pid, int sig)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002af8:	f003 fda4 	bl	8006644 <__errno>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2216      	movs	r2, #22
 8002b00:	601a      	str	r2, [r3, #0]
  return -1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_exit>:

void _exit (int status)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b16:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ffe7 	bl	8002aee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b20:	e7fe      	b.n	8002b20 <_exit+0x12>

08002b22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e00a      	b.n	8002b4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b34:	f3af 8000 	nop.w
 8002b38:	4601      	mov	r1, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf0      	blt.n	8002b34 <_read+0x12>
  }

  return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e009      	b.n	8002b82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	60ba      	str	r2, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbf1      	blt.n	8002b6e <_write+0x12>
  }
  return len;
 8002b8a:	687b      	ldr	r3, [r7, #4]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_close>:

int _close(int file)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bba:	605a      	str	r2, [r3, #4]
  return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <_isatty>:

int _isatty(int file)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <_sbrk+0x5c>)
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <_sbrk+0x60>)
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <_sbrk+0x64>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <_sbrk+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c24:	f003 fd0e 	bl	8006644 <__errno>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e009      	b.n	8002c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <_sbrk+0x64>)
 8002c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20005000 	.word	0x20005000
 8002c54:	00000400 	.word	0x00000400
 8002c58:	20000f20 	.word	0x20000f20
 8002c5c:	20001078 	.word	0x20001078

08002c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c6c:	f7ff fff8 	bl	8002c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c70:	480b      	ldr	r0, [pc, #44]	; (8002ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c72:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c78:	e002      	b.n	8002c80 <LoopCopyDataInit>

08002c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7e:	3304      	adds	r3, #4

08002c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c84:	d3f9      	bcc.n	8002c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c88:	4c09      	ldr	r4, [pc, #36]	; (8002cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c8c:	e001      	b.n	8002c92 <LoopFillZerobss>

08002c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c90:	3204      	adds	r2, #4

08002c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c94:	d3fb      	bcc.n	8002c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c96:	f003 fcdb 	bl	8006650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c9a:	f7fe fd87 	bl	80017ac <main>
  bx lr
 8002c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002ca8:	0800a6e4 	.word	0x0800a6e4
  ldr r2, =_sbss
 8002cac:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002cb0:	20001074 	.word	0x20001074

08002cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC1_2_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_Init+0x28>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_Init+0x28>)
 8002cc2:	f043 0310 	orr.w	r3, r3, #16
 8002cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 fd9f 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	200f      	movs	r0, #15
 8002cd0:	f000 f808 	bl	8002ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd4:	f7ff fdb4 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40022000 	.word	0x40022000

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x54>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x58>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fdb7 	bl	8003876 <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00e      	b.n	8002d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d80a      	bhi.n	8002d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f000 fd7f 	bl	8003822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <HAL_InitTick+0x5c>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000020 	.word	0x20000020
 8002d3c:	20000028 	.word	0x20000028
 8002d40:	20000024 	.word	0x20000024

08002d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_IncTick+0x1c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_IncTick+0x20>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <HAL_IncTick+0x20>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000028 	.word	0x20000028
 8002d64:	20000f24 	.word	0x20000f24

08002d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <HAL_GetTick+0x10>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000f24 	.word	0x20000f24

08002d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d005      	beq.n	8002da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_Delay+0x44>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002da2:	bf00      	nop
 8002da4:	f7ff ffe0 	bl	8002d68 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d8f7      	bhi.n	8002da4 <HAL_Delay+0x28>
  {
  }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000028 	.word	0x20000028

08002dc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0be      	b.n	8002f64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fd4e 	bl	80028a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fbf1 	bl	80035f0 <ADC_ConversionStop_Disable>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8099 	bne.w	8002f52 <HAL_ADC_Init+0x18e>
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8095 	bne.w	8002f52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e30:	f023 0302 	bic.w	r3, r3, #2
 8002e34:	f043 0202 	orr.w	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7b1b      	ldrb	r3, [r3, #12]
 8002e4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d003      	beq.n	8002e66 <HAL_ADC_Init+0xa2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_ADC_Init+0xa8>
 8002e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_Init+0xaa>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7d1b      	ldrb	r3, [r3, #20]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d119      	bne.n	8002eb0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7b1b      	ldrb	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	035a      	lsls	r2, r3, #13
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e00b      	b.n	8002eb0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_ADC_Init+0x1a8>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee0:	d003      	beq.n	8002eea <HAL_ADC_Init+0x126>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d104      	bne.n	8002ef4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_ADC_Init+0x1ac>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10b      	bne.n	8002f30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f2e:	e018      	b.n	8002f62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f023 0312 	bic.w	r3, r3, #18
 8002f38:	f043 0210 	orr.w	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f50:	e007      	b.n	8002f62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	ffe1f7fd 	.word	0xffe1f7fd
 8002f70:	ff1f0efe 	.word	0xff1f0efe

08002f74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Start+0x1a>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e098      	b.n	80030c0 <HAL_ADC_Start+0x14c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fad0 	bl	800353c <ADC_Enable>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 8087 	bne.w	80030b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_ADC_Start+0x154>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d105      	bne.n	8002fd2 <HAL_ADC_Start+0x5e>
 8002fc6:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_ADC_Start+0x158>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d115      	bne.n	8002ffe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d026      	beq.n	800303a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ff4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ffc:	e01d      	b.n	800303a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <HAL_ADC_Start+0x158>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_ADC_Start+0xaa>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_ADC_Start+0x154>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <HAL_ADC_Start+0xc6>
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_ADC_Start+0x158>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003032:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f023 0206 	bic.w	r2, r3, #6
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
 8003052:	e002      	b.n	800305a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f06f 0202 	mvn.w	r2, #2
 800306a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003076:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800307a:	d113      	bne.n	80030a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003080:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <HAL_ADC_Start+0x154>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d105      	bne.n	8003092 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_ADC_Start+0x158>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	e00c      	b.n	80030be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e003      	b.n	80030be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40012800 	.word	0x40012800
 80030cc:	40012400 	.word	0x40012400

080030d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Stop+0x1a>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e01a      	b.n	8003120 <HAL_ADC_Stop+0x50>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa7c 	bl	80035f0 <ADC_ConversionStop_Disable>
 80030f8:	4603      	mov	r3, r0
 80030fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800313e:	f7ff fe13 	bl	8002d68 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0d3      	b.n	8003312 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d131      	bne.n	80031dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d12a      	bne.n	80031dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003186:	e021      	b.n	80031cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d01d      	beq.n	80031cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_ADC_PollForConversion+0x7e>
 8003196:	f7ff fde7 	bl	8002d68 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d212      	bcs.n	80031cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0a2      	b.n	8003312 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0d6      	beq.n	8003188 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031da:	e070      	b.n	80032be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_ADC_PollForConversion+0x1f4>)
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	2002      	movs	r0, #2
 80031e2:	f001 fe7b 	bl	8004edc <HAL_RCCEx_GetPeriphCLKFreq>
 80031e6:	4603      	mov	r3, r0
 80031e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_ADC_PollForConversion+0x1f8>)
 80031f4:	400b      	ands	r3, r1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_ADC_PollForConversion+0x104>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68d9      	ldr	r1, [r3, #12]
 8003200:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_ADC_PollForConversion+0x1fc>)
 8003202:	400b      	ands	r3, r1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_ADC_PollForConversion+0x104>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6919      	ldr	r1, [r3, #16]
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_ADC_PollForConversion+0x200>)
 8003210:	400b      	ands	r3, r1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <HAL_ADC_PollForConversion+0x100>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68d9      	ldr	r1, [r3, #12]
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_ADC_PollForConversion+0x204>)
 800321e:	400b      	ands	r3, r1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_PollForConversion+0x100>
 8003224:	2314      	movs	r3, #20
 8003226:	e020      	b.n	800326a <HAL_ADC_PollForConversion+0x142>
 8003228:	2329      	movs	r3, #41	; 0x29
 800322a:	e01e      	b.n	800326a <HAL_ADC_PollForConversion+0x142>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6919      	ldr	r1, [r3, #16]
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_ADC_PollForConversion+0x200>)
 8003234:	400b      	ands	r3, r1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_ADC_PollForConversion+0x120>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68d9      	ldr	r1, [r3, #12]
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_ADC_PollForConversion+0x204>)
 8003242:	400b      	ands	r3, r1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_ADC_PollForConversion+0x13c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6919      	ldr	r1, [r3, #16]
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_ADC_PollForConversion+0x208>)
 8003250:	400b      	ands	r3, r1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d108      	bne.n	8003268 <HAL_ADC_PollForConversion+0x140>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_ADC_PollForConversion+0x208>)
 800325e:	400b      	ands	r3, r1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ADC_PollForConversion+0x140>
 8003264:	2354      	movs	r3, #84	; 0x54
 8003266:	e000      	b.n	800326a <HAL_ADC_PollForConversion+0x142>
 8003268:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003270:	e021      	b.n	80032b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d01a      	beq.n	80032b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <HAL_ADC_PollForConversion+0x168>
 8003280:	f7ff fd72 	bl	8002d68 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d20f      	bcs.n	80032b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	429a      	cmp	r2, r3
 8003296:	d90b      	bls.n	80032b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e030      	b.n	8003312 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d8d9      	bhi.n	8003272 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0212 	mvn.w	r2, #18
 80032c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032e2:	d115      	bne.n	8003310 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}
 800331a:	bf00      	nop
 800331c:	20000020 	.word	0x20000020
 8003320:	24924924 	.word	0x24924924
 8003324:	00924924 	.word	0x00924924
 8003328:	12492492 	.word	0x12492492
 800332c:	00492492 	.word	0x00492492
 8003330:	00249249 	.word	0x00249249

08003334 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x20>
 8003368:	2302      	movs	r3, #2
 800336a:	e0dc      	b.n	8003526 <HAL_ADC_ConfigChannel+0x1da>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b06      	cmp	r3, #6
 800337a:	d81c      	bhi.n	80033b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	3b05      	subs	r3, #5
 800338e:	221f      	movs	r2, #31
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	4019      	ands	r1, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b05      	subs	r3, #5
 80033a8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34
 80033b4:	e03c      	b.n	8003430 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d81c      	bhi.n	80033f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	3b23      	subs	r3, #35	; 0x23
 80033d0:	221f      	movs	r2, #31
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	4019      	ands	r1, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b23      	subs	r3, #35	; 0x23
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
 80033f6:	e01b      	b.n	8003430 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b41      	subs	r3, #65	; 0x41
 800340a:	221f      	movs	r2, #31
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	4019      	ands	r1, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	3b41      	subs	r3, #65	; 0x41
 8003424:	fa00 f203 	lsl.w	r2, r0, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b09      	cmp	r3, #9
 8003436:	d91c      	bls.n	8003472 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	3b1e      	subs	r3, #30
 800344a:	2207      	movs	r2, #7
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	4019      	ands	r1, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6898      	ldr	r0, [r3, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	3b1e      	subs	r3, #30
 8003464:	fa00 f203 	lsl.w	r2, r0, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e019      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6919      	ldr	r1, [r3, #16]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	2207      	movs	r2, #7
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	4019      	ands	r1, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6898      	ldr	r0, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	fa00 f203 	lsl.w	r2, r0, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d003      	beq.n	80034b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034b2:	2b11      	cmp	r3, #17
 80034b4:	d132      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_ADC_ConfigChannel+0x1e4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d126      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d11a      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_ADC_ConfigChannel+0x1e8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a13      	ldr	r2, [pc, #76]	; (8003538 <HAL_ADC_ConfigChannel+0x1ec>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	0c9a      	lsrs	r2, r3, #18
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034fc:	e002      	b.n	8003504 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3b01      	subs	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f9      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x1b2>
 800350a:	e007      	b.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40012400 	.word	0x40012400
 8003534:	20000020 	.word	0x20000020
 8003538:	431bde83 	.word	0x431bde83

0800353c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d040      	beq.n	80035dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <ADC_Enable+0xac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <ADC_Enable+0xb0>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	0c9b      	lsrs	r3, r3, #18
 8003576:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003578:	e002      	b.n	8003580 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3b01      	subs	r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f9      	bne.n	800357a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003586:	f7ff fbef 	bl	8002d68 <HAL_GetTick>
 800358a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800358c:	e01f      	b.n	80035ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800358e:	f7ff fbeb 	bl	8002d68 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d918      	bls.n	80035ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d011      	beq.n	80035ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	f043 0210 	orr.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e007      	b.n	80035de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d1d8      	bne.n	800358e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000020 	.word	0x20000020
 80035ec:	431bde83 	.word	0x431bde83

080035f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d12e      	bne.n	8003668 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800361a:	f7ff fba5 	bl	8002d68 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003620:	e01b      	b.n	800365a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003622:	f7ff fba1 	bl	8002d68 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d914      	bls.n	800365a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10d      	bne.n	800365a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	f043 0210 	orr.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e007      	b.n	800366a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d0dc      	beq.n	8003622 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800369c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_GetPriorityGrouping+0x18>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f003 0307 	and.w	r3, r3, #7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4906      	ldr	r1, [pc, #24]	; (800370c <__NVIC_EnableIRQ+0x34>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100

08003710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1c3 0307 	rsb	r3, r3, #7
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf28      	it	cs
 8003782:	2304      	movcs	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3304      	adds	r3, #4
 800378a:	2b06      	cmp	r3, #6
 800378c:	d902      	bls.n	8003794 <NVIC_EncodePriority+0x30>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3b03      	subs	r3, #3
 8003792:	e000      	b.n	8003796 <NVIC_EncodePriority+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	4313      	orrs	r3, r2
         );
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff90 	bl	8003710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff2d 	bl	8003674 <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003834:	f7ff ff42 	bl	80036bc <__NVIC_GetPriorityGrouping>
 8003838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff90 	bl	8003764 <NVIC_EncodePriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff5f 	bl	8003710 <__NVIC_SetPriority>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff35 	bl	80036d8 <__NVIC_EnableIRQ>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ffa2 	bl	80037c8 <SysTick_Config>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003890:	b480      	push	{r7}
 8003892:	b08b      	sub	sp, #44	; 0x2c
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a2:	e169      	b.n	8003b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038a4:	2201      	movs	r2, #1
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f040 8158 	bne.w	8003b72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a9a      	ldr	r2, [pc, #616]	; (8003b30 <HAL_GPIO_Init+0x2a0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d05e      	beq.n	800398a <HAL_GPIO_Init+0xfa>
 80038cc:	4a98      	ldr	r2, [pc, #608]	; (8003b30 <HAL_GPIO_Init+0x2a0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d875      	bhi.n	80039be <HAL_GPIO_Init+0x12e>
 80038d2:	4a98      	ldr	r2, [pc, #608]	; (8003b34 <HAL_GPIO_Init+0x2a4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d058      	beq.n	800398a <HAL_GPIO_Init+0xfa>
 80038d8:	4a96      	ldr	r2, [pc, #600]	; (8003b34 <HAL_GPIO_Init+0x2a4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d86f      	bhi.n	80039be <HAL_GPIO_Init+0x12e>
 80038de:	4a96      	ldr	r2, [pc, #600]	; (8003b38 <HAL_GPIO_Init+0x2a8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d052      	beq.n	800398a <HAL_GPIO_Init+0xfa>
 80038e4:	4a94      	ldr	r2, [pc, #592]	; (8003b38 <HAL_GPIO_Init+0x2a8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d869      	bhi.n	80039be <HAL_GPIO_Init+0x12e>
 80038ea:	4a94      	ldr	r2, [pc, #592]	; (8003b3c <HAL_GPIO_Init+0x2ac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d04c      	beq.n	800398a <HAL_GPIO_Init+0xfa>
 80038f0:	4a92      	ldr	r2, [pc, #584]	; (8003b3c <HAL_GPIO_Init+0x2ac>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d863      	bhi.n	80039be <HAL_GPIO_Init+0x12e>
 80038f6:	4a92      	ldr	r2, [pc, #584]	; (8003b40 <HAL_GPIO_Init+0x2b0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d046      	beq.n	800398a <HAL_GPIO_Init+0xfa>
 80038fc:	4a90      	ldr	r2, [pc, #576]	; (8003b40 <HAL_GPIO_Init+0x2b0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d85d      	bhi.n	80039be <HAL_GPIO_Init+0x12e>
 8003902:	2b12      	cmp	r3, #18
 8003904:	d82a      	bhi.n	800395c <HAL_GPIO_Init+0xcc>
 8003906:	2b12      	cmp	r3, #18
 8003908:	d859      	bhi.n	80039be <HAL_GPIO_Init+0x12e>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_GPIO_Init+0x80>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	0800398b 	.word	0x0800398b
 8003914:	08003965 	.word	0x08003965
 8003918:	08003977 	.word	0x08003977
 800391c:	080039b9 	.word	0x080039b9
 8003920:	080039bf 	.word	0x080039bf
 8003924:	080039bf 	.word	0x080039bf
 8003928:	080039bf 	.word	0x080039bf
 800392c:	080039bf 	.word	0x080039bf
 8003930:	080039bf 	.word	0x080039bf
 8003934:	080039bf 	.word	0x080039bf
 8003938:	080039bf 	.word	0x080039bf
 800393c:	080039bf 	.word	0x080039bf
 8003940:	080039bf 	.word	0x080039bf
 8003944:	080039bf 	.word	0x080039bf
 8003948:	080039bf 	.word	0x080039bf
 800394c:	080039bf 	.word	0x080039bf
 8003950:	080039bf 	.word	0x080039bf
 8003954:	0800396d 	.word	0x0800396d
 8003958:	08003981 	.word	0x08003981
 800395c:	4a79      	ldr	r2, [pc, #484]	; (8003b44 <HAL_GPIO_Init+0x2b4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003962:	e02c      	b.n	80039be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	623b      	str	r3, [r7, #32]
          break;
 800396a:	e029      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	3304      	adds	r3, #4
 8003972:	623b      	str	r3, [r7, #32]
          break;
 8003974:	e024      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	3308      	adds	r3, #8
 800397c:	623b      	str	r3, [r7, #32]
          break;
 800397e:	e01f      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	330c      	adds	r3, #12
 8003986:	623b      	str	r3, [r7, #32]
          break;
 8003988:	e01a      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003992:	2304      	movs	r3, #4
 8003994:	623b      	str	r3, [r7, #32]
          break;
 8003996:	e013      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a0:	2308      	movs	r3, #8
 80039a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	611a      	str	r2, [r3, #16]
          break;
 80039aa:	e009      	b.n	80039c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039ac:	2308      	movs	r3, #8
 80039ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	615a      	str	r2, [r3, #20]
          break;
 80039b6:	e003      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039b8:	2300      	movs	r3, #0
 80039ba:	623b      	str	r3, [r7, #32]
          break;
 80039bc:	e000      	b.n	80039c0 <HAL_GPIO_Init+0x130>
          break;
 80039be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2bff      	cmp	r3, #255	; 0xff
 80039c4:	d801      	bhi.n	80039ca <HAL_GPIO_Init+0x13a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	e001      	b.n	80039ce <HAL_GPIO_Init+0x13e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2bff      	cmp	r3, #255	; 0xff
 80039d4:	d802      	bhi.n	80039dc <HAL_GPIO_Init+0x14c>
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	e002      	b.n	80039e2 <HAL_GPIO_Init+0x152>
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	3b08      	subs	r3, #8
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	210f      	movs	r1, #15
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	6a39      	ldr	r1, [r7, #32]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	431a      	orrs	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80b1 	beq.w	8003b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_GPIO_Init+0x2b8>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	4a4c      	ldr	r2, [pc, #304]	; (8003b48 <HAL_GPIO_Init+0x2b8>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6193      	str	r3, [r2, #24]
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_GPIO_Init+0x2b8>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a28:	4a48      	ldr	r2, [pc, #288]	; (8003b4c <HAL_GPIO_Init+0x2bc>)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a40      	ldr	r2, [pc, #256]	; (8003b50 <HAL_GPIO_Init+0x2c0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <HAL_GPIO_Init+0x1ec>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3f      	ldr	r2, [pc, #252]	; (8003b54 <HAL_GPIO_Init+0x2c4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00d      	beq.n	8003a78 <HAL_GPIO_Init+0x1e8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <HAL_GPIO_Init+0x2c8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <HAL_GPIO_Init+0x1e4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3d      	ldr	r2, [pc, #244]	; (8003b5c <HAL_GPIO_Init+0x2cc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_GPIO_Init+0x1e0>
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e006      	b.n	8003a7e <HAL_GPIO_Init+0x1ee>
 8003a70:	2304      	movs	r3, #4
 8003a72:	e004      	b.n	8003a7e <HAL_GPIO_Init+0x1ee>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e002      	b.n	8003a7e <HAL_GPIO_Init+0x1ee>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_GPIO_Init+0x1ee>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	f002 0203 	and.w	r2, r2, #3
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	4093      	lsls	r3, r2
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a8e:	492f      	ldr	r1, [pc, #188]	; (8003b4c <HAL_GPIO_Init+0x2bc>)
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	3302      	adds	r3, #2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	492c      	ldr	r1, [pc, #176]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]
 8003ab4:	e006      	b.n	8003ac4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	4928      	ldr	r1, [pc, #160]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ad0:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	4922      	ldr	r1, [pc, #136]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60cb      	str	r3, [r1, #12]
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	491e      	ldr	r1, [pc, #120]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d006      	beq.n	8003b06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4918      	ldr	r1, [pc, #96]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e006      	b.n	8003b14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b06:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	4914      	ldr	r1, [pc, #80]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d021      	beq.n	8003b64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	490e      	ldr	r1, [pc, #56]	; (8003b60 <HAL_GPIO_Init+0x2d0>)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	e021      	b.n	8003b72 <HAL_GPIO_Init+0x2e2>
 8003b2e:	bf00      	nop
 8003b30:	10320000 	.word	0x10320000
 8003b34:	10310000 	.word	0x10310000
 8003b38:	10220000 	.word	0x10220000
 8003b3c:	10210000 	.word	0x10210000
 8003b40:	10120000 	.word	0x10120000
 8003b44:	10110000 	.word	0x10110000
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40010800 	.word	0x40010800
 8003b54:	40010c00 	.word	0x40010c00
 8003b58:	40011000 	.word	0x40011000
 8003b5c:	40011400 	.word	0x40011400
 8003b60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	4909      	ldr	r1, [pc, #36]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	3301      	adds	r3, #1
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f47f ae8e 	bne.w	80038a4 <HAL_GPIO_Init+0x14>
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	372c      	adds	r7, #44	; 0x2c
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e001      	b.n	8003bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	807b      	strh	r3, [r7, #2]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd6:	787b      	ldrb	r3, [r7, #1]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003be2:	e003      	b.n	8003bec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	041a      	lsls	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e12b      	b.n	8003e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fe7c 	bl	800291c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f001 f842 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8003c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a81      	ldr	r2, [pc, #516]	; (8003e6c <HAL_I2C_Init+0x274>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d807      	bhi.n	8003c7c <HAL_I2C_Init+0x84>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a80      	ldr	r2, [pc, #512]	; (8003e70 <HAL_I2C_Init+0x278>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf94      	ite	ls
 8003c74:	2301      	movls	r3, #1
 8003c76:	2300      	movhi	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e006      	b.n	8003c8a <HAL_I2C_Init+0x92>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a7d      	ldr	r2, [pc, #500]	; (8003e74 <HAL_I2C_Init+0x27c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bf94      	ite	ls
 8003c84:	2301      	movls	r3, #1
 8003c86:	2300      	movhi	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0e7      	b.n	8003e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a78      	ldr	r2, [pc, #480]	; (8003e78 <HAL_I2C_Init+0x280>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0c9b      	lsrs	r3, r3, #18
 8003c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_I2C_Init+0x274>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d802      	bhi.n	8003ccc <HAL_I2C_Init+0xd4>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	e009      	b.n	8003ce0 <HAL_I2C_Init+0xe8>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	4a69      	ldr	r2, [pc, #420]	; (8003e7c <HAL_I2C_Init+0x284>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	3301      	adds	r3, #1
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	495c      	ldr	r1, [pc, #368]	; (8003e6c <HAL_I2C_Init+0x274>)
 8003cfc:	428b      	cmp	r3, r1
 8003cfe:	d819      	bhi.n	8003d34 <HAL_I2C_Init+0x13c>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e59      	subs	r1, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d14:	400b      	ands	r3, r1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_I2C_Init+0x138>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1e59      	subs	r1, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	e051      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003d30:	2304      	movs	r3, #4
 8003d32:	e04f      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d111      	bne.n	8003d60 <HAL_I2C_Init+0x168>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e58      	subs	r0, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	440b      	add	r3, r1
 8003d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e012      	b.n	8003d86 <HAL_I2C_Init+0x18e>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	0099      	lsls	r1, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Init+0x196>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e022      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10e      	bne.n	8003db4 <HAL_I2C_Init+0x1bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1e58      	subs	r0, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	440b      	add	r3, r1
 8003da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db2:	e00f      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1e58      	subs	r0, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	0099      	lsls	r1, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	6809      	ldr	r1, [r1, #0]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6911      	ldr	r1, [r2, #16]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68d2      	ldr	r2, [r2, #12]
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	000186a0 	.word	0x000186a0
 8003e70:	001e847f 	.word	0x001e847f
 8003e74:	003d08ff 	.word	0x003d08ff
 8003e78:	431bde83 	.word	0x431bde83
 8003e7c:	10624dd3 	.word	0x10624dd3

08003e80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	460b      	mov	r3, r1
 8003e94:	813b      	strh	r3, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e9a:	f7fe ff65 	bl	8002d68 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	f040 80d9 	bne.w	8004060 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2319      	movs	r3, #25
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	496d      	ldr	r1, [pc, #436]	; (800406c <HAL_I2C_Mem_Write+0x1ec>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f971 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0cc      	b.n	8004062 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_I2C_Mem_Write+0x56>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e0c5      	b.n	8004062 <HAL_I2C_Mem_Write+0x1e2>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d007      	beq.n	8003efc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2221      	movs	r2, #33	; 0x21
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a4d      	ldr	r2, [pc, #308]	; (8004070 <HAL_I2C_Mem_Write+0x1f0>)
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f3e:	88f8      	ldrh	r0, [r7, #6]
 8003f40:	893a      	ldrh	r2, [r7, #8]
 8003f42:	8979      	ldrh	r1, [r7, #10]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f890 	bl	8004074 <I2C_RequestMemoryWrite>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d052      	beq.n	8004000 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e081      	b.n	8004062 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa36 	bl	80043d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d107      	bne.n	8003f86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06b      	b.n	8004062 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11b      	bne.n	8004000 <HAL_I2C_Mem_Write+0x180>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1aa      	bne.n	8003f5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fa29 	bl	8004464 <I2C_WaitOnBTFFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2b04      	cmp	r3, #4
 800401e:	d107      	bne.n	8004030 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e016      	b.n	8004062 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	00100002 	.word	0x00100002
 8004070:	ffff0000 	.word	0xffff0000

08004074 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	461a      	mov	r2, r3
 8004082:	4603      	mov	r3, r0
 8004084:	817b      	strh	r3, [r7, #10]
 8004086:	460b      	mov	r3, r1
 8004088:	813b      	strh	r3, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f878 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d103      	bne.n	80040ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e05f      	b.n	8004192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	492d      	ldr	r1, [pc, #180]	; (800419c <I2C_RequestMemoryWrite+0x128>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f8d3 	bl	8004294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e04c      	b.n	8004192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f95e 	bl	80043d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e02b      	b.n	8004192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]
 800414a:	e021      	b.n	8004190 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b29b      	uxth	r3, r3
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f938 	bl	80043d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e005      	b.n	8004192 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	00010002 	.word	0x00010002

080041a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b0:	e048      	b.n	8004244 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d044      	beq.n	8004244 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fe fdd5 	bl	8002d68 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d139      	bne.n	8004244 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10d      	bne.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	43da      	mvns	r2, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4013      	ands	r3, r2
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	e00c      	b.n	8004210 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	429a      	cmp	r2, r3
 8004214:	d116      	bne.n	8004244 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e023      	b.n	800428c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d10d      	bne.n	800426a <I2C_WaitOnFlagUntilTimeout+0xca>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	43da      	mvns	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	e00c      	b.n	8004284 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	43da      	mvns	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	429a      	cmp	r2, r3
 8004288:	d093      	beq.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a2:	e071      	b.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b2:	d123      	bne.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0204 	orr.w	r2, r3, #4
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e067      	b.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d041      	beq.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004304:	f7fe fd30 	bl	8002d68 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d136      	bne.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10c      	bne.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e00b      	b.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e021      	b.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d10c      	bne.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	43da      	mvns	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e00b      	b.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f47f af6d 	bne.w	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e0:	e034      	b.n	800444c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f886 	bl	80044f4 <I2C_IsAcknowledgeFailed>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e034      	b.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d028      	beq.n	800444c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fe fcb5 	bl	8002d68 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11d      	bne.n	800444c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d016      	beq.n	800444c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e007      	b.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d1c3      	bne.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004470:	e034      	b.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f83e 	bl	80044f4 <I2C_IsAcknowledgeFailed>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e034      	b.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d028      	beq.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fe fc6d 	bl	8002d68 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d016      	beq.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e007      	b.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d1c3      	bne.n	8004472 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450a:	d11b      	bne.n	8004544 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004514:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e272      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004570:	4b92      	ldr	r3, [pc, #584]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00c      	beq.n	8004596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800457c:	4b8f      	ldr	r3, [pc, #572]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d112      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
 8004588:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d10b      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004596:	4b89      	ldr	r3, [pc, #548]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d06c      	beq.n	800467c <HAL_RCC_OscConfig+0x12c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d168      	bne.n	800467c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e24c      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x76>
 80045b8:	4b80      	ldr	r3, [pc, #512]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7f      	ldr	r2, [pc, #508]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e02e      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7a      	ldr	r2, [pc, #488]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b78      	ldr	r3, [pc, #480]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a77      	ldr	r2, [pc, #476]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0xbc>
 80045f2:	4b72      	ldr	r3, [pc, #456]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a71      	ldr	r2, [pc, #452]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 800460c:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6a      	ldr	r2, [pc, #424]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a67      	ldr	r2, [pc, #412]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fb9c 	bl	8002d68 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe fb98 	bl	8002d68 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e200      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xe4>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fe fb88 	bl	8002d68 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fe fb84 	bl	8002d68 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1ec      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x10c>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d11c      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
 80046a2:	4b46      	ldr	r3, [pc, #280]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1c0      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4939      	ldr	r1, [pc, #228]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	e03a      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fe fb3d 	bl	8002d68 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fe fb39 	bl	8002d68 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1a1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4927      	ldr	r1, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe fb1c 	bl	8002d68 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fe fb18 	bl	8002d68 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e180      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03a      	beq.n	80047d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fe fafc 	bl	8002d68 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fe faf8 	bl	8002d68 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e160      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004792:	2001      	movs	r0, #1
 8004794:	f000 face 	bl	8004d34 <RCC_Delay>
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a0:	f7fe fae2 	bl	8002d68 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a6:	e00f      	b.n	80047c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fe fade 	bl	8002d68 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d908      	bls.n	80047c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e146      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	42420000 	.word	0x42420000
 80047c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e9      	bne.n	80047a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80a6 	beq.w	800492e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4a87      	ldr	r2, [pc, #540]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	61d3      	str	r3, [r2, #28]
 80047fe:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480e:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004826:	f7fe fa9f 	bl	8002d68 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fe fa9b 	bl	8002d68 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e103      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4b75      	ldr	r3, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x312>
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6213      	str	r3, [r2, #32]
 8004860:	e02d      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x334>
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4a69      	ldr	r2, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6213      	str	r3, [r2, #32]
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4a66      	ldr	r2, [pc, #408]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6213      	str	r3, [r2, #32]
 8004882:	e01c      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b05      	cmp	r3, #5
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x356>
 800488c:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6213      	str	r3, [r2, #32]
 80048a4:	e00b      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a5a      	ldr	r2, [pc, #360]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fe fa4f 	bl	8002d68 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fe fa4b 	bl	8002d68 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0b1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ee      	beq.n	80048ce <HAL_RCC_OscConfig+0x37e>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fa39 	bl	8002d68 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fe fa35 	bl	8002d68 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e09b      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ee      	bne.n	80048fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d061      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d146      	bne.n	80049da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fe fa09 	bl	8002d68 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fe fa05 	bl	8002d68 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e06d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496c:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d108      	bne.n	8004994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4921      	ldr	r1, [pc, #132]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a19      	ldr	r1, [r3, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	430b      	orrs	r3, r1
 80049a6:	491b      	ldr	r1, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fe f9d9 	bl	8002d68 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fe f9d5 	bl	8002d68 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e03d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x46a>
 80049d8:	e035      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fe f9c2 	bl	8002d68 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fe f9be 	bl	8002d68 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e026      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x498>
 8004a06:	e01e      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e019      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_OscConfig+0x500>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d0      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4965      	ldr	r1, [pc, #404]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d040      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d115      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e073      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e06b      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4936      	ldr	r1, [pc, #216]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fe f910 	bl	8002d68 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fe f90c 	bl	8002d68 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e053      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d210      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 0207 	bic.w	r2, r3, #7
 8004b8a:	4922      	ldr	r1, [pc, #136]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 f821 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490a      	ldr	r1, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_RCC_ClockConfig+0x1cc>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1d0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe f86e 	bl	8002ce4 <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	0800a330 	.word	0x0800a330
 8004c20:	20000020 	.word	0x20000020
 8004c24:	20000024 	.word	0x20000024

08004c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x30>
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x36>
 8004c56:	e027      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5a:	613b      	str	r3, [r7, #16]
      break;
 8004c5c:	e027      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0c5b      	lsrs	r3, r3, #17
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	fb03 f202 	mul.w	r2, r3, r2
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e004      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	613b      	str	r3, [r7, #16]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004caa:	613b      	str	r3, [r7, #16]
      break;
 8004cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cae:	693b      	ldr	r3, [r7, #16]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	0800a348 	.word	0x0800a348
 8004cc8:	0800a358 	.word	0x0800a358
 8004ccc:	003d0900 	.word	0x003d0900

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	20000020 	.word	0x20000020

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce8:	f7ff fff2 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4903      	ldr	r1, [pc, #12]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	0800a340 	.word	0x0800a340

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d10:	f7ff ffde 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0adb      	lsrs	r3, r3, #11
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	0800a340 	.word	0x0800a340

08004d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <RCC_Delay+0x34>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <RCC_Delay+0x38>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	0a5b      	lsrs	r3, r3, #9
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d50:	bf00      	nop
  }
  while (Delay --);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	60fa      	str	r2, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f9      	bne.n	8004d50 <RCC_Delay+0x1c>
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	20000020 	.word	0x20000020
 8004d6c:	10624dd3 	.word	0x10624dd3

08004d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d07d      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4a4b      	ldr	r2, [pc, #300]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	61d3      	str	r3, [r2, #28]
 8004da8:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d118      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc4:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a42      	ldr	r2, [pc, #264]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd0:	f7fd ffca 	bl	8002d68 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd6:	e008      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fd ffc6 	bl	8002d68 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e06d      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dea:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02e      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d027      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e14:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e24:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d014      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fd ff95 	bl	8002d68 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fd ff91 	bl	8002d68 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e036      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ee      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	490b      	ldr	r1, [pc, #44]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4904      	ldr	r1, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	42420440 	.word	0x42420440

08004edc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	f200 808a 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d045      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d075      	beq.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f12:	e082      	b.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004f14:	4b46      	ldr	r3, [pc, #280]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f1a:	4b45      	ldr	r3, [pc, #276]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d07b      	beq.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	0c9b      	lsrs	r3, r3, #18
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	4a41      	ldr	r2, [pc, #260]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f3e:	4b3c      	ldr	r3, [pc, #240]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	0c5b      	lsrs	r3, r3, #17
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004f4a:	5cd3      	ldrb	r3, [r2, r3]
 8004f4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f58:	4a38      	ldr	r2, [pc, #224]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e004      	b.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a34      	ldr	r2, [pc, #208]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f74:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f80:	d102      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	61bb      	str	r3, [r7, #24]
      break;
 8004f86:	e04a      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
      break;
 8004f96:	e042      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa8:	d108      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e01f      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc6:	d109      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004fd4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e00f      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe6:	d11c      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d016      	beq.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ff4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ff8:	61bb      	str	r3, [r7, #24]
      break;
 8004ffa:	e012      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ffc:	e011      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ffe:	f7ff fe85 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 8005002:	4602      	mov	r2, r0
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0b9b      	lsrs	r3, r3, #14
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	3301      	adds	r3, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	61bb      	str	r3, [r7, #24]
      break;
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005022:	bf00      	nop
    }
  }
  return (frequency);
 8005024:	69bb      	ldr	r3, [r7, #24]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	0800a35c 	.word	0x0800a35c
 8005038:	0800a36c 	.word	0x0800a36c
 800503c:	007a1200 	.word	0x007a1200
 8005040:	003d0900 	.word	0x003d0900
 8005044:	aaaaaaab 	.word	0xaaaaaaab

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e041      	b.n	80050de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fd fca4 	bl	80029bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 fb60 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d001      	beq.n	8005100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e032      	b.n	8005166 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_TIM_Base_Start+0x88>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_TIM_Base_Start+0x48>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d009      	beq.n	8005130 <HAL_TIM_Base_Start+0x48>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a14      	ldr	r2, [pc, #80]	; (8005174 <HAL_TIM_Base_Start+0x8c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_TIM_Base_Start+0x48>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a13      	ldr	r2, [pc, #76]	; (8005178 <HAL_TIM_Base_Start+0x90>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d111      	bne.n	8005154 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b06      	cmp	r3, #6
 8005140:	d010      	beq.n	8005164 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e007      	b.n	8005164 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800

0800517c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d001      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e03a      	b.n	800520a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_TIM_Base_Start_IT+0x98>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x58>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x58>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a14      	ldr	r2, [pc, #80]	; (8005218 <HAL_TIM_Base_Start_IT+0x9c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x58>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <HAL_TIM_Base_Start_IT+0xa0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d111      	bne.n	80051f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d010      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	e007      	b.n	8005208 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800

08005220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <HAL_TIM_PWM_Start+0x24>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e022      	b.n	800528a <HAL_TIM_PWM_Start+0x6a>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d109      	bne.n	800525e <HAL_TIM_PWM_Start+0x3e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b01      	cmp	r3, #1
 8005254:	bf14      	ite	ne
 8005256:	2301      	movne	r3, #1
 8005258:	2300      	moveq	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e015      	b.n	800528a <HAL_TIM_PWM_Start+0x6a>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d109      	bne.n	8005278 <HAL_TIM_PWM_Start+0x58>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e008      	b.n	800528a <HAL_TIM_PWM_Start+0x6a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e05e      	b.n	8005350 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0x82>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a0:	e013      	b.n	80052ca <HAL_TIM_PWM_Start+0xaa>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0x92>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_PWM_Start+0xaa>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c0:	e003      	b.n	80052ca <HAL_TIM_PWM_Start+0xaa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fb32 	bl	800593c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_TIM_PWM_Start+0x138>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_TIM_PWM_Start+0x138>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_TIM_PWM_Start+0xfa>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d009      	beq.n	800531a <HAL_TIM_PWM_Start+0xfa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a14      	ldr	r2, [pc, #80]	; (800535c <HAL_TIM_PWM_Start+0x13c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_TIM_PWM_Start+0xfa>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a12      	ldr	r2, [pc, #72]	; (8005360 <HAL_TIM_PWM_Start+0x140>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d111      	bne.n	800533e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b06      	cmp	r3, #6
 800532a:	d010      	beq.n	800534e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	e007      	b.n	800534e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800

08005364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0202 	mvn.w	r2, #2
 8005390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9b4 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9a7 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9b6 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0204 	mvn.w	r2, #4
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f98a 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f97d 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f98c 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b08      	cmp	r3, #8
 8005420:	d122      	bne.n	8005468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b08      	cmp	r3, #8
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0208 	mvn.w	r2, #8
 8005438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f960 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f953 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f962 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b10      	cmp	r3, #16
 8005474:	d122      	bne.n	80054bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d11b      	bne.n	80054bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0210 	mvn.w	r2, #16
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2208      	movs	r2, #8
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f936 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f929 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f938 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10e      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0201 	mvn.w	r2, #1
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fb fdf4 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa9f 	bl	8005a52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d10e      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d107      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8fc 	bl	8005738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b20      	cmp	r3, #32
 800554c:	d10e      	bne.n	800556c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b20      	cmp	r3, #32
 800555a:	d107      	bne.n	800556c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0220 	mvn.w	r2, #32
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa6a 	bl	8005a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIM_ConfigClockSource+0x1c>
 800558c:	2302      	movs	r3, #2
 800558e:	e0b4      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x186>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c8:	d03e      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0xd4>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	f200 8087 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_TIM_ConfigClockSource+0x172>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d87f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d01a      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xa6>
 80055e4:	2b70      	cmp	r3, #112	; 0x70
 80055e6:	d87b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d050      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x11a>
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d877      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d03c      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xfa>
 80055f4:	2b50      	cmp	r3, #80	; 0x50
 80055f6:	d873      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d058      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x13a>
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d86f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d064      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d86b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d060      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15a>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d867      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05c      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	2b10      	cmp	r3, #16
 8005616:	d05a      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15a>
 8005618:	e062      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800562a:	f000 f968 	bl	80058fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800563c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
      break;
 8005646:	e04f      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	f000 f951 	bl	80058fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566a:	609a      	str	r2, [r3, #8]
      break;
 800566c:	e03c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	461a      	mov	r2, r3
 800567c:	f000 f8c8 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2150      	movs	r1, #80	; 0x50
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f91f 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 800568c:	e02c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800569a:	461a      	mov	r2, r3
 800569c:	f000 f8e6 	bl	800586c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2160      	movs	r1, #96	; 0x60
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f90f 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 80056ac:	e01c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 f8a8 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2140      	movs	r1, #64	; 0x40
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 f8ff 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 80056cc:	e00c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	4610      	mov	r0, r2
 80056da:	f000 f8f6 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 80056de:	e003      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e000      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr

08005714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
	...

0800574c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a29      	ldr	r2, [pc, #164]	; (8005804 <TIM_Base_SetConfig+0xb8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_Base_SetConfig+0x30>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d007      	beq.n	800577c <TIM_Base_SetConfig+0x30>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a26      	ldr	r2, [pc, #152]	; (8005808 <TIM_Base_SetConfig+0xbc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_Base_SetConfig+0x30>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a25      	ldr	r2, [pc, #148]	; (800580c <TIM_Base_SetConfig+0xc0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <TIM_Base_SetConfig+0xb8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d007      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <TIM_Base_SetConfig+0xbc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_Base_SetConfig+0x62>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <TIM_Base_SetConfig+0xc0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <TIM_Base_SetConfig+0xb8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800

08005810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 030a 	bic.w	r3, r3, #10
 800584c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0210 	bic.w	r2, r3, #16
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	031b      	lsls	r3, r3, #12
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f043 0307 	orr.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	609a      	str	r2, [r3, #8]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058fe:	b480      	push	{r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005918:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	021a      	lsls	r2, r3, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	431a      	orrs	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	609a      	str	r2, [r3, #8]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2201      	movs	r2, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e046      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800

08005a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <__cvt>:
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	bfbb      	ittet	lt
 8005a6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	461f      	movlt	r7, r3
 8005a74:	2300      	movge	r3, #0
 8005a76:	232d      	movlt	r3, #45	; 0x2d
 8005a78:	b088      	sub	sp, #32
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a80:	7013      	strb	r3, [r2, #0]
 8005a82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a88:	f023 0820 	bic.w	r8, r3, #32
 8005a8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a90:	d005      	beq.n	8005a9e <__cvt+0x3a>
 8005a92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a96:	d100      	bne.n	8005a9a <__cvt+0x36>
 8005a98:	3501      	adds	r5, #1
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e000      	b.n	8005aa0 <__cvt+0x3c>
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	aa07      	add	r2, sp, #28
 8005aa2:	9204      	str	r2, [sp, #16]
 8005aa4:	aa06      	add	r2, sp, #24
 8005aa6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005aaa:	e9cd 3500 	strd	r3, r5, [sp]
 8005aae:	4622      	mov	r2, r4
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	f000 fe99 	bl	80067e8 <_dtoa_r>
 8005ab6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005aba:	4606      	mov	r6, r0
 8005abc:	d102      	bne.n	8005ac4 <__cvt+0x60>
 8005abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac0:	07db      	lsls	r3, r3, #31
 8005ac2:	d522      	bpl.n	8005b0a <__cvt+0xa6>
 8005ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ac8:	eb06 0905 	add.w	r9, r6, r5
 8005acc:	d110      	bne.n	8005af0 <__cvt+0x8c>
 8005ace:	7833      	ldrb	r3, [r6, #0]
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d10a      	bne.n	8005aea <__cvt+0x86>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4639      	mov	r1, r7
 8005adc:	f7fa ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae0:	b918      	cbnz	r0, 8005aea <__cvt+0x86>
 8005ae2:	f1c5 0501 	rsb	r5, r5, #1
 8005ae6:	f8ca 5000 	str.w	r5, [sl]
 8005aea:	f8da 3000 	ldr.w	r3, [sl]
 8005aee:	4499      	add	r9, r3
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	4620      	mov	r0, r4
 8005af6:	4639      	mov	r1, r7
 8005af8:	f7fa ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8005afc:	b108      	cbz	r0, 8005b02 <__cvt+0x9e>
 8005afe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b02:	2230      	movs	r2, #48	; 0x30
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	454b      	cmp	r3, r9
 8005b08:	d307      	bcc.n	8005b1a <__cvt+0xb6>
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b10:	1b9b      	subs	r3, r3, r6
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	b008      	add	sp, #32
 8005b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1a:	1c59      	adds	r1, r3, #1
 8005b1c:	9107      	str	r1, [sp, #28]
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e7f0      	b.n	8005b04 <__cvt+0xa0>

08005b22 <__exponent>:
 8005b22:	4603      	mov	r3, r0
 8005b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b26:	2900      	cmp	r1, #0
 8005b28:	f803 2b02 	strb.w	r2, [r3], #2
 8005b2c:	bfb6      	itet	lt
 8005b2e:	222d      	movlt	r2, #45	; 0x2d
 8005b30:	222b      	movge	r2, #43	; 0x2b
 8005b32:	4249      	neglt	r1, r1
 8005b34:	2909      	cmp	r1, #9
 8005b36:	7042      	strb	r2, [r0, #1]
 8005b38:	dd2a      	ble.n	8005b90 <__exponent+0x6e>
 8005b3a:	f10d 0207 	add.w	r2, sp, #7
 8005b3e:	4617      	mov	r7, r2
 8005b40:	260a      	movs	r6, #10
 8005b42:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b46:	4694      	mov	ip, r2
 8005b48:	fb06 1415 	mls	r4, r6, r5, r1
 8005b4c:	3430      	adds	r4, #48	; 0x30
 8005b4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b52:	460c      	mov	r4, r1
 8005b54:	2c63      	cmp	r4, #99	; 0x63
 8005b56:	4629      	mov	r1, r5
 8005b58:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b5c:	dcf1      	bgt.n	8005b42 <__exponent+0x20>
 8005b5e:	3130      	adds	r1, #48	; 0x30
 8005b60:	f1ac 0402 	sub.w	r4, ip, #2
 8005b64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b68:	4622      	mov	r2, r4
 8005b6a:	1c41      	adds	r1, r0, #1
 8005b6c:	42ba      	cmp	r2, r7
 8005b6e:	d30a      	bcc.n	8005b86 <__exponent+0x64>
 8005b70:	f10d 0209 	add.w	r2, sp, #9
 8005b74:	eba2 020c 	sub.w	r2, r2, ip
 8005b78:	42bc      	cmp	r4, r7
 8005b7a:	bf88      	it	hi
 8005b7c:	2200      	movhi	r2, #0
 8005b7e:	4413      	add	r3, r2
 8005b80:	1a18      	subs	r0, r3, r0
 8005b82:	b003      	add	sp, #12
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b8e:	e7ed      	b.n	8005b6c <__exponent+0x4a>
 8005b90:	2330      	movs	r3, #48	; 0x30
 8005b92:	3130      	adds	r1, #48	; 0x30
 8005b94:	7083      	strb	r3, [r0, #2]
 8005b96:	70c1      	strb	r1, [r0, #3]
 8005b98:	1d03      	adds	r3, r0, #4
 8005b9a:	e7f1      	b.n	8005b80 <__exponent+0x5e>

08005b9c <_printf_float>:
 8005b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	b091      	sub	sp, #68	; 0x44
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005ba8:	4616      	mov	r6, r2
 8005baa:	461f      	mov	r7, r3
 8005bac:	4605      	mov	r5, r0
 8005bae:	f000 fcff 	bl	80065b0 <_localeconv_r>
 8005bb2:	6803      	ldr	r3, [r0, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb8:	f7fa faca 	bl	8000150 <strlen>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	930e      	str	r3, [sp, #56]	; 0x38
 8005bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc4:	900a      	str	r0, [sp, #40]	; 0x28
 8005bc6:	3307      	adds	r3, #7
 8005bc8:	f023 0307 	bic.w	r3, r3, #7
 8005bcc:	f103 0208 	add.w	r2, r3, #8
 8005bd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bd4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bd8:	f8c8 2000 	str.w	r2, [r8]
 8005bdc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005be0:	4652      	mov	r2, sl
 8005be2:	4643      	mov	r3, r8
 8005be4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005be8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	4b9c      	ldr	r3, [pc, #624]	; (8005e68 <_printf_float+0x2cc>)
 8005bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf8:	f7fa ff08 	bl	8000a0c <__aeabi_dcmpun>
 8005bfc:	bb70      	cbnz	r0, 8005c5c <_printf_float+0xc0>
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	4650      	mov	r0, sl
 8005c04:	4b98      	ldr	r3, [pc, #608]	; (8005e68 <_printf_float+0x2cc>)
 8005c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c08:	f7fa fee2 	bl	80009d0 <__aeabi_dcmple>
 8005c0c:	bb30      	cbnz	r0, 8005c5c <_printf_float+0xc0>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2300      	movs	r3, #0
 8005c12:	4650      	mov	r0, sl
 8005c14:	4641      	mov	r1, r8
 8005c16:	f7fa fed1 	bl	80009bc <__aeabi_dcmplt>
 8005c1a:	b110      	cbz	r0, 8005c22 <_printf_float+0x86>
 8005c1c:	232d      	movs	r3, #45	; 0x2d
 8005c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c22:	4a92      	ldr	r2, [pc, #584]	; (8005e6c <_printf_float+0x2d0>)
 8005c24:	4b92      	ldr	r3, [pc, #584]	; (8005e70 <_printf_float+0x2d4>)
 8005c26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c2a:	bf94      	ite	ls
 8005c2c:	4690      	movls	r8, r2
 8005c2e:	4698      	movhi	r8, r3
 8005c30:	2303      	movs	r3, #3
 8005c32:	f04f 0a00 	mov.w	sl, #0
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	f02b 0304 	bic.w	r3, fp, #4
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	4633      	mov	r3, r6
 8005c40:	4621      	mov	r1, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	9700      	str	r7, [sp, #0]
 8005c46:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c48:	f000 f9d6 	bl	8005ff8 <_printf_common>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f040 8090 	bne.w	8005d72 <_printf_float+0x1d6>
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	b011      	add	sp, #68	; 0x44
 8005c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	4643      	mov	r3, r8
 8005c60:	4650      	mov	r0, sl
 8005c62:	4641      	mov	r1, r8
 8005c64:	f7fa fed2 	bl	8000a0c <__aeabi_dcmpun>
 8005c68:	b148      	cbz	r0, 8005c7e <_printf_float+0xe2>
 8005c6a:	f1b8 0f00 	cmp.w	r8, #0
 8005c6e:	bfb8      	it	lt
 8005c70:	232d      	movlt	r3, #45	; 0x2d
 8005c72:	4a80      	ldr	r2, [pc, #512]	; (8005e74 <_printf_float+0x2d8>)
 8005c74:	bfb8      	it	lt
 8005c76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c7a:	4b7f      	ldr	r3, [pc, #508]	; (8005e78 <_printf_float+0x2dc>)
 8005c7c:	e7d3      	b.n	8005c26 <_printf_float+0x8a>
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	d142      	bne.n	8005d0e <_printf_float+0x172>
 8005c88:	2306      	movs	r3, #6
 8005c8a:	6063      	str	r3, [r4, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	9206      	str	r2, [sp, #24]
 8005c90:	aa0e      	add	r2, sp, #56	; 0x38
 8005c92:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005c96:	aa0d      	add	r2, sp, #52	; 0x34
 8005c98:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005c9c:	9203      	str	r2, [sp, #12]
 8005c9e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005ca2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	4652      	mov	r2, sl
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4643      	mov	r3, r8
 8005cb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8005cb4:	f7ff fed6 	bl	8005a64 <__cvt>
 8005cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cba:	4680      	mov	r8, r0
 8005cbc:	2947      	cmp	r1, #71	; 0x47
 8005cbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cc0:	d108      	bne.n	8005cd4 <_printf_float+0x138>
 8005cc2:	1cc8      	adds	r0, r1, #3
 8005cc4:	db02      	blt.n	8005ccc <_printf_float+0x130>
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	dd40      	ble.n	8005d4e <_printf_float+0x1b2>
 8005ccc:	f1a9 0902 	sub.w	r9, r9, #2
 8005cd0:	fa5f f989 	uxtb.w	r9, r9
 8005cd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cd8:	d81f      	bhi.n	8005d1a <_printf_float+0x17e>
 8005cda:	464a      	mov	r2, r9
 8005cdc:	3901      	subs	r1, #1
 8005cde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ce2:	910d      	str	r1, [sp, #52]	; 0x34
 8005ce4:	f7ff ff1d 	bl	8005b22 <__exponent>
 8005ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cea:	4682      	mov	sl, r0
 8005cec:	1813      	adds	r3, r2, r0
 8005cee:	2a01      	cmp	r2, #1
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	dc02      	bgt.n	8005cfa <_printf_float+0x15e>
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	07d2      	lsls	r2, r2, #31
 8005cf8:	d501      	bpl.n	8005cfe <_printf_float+0x162>
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d09b      	beq.n	8005c3e <_printf_float+0xa2>
 8005d06:	232d      	movs	r3, #45	; 0x2d
 8005d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0c:	e797      	b.n	8005c3e <_printf_float+0xa2>
 8005d0e:	2947      	cmp	r1, #71	; 0x47
 8005d10:	d1bc      	bne.n	8005c8c <_printf_float+0xf0>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ba      	bne.n	8005c8c <_printf_float+0xf0>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7b7      	b.n	8005c8a <_printf_float+0xee>
 8005d1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d1e:	d118      	bne.n	8005d52 <_printf_float+0x1b6>
 8005d20:	2900      	cmp	r1, #0
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	dd0b      	ble.n	8005d3e <_printf_float+0x1a2>
 8005d26:	6121      	str	r1, [r4, #16]
 8005d28:	b913      	cbnz	r3, 8005d30 <_printf_float+0x194>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	07d0      	lsls	r0, r2, #31
 8005d2e:	d502      	bpl.n	8005d36 <_printf_float+0x19a>
 8005d30:	3301      	adds	r3, #1
 8005d32:	440b      	add	r3, r1
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	f04f 0a00 	mov.w	sl, #0
 8005d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d3c:	e7df      	b.n	8005cfe <_printf_float+0x162>
 8005d3e:	b913      	cbnz	r3, 8005d46 <_printf_float+0x1aa>
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	07d2      	lsls	r2, r2, #31
 8005d44:	d501      	bpl.n	8005d4a <_printf_float+0x1ae>
 8005d46:	3302      	adds	r3, #2
 8005d48:	e7f4      	b.n	8005d34 <_printf_float+0x198>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f2      	b.n	8005d34 <_printf_float+0x198>
 8005d4e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	4299      	cmp	r1, r3
 8005d56:	db05      	blt.n	8005d64 <_printf_float+0x1c8>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	6121      	str	r1, [r4, #16]
 8005d5c:	07d8      	lsls	r0, r3, #31
 8005d5e:	d5ea      	bpl.n	8005d36 <_printf_float+0x19a>
 8005d60:	1c4b      	adds	r3, r1, #1
 8005d62:	e7e7      	b.n	8005d34 <_printf_float+0x198>
 8005d64:	2900      	cmp	r1, #0
 8005d66:	bfcc      	ite	gt
 8005d68:	2201      	movgt	r2, #1
 8005d6a:	f1c1 0202 	rsble	r2, r1, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	e7e0      	b.n	8005d34 <_printf_float+0x198>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	055a      	lsls	r2, r3, #21
 8005d76:	d407      	bmi.n	8005d88 <_printf_float+0x1ec>
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	4642      	mov	r2, r8
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	d12b      	bne.n	8005dde <_printf_float+0x242>
 8005d86:	e764      	b.n	8005c52 <_printf_float+0xb6>
 8005d88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d8c:	f240 80dd 	bls.w	8005f4a <_printf_float+0x3ae>
 8005d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d94:	2200      	movs	r2, #0
 8005d96:	2300      	movs	r3, #0
 8005d98:	f7fa fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d033      	beq.n	8005e08 <_printf_float+0x26c>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	4a35      	ldr	r2, [pc, #212]	; (8005e7c <_printf_float+0x2e0>)
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	f43f af51 	beq.w	8005c52 <_printf_float+0xb6>
 8005db0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005db4:	429a      	cmp	r2, r3
 8005db6:	db02      	blt.n	8005dbe <_printf_float+0x222>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	07d8      	lsls	r0, r3, #31
 8005dbc:	d50f      	bpl.n	8005dde <_printf_float+0x242>
 8005dbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f af42 	beq.w	8005c52 <_printf_float+0xb6>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 091a 	add.w	r9, r4, #26
 8005dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4543      	cmp	r3, r8
 8005ddc:	dc09      	bgt.n	8005df2 <_printf_float+0x256>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	079b      	lsls	r3, r3, #30
 8005de2:	f100 8104 	bmi.w	8005fee <_printf_float+0x452>
 8005de6:	68e0      	ldr	r0, [r4, #12]
 8005de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dea:	4298      	cmp	r0, r3
 8005dec:	bfb8      	it	lt
 8005dee:	4618      	movlt	r0, r3
 8005df0:	e731      	b.n	8005c56 <_printf_float+0xba>
 8005df2:	2301      	movs	r3, #1
 8005df4:	464a      	mov	r2, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f af28 	beq.w	8005c52 <_printf_float+0xb6>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	e7e6      	b.n	8005dd6 <_printf_float+0x23a>
 8005e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dc38      	bgt.n	8005e80 <_printf_float+0x2e4>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4631      	mov	r1, r6
 8005e12:	4628      	mov	r0, r5
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <_printf_float+0x2e0>)
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f af1a 	beq.w	8005c52 <_printf_float+0xb6>
 8005e1e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d102      	bne.n	8005e2c <_printf_float+0x290>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	07d9      	lsls	r1, r3, #31
 8005e2a:	d5d8      	bpl.n	8005dde <_printf_float+0x242>
 8005e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f af0b 	beq.w	8005c52 <_printf_float+0xb6>
 8005e3c:	f04f 0900 	mov.w	r9, #0
 8005e40:	f104 0a1a 	add.w	sl, r4, #26
 8005e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e46:	425b      	negs	r3, r3
 8005e48:	454b      	cmp	r3, r9
 8005e4a:	dc01      	bgt.n	8005e50 <_printf_float+0x2b4>
 8005e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e4e:	e794      	b.n	8005d7a <_printf_float+0x1de>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f aef9 	beq.w	8005c52 <_printf_float+0xb6>
 8005e60:	f109 0901 	add.w	r9, r9, #1
 8005e64:	e7ee      	b.n	8005e44 <_printf_float+0x2a8>
 8005e66:	bf00      	nop
 8005e68:	7fefffff 	.word	0x7fefffff
 8005e6c:	0800a36e 	.word	0x0800a36e
 8005e70:	0800a372 	.word	0x0800a372
 8005e74:	0800a376 	.word	0x0800a376
 8005e78:	0800a37a 	.word	0x0800a37a
 8005e7c:	0800a37e 	.word	0x0800a37e
 8005e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e84:	429a      	cmp	r2, r3
 8005e86:	bfa8      	it	ge
 8005e88:	461a      	movge	r2, r3
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	4691      	mov	r9, r2
 8005e8e:	dc37      	bgt.n	8005f00 <_printf_float+0x364>
 8005e90:	f04f 0b00 	mov.w	fp, #0
 8005e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e98:	f104 021a 	add.w	r2, r4, #26
 8005e9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ea0:	ebaa 0309 	sub.w	r3, sl, r9
 8005ea4:	455b      	cmp	r3, fp
 8005ea6:	dc33      	bgt.n	8005f10 <_printf_float+0x374>
 8005ea8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005eac:	429a      	cmp	r2, r3
 8005eae:	db3b      	blt.n	8005f28 <_printf_float+0x38c>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	07da      	lsls	r2, r3, #31
 8005eb4:	d438      	bmi.n	8005f28 <_printf_float+0x38c>
 8005eb6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005eba:	eba2 0903 	sub.w	r9, r2, r3
 8005ebe:	eba2 020a 	sub.w	r2, r2, sl
 8005ec2:	4591      	cmp	r9, r2
 8005ec4:	bfa8      	it	ge
 8005ec6:	4691      	movge	r9, r2
 8005ec8:	f1b9 0f00 	cmp.w	r9, #0
 8005ecc:	dc34      	bgt.n	8005f38 <_printf_float+0x39c>
 8005ece:	f04f 0800 	mov.w	r8, #0
 8005ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ed6:	f104 0a1a 	add.w	sl, r4, #26
 8005eda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	eba3 0309 	sub.w	r3, r3, r9
 8005ee4:	4543      	cmp	r3, r8
 8005ee6:	f77f af7a 	ble.w	8005dde <_printf_float+0x242>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4652      	mov	r2, sl
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	f43f aeac 	beq.w	8005c52 <_printf_float+0xb6>
 8005efa:	f108 0801 	add.w	r8, r8, #1
 8005efe:	e7ec      	b.n	8005eda <_printf_float+0x33e>
 8005f00:	4613      	mov	r3, r2
 8005f02:	4631      	mov	r1, r6
 8005f04:	4642      	mov	r2, r8
 8005f06:	4628      	mov	r0, r5
 8005f08:	47b8      	blx	r7
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d1c0      	bne.n	8005e90 <_printf_float+0x2f4>
 8005f0e:	e6a0      	b.n	8005c52 <_printf_float+0xb6>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f ae99 	beq.w	8005c52 <_printf_float+0xb6>
 8005f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f22:	f10b 0b01 	add.w	fp, fp, #1
 8005f26:	e7b9      	b.n	8005e9c <_printf_float+0x300>
 8005f28:	4631      	mov	r1, r6
 8005f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	d1bf      	bne.n	8005eb6 <_printf_float+0x31a>
 8005f36:	e68c      	b.n	8005c52 <_printf_float+0xb6>
 8005f38:	464b      	mov	r3, r9
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	eb08 020a 	add.w	r2, r8, sl
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1c2      	bne.n	8005ece <_printf_float+0x332>
 8005f48:	e683      	b.n	8005c52 <_printf_float+0xb6>
 8005f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f4c:	2a01      	cmp	r2, #1
 8005f4e:	dc01      	bgt.n	8005f54 <_printf_float+0x3b8>
 8005f50:	07db      	lsls	r3, r3, #31
 8005f52:	d539      	bpl.n	8005fc8 <_printf_float+0x42c>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4642      	mov	r2, r8
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f ae77 	beq.w	8005c52 <_printf_float+0xb6>
 8005f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f43f ae6f 	beq.w	8005c52 <_printf_float+0xb6>
 8005f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005f80:	f7fa fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8005f84:	b9d8      	cbnz	r0, 8005fbe <_printf_float+0x422>
 8005f86:	f109 33ff 	add.w	r3, r9, #4294967295
 8005f8a:	f108 0201 	add.w	r2, r8, #1
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	d10e      	bne.n	8005fb6 <_printf_float+0x41a>
 8005f98:	e65b      	b.n	8005c52 <_printf_float+0xb6>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	464a      	mov	r2, r9
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f43f ae54 	beq.w	8005c52 <_printf_float+0xb6>
 8005faa:	f108 0801 	add.w	r8, r8, #1
 8005fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4543      	cmp	r3, r8
 8005fb4:	dcf1      	bgt.n	8005f9a <_printf_float+0x3fe>
 8005fb6:	4653      	mov	r3, sl
 8005fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fbc:	e6de      	b.n	8005d7c <_printf_float+0x1e0>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 091a 	add.w	r9, r4, #26
 8005fc6:	e7f2      	b.n	8005fae <_printf_float+0x412>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4642      	mov	r2, r8
 8005fcc:	e7df      	b.n	8005f8e <_printf_float+0x3f2>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	464a      	mov	r2, r9
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f ae3a 	beq.w	8005c52 <_printf_float+0xb6>
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	dcf0      	bgt.n	8005fce <_printf_float+0x432>
 8005fec:	e6fb      	b.n	8005de6 <_printf_float+0x24a>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	f104 0919 	add.w	r9, r4, #25
 8005ff6:	e7f4      	b.n	8005fe2 <_printf_float+0x446>

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4699      	mov	r9, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	4607      	mov	r7, r0
 8006006:	4293      	cmp	r3, r2
 8006008:	bfb8      	it	lt
 800600a:	4613      	movlt	r3, r2
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006012:	460c      	mov	r4, r1
 8006014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc2b      	bgt.n	8006098 <_printf_common+0xa0>
 8006040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006044:	1e13      	subs	r3, r2, #0
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d430      	bmi.n	80060b2 <_printf_common+0xba>
 8006050:	4649      	mov	r1, r9
 8006052:	4638      	mov	r0, r7
 8006054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006058:	47c0      	blx	r8
 800605a:	3001      	adds	r0, #1
 800605c:	d023      	beq.n	80060a6 <_printf_common+0xae>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf14      	ite	ne
 800606a:	2500      	movne	r5, #0
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	f04f 0600 	mov.w	r6, #0
 8006072:	bf08      	it	eq
 8006074:	68e5      	ldreq	r5, [r4, #12]
 8006076:	f104 041a 	add.w	r4, r4, #26
 800607a:	bf08      	it	eq
 800607c:	1aed      	subeq	r5, r5, r3
 800607e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006082:	bf08      	it	eq
 8006084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006088:	4293      	cmp	r3, r2
 800608a:	bfc4      	itt	gt
 800608c:	1a9b      	subgt	r3, r3, r2
 800608e:	18ed      	addgt	r5, r5, r3
 8006090:	42b5      	cmp	r5, r6
 8006092:	d11a      	bne.n	80060ca <_printf_common+0xd2>
 8006094:	2000      	movs	r0, #0
 8006096:	e008      	b.n	80060aa <_printf_common+0xb2>
 8006098:	2301      	movs	r3, #1
 800609a:	4652      	mov	r2, sl
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d103      	bne.n	80060ae <_printf_common+0xb6>
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	3501      	adds	r5, #1
 80060b0:	e7c1      	b.n	8006036 <_printf_common+0x3e>
 80060b2:	2030      	movs	r0, #48	; 0x30
 80060b4:	18e1      	adds	r1, r4, r3
 80060b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060c0:	4422      	add	r2, r4
 80060c2:	3302      	adds	r3, #2
 80060c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c8:	e7c2      	b.n	8006050 <_printf_common+0x58>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4622      	mov	r2, r4
 80060ce:	4649      	mov	r1, r9
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c0      	blx	r8
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0e6      	beq.n	80060a6 <_printf_common+0xae>
 80060d8:	3601      	adds	r6, #1
 80060da:	e7d9      	b.n	8006090 <_printf_common+0x98>

080060dc <_printf_i>:
 80060dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	7e0f      	ldrb	r7, [r1, #24]
 80060e2:	4691      	mov	r9, r2
 80060e4:	2f78      	cmp	r7, #120	; 0x78
 80060e6:	4680      	mov	r8, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	469a      	mov	sl, r3
 80060ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060f2:	d807      	bhi.n	8006104 <_printf_i+0x28>
 80060f4:	2f62      	cmp	r7, #98	; 0x62
 80060f6:	d80a      	bhi.n	800610e <_printf_i+0x32>
 80060f8:	2f00      	cmp	r7, #0
 80060fa:	f000 80d5 	beq.w	80062a8 <_printf_i+0x1cc>
 80060fe:	2f58      	cmp	r7, #88	; 0x58
 8006100:	f000 80c1 	beq.w	8006286 <_printf_i+0x1aa>
 8006104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800610c:	e03a      	b.n	8006184 <_printf_i+0xa8>
 800610e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006112:	2b15      	cmp	r3, #21
 8006114:	d8f6      	bhi.n	8006104 <_printf_i+0x28>
 8006116:	a101      	add	r1, pc, #4	; (adr r1, 800611c <_printf_i+0x40>)
 8006118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800611c:	08006175 	.word	0x08006175
 8006120:	08006189 	.word	0x08006189
 8006124:	08006105 	.word	0x08006105
 8006128:	08006105 	.word	0x08006105
 800612c:	08006105 	.word	0x08006105
 8006130:	08006105 	.word	0x08006105
 8006134:	08006189 	.word	0x08006189
 8006138:	08006105 	.word	0x08006105
 800613c:	08006105 	.word	0x08006105
 8006140:	08006105 	.word	0x08006105
 8006144:	08006105 	.word	0x08006105
 8006148:	0800628f 	.word	0x0800628f
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006249 	.word	0x08006249
 8006154:	08006105 	.word	0x08006105
 8006158:	08006105 	.word	0x08006105
 800615c:	080062b1 	.word	0x080062b1
 8006160:	08006105 	.word	0x08006105
 8006164:	080061b5 	.word	0x080061b5
 8006168:	08006105 	.word	0x08006105
 800616c:	08006105 	.word	0x08006105
 8006170:	08006251 	.word	0x08006251
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	602a      	str	r2, [r5, #0]
 800617c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006184:	2301      	movs	r3, #1
 8006186:	e0a0      	b.n	80062ca <_printf_i+0x1ee>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	0607      	lsls	r7, r0, #24
 800618e:	f103 0104 	add.w	r1, r3, #4
 8006192:	6029      	str	r1, [r5, #0]
 8006194:	d501      	bpl.n	800619a <_printf_i+0xbe>
 8006196:	681e      	ldr	r6, [r3, #0]
 8006198:	e003      	b.n	80061a2 <_printf_i+0xc6>
 800619a:	0646      	lsls	r6, r0, #25
 800619c:	d5fb      	bpl.n	8006196 <_printf_i+0xba>
 800619e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	da03      	bge.n	80061ae <_printf_i+0xd2>
 80061a6:	232d      	movs	r3, #45	; 0x2d
 80061a8:	4276      	negs	r6, r6
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ae:	230a      	movs	r3, #10
 80061b0:	4859      	ldr	r0, [pc, #356]	; (8006318 <_printf_i+0x23c>)
 80061b2:	e012      	b.n	80061da <_printf_i+0xfe>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	1d19      	adds	r1, r3, #4
 80061ba:	6029      	str	r1, [r5, #0]
 80061bc:	0605      	lsls	r5, r0, #24
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0xe8>
 80061c0:	681e      	ldr	r6, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0xee>
 80061c4:	0641      	lsls	r1, r0, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0xe4>
 80061c8:	881e      	ldrh	r6, [r3, #0]
 80061ca:	2f6f      	cmp	r7, #111	; 0x6f
 80061cc:	bf0c      	ite	eq
 80061ce:	2308      	moveq	r3, #8
 80061d0:	230a      	movne	r3, #10
 80061d2:	4851      	ldr	r0, [pc, #324]	; (8006318 <_printf_i+0x23c>)
 80061d4:	2100      	movs	r1, #0
 80061d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061da:	6865      	ldr	r5, [r4, #4]
 80061dc:	2d00      	cmp	r5, #0
 80061de:	bfa8      	it	ge
 80061e0:	6821      	ldrge	r1, [r4, #0]
 80061e2:	60a5      	str	r5, [r4, #8]
 80061e4:	bfa4      	itt	ge
 80061e6:	f021 0104 	bicge.w	r1, r1, #4
 80061ea:	6021      	strge	r1, [r4, #0]
 80061ec:	b90e      	cbnz	r6, 80061f2 <_printf_i+0x116>
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	d04b      	beq.n	800628a <_printf_i+0x1ae>
 80061f2:	4615      	mov	r5, r2
 80061f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80061f8:	fb03 6711 	mls	r7, r3, r1, r6
 80061fc:	5dc7      	ldrb	r7, [r0, r7]
 80061fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006202:	4637      	mov	r7, r6
 8006204:	42bb      	cmp	r3, r7
 8006206:	460e      	mov	r6, r1
 8006208:	d9f4      	bls.n	80061f4 <_printf_i+0x118>
 800620a:	2b08      	cmp	r3, #8
 800620c:	d10b      	bne.n	8006226 <_printf_i+0x14a>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	07de      	lsls	r6, r3, #31
 8006212:	d508      	bpl.n	8006226 <_printf_i+0x14a>
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	6861      	ldr	r1, [r4, #4]
 8006218:	4299      	cmp	r1, r3
 800621a:	bfde      	ittt	le
 800621c:	2330      	movle	r3, #48	; 0x30
 800621e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006222:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006226:	1b52      	subs	r2, r2, r5
 8006228:	6122      	str	r2, [r4, #16]
 800622a:	464b      	mov	r3, r9
 800622c:	4621      	mov	r1, r4
 800622e:	4640      	mov	r0, r8
 8006230:	f8cd a000 	str.w	sl, [sp]
 8006234:	aa03      	add	r2, sp, #12
 8006236:	f7ff fedf 	bl	8005ff8 <_printf_common>
 800623a:	3001      	adds	r0, #1
 800623c:	d14a      	bne.n	80062d4 <_printf_i+0x1f8>
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	b004      	add	sp, #16
 8006244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f043 0320 	orr.w	r3, r3, #32
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	2778      	movs	r7, #120	; 0x78
 8006252:	4832      	ldr	r0, [pc, #200]	; (800631c <_printf_i+0x240>)
 8006254:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	6829      	ldr	r1, [r5, #0]
 800625c:	061f      	lsls	r7, r3, #24
 800625e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006262:	d402      	bmi.n	800626a <_printf_i+0x18e>
 8006264:	065f      	lsls	r7, r3, #25
 8006266:	bf48      	it	mi
 8006268:	b2b6      	uxthmi	r6, r6
 800626a:	07df      	lsls	r7, r3, #31
 800626c:	bf48      	it	mi
 800626e:	f043 0320 	orrmi.w	r3, r3, #32
 8006272:	6029      	str	r1, [r5, #0]
 8006274:	bf48      	it	mi
 8006276:	6023      	strmi	r3, [r4, #0]
 8006278:	b91e      	cbnz	r6, 8006282 <_printf_i+0x1a6>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f023 0320 	bic.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	2310      	movs	r3, #16
 8006284:	e7a6      	b.n	80061d4 <_printf_i+0xf8>
 8006286:	4824      	ldr	r0, [pc, #144]	; (8006318 <_printf_i+0x23c>)
 8006288:	e7e4      	b.n	8006254 <_printf_i+0x178>
 800628a:	4615      	mov	r5, r2
 800628c:	e7bd      	b.n	800620a <_printf_i+0x12e>
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	6826      	ldr	r6, [r4, #0]
 8006292:	1d18      	adds	r0, r3, #4
 8006294:	6961      	ldr	r1, [r4, #20]
 8006296:	6028      	str	r0, [r5, #0]
 8006298:	0635      	lsls	r5, r6, #24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	d501      	bpl.n	80062a2 <_printf_i+0x1c6>
 800629e:	6019      	str	r1, [r3, #0]
 80062a0:	e002      	b.n	80062a8 <_printf_i+0x1cc>
 80062a2:	0670      	lsls	r0, r6, #25
 80062a4:	d5fb      	bpl.n	800629e <_printf_i+0x1c2>
 80062a6:	8019      	strh	r1, [r3, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	4615      	mov	r5, r2
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	e7bc      	b.n	800622a <_printf_i+0x14e>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	2100      	movs	r1, #0
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 f9ee 	bl	800669e <memchr>
 80062c2:	b108      	cbz	r0, 80062c8 <_printf_i+0x1ec>
 80062c4:	1b40      	subs	r0, r0, r5
 80062c6:	6060      	str	r0, [r4, #4]
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	2300      	movs	r3, #0
 80062ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d2:	e7aa      	b.n	800622a <_printf_i+0x14e>
 80062d4:	462a      	mov	r2, r5
 80062d6:	4649      	mov	r1, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	47d0      	blx	sl
 80062de:	3001      	adds	r0, #1
 80062e0:	d0ad      	beq.n	800623e <_printf_i+0x162>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	079b      	lsls	r3, r3, #30
 80062e6:	d413      	bmi.n	8006310 <_printf_i+0x234>
 80062e8:	68e0      	ldr	r0, [r4, #12]
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	4298      	cmp	r0, r3
 80062ee:	bfb8      	it	lt
 80062f0:	4618      	movlt	r0, r3
 80062f2:	e7a6      	b.n	8006242 <_printf_i+0x166>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4632      	mov	r2, r6
 80062f8:	4649      	mov	r1, r9
 80062fa:	4640      	mov	r0, r8
 80062fc:	47d0      	blx	sl
 80062fe:	3001      	adds	r0, #1
 8006300:	d09d      	beq.n	800623e <_printf_i+0x162>
 8006302:	3501      	adds	r5, #1
 8006304:	68e3      	ldr	r3, [r4, #12]
 8006306:	9903      	ldr	r1, [sp, #12]
 8006308:	1a5b      	subs	r3, r3, r1
 800630a:	42ab      	cmp	r3, r5
 800630c:	dcf2      	bgt.n	80062f4 <_printf_i+0x218>
 800630e:	e7eb      	b.n	80062e8 <_printf_i+0x20c>
 8006310:	2500      	movs	r5, #0
 8006312:	f104 0619 	add.w	r6, r4, #25
 8006316:	e7f5      	b.n	8006304 <_printf_i+0x228>
 8006318:	0800a380 	.word	0x0800a380
 800631c:	0800a391 	.word	0x0800a391

08006320 <std>:
 8006320:	2300      	movs	r3, #0
 8006322:	b510      	push	{r4, lr}
 8006324:	4604      	mov	r4, r0
 8006326:	e9c0 3300 	strd	r3, r3, [r0]
 800632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800632e:	6083      	str	r3, [r0, #8]
 8006330:	8181      	strh	r1, [r0, #12]
 8006332:	6643      	str	r3, [r0, #100]	; 0x64
 8006334:	81c2      	strh	r2, [r0, #14]
 8006336:	6183      	str	r3, [r0, #24]
 8006338:	4619      	mov	r1, r3
 800633a:	2208      	movs	r2, #8
 800633c:	305c      	adds	r0, #92	; 0x5c
 800633e:	f000 f92e 	bl	800659e <memset>
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <std+0x58>)
 8006344:	6224      	str	r4, [r4, #32]
 8006346:	6263      	str	r3, [r4, #36]	; 0x24
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <std+0x5c>)
 800634a:	62a3      	str	r3, [r4, #40]	; 0x28
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <std+0x60>)
 800634e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <std+0x64>)
 8006352:	6323      	str	r3, [r4, #48]	; 0x30
 8006354:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <std+0x68>)
 8006356:	429c      	cmp	r4, r3
 8006358:	d006      	beq.n	8006368 <std+0x48>
 800635a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800635e:	4294      	cmp	r4, r2
 8006360:	d002      	beq.n	8006368 <std+0x48>
 8006362:	33d0      	adds	r3, #208	; 0xd0
 8006364:	429c      	cmp	r4, r3
 8006366:	d105      	bne.n	8006374 <std+0x54>
 8006368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006370:	f000 b992 	b.w	8006698 <__retarget_lock_init_recursive>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	bf00      	nop
 8006378:	080064e5 	.word	0x080064e5
 800637c:	08006507 	.word	0x08006507
 8006380:	0800653f 	.word	0x0800653f
 8006384:	08006563 	.word	0x08006563
 8006388:	20000f28 	.word	0x20000f28

0800638c <stdio_exit_handler>:
 800638c:	4a02      	ldr	r2, [pc, #8]	; (8006398 <stdio_exit_handler+0xc>)
 800638e:	4903      	ldr	r1, [pc, #12]	; (800639c <stdio_exit_handler+0x10>)
 8006390:	4803      	ldr	r0, [pc, #12]	; (80063a0 <stdio_exit_handler+0x14>)
 8006392:	f000 b869 	b.w	8006468 <_fwalk_sglue>
 8006396:	bf00      	nop
 8006398:	2000002c 	.word	0x2000002c
 800639c:	0800804d 	.word	0x0800804d
 80063a0:	20000038 	.word	0x20000038

080063a4 <cleanup_stdio>:
 80063a4:	6841      	ldr	r1, [r0, #4]
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <cleanup_stdio+0x34>)
 80063a8:	b510      	push	{r4, lr}
 80063aa:	4299      	cmp	r1, r3
 80063ac:	4604      	mov	r4, r0
 80063ae:	d001      	beq.n	80063b4 <cleanup_stdio+0x10>
 80063b0:	f001 fe4c 	bl	800804c <_fflush_r>
 80063b4:	68a1      	ldr	r1, [r4, #8]
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <cleanup_stdio+0x38>)
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <cleanup_stdio+0x1e>
 80063bc:	4620      	mov	r0, r4
 80063be:	f001 fe45 	bl	800804c <_fflush_r>
 80063c2:	68e1      	ldr	r1, [r4, #12]
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <cleanup_stdio+0x3c>)
 80063c6:	4299      	cmp	r1, r3
 80063c8:	d004      	beq.n	80063d4 <cleanup_stdio+0x30>
 80063ca:	4620      	mov	r0, r4
 80063cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d0:	f001 be3c 	b.w	800804c <_fflush_r>
 80063d4:	bd10      	pop	{r4, pc}
 80063d6:	bf00      	nop
 80063d8:	20000f28 	.word	0x20000f28
 80063dc:	20000f90 	.word	0x20000f90
 80063e0:	20000ff8 	.word	0x20000ff8

080063e4 <global_stdio_init.part.0>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <global_stdio_init.part.0+0x30>)
 80063e8:	4c0b      	ldr	r4, [pc, #44]	; (8006418 <global_stdio_init.part.0+0x34>)
 80063ea:	4a0c      	ldr	r2, [pc, #48]	; (800641c <global_stdio_init.part.0+0x38>)
 80063ec:	4620      	mov	r0, r4
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	2104      	movs	r1, #4
 80063f2:	2200      	movs	r2, #0
 80063f4:	f7ff ff94 	bl	8006320 <std>
 80063f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063fc:	2201      	movs	r2, #1
 80063fe:	2109      	movs	r1, #9
 8006400:	f7ff ff8e 	bl	8006320 <std>
 8006404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006408:	2202      	movs	r2, #2
 800640a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800640e:	2112      	movs	r1, #18
 8006410:	f7ff bf86 	b.w	8006320 <std>
 8006414:	20001060 	.word	0x20001060
 8006418:	20000f28 	.word	0x20000f28
 800641c:	0800638d 	.word	0x0800638d

08006420 <__sfp_lock_acquire>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__sfp_lock_acquire+0x8>)
 8006422:	f000 b93a 	b.w	800669a <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	20001069 	.word	0x20001069

0800642c <__sfp_lock_release>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__sfp_lock_release+0x8>)
 800642e:	f000 b935 	b.w	800669c <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	20001069 	.word	0x20001069

08006438 <__sinit>:
 8006438:	b510      	push	{r4, lr}
 800643a:	4604      	mov	r4, r0
 800643c:	f7ff fff0 	bl	8006420 <__sfp_lock_acquire>
 8006440:	6a23      	ldr	r3, [r4, #32]
 8006442:	b11b      	cbz	r3, 800644c <__sinit+0x14>
 8006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006448:	f7ff bff0 	b.w	800642c <__sfp_lock_release>
 800644c:	4b04      	ldr	r3, [pc, #16]	; (8006460 <__sinit+0x28>)
 800644e:	6223      	str	r3, [r4, #32]
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <__sinit+0x2c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f5      	bne.n	8006444 <__sinit+0xc>
 8006458:	f7ff ffc4 	bl	80063e4 <global_stdio_init.part.0>
 800645c:	e7f2      	b.n	8006444 <__sinit+0xc>
 800645e:	bf00      	nop
 8006460:	080063a5 	.word	0x080063a5
 8006464:	20001060 	.word	0x20001060

08006468 <_fwalk_sglue>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	4607      	mov	r7, r0
 800646e:	4688      	mov	r8, r1
 8006470:	4614      	mov	r4, r2
 8006472:	2600      	movs	r6, #0
 8006474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006478:	f1b9 0901 	subs.w	r9, r9, #1
 800647c:	d505      	bpl.n	800648a <_fwalk_sglue+0x22>
 800647e:	6824      	ldr	r4, [r4, #0]
 8006480:	2c00      	cmp	r4, #0
 8006482:	d1f7      	bne.n	8006474 <_fwalk_sglue+0xc>
 8006484:	4630      	mov	r0, r6
 8006486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d907      	bls.n	80064a0 <_fwalk_sglue+0x38>
 8006490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006494:	3301      	adds	r3, #1
 8006496:	d003      	beq.n	80064a0 <_fwalk_sglue+0x38>
 8006498:	4629      	mov	r1, r5
 800649a:	4638      	mov	r0, r7
 800649c:	47c0      	blx	r8
 800649e:	4306      	orrs	r6, r0
 80064a0:	3568      	adds	r5, #104	; 0x68
 80064a2:	e7e9      	b.n	8006478 <_fwalk_sglue+0x10>

080064a4 <siprintf>:
 80064a4:	b40e      	push	{r1, r2, r3}
 80064a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064aa:	b500      	push	{lr}
 80064ac:	b09c      	sub	sp, #112	; 0x70
 80064ae:	ab1d      	add	r3, sp, #116	; 0x74
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	9006      	str	r0, [sp, #24]
 80064b4:	9107      	str	r1, [sp, #28]
 80064b6:	9104      	str	r1, [sp, #16]
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <siprintf+0x38>)
 80064ba:	4909      	ldr	r1, [pc, #36]	; (80064e0 <siprintf+0x3c>)
 80064bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c0:	9105      	str	r1, [sp, #20]
 80064c2:	6800      	ldr	r0, [r0, #0]
 80064c4:	a902      	add	r1, sp, #8
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	f001 fc40 	bl	8007d4c <_svfiprintf_r>
 80064cc:	2200      	movs	r2, #0
 80064ce:	9b02      	ldr	r3, [sp, #8]
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	b01c      	add	sp, #112	; 0x70
 80064d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d8:	b003      	add	sp, #12
 80064da:	4770      	bx	lr
 80064dc:	20000084 	.word	0x20000084
 80064e0:	ffff0208 	.word	0xffff0208

080064e4 <__sread>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	460c      	mov	r4, r1
 80064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ec:	f000 f886 	bl	80065fc <_read_r>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	bfab      	itete	ge
 80064f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064f6:	89a3      	ldrhlt	r3, [r4, #12]
 80064f8:	181b      	addge	r3, r3, r0
 80064fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064fe:	bfac      	ite	ge
 8006500:	6563      	strge	r3, [r4, #84]	; 0x54
 8006502:	81a3      	strhlt	r3, [r4, #12]
 8006504:	bd10      	pop	{r4, pc}

08006506 <__swrite>:
 8006506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650a:	461f      	mov	r7, r3
 800650c:	898b      	ldrh	r3, [r1, #12]
 800650e:	4605      	mov	r5, r0
 8006510:	05db      	lsls	r3, r3, #23
 8006512:	460c      	mov	r4, r1
 8006514:	4616      	mov	r6, r2
 8006516:	d505      	bpl.n	8006524 <__swrite+0x1e>
 8006518:	2302      	movs	r3, #2
 800651a:	2200      	movs	r2, #0
 800651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006520:	f000 f85a 	bl	80065d8 <_lseek_r>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	4632      	mov	r2, r6
 8006528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	4628      	mov	r0, r5
 8006530:	463b      	mov	r3, r7
 8006532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	f000 b871 	b.w	8006620 <_write_r>

0800653e <__sseek>:
 800653e:	b510      	push	{r4, lr}
 8006540:	460c      	mov	r4, r1
 8006542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006546:	f000 f847 	bl	80065d8 <_lseek_r>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	bf15      	itete	ne
 8006550:	6560      	strne	r0, [r4, #84]	; 0x54
 8006552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800655a:	81a3      	strheq	r3, [r4, #12]
 800655c:	bf18      	it	ne
 800655e:	81a3      	strhne	r3, [r4, #12]
 8006560:	bd10      	pop	{r4, pc}

08006562 <__sclose>:
 8006562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006566:	f000 b827 	b.w	80065b8 <_close_r>

0800656a <memmove>:
 800656a:	4288      	cmp	r0, r1
 800656c:	b510      	push	{r4, lr}
 800656e:	eb01 0402 	add.w	r4, r1, r2
 8006572:	d902      	bls.n	800657a <memmove+0x10>
 8006574:	4284      	cmp	r4, r0
 8006576:	4623      	mov	r3, r4
 8006578:	d807      	bhi.n	800658a <memmove+0x20>
 800657a:	1e43      	subs	r3, r0, #1
 800657c:	42a1      	cmp	r1, r4
 800657e:	d008      	beq.n	8006592 <memmove+0x28>
 8006580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006584:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006588:	e7f8      	b.n	800657c <memmove+0x12>
 800658a:	4601      	mov	r1, r0
 800658c:	4402      	add	r2, r0
 800658e:	428a      	cmp	r2, r1
 8006590:	d100      	bne.n	8006594 <memmove+0x2a>
 8006592:	bd10      	pop	{r4, pc}
 8006594:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006598:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800659c:	e7f7      	b.n	800658e <memmove+0x24>

0800659e <memset>:
 800659e:	4603      	mov	r3, r0
 80065a0:	4402      	add	r2, r0
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d100      	bne.n	80065a8 <memset+0xa>
 80065a6:	4770      	bx	lr
 80065a8:	f803 1b01 	strb.w	r1, [r3], #1
 80065ac:	e7f9      	b.n	80065a2 <memset+0x4>
	...

080065b0 <_localeconv_r>:
 80065b0:	4800      	ldr	r0, [pc, #0]	; (80065b4 <_localeconv_r+0x4>)
 80065b2:	4770      	bx	lr
 80065b4:	20000178 	.word	0x20000178

080065b8 <_close_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	2300      	movs	r3, #0
 80065bc:	4d05      	ldr	r5, [pc, #20]	; (80065d4 <_close_r+0x1c>)
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fc fae6 	bl	8002b94 <_close>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_close_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_close_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	20001064 	.word	0x20001064

080065d8 <_lseek_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	2200      	movs	r2, #0
 80065e2:	4d05      	ldr	r5, [pc, #20]	; (80065f8 <_lseek_r+0x20>)
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f7fc faf8 	bl	8002bdc <_lseek>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_lseek_r+0x1e>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_lseek_r+0x1e>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20001064 	.word	0x20001064

080065fc <_read_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4604      	mov	r4, r0
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	2200      	movs	r2, #0
 8006606:	4d05      	ldr	r5, [pc, #20]	; (800661c <_read_r+0x20>)
 8006608:	602a      	str	r2, [r5, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	f7fc fa89 	bl	8002b22 <_read>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_read_r+0x1e>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_read_r+0x1e>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20001064 	.word	0x20001064

08006620 <_write_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	2200      	movs	r2, #0
 800662a:	4d05      	ldr	r5, [pc, #20]	; (8006640 <_write_r+0x20>)
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f7fc fa94 	bl	8002b5c <_write>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_write_r+0x1e>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_write_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	20001064 	.word	0x20001064

08006644 <__errno>:
 8006644:	4b01      	ldr	r3, [pc, #4]	; (800664c <__errno+0x8>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000084 	.word	0x20000084

08006650 <__libc_init_array>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	2600      	movs	r6, #0
 8006654:	4d0c      	ldr	r5, [pc, #48]	; (8006688 <__libc_init_array+0x38>)
 8006656:	4c0d      	ldr	r4, [pc, #52]	; (800668c <__libc_init_array+0x3c>)
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	42a6      	cmp	r6, r4
 800665e:	d109      	bne.n	8006674 <__libc_init_array+0x24>
 8006660:	f002 f86c 	bl	800873c <_init>
 8006664:	2600      	movs	r6, #0
 8006666:	4d0a      	ldr	r5, [pc, #40]	; (8006690 <__libc_init_array+0x40>)
 8006668:	4c0a      	ldr	r4, [pc, #40]	; (8006694 <__libc_init_array+0x44>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	42a6      	cmp	r6, r4
 8006670:	d105      	bne.n	800667e <__libc_init_array+0x2e>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	f855 3b04 	ldr.w	r3, [r5], #4
 8006678:	4798      	blx	r3
 800667a:	3601      	adds	r6, #1
 800667c:	e7ee      	b.n	800665c <__libc_init_array+0xc>
 800667e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006682:	4798      	blx	r3
 8006684:	3601      	adds	r6, #1
 8006686:	e7f2      	b.n	800666e <__libc_init_array+0x1e>
 8006688:	0800a6dc 	.word	0x0800a6dc
 800668c:	0800a6dc 	.word	0x0800a6dc
 8006690:	0800a6dc 	.word	0x0800a6dc
 8006694:	0800a6e0 	.word	0x0800a6e0

08006698 <__retarget_lock_init_recursive>:
 8006698:	4770      	bx	lr

0800669a <__retarget_lock_acquire_recursive>:
 800669a:	4770      	bx	lr

0800669c <__retarget_lock_release_recursive>:
 800669c:	4770      	bx	lr

0800669e <memchr>:
 800669e:	4603      	mov	r3, r0
 80066a0:	b510      	push	{r4, lr}
 80066a2:	b2c9      	uxtb	r1, r1
 80066a4:	4402      	add	r2, r0
 80066a6:	4293      	cmp	r3, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	d101      	bne.n	80066b0 <memchr+0x12>
 80066ac:	2000      	movs	r0, #0
 80066ae:	e003      	b.n	80066b8 <memchr+0x1a>
 80066b0:	7804      	ldrb	r4, [r0, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	428c      	cmp	r4, r1
 80066b6:	d1f6      	bne.n	80066a6 <memchr+0x8>
 80066b8:	bd10      	pop	{r4, pc}

080066ba <memcpy>:
 80066ba:	440a      	add	r2, r1
 80066bc:	4291      	cmp	r1, r2
 80066be:	f100 33ff 	add.w	r3, r0, #4294967295
 80066c2:	d100      	bne.n	80066c6 <memcpy+0xc>
 80066c4:	4770      	bx	lr
 80066c6:	b510      	push	{r4, lr}
 80066c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066cc:	4291      	cmp	r1, r2
 80066ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d2:	d1f9      	bne.n	80066c8 <memcpy+0xe>
 80066d4:	bd10      	pop	{r4, pc}

080066d6 <quorem>:
 80066d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	6903      	ldr	r3, [r0, #16]
 80066dc:	690c      	ldr	r4, [r1, #16]
 80066de:	4607      	mov	r7, r0
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	db7f      	blt.n	80067e4 <quorem+0x10e>
 80066e4:	3c01      	subs	r4, #1
 80066e6:	f100 0514 	add.w	r5, r0, #20
 80066ea:	f101 0814 	add.w	r8, r1, #20
 80066ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066fc:	3301      	adds	r3, #1
 80066fe:	429a      	cmp	r2, r3
 8006700:	fbb2 f6f3 	udiv	r6, r2, r3
 8006704:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800670c:	d331      	bcc.n	8006772 <quorem+0x9c>
 800670e:	f04f 0e00 	mov.w	lr, #0
 8006712:	4640      	mov	r0, r8
 8006714:	46ac      	mov	ip, r5
 8006716:	46f2      	mov	sl, lr
 8006718:	f850 2b04 	ldr.w	r2, [r0], #4
 800671c:	b293      	uxth	r3, r2
 800671e:	fb06 e303 	mla	r3, r6, r3, lr
 8006722:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006726:	0c1a      	lsrs	r2, r3, #16
 8006728:	b29b      	uxth	r3, r3
 800672a:	fb06 220e 	mla	r2, r6, lr, r2
 800672e:	ebaa 0303 	sub.w	r3, sl, r3
 8006732:	f8dc a000 	ldr.w	sl, [ip]
 8006736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800673a:	fa1f fa8a 	uxth.w	sl, sl
 800673e:	4453      	add	r3, sl
 8006740:	f8dc a000 	ldr.w	sl, [ip]
 8006744:	b292      	uxth	r2, r2
 8006746:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800674a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800674e:	b29b      	uxth	r3, r3
 8006750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006754:	4581      	cmp	r9, r0
 8006756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800675a:	f84c 3b04 	str.w	r3, [ip], #4
 800675e:	d2db      	bcs.n	8006718 <quorem+0x42>
 8006760:	f855 300b 	ldr.w	r3, [r5, fp]
 8006764:	b92b      	cbnz	r3, 8006772 <quorem+0x9c>
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	3b04      	subs	r3, #4
 800676a:	429d      	cmp	r5, r3
 800676c:	461a      	mov	r2, r3
 800676e:	d32d      	bcc.n	80067cc <quorem+0xf6>
 8006770:	613c      	str	r4, [r7, #16]
 8006772:	4638      	mov	r0, r7
 8006774:	f001 f992 	bl	8007a9c <__mcmp>
 8006778:	2800      	cmp	r0, #0
 800677a:	db23      	blt.n	80067c4 <quorem+0xee>
 800677c:	4629      	mov	r1, r5
 800677e:	2000      	movs	r0, #0
 8006780:	3601      	adds	r6, #1
 8006782:	f858 2b04 	ldr.w	r2, [r8], #4
 8006786:	f8d1 c000 	ldr.w	ip, [r1]
 800678a:	b293      	uxth	r3, r2
 800678c:	1ac3      	subs	r3, r0, r3
 800678e:	0c12      	lsrs	r2, r2, #16
 8006790:	fa1f f08c 	uxth.w	r0, ip
 8006794:	4403      	add	r3, r0
 8006796:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800679a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067a4:	45c1      	cmp	r9, r8
 80067a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067aa:	f841 3b04 	str.w	r3, [r1], #4
 80067ae:	d2e8      	bcs.n	8006782 <quorem+0xac>
 80067b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067b8:	b922      	cbnz	r2, 80067c4 <quorem+0xee>
 80067ba:	3b04      	subs	r3, #4
 80067bc:	429d      	cmp	r5, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	d30a      	bcc.n	80067d8 <quorem+0x102>
 80067c2:	613c      	str	r4, [r7, #16]
 80067c4:	4630      	mov	r0, r6
 80067c6:	b003      	add	sp, #12
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	3b04      	subs	r3, #4
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	d1cd      	bne.n	8006770 <quorem+0x9a>
 80067d4:	3c01      	subs	r4, #1
 80067d6:	e7c8      	b.n	800676a <quorem+0x94>
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	3b04      	subs	r3, #4
 80067dc:	2a00      	cmp	r2, #0
 80067de:	d1f0      	bne.n	80067c2 <quorem+0xec>
 80067e0:	3c01      	subs	r4, #1
 80067e2:	e7eb      	b.n	80067bc <quorem+0xe6>
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7ee      	b.n	80067c6 <quorem+0xf0>

080067e8 <_dtoa_r>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	4616      	mov	r6, r2
 80067ee:	461f      	mov	r7, r3
 80067f0:	69c4      	ldr	r4, [r0, #28]
 80067f2:	b099      	sub	sp, #100	; 0x64
 80067f4:	4605      	mov	r5, r0
 80067f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80067fe:	b974      	cbnz	r4, 800681e <_dtoa_r+0x36>
 8006800:	2010      	movs	r0, #16
 8006802:	f000 fe1d 	bl	8007440 <malloc>
 8006806:	4602      	mov	r2, r0
 8006808:	61e8      	str	r0, [r5, #28]
 800680a:	b920      	cbnz	r0, 8006816 <_dtoa_r+0x2e>
 800680c:	21ef      	movs	r1, #239	; 0xef
 800680e:	4bac      	ldr	r3, [pc, #688]	; (8006ac0 <_dtoa_r+0x2d8>)
 8006810:	48ac      	ldr	r0, [pc, #688]	; (8006ac4 <_dtoa_r+0x2dc>)
 8006812:	f001 fc53 	bl	80080bc <__assert_func>
 8006816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800681a:	6004      	str	r4, [r0, #0]
 800681c:	60c4      	str	r4, [r0, #12]
 800681e:	69eb      	ldr	r3, [r5, #28]
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	b151      	cbz	r1, 800683a <_dtoa_r+0x52>
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	2301      	movs	r3, #1
 8006828:	4093      	lsls	r3, r2
 800682a:	604a      	str	r2, [r1, #4]
 800682c:	608b      	str	r3, [r1, #8]
 800682e:	4628      	mov	r0, r5
 8006830:	f000 fefa 	bl	8007628 <_Bfree>
 8006834:	2200      	movs	r2, #0
 8006836:	69eb      	ldr	r3, [r5, #28]
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	1e3b      	subs	r3, r7, #0
 800683c:	bfaf      	iteee	ge
 800683e:	2300      	movge	r3, #0
 8006840:	2201      	movlt	r2, #1
 8006842:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006846:	9305      	strlt	r3, [sp, #20]
 8006848:	bfa8      	it	ge
 800684a:	f8c8 3000 	strge.w	r3, [r8]
 800684e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006852:	4b9d      	ldr	r3, [pc, #628]	; (8006ac8 <_dtoa_r+0x2e0>)
 8006854:	bfb8      	it	lt
 8006856:	f8c8 2000 	strlt.w	r2, [r8]
 800685a:	ea33 0309 	bics.w	r3, r3, r9
 800685e:	d119      	bne.n	8006894 <_dtoa_r+0xac>
 8006860:	f242 730f 	movw	r3, #9999	; 0x270f
 8006864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800686c:	4333      	orrs	r3, r6
 800686e:	f000 8589 	beq.w	8007384 <_dtoa_r+0xb9c>
 8006872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006874:	b953      	cbnz	r3, 800688c <_dtoa_r+0xa4>
 8006876:	4b95      	ldr	r3, [pc, #596]	; (8006acc <_dtoa_r+0x2e4>)
 8006878:	e023      	b.n	80068c2 <_dtoa_r+0xda>
 800687a:	4b95      	ldr	r3, [pc, #596]	; (8006ad0 <_dtoa_r+0x2e8>)
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	3308      	adds	r3, #8
 8006880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	9803      	ldr	r0, [sp, #12]
 8006886:	b019      	add	sp, #100	; 0x64
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	4b8f      	ldr	r3, [pc, #572]	; (8006acc <_dtoa_r+0x2e4>)
 800688e:	9303      	str	r3, [sp, #12]
 8006890:	3303      	adds	r3, #3
 8006892:	e7f5      	b.n	8006880 <_dtoa_r+0x98>
 8006894:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006898:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800689c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	f7fa f880 	bl	80009a8 <__aeabi_dcmpeq>
 80068a8:	4680      	mov	r8, r0
 80068aa:	b160      	cbz	r0, 80068c6 <_dtoa_r+0xde>
 80068ac:	2301      	movs	r3, #1
 80068ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8562 	beq.w	800737e <_dtoa_r+0xb96>
 80068ba:	4b86      	ldr	r3, [pc, #536]	; (8006ad4 <_dtoa_r+0x2ec>)
 80068bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	9303      	str	r3, [sp, #12]
 80068c4:	e7de      	b.n	8006884 <_dtoa_r+0x9c>
 80068c6:	ab16      	add	r3, sp, #88	; 0x58
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	ab17      	add	r3, sp, #92	; 0x5c
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	4628      	mov	r0, r5
 80068d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068d4:	f001 f98a 	bl	8007bec <__d2b>
 80068d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068dc:	4682      	mov	sl, r0
 80068de:	2c00      	cmp	r4, #0
 80068e0:	d07e      	beq.n	80069e0 <_dtoa_r+0x1f8>
 80068e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80068ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80068f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80068f8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80068fc:	4619      	mov	r1, r3
 80068fe:	2200      	movs	r2, #0
 8006900:	4b75      	ldr	r3, [pc, #468]	; (8006ad8 <_dtoa_r+0x2f0>)
 8006902:	f7f9 fc31 	bl	8000168 <__aeabi_dsub>
 8006906:	a368      	add	r3, pc, #416	; (adr r3, 8006aa8 <_dtoa_r+0x2c0>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7f9 fde4 	bl	80004d8 <__aeabi_dmul>
 8006910:	a367      	add	r3, pc, #412	; (adr r3, 8006ab0 <_dtoa_r+0x2c8>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fc29 	bl	800016c <__adddf3>
 800691a:	4606      	mov	r6, r0
 800691c:	4620      	mov	r0, r4
 800691e:	460f      	mov	r7, r1
 8006920:	f7f9 fd70 	bl	8000404 <__aeabi_i2d>
 8006924:	a364      	add	r3, pc, #400	; (adr r3, 8006ab8 <_dtoa_r+0x2d0>)
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f7f9 fdd5 	bl	80004d8 <__aeabi_dmul>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7f9 fc19 	bl	800016c <__adddf3>
 800693a:	4606      	mov	r6, r0
 800693c:	460f      	mov	r7, r1
 800693e:	f7fa f87b 	bl	8000a38 <__aeabi_d2iz>
 8006942:	2200      	movs	r2, #0
 8006944:	4683      	mov	fp, r0
 8006946:	2300      	movs	r3, #0
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7fa f836 	bl	80009bc <__aeabi_dcmplt>
 8006950:	b148      	cbz	r0, 8006966 <_dtoa_r+0x17e>
 8006952:	4658      	mov	r0, fp
 8006954:	f7f9 fd56 	bl	8000404 <__aeabi_i2d>
 8006958:	4632      	mov	r2, r6
 800695a:	463b      	mov	r3, r7
 800695c:	f7fa f824 	bl	80009a8 <__aeabi_dcmpeq>
 8006960:	b908      	cbnz	r0, 8006966 <_dtoa_r+0x17e>
 8006962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006966:	f1bb 0f16 	cmp.w	fp, #22
 800696a:	d857      	bhi.n	8006a1c <_dtoa_r+0x234>
 800696c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006970:	4b5a      	ldr	r3, [pc, #360]	; (8006adc <_dtoa_r+0x2f4>)
 8006972:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f7fa f81f 	bl	80009bc <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	d04e      	beq.n	8006a20 <_dtoa_r+0x238>
 8006982:	2300      	movs	r3, #0
 8006984:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006988:	930f      	str	r3, [sp, #60]	; 0x3c
 800698a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800698c:	1b1b      	subs	r3, r3, r4
 800698e:	1e5a      	subs	r2, r3, #1
 8006990:	bf46      	itte	mi
 8006992:	f1c3 0901 	rsbmi	r9, r3, #1
 8006996:	2300      	movmi	r3, #0
 8006998:	f04f 0900 	movpl.w	r9, #0
 800699c:	9209      	str	r2, [sp, #36]	; 0x24
 800699e:	bf48      	it	mi
 80069a0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80069a2:	f1bb 0f00 	cmp.w	fp, #0
 80069a6:	db3d      	blt.n	8006a24 <_dtoa_r+0x23c>
 80069a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069aa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80069ae:	445b      	add	r3, fp
 80069b0:	9309      	str	r3, [sp, #36]	; 0x24
 80069b2:	2300      	movs	r3, #0
 80069b4:	930a      	str	r3, [sp, #40]	; 0x28
 80069b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069b8:	2b09      	cmp	r3, #9
 80069ba:	d867      	bhi.n	8006a8c <_dtoa_r+0x2a4>
 80069bc:	2b05      	cmp	r3, #5
 80069be:	bfc4      	itt	gt
 80069c0:	3b04      	subgt	r3, #4
 80069c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80069c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c6:	bfc8      	it	gt
 80069c8:	2400      	movgt	r4, #0
 80069ca:	f1a3 0302 	sub.w	r3, r3, #2
 80069ce:	bfd8      	it	le
 80069d0:	2401      	movle	r4, #1
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	f200 8086 	bhi.w	8006ae4 <_dtoa_r+0x2fc>
 80069d8:	e8df f003 	tbb	[pc, r3]
 80069dc:	5637392c 	.word	0x5637392c
 80069e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80069e4:	441c      	add	r4, r3
 80069e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	bfc1      	itttt	gt
 80069ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069f2:	fa09 f903 	lslgt.w	r9, r9, r3
 80069f6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80069fa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80069fe:	bfd6      	itet	le
 8006a00:	f1c3 0320 	rsble	r3, r3, #32
 8006a04:	ea49 0003 	orrgt.w	r0, r9, r3
 8006a08:	fa06 f003 	lslle.w	r0, r6, r3
 8006a0c:	f7f9 fcea 	bl	80003e4 <__aeabi_ui2d>
 8006a10:	2201      	movs	r2, #1
 8006a12:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006a16:	3c01      	subs	r4, #1
 8006a18:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a1a:	e76f      	b.n	80068fc <_dtoa_r+0x114>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e7b3      	b.n	8006988 <_dtoa_r+0x1a0>
 8006a20:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a22:	e7b2      	b.n	800698a <_dtoa_r+0x1a2>
 8006a24:	f1cb 0300 	rsb	r3, fp, #0
 8006a28:	930a      	str	r3, [sp, #40]	; 0x28
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	eba9 090b 	sub.w	r9, r9, fp
 8006a30:	930e      	str	r3, [sp, #56]	; 0x38
 8006a32:	e7c0      	b.n	80069b6 <_dtoa_r+0x1ce>
 8006a34:	2300      	movs	r3, #0
 8006a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dc55      	bgt.n	8006aea <_dtoa_r+0x302>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	461a      	mov	r2, r3
 8006a42:	9306      	str	r3, [sp, #24]
 8006a44:	9308      	str	r3, [sp, #32]
 8006a46:	9223      	str	r2, [sp, #140]	; 0x8c
 8006a48:	e00b      	b.n	8006a62 <_dtoa_r+0x27a>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7f3      	b.n	8006a36 <_dtoa_r+0x24e>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a54:	445b      	add	r3, fp
 8006a56:	9306      	str	r3, [sp, #24]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	9308      	str	r3, [sp, #32]
 8006a5e:	bfb8      	it	lt
 8006a60:	2301      	movlt	r3, #1
 8006a62:	2100      	movs	r1, #0
 8006a64:	2204      	movs	r2, #4
 8006a66:	69e8      	ldr	r0, [r5, #28]
 8006a68:	f102 0614 	add.w	r6, r2, #20
 8006a6c:	429e      	cmp	r6, r3
 8006a6e:	d940      	bls.n	8006af2 <_dtoa_r+0x30a>
 8006a70:	6041      	str	r1, [r0, #4]
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 fd98 	bl	80075a8 <_Balloc>
 8006a78:	9003      	str	r0, [sp, #12]
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d13c      	bne.n	8006af8 <_dtoa_r+0x310>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f240 11af 	movw	r1, #431	; 0x1af
 8006a84:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <_dtoa_r+0x2f8>)
 8006a86:	e6c3      	b.n	8006810 <_dtoa_r+0x28>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e7e1      	b.n	8006a50 <_dtoa_r+0x268>
 8006a8c:	2401      	movs	r4, #1
 8006a8e:	2300      	movs	r3, #0
 8006a90:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a92:	9322      	str	r3, [sp, #136]	; 0x88
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295
 8006a98:	2200      	movs	r2, #0
 8006a9a:	9306      	str	r3, [sp, #24]
 8006a9c:	9308      	str	r3, [sp, #32]
 8006a9e:	2312      	movs	r3, #18
 8006aa0:	e7d1      	b.n	8006a46 <_dtoa_r+0x25e>
 8006aa2:	bf00      	nop
 8006aa4:	f3af 8000 	nop.w
 8006aa8:	636f4361 	.word	0x636f4361
 8006aac:	3fd287a7 	.word	0x3fd287a7
 8006ab0:	8b60c8b3 	.word	0x8b60c8b3
 8006ab4:	3fc68a28 	.word	0x3fc68a28
 8006ab8:	509f79fb 	.word	0x509f79fb
 8006abc:	3fd34413 	.word	0x3fd34413
 8006ac0:	0800a3af 	.word	0x0800a3af
 8006ac4:	0800a3c6 	.word	0x0800a3c6
 8006ac8:	7ff00000 	.word	0x7ff00000
 8006acc:	0800a3ab 	.word	0x0800a3ab
 8006ad0:	0800a3a2 	.word	0x0800a3a2
 8006ad4:	0800a37f 	.word	0x0800a37f
 8006ad8:	3ff80000 	.word	0x3ff80000
 8006adc:	0800a4b0 	.word	0x0800a4b0
 8006ae0:	0800a41e 	.word	0x0800a41e
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae8:	e7d4      	b.n	8006a94 <_dtoa_r+0x2ac>
 8006aea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	9308      	str	r3, [sp, #32]
 8006af0:	e7b7      	b.n	8006a62 <_dtoa_r+0x27a>
 8006af2:	3101      	adds	r1, #1
 8006af4:	0052      	lsls	r2, r2, #1
 8006af6:	e7b7      	b.n	8006a68 <_dtoa_r+0x280>
 8006af8:	69eb      	ldr	r3, [r5, #28]
 8006afa:	9a03      	ldr	r2, [sp, #12]
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	9b08      	ldr	r3, [sp, #32]
 8006b00:	2b0e      	cmp	r3, #14
 8006b02:	f200 80a8 	bhi.w	8006c56 <_dtoa_r+0x46e>
 8006b06:	2c00      	cmp	r4, #0
 8006b08:	f000 80a5 	beq.w	8006c56 <_dtoa_r+0x46e>
 8006b0c:	f1bb 0f00 	cmp.w	fp, #0
 8006b10:	dd34      	ble.n	8006b7c <_dtoa_r+0x394>
 8006b12:	4b9a      	ldr	r3, [pc, #616]	; (8006d7c <_dtoa_r+0x594>)
 8006b14:	f00b 020f 	and.w	r2, fp, #15
 8006b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b28:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006b2c:	d016      	beq.n	8006b5c <_dtoa_r+0x374>
 8006b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b32:	4b93      	ldr	r3, [pc, #588]	; (8006d80 <_dtoa_r+0x598>)
 8006b34:	2703      	movs	r7, #3
 8006b36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b3a:	f7f9 fdf7 	bl	800072c <__aeabi_ddiv>
 8006b3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b42:	f004 040f 	and.w	r4, r4, #15
 8006b46:	4e8e      	ldr	r6, [pc, #568]	; (8006d80 <_dtoa_r+0x598>)
 8006b48:	b954      	cbnz	r4, 8006b60 <_dtoa_r+0x378>
 8006b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b52:	f7f9 fdeb 	bl	800072c <__aeabi_ddiv>
 8006b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b5a:	e029      	b.n	8006bb0 <_dtoa_r+0x3c8>
 8006b5c:	2702      	movs	r7, #2
 8006b5e:	e7f2      	b.n	8006b46 <_dtoa_r+0x35e>
 8006b60:	07e1      	lsls	r1, r4, #31
 8006b62:	d508      	bpl.n	8006b76 <_dtoa_r+0x38e>
 8006b64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b6c:	f7f9 fcb4 	bl	80004d8 <__aeabi_dmul>
 8006b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b74:	3701      	adds	r7, #1
 8006b76:	1064      	asrs	r4, r4, #1
 8006b78:	3608      	adds	r6, #8
 8006b7a:	e7e5      	b.n	8006b48 <_dtoa_r+0x360>
 8006b7c:	f000 80a5 	beq.w	8006cca <_dtoa_r+0x4e2>
 8006b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b84:	f1cb 0400 	rsb	r4, fp, #0
 8006b88:	4b7c      	ldr	r3, [pc, #496]	; (8006d7c <_dtoa_r+0x594>)
 8006b8a:	f004 020f 	and.w	r2, r4, #15
 8006b8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fc9f 	bl	80004d8 <__aeabi_dmul>
 8006b9a:	2702      	movs	r7, #2
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ba2:	4e77      	ldr	r6, [pc, #476]	; (8006d80 <_dtoa_r+0x598>)
 8006ba4:	1124      	asrs	r4, r4, #4
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	f040 8084 	bne.w	8006cb4 <_dtoa_r+0x4cc>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1d2      	bne.n	8006b56 <_dtoa_r+0x36e>
 8006bb0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006bb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8087 	beq.w	8006cce <_dtoa_r+0x4e6>
 8006bc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4b6f      	ldr	r3, [pc, #444]	; (8006d84 <_dtoa_r+0x59c>)
 8006bc8:	f7f9 fef8 	bl	80009bc <__aeabi_dcmplt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d07e      	beq.n	8006cce <_dtoa_r+0x4e6>
 8006bd0:	9b08      	ldr	r3, [sp, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d07b      	beq.n	8006cce <_dtoa_r+0x4e6>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dd38      	ble.n	8006c4e <_dtoa_r+0x466>
 8006bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006be0:	2200      	movs	r2, #0
 8006be2:	4b69      	ldr	r3, [pc, #420]	; (8006d88 <_dtoa_r+0x5a0>)
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bec:	9c06      	ldr	r4, [sp, #24]
 8006bee:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7f9 fc05 	bl	8000404 <__aeabi_i2d>
 8006bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bfe:	f7f9 fc6b 	bl	80004d8 <__aeabi_dmul>
 8006c02:	2200      	movs	r2, #0
 8006c04:	4b61      	ldr	r3, [pc, #388]	; (8006d8c <_dtoa_r+0x5a4>)
 8006c06:	f7f9 fab1 	bl	800016c <__adddf3>
 8006c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c12:	9611      	str	r6, [sp, #68]	; 0x44
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	d15d      	bne.n	8006cd4 <_dtoa_r+0x4ec>
 8006c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4b5c      	ldr	r3, [pc, #368]	; (8006d90 <_dtoa_r+0x5a8>)
 8006c20:	f7f9 faa2 	bl	8000168 <__aeabi_dsub>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c2c:	4633      	mov	r3, r6
 8006c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c30:	f7f9 fee2 	bl	80009f8 <__aeabi_dcmpgt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f040 8295 	bne.w	8007164 <_dtoa_r+0x97c>
 8006c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c44:	f7f9 feba 	bl	80009bc <__aeabi_dcmplt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f040 8289 	bne.w	8007160 <_dtoa_r+0x978>
 8006c4e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006c52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f2c0 8151 	blt.w	8006f00 <_dtoa_r+0x718>
 8006c5e:	f1bb 0f0e 	cmp.w	fp, #14
 8006c62:	f300 814d 	bgt.w	8006f00 <_dtoa_r+0x718>
 8006c66:	4b45      	ldr	r3, [pc, #276]	; (8006d7c <_dtoa_r+0x594>)
 8006c68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c70:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f280 80da 	bge.w	8006e30 <_dtoa_r+0x648>
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f300 80d6 	bgt.w	8006e30 <_dtoa_r+0x648>
 8006c84:	f040 826b 	bne.w	800715e <_dtoa_r+0x976>
 8006c88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4b40      	ldr	r3, [pc, #256]	; (8006d90 <_dtoa_r+0x5a8>)
 8006c90:	f7f9 fc22 	bl	80004d8 <__aeabi_dmul>
 8006c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c98:	f7f9 fea4 	bl	80009e4 <__aeabi_dcmpge>
 8006c9c:	9c08      	ldr	r4, [sp, #32]
 8006c9e:	4626      	mov	r6, r4
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	f040 8241 	bne.w	8007128 <_dtoa_r+0x940>
 8006ca6:	2331      	movs	r3, #49	; 0x31
 8006ca8:	9f03      	ldr	r7, [sp, #12]
 8006caa:	f10b 0b01 	add.w	fp, fp, #1
 8006cae:	f807 3b01 	strb.w	r3, [r7], #1
 8006cb2:	e23d      	b.n	8007130 <_dtoa_r+0x948>
 8006cb4:	07e2      	lsls	r2, r4, #31
 8006cb6:	d505      	bpl.n	8006cc4 <_dtoa_r+0x4dc>
 8006cb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cbc:	f7f9 fc0c 	bl	80004d8 <__aeabi_dmul>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	3701      	adds	r7, #1
 8006cc4:	1064      	asrs	r4, r4, #1
 8006cc6:	3608      	adds	r6, #8
 8006cc8:	e76d      	b.n	8006ba6 <_dtoa_r+0x3be>
 8006cca:	2702      	movs	r7, #2
 8006ccc:	e770      	b.n	8006bb0 <_dtoa_r+0x3c8>
 8006cce:	46d8      	mov	r8, fp
 8006cd0:	9c08      	ldr	r4, [sp, #32]
 8006cd2:	e78f      	b.n	8006bf4 <_dtoa_r+0x40c>
 8006cd4:	9903      	ldr	r1, [sp, #12]
 8006cd6:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <_dtoa_r+0x594>)
 8006cd8:	4421      	add	r1, r4
 8006cda:	9112      	str	r1, [sp, #72]	; 0x48
 8006cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ce2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ce6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cea:	2900      	cmp	r1, #0
 8006cec:	d054      	beq.n	8006d98 <_dtoa_r+0x5b0>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	4928      	ldr	r1, [pc, #160]	; (8006d94 <_dtoa_r+0x5ac>)
 8006cf2:	f7f9 fd1b 	bl	800072c <__aeabi_ddiv>
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	f7f9 fa35 	bl	8000168 <__aeabi_dsub>
 8006cfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d02:	9f03      	ldr	r7, [sp, #12]
 8006d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d08:	f7f9 fe96 	bl	8000a38 <__aeabi_d2iz>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	f7f9 fb79 	bl	8000404 <__aeabi_i2d>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d1a:	f7f9 fa25 	bl	8000168 <__aeabi_dsub>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	3430      	adds	r4, #48	; 0x30
 8006d24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d2c:	f807 4b01 	strb.w	r4, [r7], #1
 8006d30:	f7f9 fe44 	bl	80009bc <__aeabi_dcmplt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d173      	bne.n	8006e20 <_dtoa_r+0x638>
 8006d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	4911      	ldr	r1, [pc, #68]	; (8006d84 <_dtoa_r+0x59c>)
 8006d40:	f7f9 fa12 	bl	8000168 <__aeabi_dsub>
 8006d44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d48:	f7f9 fe38 	bl	80009bc <__aeabi_dcmplt>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f040 80b6 	bne.w	8006ebe <_dtoa_r+0x6d6>
 8006d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d54:	429f      	cmp	r7, r3
 8006d56:	f43f af7a 	beq.w	8006c4e <_dtoa_r+0x466>
 8006d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <_dtoa_r+0x5a0>)
 8006d62:	f7f9 fbb9 	bl	80004d8 <__aeabi_dmul>
 8006d66:	2200      	movs	r2, #0
 8006d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <_dtoa_r+0x5a0>)
 8006d72:	f7f9 fbb1 	bl	80004d8 <__aeabi_dmul>
 8006d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7a:	e7c3      	b.n	8006d04 <_dtoa_r+0x51c>
 8006d7c:	0800a4b0 	.word	0x0800a4b0
 8006d80:	0800a488 	.word	0x0800a488
 8006d84:	3ff00000 	.word	0x3ff00000
 8006d88:	40240000 	.word	0x40240000
 8006d8c:	401c0000 	.word	0x401c0000
 8006d90:	40140000 	.word	0x40140000
 8006d94:	3fe00000 	.word	0x3fe00000
 8006d98:	4630      	mov	r0, r6
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	f7f9 fb9c 	bl	80004d8 <__aeabi_dmul>
 8006da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006da2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006da6:	9c03      	ldr	r4, [sp, #12]
 8006da8:	9314      	str	r3, [sp, #80]	; 0x50
 8006daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dae:	f7f9 fe43 	bl	8000a38 <__aeabi_d2iz>
 8006db2:	9015      	str	r0, [sp, #84]	; 0x54
 8006db4:	f7f9 fb26 	bl	8000404 <__aeabi_i2d>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dc0:	f7f9 f9d2 	bl	8000168 <__aeabi_dsub>
 8006dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	3330      	adds	r3, #48	; 0x30
 8006dca:	f804 3b01 	strb.w	r3, [r4], #1
 8006dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	d124      	bne.n	8006e24 <_dtoa_r+0x63c>
 8006dda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dde:	4baf      	ldr	r3, [pc, #700]	; (800709c <_dtoa_r+0x8b4>)
 8006de0:	f7f9 f9c4 	bl	800016c <__adddf3>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4630      	mov	r0, r6
 8006dea:	4639      	mov	r1, r7
 8006dec:	f7f9 fe04 	bl	80009f8 <__aeabi_dcmpgt>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d163      	bne.n	8006ebc <_dtoa_r+0x6d4>
 8006df4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006df8:	2000      	movs	r0, #0
 8006dfa:	49a8      	ldr	r1, [pc, #672]	; (800709c <_dtoa_r+0x8b4>)
 8006dfc:	f7f9 f9b4 	bl	8000168 <__aeabi_dsub>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7f9 fdd8 	bl	80009bc <__aeabi_dcmplt>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f43f af1e 	beq.w	8006c4e <_dtoa_r+0x466>
 8006e12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e14:	1e7b      	subs	r3, r7, #1
 8006e16:	9314      	str	r3, [sp, #80]	; 0x50
 8006e18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e1c:	2b30      	cmp	r3, #48	; 0x30
 8006e1e:	d0f8      	beq.n	8006e12 <_dtoa_r+0x62a>
 8006e20:	46c3      	mov	fp, r8
 8006e22:	e03b      	b.n	8006e9c <_dtoa_r+0x6b4>
 8006e24:	4b9e      	ldr	r3, [pc, #632]	; (80070a0 <_dtoa_r+0x8b8>)
 8006e26:	f7f9 fb57 	bl	80004d8 <__aeabi_dmul>
 8006e2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e2e:	e7bc      	b.n	8006daa <_dtoa_r+0x5c2>
 8006e30:	9f03      	ldr	r7, [sp, #12]
 8006e32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fc75 	bl	800072c <__aeabi_ddiv>
 8006e42:	f7f9 fdf9 	bl	8000a38 <__aeabi_d2iz>
 8006e46:	4604      	mov	r4, r0
 8006e48:	f7f9 fadc 	bl	8000404 <__aeabi_i2d>
 8006e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e50:	f7f9 fb42 	bl	80004d8 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 f984 	bl	8000168 <__aeabi_dsub>
 8006e60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006e64:	f807 6b01 	strb.w	r6, [r7], #1
 8006e68:	9e03      	ldr	r6, [sp, #12]
 8006e6a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006e6e:	1bbe      	subs	r6, r7, r6
 8006e70:	45b4      	cmp	ip, r6
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	d136      	bne.n	8006ee6 <_dtoa_r+0x6fe>
 8006e78:	f7f9 f978 	bl	800016c <__adddf3>
 8006e7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e80:	4680      	mov	r8, r0
 8006e82:	4689      	mov	r9, r1
 8006e84:	f7f9 fdb8 	bl	80009f8 <__aeabi_dcmpgt>
 8006e88:	bb58      	cbnz	r0, 8006ee2 <_dtoa_r+0x6fa>
 8006e8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e8e:	4640      	mov	r0, r8
 8006e90:	4649      	mov	r1, r9
 8006e92:	f7f9 fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8006e96:	b108      	cbz	r0, 8006e9c <_dtoa_r+0x6b4>
 8006e98:	07e3      	lsls	r3, r4, #31
 8006e9a:	d422      	bmi.n	8006ee2 <_dtoa_r+0x6fa>
 8006e9c:	4651      	mov	r1, sl
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 fbc2 	bl	8007628 <_Bfree>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ea8:	703b      	strb	r3, [r7, #0]
 8006eaa:	f10b 0301 	add.w	r3, fp, #1
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f43f ace6 	beq.w	8006884 <_dtoa_r+0x9c>
 8006eb8:	601f      	str	r7, [r3, #0]
 8006eba:	e4e3      	b.n	8006884 <_dtoa_r+0x9c>
 8006ebc:	4627      	mov	r7, r4
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	461f      	mov	r7, r3
 8006ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ec6:	2a39      	cmp	r2, #57	; 0x39
 8006ec8:	d107      	bne.n	8006eda <_dtoa_r+0x6f2>
 8006eca:	9a03      	ldr	r2, [sp, #12]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d1f7      	bne.n	8006ec0 <_dtoa_r+0x6d8>
 8006ed0:	2230      	movs	r2, #48	; 0x30
 8006ed2:	9903      	ldr	r1, [sp, #12]
 8006ed4:	f108 0801 	add.w	r8, r8, #1
 8006ed8:	700a      	strb	r2, [r1, #0]
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	3201      	adds	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e79e      	b.n	8006e20 <_dtoa_r+0x638>
 8006ee2:	46d8      	mov	r8, fp
 8006ee4:	e7eb      	b.n	8006ebe <_dtoa_r+0x6d6>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4b6d      	ldr	r3, [pc, #436]	; (80070a0 <_dtoa_r+0x8b8>)
 8006eea:	f7f9 faf5 	bl	80004d8 <__aeabi_dmul>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	f7f9 fd57 	bl	80009a8 <__aeabi_dcmpeq>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d09b      	beq.n	8006e36 <_dtoa_r+0x64e>
 8006efe:	e7cd      	b.n	8006e9c <_dtoa_r+0x6b4>
 8006f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	f000 80c4 	beq.w	8007090 <_dtoa_r+0x8a8>
 8006f08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f0a:	2a01      	cmp	r2, #1
 8006f0c:	f300 80a8 	bgt.w	8007060 <_dtoa_r+0x878>
 8006f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	f000 80a0 	beq.w	8007058 <_dtoa_r+0x870>
 8006f18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f1c:	464f      	mov	r7, r9
 8006f1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f22:	2101      	movs	r1, #1
 8006f24:	441a      	add	r2, r3
 8006f26:	4628      	mov	r0, r5
 8006f28:	4499      	add	r9, r3
 8006f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f2c:	f000 fc32 	bl	8007794 <__i2b>
 8006f30:	4606      	mov	r6, r0
 8006f32:	b15f      	cbz	r7, 8006f4c <_dtoa_r+0x764>
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dd08      	ble.n	8006f4c <_dtoa_r+0x764>
 8006f3a:	42bb      	cmp	r3, r7
 8006f3c:	bfa8      	it	ge
 8006f3e:	463b      	movge	r3, r7
 8006f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f42:	eba9 0903 	sub.w	r9, r9, r3
 8006f46:	1aff      	subs	r7, r7, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4e:	b1f3      	cbz	r3, 8006f8e <_dtoa_r+0x7a6>
 8006f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80a0 	beq.w	8007098 <_dtoa_r+0x8b0>
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	dd10      	ble.n	8006f7e <_dtoa_r+0x796>
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4622      	mov	r2, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 fcd5 	bl	8007910 <__pow5mult>
 8006f66:	4652      	mov	r2, sl
 8006f68:	4601      	mov	r1, r0
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 fc27 	bl	80077c0 <__multiply>
 8006f72:	4680      	mov	r8, r0
 8006f74:	4651      	mov	r1, sl
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fb56 	bl	8007628 <_Bfree>
 8006f7c:	46c2      	mov	sl, r8
 8006f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f80:	1b1a      	subs	r2, r3, r4
 8006f82:	d004      	beq.n	8006f8e <_dtoa_r+0x7a6>
 8006f84:	4651      	mov	r1, sl
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 fcc2 	bl	8007910 <__pow5mult>
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	2101      	movs	r1, #1
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 fbff 	bl	8007794 <__i2b>
 8006f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f98:	4604      	mov	r4, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f340 8082 	ble.w	80070a4 <_dtoa_r+0x8bc>
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 fcb3 	bl	8007910 <__pow5mult>
 8006faa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fac:	4604      	mov	r4, r0
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	dd7b      	ble.n	80070aa <_dtoa_r+0x8c2>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fbc:	6918      	ldr	r0, [r3, #16]
 8006fbe:	f000 fb9b 	bl	80076f8 <__hi0bits>
 8006fc2:	f1c0 0020 	rsb	r0, r0, #32
 8006fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc8:	4418      	add	r0, r3
 8006fca:	f010 001f 	ands.w	r0, r0, #31
 8006fce:	f000 8092 	beq.w	80070f6 <_dtoa_r+0x90e>
 8006fd2:	f1c0 0320 	rsb	r3, r0, #32
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	f340 8085 	ble.w	80070e6 <_dtoa_r+0x8fe>
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	f1c0 001c 	rsb	r0, r0, #28
 8006fe2:	4403      	add	r3, r0
 8006fe4:	4481      	add	r9, r0
 8006fe6:	4407      	add	r7, r0
 8006fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fea:	f1b9 0f00 	cmp.w	r9, #0
 8006fee:	dd05      	ble.n	8006ffc <_dtoa_r+0x814>
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	464a      	mov	r2, r9
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 fce5 	bl	80079c4 <__lshift>
 8006ffa:	4682      	mov	sl, r0
 8006ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dd05      	ble.n	800700e <_dtoa_r+0x826>
 8007002:	4621      	mov	r1, r4
 8007004:	461a      	mov	r2, r3
 8007006:	4628      	mov	r0, r5
 8007008:	f000 fcdc 	bl	80079c4 <__lshift>
 800700c:	4604      	mov	r4, r0
 800700e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d072      	beq.n	80070fa <_dtoa_r+0x912>
 8007014:	4621      	mov	r1, r4
 8007016:	4650      	mov	r0, sl
 8007018:	f000 fd40 	bl	8007a9c <__mcmp>
 800701c:	2800      	cmp	r0, #0
 800701e:	da6c      	bge.n	80070fa <_dtoa_r+0x912>
 8007020:	2300      	movs	r3, #0
 8007022:	4651      	mov	r1, sl
 8007024:	220a      	movs	r2, #10
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fb20 	bl	800766c <__multadd>
 800702c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800702e:	4682      	mov	sl, r0
 8007030:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 81ac 	beq.w	8007392 <_dtoa_r+0xbaa>
 800703a:	2300      	movs	r3, #0
 800703c:	4631      	mov	r1, r6
 800703e:	220a      	movs	r2, #10
 8007040:	4628      	mov	r0, r5
 8007042:	f000 fb13 	bl	800766c <__multadd>
 8007046:	9b06      	ldr	r3, [sp, #24]
 8007048:	4606      	mov	r6, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	f300 8093 	bgt.w	8007176 <_dtoa_r+0x98e>
 8007050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007052:	2b02      	cmp	r3, #2
 8007054:	dc59      	bgt.n	800710a <_dtoa_r+0x922>
 8007056:	e08e      	b.n	8007176 <_dtoa_r+0x98e>
 8007058:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800705a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800705e:	e75d      	b.n	8006f1c <_dtoa_r+0x734>
 8007060:	9b08      	ldr	r3, [sp, #32]
 8007062:	1e5c      	subs	r4, r3, #1
 8007064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007066:	42a3      	cmp	r3, r4
 8007068:	bfbf      	itttt	lt
 800706a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800706c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800706e:	1ae3      	sublt	r3, r4, r3
 8007070:	18d2      	addlt	r2, r2, r3
 8007072:	bfa8      	it	ge
 8007074:	1b1c      	subge	r4, r3, r4
 8007076:	9b08      	ldr	r3, [sp, #32]
 8007078:	bfbe      	ittt	lt
 800707a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800707c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800707e:	2400      	movlt	r4, #0
 8007080:	2b00      	cmp	r3, #0
 8007082:	bfb5      	itete	lt
 8007084:	eba9 0703 	sublt.w	r7, r9, r3
 8007088:	464f      	movge	r7, r9
 800708a:	2300      	movlt	r3, #0
 800708c:	9b08      	ldrge	r3, [sp, #32]
 800708e:	e747      	b.n	8006f20 <_dtoa_r+0x738>
 8007090:	464f      	mov	r7, r9
 8007092:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007094:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007096:	e74c      	b.n	8006f32 <_dtoa_r+0x74a>
 8007098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709a:	e773      	b.n	8006f84 <_dtoa_r+0x79c>
 800709c:	3fe00000 	.word	0x3fe00000
 80070a0:	40240000 	.word	0x40240000
 80070a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	dc18      	bgt.n	80070dc <_dtoa_r+0x8f4>
 80070aa:	9b04      	ldr	r3, [sp, #16]
 80070ac:	b9b3      	cbnz	r3, 80070dc <_dtoa_r+0x8f4>
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b4:	b993      	cbnz	r3, 80070dc <_dtoa_r+0x8f4>
 80070b6:	9b05      	ldr	r3, [sp, #20]
 80070b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070bc:	0d1b      	lsrs	r3, r3, #20
 80070be:	051b      	lsls	r3, r3, #20
 80070c0:	b17b      	cbz	r3, 80070e2 <_dtoa_r+0x8fa>
 80070c2:	f04f 0801 	mov.w	r8, #1
 80070c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c8:	f109 0901 	add.w	r9, r9, #1
 80070cc:	3301      	adds	r3, #1
 80070ce:	9309      	str	r3, [sp, #36]	; 0x24
 80070d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f af6f 	bne.w	8006fb6 <_dtoa_r+0x7ce>
 80070d8:	2001      	movs	r0, #1
 80070da:	e774      	b.n	8006fc6 <_dtoa_r+0x7de>
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	e7f6      	b.n	80070d0 <_dtoa_r+0x8e8>
 80070e2:	4698      	mov	r8, r3
 80070e4:	e7f4      	b.n	80070d0 <_dtoa_r+0x8e8>
 80070e6:	d080      	beq.n	8006fea <_dtoa_r+0x802>
 80070e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ea:	331c      	adds	r3, #28
 80070ec:	441a      	add	r2, r3
 80070ee:	4499      	add	r9, r3
 80070f0:	441f      	add	r7, r3
 80070f2:	9209      	str	r2, [sp, #36]	; 0x24
 80070f4:	e779      	b.n	8006fea <_dtoa_r+0x802>
 80070f6:	4603      	mov	r3, r0
 80070f8:	e7f6      	b.n	80070e8 <_dtoa_r+0x900>
 80070fa:	9b08      	ldr	r3, [sp, #32]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dc34      	bgt.n	800716a <_dtoa_r+0x982>
 8007100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007102:	2b02      	cmp	r3, #2
 8007104:	dd31      	ble.n	800716a <_dtoa_r+0x982>
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	9306      	str	r3, [sp, #24]
 800710a:	9b06      	ldr	r3, [sp, #24]
 800710c:	b963      	cbnz	r3, 8007128 <_dtoa_r+0x940>
 800710e:	4621      	mov	r1, r4
 8007110:	2205      	movs	r2, #5
 8007112:	4628      	mov	r0, r5
 8007114:	f000 faaa 	bl	800766c <__multadd>
 8007118:	4601      	mov	r1, r0
 800711a:	4604      	mov	r4, r0
 800711c:	4650      	mov	r0, sl
 800711e:	f000 fcbd 	bl	8007a9c <__mcmp>
 8007122:	2800      	cmp	r0, #0
 8007124:	f73f adbf 	bgt.w	8006ca6 <_dtoa_r+0x4be>
 8007128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800712a:	9f03      	ldr	r7, [sp, #12]
 800712c:	ea6f 0b03 	mvn.w	fp, r3
 8007130:	f04f 0800 	mov.w	r8, #0
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 fa76 	bl	8007628 <_Bfree>
 800713c:	2e00      	cmp	r6, #0
 800713e:	f43f aead 	beq.w	8006e9c <_dtoa_r+0x6b4>
 8007142:	f1b8 0f00 	cmp.w	r8, #0
 8007146:	d005      	beq.n	8007154 <_dtoa_r+0x96c>
 8007148:	45b0      	cmp	r8, r6
 800714a:	d003      	beq.n	8007154 <_dtoa_r+0x96c>
 800714c:	4641      	mov	r1, r8
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fa6a 	bl	8007628 <_Bfree>
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	f000 fa66 	bl	8007628 <_Bfree>
 800715c:	e69e      	b.n	8006e9c <_dtoa_r+0x6b4>
 800715e:	2400      	movs	r4, #0
 8007160:	4626      	mov	r6, r4
 8007162:	e7e1      	b.n	8007128 <_dtoa_r+0x940>
 8007164:	46c3      	mov	fp, r8
 8007166:	4626      	mov	r6, r4
 8007168:	e59d      	b.n	8006ca6 <_dtoa_r+0x4be>
 800716a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80c8 	beq.w	8007302 <_dtoa_r+0xb1a>
 8007172:	9b08      	ldr	r3, [sp, #32]
 8007174:	9306      	str	r3, [sp, #24]
 8007176:	2f00      	cmp	r7, #0
 8007178:	dd05      	ble.n	8007186 <_dtoa_r+0x99e>
 800717a:	4631      	mov	r1, r6
 800717c:	463a      	mov	r2, r7
 800717e:	4628      	mov	r0, r5
 8007180:	f000 fc20 	bl	80079c4 <__lshift>
 8007184:	4606      	mov	r6, r0
 8007186:	f1b8 0f00 	cmp.w	r8, #0
 800718a:	d05b      	beq.n	8007244 <_dtoa_r+0xa5c>
 800718c:	4628      	mov	r0, r5
 800718e:	6871      	ldr	r1, [r6, #4]
 8007190:	f000 fa0a 	bl	80075a8 <_Balloc>
 8007194:	4607      	mov	r7, r0
 8007196:	b928      	cbnz	r0, 80071a4 <_dtoa_r+0x9bc>
 8007198:	4602      	mov	r2, r0
 800719a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800719e:	4b81      	ldr	r3, [pc, #516]	; (80073a4 <_dtoa_r+0xbbc>)
 80071a0:	f7ff bb36 	b.w	8006810 <_dtoa_r+0x28>
 80071a4:	6932      	ldr	r2, [r6, #16]
 80071a6:	f106 010c 	add.w	r1, r6, #12
 80071aa:	3202      	adds	r2, #2
 80071ac:	0092      	lsls	r2, r2, #2
 80071ae:	300c      	adds	r0, #12
 80071b0:	f7ff fa83 	bl	80066ba <memcpy>
 80071b4:	2201      	movs	r2, #1
 80071b6:	4639      	mov	r1, r7
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 fc03 	bl	80079c4 <__lshift>
 80071be:	46b0      	mov	r8, r6
 80071c0:	4606      	mov	r6, r0
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	9a03      	ldr	r2, [sp, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	9308      	str	r3, [sp, #32]
 80071ca:	9b06      	ldr	r3, [sp, #24]
 80071cc:	4413      	add	r3, r2
 80071ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	930a      	str	r3, [sp, #40]	; 0x28
 80071d8:	9b08      	ldr	r3, [sp, #32]
 80071da:	4621      	mov	r1, r4
 80071dc:	3b01      	subs	r3, #1
 80071de:	4650      	mov	r0, sl
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	f7ff fa78 	bl	80066d6 <quorem>
 80071e6:	4641      	mov	r1, r8
 80071e8:	9006      	str	r0, [sp, #24]
 80071ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80071ee:	4650      	mov	r0, sl
 80071f0:	f000 fc54 	bl	8007a9c <__mcmp>
 80071f4:	4632      	mov	r2, r6
 80071f6:	9009      	str	r0, [sp, #36]	; 0x24
 80071f8:	4621      	mov	r1, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 fc6a 	bl	8007ad4 <__mdiff>
 8007200:	68c2      	ldr	r2, [r0, #12]
 8007202:	4607      	mov	r7, r0
 8007204:	bb02      	cbnz	r2, 8007248 <_dtoa_r+0xa60>
 8007206:	4601      	mov	r1, r0
 8007208:	4650      	mov	r0, sl
 800720a:	f000 fc47 	bl	8007a9c <__mcmp>
 800720e:	4602      	mov	r2, r0
 8007210:	4639      	mov	r1, r7
 8007212:	4628      	mov	r0, r5
 8007214:	920c      	str	r2, [sp, #48]	; 0x30
 8007216:	f000 fa07 	bl	8007628 <_Bfree>
 800721a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800721c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800721e:	9f08      	ldr	r7, [sp, #32]
 8007220:	ea43 0102 	orr.w	r1, r3, r2
 8007224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007226:	4319      	orrs	r1, r3
 8007228:	d110      	bne.n	800724c <_dtoa_r+0xa64>
 800722a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800722e:	d029      	beq.n	8007284 <_dtoa_r+0xa9c>
 8007230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd02      	ble.n	800723c <_dtoa_r+0xa54>
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	f883 9000 	strb.w	r9, [r3]
 8007242:	e777      	b.n	8007134 <_dtoa_r+0x94c>
 8007244:	4630      	mov	r0, r6
 8007246:	e7ba      	b.n	80071be <_dtoa_r+0x9d6>
 8007248:	2201      	movs	r2, #1
 800724a:	e7e1      	b.n	8007210 <_dtoa_r+0xa28>
 800724c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	db04      	blt.n	800725c <_dtoa_r+0xa74>
 8007252:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007254:	430b      	orrs	r3, r1
 8007256:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007258:	430b      	orrs	r3, r1
 800725a:	d120      	bne.n	800729e <_dtoa_r+0xab6>
 800725c:	2a00      	cmp	r2, #0
 800725e:	dded      	ble.n	800723c <_dtoa_r+0xa54>
 8007260:	4651      	mov	r1, sl
 8007262:	2201      	movs	r2, #1
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fbad 	bl	80079c4 <__lshift>
 800726a:	4621      	mov	r1, r4
 800726c:	4682      	mov	sl, r0
 800726e:	f000 fc15 	bl	8007a9c <__mcmp>
 8007272:	2800      	cmp	r0, #0
 8007274:	dc03      	bgt.n	800727e <_dtoa_r+0xa96>
 8007276:	d1e1      	bne.n	800723c <_dtoa_r+0xa54>
 8007278:	f019 0f01 	tst.w	r9, #1
 800727c:	d0de      	beq.n	800723c <_dtoa_r+0xa54>
 800727e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007282:	d1d8      	bne.n	8007236 <_dtoa_r+0xa4e>
 8007284:	2339      	movs	r3, #57	; 0x39
 8007286:	9a04      	ldr	r2, [sp, #16]
 8007288:	7013      	strb	r3, [r2, #0]
 800728a:	463b      	mov	r3, r7
 800728c:	461f      	mov	r7, r3
 800728e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007292:	3b01      	subs	r3, #1
 8007294:	2a39      	cmp	r2, #57	; 0x39
 8007296:	d06b      	beq.n	8007370 <_dtoa_r+0xb88>
 8007298:	3201      	adds	r2, #1
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e74a      	b.n	8007134 <_dtoa_r+0x94c>
 800729e:	2a00      	cmp	r2, #0
 80072a0:	dd07      	ble.n	80072b2 <_dtoa_r+0xaca>
 80072a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072a6:	d0ed      	beq.n	8007284 <_dtoa_r+0xa9c>
 80072a8:	9a04      	ldr	r2, [sp, #16]
 80072aa:	f109 0301 	add.w	r3, r9, #1
 80072ae:	7013      	strb	r3, [r2, #0]
 80072b0:	e740      	b.n	8007134 <_dtoa_r+0x94c>
 80072b2:	9b08      	ldr	r3, [sp, #32]
 80072b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072b6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d042      	beq.n	8007344 <_dtoa_r+0xb5c>
 80072be:	4651      	mov	r1, sl
 80072c0:	2300      	movs	r3, #0
 80072c2:	220a      	movs	r2, #10
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f9d1 	bl	800766c <__multadd>
 80072ca:	45b0      	cmp	r8, r6
 80072cc:	4682      	mov	sl, r0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	f04f 020a 	mov.w	r2, #10
 80072d6:	4641      	mov	r1, r8
 80072d8:	4628      	mov	r0, r5
 80072da:	d107      	bne.n	80072ec <_dtoa_r+0xb04>
 80072dc:	f000 f9c6 	bl	800766c <__multadd>
 80072e0:	4680      	mov	r8, r0
 80072e2:	4606      	mov	r6, r0
 80072e4:	9b08      	ldr	r3, [sp, #32]
 80072e6:	3301      	adds	r3, #1
 80072e8:	9308      	str	r3, [sp, #32]
 80072ea:	e775      	b.n	80071d8 <_dtoa_r+0x9f0>
 80072ec:	f000 f9be 	bl	800766c <__multadd>
 80072f0:	4631      	mov	r1, r6
 80072f2:	4680      	mov	r8, r0
 80072f4:	2300      	movs	r3, #0
 80072f6:	220a      	movs	r2, #10
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f9b7 	bl	800766c <__multadd>
 80072fe:	4606      	mov	r6, r0
 8007300:	e7f0      	b.n	80072e4 <_dtoa_r+0xafc>
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	9306      	str	r3, [sp, #24]
 8007306:	9f03      	ldr	r7, [sp, #12]
 8007308:	4621      	mov	r1, r4
 800730a:	4650      	mov	r0, sl
 800730c:	f7ff f9e3 	bl	80066d6 <quorem>
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007316:	f807 9b01 	strb.w	r9, [r7], #1
 800731a:	1afa      	subs	r2, r7, r3
 800731c:	9b06      	ldr	r3, [sp, #24]
 800731e:	4293      	cmp	r3, r2
 8007320:	dd07      	ble.n	8007332 <_dtoa_r+0xb4a>
 8007322:	4651      	mov	r1, sl
 8007324:	2300      	movs	r3, #0
 8007326:	220a      	movs	r2, #10
 8007328:	4628      	mov	r0, r5
 800732a:	f000 f99f 	bl	800766c <__multadd>
 800732e:	4682      	mov	sl, r0
 8007330:	e7ea      	b.n	8007308 <_dtoa_r+0xb20>
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	f04f 0800 	mov.w	r8, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfcc      	ite	gt
 800733c:	461f      	movgt	r7, r3
 800733e:	2701      	movle	r7, #1
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	441f      	add	r7, r3
 8007344:	4651      	mov	r1, sl
 8007346:	2201      	movs	r2, #1
 8007348:	4628      	mov	r0, r5
 800734a:	f000 fb3b 	bl	80079c4 <__lshift>
 800734e:	4621      	mov	r1, r4
 8007350:	4682      	mov	sl, r0
 8007352:	f000 fba3 	bl	8007a9c <__mcmp>
 8007356:	2800      	cmp	r0, #0
 8007358:	dc97      	bgt.n	800728a <_dtoa_r+0xaa2>
 800735a:	d102      	bne.n	8007362 <_dtoa_r+0xb7a>
 800735c:	f019 0f01 	tst.w	r9, #1
 8007360:	d193      	bne.n	800728a <_dtoa_r+0xaa2>
 8007362:	463b      	mov	r3, r7
 8007364:	461f      	mov	r7, r3
 8007366:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800736a:	2a30      	cmp	r2, #48	; 0x30
 800736c:	d0fa      	beq.n	8007364 <_dtoa_r+0xb7c>
 800736e:	e6e1      	b.n	8007134 <_dtoa_r+0x94c>
 8007370:	9a03      	ldr	r2, [sp, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d18a      	bne.n	800728c <_dtoa_r+0xaa4>
 8007376:	2331      	movs	r3, #49	; 0x31
 8007378:	f10b 0b01 	add.w	fp, fp, #1
 800737c:	e797      	b.n	80072ae <_dtoa_r+0xac6>
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <_dtoa_r+0xbc0>)
 8007380:	f7ff ba9f 	b.w	80068c2 <_dtoa_r+0xda>
 8007384:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007386:	2b00      	cmp	r3, #0
 8007388:	f47f aa77 	bne.w	800687a <_dtoa_r+0x92>
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <_dtoa_r+0xbc4>)
 800738e:	f7ff ba98 	b.w	80068c2 <_dtoa_r+0xda>
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dcb6      	bgt.n	8007306 <_dtoa_r+0xb1e>
 8007398:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800739a:	2b02      	cmp	r3, #2
 800739c:	f73f aeb5 	bgt.w	800710a <_dtoa_r+0x922>
 80073a0:	e7b1      	b.n	8007306 <_dtoa_r+0xb1e>
 80073a2:	bf00      	nop
 80073a4:	0800a41e 	.word	0x0800a41e
 80073a8:	0800a37e 	.word	0x0800a37e
 80073ac:	0800a3a2 	.word	0x0800a3a2

080073b0 <_free_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4605      	mov	r5, r0
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d040      	beq.n	800743a <_free_r+0x8a>
 80073b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073bc:	1f0c      	subs	r4, r1, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfb8      	it	lt
 80073c2:	18e4      	addlt	r4, r4, r3
 80073c4:	f000 f8e4 	bl	8007590 <__malloc_lock>
 80073c8:	4a1c      	ldr	r2, [pc, #112]	; (800743c <_free_r+0x8c>)
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	b933      	cbnz	r3, 80073dc <_free_r+0x2c>
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	6014      	str	r4, [r2, #0]
 80073d2:	4628      	mov	r0, r5
 80073d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d8:	f000 b8e0 	b.w	800759c <__malloc_unlock>
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d908      	bls.n	80073f2 <_free_r+0x42>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	1821      	adds	r1, r4, r0
 80073e4:	428b      	cmp	r3, r1
 80073e6:	bf01      	itttt	eq
 80073e8:	6819      	ldreq	r1, [r3, #0]
 80073ea:	685b      	ldreq	r3, [r3, #4]
 80073ec:	1809      	addeq	r1, r1, r0
 80073ee:	6021      	streq	r1, [r4, #0]
 80073f0:	e7ed      	b.n	80073ce <_free_r+0x1e>
 80073f2:	461a      	mov	r2, r3
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	b10b      	cbz	r3, 80073fc <_free_r+0x4c>
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	d9fa      	bls.n	80073f2 <_free_r+0x42>
 80073fc:	6811      	ldr	r1, [r2, #0]
 80073fe:	1850      	adds	r0, r2, r1
 8007400:	42a0      	cmp	r0, r4
 8007402:	d10b      	bne.n	800741c <_free_r+0x6c>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	4401      	add	r1, r0
 8007408:	1850      	adds	r0, r2, r1
 800740a:	4283      	cmp	r3, r0
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	d1e0      	bne.n	80073d2 <_free_r+0x22>
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4408      	add	r0, r1
 8007416:	6010      	str	r0, [r2, #0]
 8007418:	6053      	str	r3, [r2, #4]
 800741a:	e7da      	b.n	80073d2 <_free_r+0x22>
 800741c:	d902      	bls.n	8007424 <_free_r+0x74>
 800741e:	230c      	movs	r3, #12
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	e7d6      	b.n	80073d2 <_free_r+0x22>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	1821      	adds	r1, r4, r0
 8007428:	428b      	cmp	r3, r1
 800742a:	bf01      	itttt	eq
 800742c:	6819      	ldreq	r1, [r3, #0]
 800742e:	685b      	ldreq	r3, [r3, #4]
 8007430:	1809      	addeq	r1, r1, r0
 8007432:	6021      	streq	r1, [r4, #0]
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6054      	str	r4, [r2, #4]
 8007438:	e7cb      	b.n	80073d2 <_free_r+0x22>
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	2000106c 	.word	0x2000106c

08007440 <malloc>:
 8007440:	4b02      	ldr	r3, [pc, #8]	; (800744c <malloc+0xc>)
 8007442:	4601      	mov	r1, r0
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	f000 b823 	b.w	8007490 <_malloc_r>
 800744a:	bf00      	nop
 800744c:	20000084 	.word	0x20000084

08007450 <sbrk_aligned>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4e0e      	ldr	r6, [pc, #56]	; (800748c <sbrk_aligned+0x3c>)
 8007454:	460c      	mov	r4, r1
 8007456:	6831      	ldr	r1, [r6, #0]
 8007458:	4605      	mov	r5, r0
 800745a:	b911      	cbnz	r1, 8007462 <sbrk_aligned+0x12>
 800745c:	f000 fe1e 	bl	800809c <_sbrk_r>
 8007460:	6030      	str	r0, [r6, #0]
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 fe19 	bl	800809c <_sbrk_r>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d00a      	beq.n	8007484 <sbrk_aligned+0x34>
 800746e:	1cc4      	adds	r4, r0, #3
 8007470:	f024 0403 	bic.w	r4, r4, #3
 8007474:	42a0      	cmp	r0, r4
 8007476:	d007      	beq.n	8007488 <sbrk_aligned+0x38>
 8007478:	1a21      	subs	r1, r4, r0
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fe0e 	bl	800809c <_sbrk_r>
 8007480:	3001      	adds	r0, #1
 8007482:	d101      	bne.n	8007488 <sbrk_aligned+0x38>
 8007484:	f04f 34ff 	mov.w	r4, #4294967295
 8007488:	4620      	mov	r0, r4
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	20001070 	.word	0x20001070

08007490 <_malloc_r>:
 8007490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007494:	1ccd      	adds	r5, r1, #3
 8007496:	f025 0503 	bic.w	r5, r5, #3
 800749a:	3508      	adds	r5, #8
 800749c:	2d0c      	cmp	r5, #12
 800749e:	bf38      	it	cc
 80074a0:	250c      	movcc	r5, #12
 80074a2:	2d00      	cmp	r5, #0
 80074a4:	4607      	mov	r7, r0
 80074a6:	db01      	blt.n	80074ac <_malloc_r+0x1c>
 80074a8:	42a9      	cmp	r1, r5
 80074aa:	d905      	bls.n	80074b8 <_malloc_r+0x28>
 80074ac:	230c      	movs	r3, #12
 80074ae:	2600      	movs	r6, #0
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4630      	mov	r0, r6
 80074b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800758c <_malloc_r+0xfc>
 80074bc:	f000 f868 	bl	8007590 <__malloc_lock>
 80074c0:	f8d8 3000 	ldr.w	r3, [r8]
 80074c4:	461c      	mov	r4, r3
 80074c6:	bb5c      	cbnz	r4, 8007520 <_malloc_r+0x90>
 80074c8:	4629      	mov	r1, r5
 80074ca:	4638      	mov	r0, r7
 80074cc:	f7ff ffc0 	bl	8007450 <sbrk_aligned>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	4604      	mov	r4, r0
 80074d4:	d155      	bne.n	8007582 <_malloc_r+0xf2>
 80074d6:	f8d8 4000 	ldr.w	r4, [r8]
 80074da:	4626      	mov	r6, r4
 80074dc:	2e00      	cmp	r6, #0
 80074de:	d145      	bne.n	800756c <_malloc_r+0xdc>
 80074e0:	2c00      	cmp	r4, #0
 80074e2:	d048      	beq.n	8007576 <_malloc_r+0xe6>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	4631      	mov	r1, r6
 80074e8:	4638      	mov	r0, r7
 80074ea:	eb04 0903 	add.w	r9, r4, r3
 80074ee:	f000 fdd5 	bl	800809c <_sbrk_r>
 80074f2:	4581      	cmp	r9, r0
 80074f4:	d13f      	bne.n	8007576 <_malloc_r+0xe6>
 80074f6:	6821      	ldr	r1, [r4, #0]
 80074f8:	4638      	mov	r0, r7
 80074fa:	1a6d      	subs	r5, r5, r1
 80074fc:	4629      	mov	r1, r5
 80074fe:	f7ff ffa7 	bl	8007450 <sbrk_aligned>
 8007502:	3001      	adds	r0, #1
 8007504:	d037      	beq.n	8007576 <_malloc_r+0xe6>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	442b      	add	r3, r5
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	f8d8 3000 	ldr.w	r3, [r8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d038      	beq.n	8007586 <_malloc_r+0xf6>
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	42a2      	cmp	r2, r4
 8007518:	d12b      	bne.n	8007572 <_malloc_r+0xe2>
 800751a:	2200      	movs	r2, #0
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	e00f      	b.n	8007540 <_malloc_r+0xb0>
 8007520:	6822      	ldr	r2, [r4, #0]
 8007522:	1b52      	subs	r2, r2, r5
 8007524:	d41f      	bmi.n	8007566 <_malloc_r+0xd6>
 8007526:	2a0b      	cmp	r2, #11
 8007528:	d917      	bls.n	800755a <_malloc_r+0xca>
 800752a:	1961      	adds	r1, r4, r5
 800752c:	42a3      	cmp	r3, r4
 800752e:	6025      	str	r5, [r4, #0]
 8007530:	bf18      	it	ne
 8007532:	6059      	strne	r1, [r3, #4]
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	bf08      	it	eq
 8007538:	f8c8 1000 	streq.w	r1, [r8]
 800753c:	5162      	str	r2, [r4, r5]
 800753e:	604b      	str	r3, [r1, #4]
 8007540:	4638      	mov	r0, r7
 8007542:	f104 060b 	add.w	r6, r4, #11
 8007546:	f000 f829 	bl	800759c <__malloc_unlock>
 800754a:	f026 0607 	bic.w	r6, r6, #7
 800754e:	1d23      	adds	r3, r4, #4
 8007550:	1af2      	subs	r2, r6, r3
 8007552:	d0ae      	beq.n	80074b2 <_malloc_r+0x22>
 8007554:	1b9b      	subs	r3, r3, r6
 8007556:	50a3      	str	r3, [r4, r2]
 8007558:	e7ab      	b.n	80074b2 <_malloc_r+0x22>
 800755a:	42a3      	cmp	r3, r4
 800755c:	6862      	ldr	r2, [r4, #4]
 800755e:	d1dd      	bne.n	800751c <_malloc_r+0x8c>
 8007560:	f8c8 2000 	str.w	r2, [r8]
 8007564:	e7ec      	b.n	8007540 <_malloc_r+0xb0>
 8007566:	4623      	mov	r3, r4
 8007568:	6864      	ldr	r4, [r4, #4]
 800756a:	e7ac      	b.n	80074c6 <_malloc_r+0x36>
 800756c:	4634      	mov	r4, r6
 800756e:	6876      	ldr	r6, [r6, #4]
 8007570:	e7b4      	b.n	80074dc <_malloc_r+0x4c>
 8007572:	4613      	mov	r3, r2
 8007574:	e7cc      	b.n	8007510 <_malloc_r+0x80>
 8007576:	230c      	movs	r3, #12
 8007578:	4638      	mov	r0, r7
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	f000 f80e 	bl	800759c <__malloc_unlock>
 8007580:	e797      	b.n	80074b2 <_malloc_r+0x22>
 8007582:	6025      	str	r5, [r4, #0]
 8007584:	e7dc      	b.n	8007540 <_malloc_r+0xb0>
 8007586:	605b      	str	r3, [r3, #4]
 8007588:	deff      	udf	#255	; 0xff
 800758a:	bf00      	nop
 800758c:	2000106c 	.word	0x2000106c

08007590 <__malloc_lock>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__malloc_lock+0x8>)
 8007592:	f7ff b882 	b.w	800669a <__retarget_lock_acquire_recursive>
 8007596:	bf00      	nop
 8007598:	20001068 	.word	0x20001068

0800759c <__malloc_unlock>:
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <__malloc_unlock+0x8>)
 800759e:	f7ff b87d 	b.w	800669c <__retarget_lock_release_recursive>
 80075a2:	bf00      	nop
 80075a4:	20001068 	.word	0x20001068

080075a8 <_Balloc>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	69c6      	ldr	r6, [r0, #28]
 80075ac:	4604      	mov	r4, r0
 80075ae:	460d      	mov	r5, r1
 80075b0:	b976      	cbnz	r6, 80075d0 <_Balloc+0x28>
 80075b2:	2010      	movs	r0, #16
 80075b4:	f7ff ff44 	bl	8007440 <malloc>
 80075b8:	4602      	mov	r2, r0
 80075ba:	61e0      	str	r0, [r4, #28]
 80075bc:	b920      	cbnz	r0, 80075c8 <_Balloc+0x20>
 80075be:	216b      	movs	r1, #107	; 0x6b
 80075c0:	4b17      	ldr	r3, [pc, #92]	; (8007620 <_Balloc+0x78>)
 80075c2:	4818      	ldr	r0, [pc, #96]	; (8007624 <_Balloc+0x7c>)
 80075c4:	f000 fd7a 	bl	80080bc <__assert_func>
 80075c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075cc:	6006      	str	r6, [r0, #0]
 80075ce:	60c6      	str	r6, [r0, #12]
 80075d0:	69e6      	ldr	r6, [r4, #28]
 80075d2:	68f3      	ldr	r3, [r6, #12]
 80075d4:	b183      	cbz	r3, 80075f8 <_Balloc+0x50>
 80075d6:	69e3      	ldr	r3, [r4, #28]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075de:	b9b8      	cbnz	r0, 8007610 <_Balloc+0x68>
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f605 	lsl.w	r6, r1, r5
 80075e6:	1d72      	adds	r2, r6, #5
 80075e8:	4620      	mov	r0, r4
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	f000 fd84 	bl	80080f8 <_calloc_r>
 80075f0:	b160      	cbz	r0, 800760c <_Balloc+0x64>
 80075f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075f6:	e00e      	b.n	8007616 <_Balloc+0x6e>
 80075f8:	2221      	movs	r2, #33	; 0x21
 80075fa:	2104      	movs	r1, #4
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 fd7b 	bl	80080f8 <_calloc_r>
 8007602:	69e3      	ldr	r3, [r4, #28]
 8007604:	60f0      	str	r0, [r6, #12]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e4      	bne.n	80075d6 <_Balloc+0x2e>
 800760c:	2000      	movs	r0, #0
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	6802      	ldr	r2, [r0, #0]
 8007612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007616:	2300      	movs	r3, #0
 8007618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800761c:	e7f7      	b.n	800760e <_Balloc+0x66>
 800761e:	bf00      	nop
 8007620:	0800a3af 	.word	0x0800a3af
 8007624:	0800a42f 	.word	0x0800a42f

08007628 <_Bfree>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	69c6      	ldr	r6, [r0, #28]
 800762c:	4605      	mov	r5, r0
 800762e:	460c      	mov	r4, r1
 8007630:	b976      	cbnz	r6, 8007650 <_Bfree+0x28>
 8007632:	2010      	movs	r0, #16
 8007634:	f7ff ff04 	bl	8007440 <malloc>
 8007638:	4602      	mov	r2, r0
 800763a:	61e8      	str	r0, [r5, #28]
 800763c:	b920      	cbnz	r0, 8007648 <_Bfree+0x20>
 800763e:	218f      	movs	r1, #143	; 0x8f
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <_Bfree+0x3c>)
 8007642:	4809      	ldr	r0, [pc, #36]	; (8007668 <_Bfree+0x40>)
 8007644:	f000 fd3a 	bl	80080bc <__assert_func>
 8007648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800764c:	6006      	str	r6, [r0, #0]
 800764e:	60c6      	str	r6, [r0, #12]
 8007650:	b13c      	cbz	r4, 8007662 <_Bfree+0x3a>
 8007652:	69eb      	ldr	r3, [r5, #28]
 8007654:	6862      	ldr	r2, [r4, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800765c:	6021      	str	r1, [r4, #0]
 800765e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	0800a3af 	.word	0x0800a3af
 8007668:	0800a42f 	.word	0x0800a42f

0800766c <__multadd>:
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	4607      	mov	r7, r0
 8007672:	460c      	mov	r4, r1
 8007674:	461e      	mov	r6, r3
 8007676:	2000      	movs	r0, #0
 8007678:	690d      	ldr	r5, [r1, #16]
 800767a:	f101 0c14 	add.w	ip, r1, #20
 800767e:	f8dc 3000 	ldr.w	r3, [ip]
 8007682:	3001      	adds	r0, #1
 8007684:	b299      	uxth	r1, r3
 8007686:	fb02 6101 	mla	r1, r2, r1, r6
 800768a:	0c1e      	lsrs	r6, r3, #16
 800768c:	0c0b      	lsrs	r3, r1, #16
 800768e:	fb02 3306 	mla	r3, r2, r6, r3
 8007692:	b289      	uxth	r1, r1
 8007694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007698:	4285      	cmp	r5, r0
 800769a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800769e:	f84c 1b04 	str.w	r1, [ip], #4
 80076a2:	dcec      	bgt.n	800767e <__multadd+0x12>
 80076a4:	b30e      	cbz	r6, 80076ea <__multadd+0x7e>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	42ab      	cmp	r3, r5
 80076aa:	dc19      	bgt.n	80076e0 <__multadd+0x74>
 80076ac:	6861      	ldr	r1, [r4, #4]
 80076ae:	4638      	mov	r0, r7
 80076b0:	3101      	adds	r1, #1
 80076b2:	f7ff ff79 	bl	80075a8 <_Balloc>
 80076b6:	4680      	mov	r8, r0
 80076b8:	b928      	cbnz	r0, 80076c6 <__multadd+0x5a>
 80076ba:	4602      	mov	r2, r0
 80076bc:	21ba      	movs	r1, #186	; 0xba
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <__multadd+0x84>)
 80076c0:	480c      	ldr	r0, [pc, #48]	; (80076f4 <__multadd+0x88>)
 80076c2:	f000 fcfb 	bl	80080bc <__assert_func>
 80076c6:	6922      	ldr	r2, [r4, #16]
 80076c8:	f104 010c 	add.w	r1, r4, #12
 80076cc:	3202      	adds	r2, #2
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	300c      	adds	r0, #12
 80076d2:	f7fe fff2 	bl	80066ba <memcpy>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4638      	mov	r0, r7
 80076da:	f7ff ffa5 	bl	8007628 <_Bfree>
 80076de:	4644      	mov	r4, r8
 80076e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076e4:	3501      	adds	r5, #1
 80076e6:	615e      	str	r6, [r3, #20]
 80076e8:	6125      	str	r5, [r4, #16]
 80076ea:	4620      	mov	r0, r4
 80076ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f0:	0800a41e 	.word	0x0800a41e
 80076f4:	0800a42f 	.word	0x0800a42f

080076f8 <__hi0bits>:
 80076f8:	0c02      	lsrs	r2, r0, #16
 80076fa:	0412      	lsls	r2, r2, #16
 80076fc:	4603      	mov	r3, r0
 80076fe:	b9ca      	cbnz	r2, 8007734 <__hi0bits+0x3c>
 8007700:	0403      	lsls	r3, r0, #16
 8007702:	2010      	movs	r0, #16
 8007704:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007708:	bf04      	itt	eq
 800770a:	021b      	lsleq	r3, r3, #8
 800770c:	3008      	addeq	r0, #8
 800770e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007712:	bf04      	itt	eq
 8007714:	011b      	lsleq	r3, r3, #4
 8007716:	3004      	addeq	r0, #4
 8007718:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800771c:	bf04      	itt	eq
 800771e:	009b      	lsleq	r3, r3, #2
 8007720:	3002      	addeq	r0, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	db05      	blt.n	8007732 <__hi0bits+0x3a>
 8007726:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800772a:	f100 0001 	add.w	r0, r0, #1
 800772e:	bf08      	it	eq
 8007730:	2020      	moveq	r0, #32
 8007732:	4770      	bx	lr
 8007734:	2000      	movs	r0, #0
 8007736:	e7e5      	b.n	8007704 <__hi0bits+0xc>

08007738 <__lo0bits>:
 8007738:	6803      	ldr	r3, [r0, #0]
 800773a:	4602      	mov	r2, r0
 800773c:	f013 0007 	ands.w	r0, r3, #7
 8007740:	d00b      	beq.n	800775a <__lo0bits+0x22>
 8007742:	07d9      	lsls	r1, r3, #31
 8007744:	d421      	bmi.n	800778a <__lo0bits+0x52>
 8007746:	0798      	lsls	r0, r3, #30
 8007748:	bf49      	itett	mi
 800774a:	085b      	lsrmi	r3, r3, #1
 800774c:	089b      	lsrpl	r3, r3, #2
 800774e:	2001      	movmi	r0, #1
 8007750:	6013      	strmi	r3, [r2, #0]
 8007752:	bf5c      	itt	pl
 8007754:	2002      	movpl	r0, #2
 8007756:	6013      	strpl	r3, [r2, #0]
 8007758:	4770      	bx	lr
 800775a:	b299      	uxth	r1, r3
 800775c:	b909      	cbnz	r1, 8007762 <__lo0bits+0x2a>
 800775e:	2010      	movs	r0, #16
 8007760:	0c1b      	lsrs	r3, r3, #16
 8007762:	b2d9      	uxtb	r1, r3
 8007764:	b909      	cbnz	r1, 800776a <__lo0bits+0x32>
 8007766:	3008      	adds	r0, #8
 8007768:	0a1b      	lsrs	r3, r3, #8
 800776a:	0719      	lsls	r1, r3, #28
 800776c:	bf04      	itt	eq
 800776e:	091b      	lsreq	r3, r3, #4
 8007770:	3004      	addeq	r0, #4
 8007772:	0799      	lsls	r1, r3, #30
 8007774:	bf04      	itt	eq
 8007776:	089b      	lsreq	r3, r3, #2
 8007778:	3002      	addeq	r0, #2
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	d403      	bmi.n	8007786 <__lo0bits+0x4e>
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	f100 0001 	add.w	r0, r0, #1
 8007784:	d003      	beq.n	800778e <__lo0bits+0x56>
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	4770      	bx	lr
 800778a:	2000      	movs	r0, #0
 800778c:	4770      	bx	lr
 800778e:	2020      	movs	r0, #32
 8007790:	4770      	bx	lr
	...

08007794 <__i2b>:
 8007794:	b510      	push	{r4, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	2101      	movs	r1, #1
 800779a:	f7ff ff05 	bl	80075a8 <_Balloc>
 800779e:	4602      	mov	r2, r0
 80077a0:	b928      	cbnz	r0, 80077ae <__i2b+0x1a>
 80077a2:	f240 1145 	movw	r1, #325	; 0x145
 80077a6:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <__i2b+0x24>)
 80077a8:	4804      	ldr	r0, [pc, #16]	; (80077bc <__i2b+0x28>)
 80077aa:	f000 fc87 	bl	80080bc <__assert_func>
 80077ae:	2301      	movs	r3, #1
 80077b0:	6144      	str	r4, [r0, #20]
 80077b2:	6103      	str	r3, [r0, #16]
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	0800a41e 	.word	0x0800a41e
 80077bc:	0800a42f 	.word	0x0800a42f

080077c0 <__multiply>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4691      	mov	r9, r2
 80077c6:	690a      	ldr	r2, [r1, #16]
 80077c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077cc:	460c      	mov	r4, r1
 80077ce:	429a      	cmp	r2, r3
 80077d0:	bfbe      	ittt	lt
 80077d2:	460b      	movlt	r3, r1
 80077d4:	464c      	movlt	r4, r9
 80077d6:	4699      	movlt	r9, r3
 80077d8:	6927      	ldr	r7, [r4, #16]
 80077da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	6861      	ldr	r1, [r4, #4]
 80077e2:	eb07 060a 	add.w	r6, r7, sl
 80077e6:	42b3      	cmp	r3, r6
 80077e8:	b085      	sub	sp, #20
 80077ea:	bfb8      	it	lt
 80077ec:	3101      	addlt	r1, #1
 80077ee:	f7ff fedb 	bl	80075a8 <_Balloc>
 80077f2:	b930      	cbnz	r0, 8007802 <__multiply+0x42>
 80077f4:	4602      	mov	r2, r0
 80077f6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077fa:	4b43      	ldr	r3, [pc, #268]	; (8007908 <__multiply+0x148>)
 80077fc:	4843      	ldr	r0, [pc, #268]	; (800790c <__multiply+0x14c>)
 80077fe:	f000 fc5d 	bl	80080bc <__assert_func>
 8007802:	f100 0514 	add.w	r5, r0, #20
 8007806:	462b      	mov	r3, r5
 8007808:	2200      	movs	r2, #0
 800780a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800780e:	4543      	cmp	r3, r8
 8007810:	d321      	bcc.n	8007856 <__multiply+0x96>
 8007812:	f104 0314 	add.w	r3, r4, #20
 8007816:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800781a:	f109 0314 	add.w	r3, r9, #20
 800781e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007822:	9202      	str	r2, [sp, #8]
 8007824:	1b3a      	subs	r2, r7, r4
 8007826:	3a15      	subs	r2, #21
 8007828:	f022 0203 	bic.w	r2, r2, #3
 800782c:	3204      	adds	r2, #4
 800782e:	f104 0115 	add.w	r1, r4, #21
 8007832:	428f      	cmp	r7, r1
 8007834:	bf38      	it	cc
 8007836:	2204      	movcc	r2, #4
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	9a02      	ldr	r2, [sp, #8]
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	429a      	cmp	r2, r3
 8007840:	d80c      	bhi.n	800785c <__multiply+0x9c>
 8007842:	2e00      	cmp	r6, #0
 8007844:	dd03      	ble.n	800784e <__multiply+0x8e>
 8007846:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800784a:	2b00      	cmp	r3, #0
 800784c:	d05a      	beq.n	8007904 <__multiply+0x144>
 800784e:	6106      	str	r6, [r0, #16]
 8007850:	b005      	add	sp, #20
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	f843 2b04 	str.w	r2, [r3], #4
 800785a:	e7d8      	b.n	800780e <__multiply+0x4e>
 800785c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007860:	f1ba 0f00 	cmp.w	sl, #0
 8007864:	d023      	beq.n	80078ae <__multiply+0xee>
 8007866:	46a9      	mov	r9, r5
 8007868:	f04f 0c00 	mov.w	ip, #0
 800786c:	f104 0e14 	add.w	lr, r4, #20
 8007870:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007874:	f8d9 1000 	ldr.w	r1, [r9]
 8007878:	fa1f fb82 	uxth.w	fp, r2
 800787c:	b289      	uxth	r1, r1
 800787e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007882:	4461      	add	r1, ip
 8007884:	f8d9 c000 	ldr.w	ip, [r9]
 8007888:	0c12      	lsrs	r2, r2, #16
 800788a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800788e:	fb0a c202 	mla	r2, sl, r2, ip
 8007892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007896:	b289      	uxth	r1, r1
 8007898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800789c:	4577      	cmp	r7, lr
 800789e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078a2:	f849 1b04 	str.w	r1, [r9], #4
 80078a6:	d8e3      	bhi.n	8007870 <__multiply+0xb0>
 80078a8:	9a01      	ldr	r2, [sp, #4]
 80078aa:	f845 c002 	str.w	ip, [r5, r2]
 80078ae:	9a03      	ldr	r2, [sp, #12]
 80078b0:	3304      	adds	r3, #4
 80078b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	d021      	beq.n	8007900 <__multiply+0x140>
 80078bc:	46ae      	mov	lr, r5
 80078be:	f04f 0a00 	mov.w	sl, #0
 80078c2:	6829      	ldr	r1, [r5, #0]
 80078c4:	f104 0c14 	add.w	ip, r4, #20
 80078c8:	f8bc b000 	ldrh.w	fp, [ip]
 80078cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078d0:	b289      	uxth	r1, r1
 80078d2:	fb09 220b 	mla	r2, r9, fp, r2
 80078d6:	4452      	add	r2, sl
 80078d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078dc:	f84e 1b04 	str.w	r1, [lr], #4
 80078e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078e8:	f8be 1000 	ldrh.w	r1, [lr]
 80078ec:	4567      	cmp	r7, ip
 80078ee:	fb09 110a 	mla	r1, r9, sl, r1
 80078f2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078fa:	d8e5      	bhi.n	80078c8 <__multiply+0x108>
 80078fc:	9a01      	ldr	r2, [sp, #4]
 80078fe:	50a9      	str	r1, [r5, r2]
 8007900:	3504      	adds	r5, #4
 8007902:	e79a      	b.n	800783a <__multiply+0x7a>
 8007904:	3e01      	subs	r6, #1
 8007906:	e79c      	b.n	8007842 <__multiply+0x82>
 8007908:	0800a41e 	.word	0x0800a41e
 800790c:	0800a42f 	.word	0x0800a42f

08007910 <__pow5mult>:
 8007910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007914:	4615      	mov	r5, r2
 8007916:	f012 0203 	ands.w	r2, r2, #3
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	d007      	beq.n	8007930 <__pow5mult+0x20>
 8007920:	4c25      	ldr	r4, [pc, #148]	; (80079b8 <__pow5mult+0xa8>)
 8007922:	3a01      	subs	r2, #1
 8007924:	2300      	movs	r3, #0
 8007926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800792a:	f7ff fe9f 	bl	800766c <__multadd>
 800792e:	4607      	mov	r7, r0
 8007930:	10ad      	asrs	r5, r5, #2
 8007932:	d03d      	beq.n	80079b0 <__pow5mult+0xa0>
 8007934:	69f4      	ldr	r4, [r6, #28]
 8007936:	b97c      	cbnz	r4, 8007958 <__pow5mult+0x48>
 8007938:	2010      	movs	r0, #16
 800793a:	f7ff fd81 	bl	8007440 <malloc>
 800793e:	4602      	mov	r2, r0
 8007940:	61f0      	str	r0, [r6, #28]
 8007942:	b928      	cbnz	r0, 8007950 <__pow5mult+0x40>
 8007944:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007948:	4b1c      	ldr	r3, [pc, #112]	; (80079bc <__pow5mult+0xac>)
 800794a:	481d      	ldr	r0, [pc, #116]	; (80079c0 <__pow5mult+0xb0>)
 800794c:	f000 fbb6 	bl	80080bc <__assert_func>
 8007950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007954:	6004      	str	r4, [r0, #0]
 8007956:	60c4      	str	r4, [r0, #12]
 8007958:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800795c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007960:	b94c      	cbnz	r4, 8007976 <__pow5mult+0x66>
 8007962:	f240 2171 	movw	r1, #625	; 0x271
 8007966:	4630      	mov	r0, r6
 8007968:	f7ff ff14 	bl	8007794 <__i2b>
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	f8c8 0008 	str.w	r0, [r8, #8]
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	07eb      	lsls	r3, r5, #31
 800797c:	d50a      	bpl.n	8007994 <__pow5mult+0x84>
 800797e:	4639      	mov	r1, r7
 8007980:	4622      	mov	r2, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ff1c 	bl	80077c0 <__multiply>
 8007988:	4680      	mov	r8, r0
 800798a:	4639      	mov	r1, r7
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff fe4b 	bl	8007628 <_Bfree>
 8007992:	4647      	mov	r7, r8
 8007994:	106d      	asrs	r5, r5, #1
 8007996:	d00b      	beq.n	80079b0 <__pow5mult+0xa0>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	b938      	cbnz	r0, 80079ac <__pow5mult+0x9c>
 800799c:	4622      	mov	r2, r4
 800799e:	4621      	mov	r1, r4
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff ff0d 	bl	80077c0 <__multiply>
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	f8c0 9000 	str.w	r9, [r0]
 80079ac:	4604      	mov	r4, r0
 80079ae:	e7e4      	b.n	800797a <__pow5mult+0x6a>
 80079b0:	4638      	mov	r0, r7
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	bf00      	nop
 80079b8:	0800a578 	.word	0x0800a578
 80079bc:	0800a3af 	.word	0x0800a3af
 80079c0:	0800a42f 	.word	0x0800a42f

080079c4 <__lshift>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	4607      	mov	r7, r0
 80079cc:	4691      	mov	r9, r2
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	6849      	ldr	r1, [r1, #4]
 80079d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079d6:	68a3      	ldr	r3, [r4, #8]
 80079d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079dc:	f108 0601 	add.w	r6, r8, #1
 80079e0:	42b3      	cmp	r3, r6
 80079e2:	db0b      	blt.n	80079fc <__lshift+0x38>
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff fddf 	bl	80075a8 <_Balloc>
 80079ea:	4605      	mov	r5, r0
 80079ec:	b948      	cbnz	r0, 8007a02 <__lshift+0x3e>
 80079ee:	4602      	mov	r2, r0
 80079f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079f4:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <__lshift+0xd0>)
 80079f6:	4828      	ldr	r0, [pc, #160]	; (8007a98 <__lshift+0xd4>)
 80079f8:	f000 fb60 	bl	80080bc <__assert_func>
 80079fc:	3101      	adds	r1, #1
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	e7ee      	b.n	80079e0 <__lshift+0x1c>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f100 0114 	add.w	r1, r0, #20
 8007a08:	f100 0210 	add.w	r2, r0, #16
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	4553      	cmp	r3, sl
 8007a10:	db33      	blt.n	8007a7a <__lshift+0xb6>
 8007a12:	6920      	ldr	r0, [r4, #16]
 8007a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a18:	f104 0314 	add.w	r3, r4, #20
 8007a1c:	f019 091f 	ands.w	r9, r9, #31
 8007a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a28:	d02b      	beq.n	8007a82 <__lshift+0xbe>
 8007a2a:	468a      	mov	sl, r1
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	fa00 f009 	lsl.w	r0, r0, r9
 8007a38:	4310      	orrs	r0, r2
 8007a3a:	f84a 0b04 	str.w	r0, [sl], #4
 8007a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a42:	459c      	cmp	ip, r3
 8007a44:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a48:	d8f3      	bhi.n	8007a32 <__lshift+0x6e>
 8007a4a:	ebac 0304 	sub.w	r3, ip, r4
 8007a4e:	3b15      	subs	r3, #21
 8007a50:	f023 0303 	bic.w	r3, r3, #3
 8007a54:	3304      	adds	r3, #4
 8007a56:	f104 0015 	add.w	r0, r4, #21
 8007a5a:	4584      	cmp	ip, r0
 8007a5c:	bf38      	it	cc
 8007a5e:	2304      	movcc	r3, #4
 8007a60:	50ca      	str	r2, [r1, r3]
 8007a62:	b10a      	cbz	r2, 8007a68 <__lshift+0xa4>
 8007a64:	f108 0602 	add.w	r6, r8, #2
 8007a68:	3e01      	subs	r6, #1
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	612e      	str	r6, [r5, #16]
 8007a70:	f7ff fdda 	bl	8007628 <_Bfree>
 8007a74:	4628      	mov	r0, r5
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a7e:	3301      	adds	r3, #1
 8007a80:	e7c5      	b.n	8007a0e <__lshift+0x4a>
 8007a82:	3904      	subs	r1, #4
 8007a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a88:	459c      	cmp	ip, r3
 8007a8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a8e:	d8f9      	bhi.n	8007a84 <__lshift+0xc0>
 8007a90:	e7ea      	b.n	8007a68 <__lshift+0xa4>
 8007a92:	bf00      	nop
 8007a94:	0800a41e 	.word	0x0800a41e
 8007a98:	0800a42f 	.word	0x0800a42f

08007a9c <__mcmp>:
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	690a      	ldr	r2, [r1, #16]
 8007aa0:	6900      	ldr	r0, [r0, #16]
 8007aa2:	b530      	push	{r4, r5, lr}
 8007aa4:	1a80      	subs	r0, r0, r2
 8007aa6:	d10d      	bne.n	8007ac4 <__mcmp+0x28>
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	3114      	adds	r1, #20
 8007aac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ab0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007abc:	4295      	cmp	r5, r2
 8007abe:	d002      	beq.n	8007ac6 <__mcmp+0x2a>
 8007ac0:	d304      	bcc.n	8007acc <__mcmp+0x30>
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	bd30      	pop	{r4, r5, pc}
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	d3f4      	bcc.n	8007ab4 <__mcmp+0x18>
 8007aca:	e7fb      	b.n	8007ac4 <__mcmp+0x28>
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	e7f8      	b.n	8007ac4 <__mcmp+0x28>
	...

08007ad4 <__mdiff>:
 8007ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	460d      	mov	r5, r1
 8007ada:	4607      	mov	r7, r0
 8007adc:	4611      	mov	r1, r2
 8007ade:	4628      	mov	r0, r5
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	f7ff ffdb 	bl	8007a9c <__mcmp>
 8007ae6:	1e06      	subs	r6, r0, #0
 8007ae8:	d111      	bne.n	8007b0e <__mdiff+0x3a>
 8007aea:	4631      	mov	r1, r6
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff fd5b 	bl	80075a8 <_Balloc>
 8007af2:	4602      	mov	r2, r0
 8007af4:	b928      	cbnz	r0, 8007b02 <__mdiff+0x2e>
 8007af6:	f240 2137 	movw	r1, #567	; 0x237
 8007afa:	4b3a      	ldr	r3, [pc, #232]	; (8007be4 <__mdiff+0x110>)
 8007afc:	483a      	ldr	r0, [pc, #232]	; (8007be8 <__mdiff+0x114>)
 8007afe:	f000 fadd 	bl	80080bc <__assert_func>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b08:	4610      	mov	r0, r2
 8007b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0e:	bfa4      	itt	ge
 8007b10:	4623      	movge	r3, r4
 8007b12:	462c      	movge	r4, r5
 8007b14:	4638      	mov	r0, r7
 8007b16:	6861      	ldr	r1, [r4, #4]
 8007b18:	bfa6      	itte	ge
 8007b1a:	461d      	movge	r5, r3
 8007b1c:	2600      	movge	r6, #0
 8007b1e:	2601      	movlt	r6, #1
 8007b20:	f7ff fd42 	bl	80075a8 <_Balloc>
 8007b24:	4602      	mov	r2, r0
 8007b26:	b918      	cbnz	r0, 8007b30 <__mdiff+0x5c>
 8007b28:	f240 2145 	movw	r1, #581	; 0x245
 8007b2c:	4b2d      	ldr	r3, [pc, #180]	; (8007be4 <__mdiff+0x110>)
 8007b2e:	e7e5      	b.n	8007afc <__mdiff+0x28>
 8007b30:	f102 0814 	add.w	r8, r2, #20
 8007b34:	46c2      	mov	sl, r8
 8007b36:	f04f 0c00 	mov.w	ip, #0
 8007b3a:	6927      	ldr	r7, [r4, #16]
 8007b3c:	60c6      	str	r6, [r0, #12]
 8007b3e:	692e      	ldr	r6, [r5, #16]
 8007b40:	f104 0014 	add.w	r0, r4, #20
 8007b44:	f105 0914 	add.w	r9, r5, #20
 8007b48:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007b4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b50:	3410      	adds	r4, #16
 8007b52:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007b56:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b5a:	fa1f f18b 	uxth.w	r1, fp
 8007b5e:	4461      	add	r1, ip
 8007b60:	fa1f fc83 	uxth.w	ip, r3
 8007b64:	0c1b      	lsrs	r3, r3, #16
 8007b66:	eba1 010c 	sub.w	r1, r1, ip
 8007b6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b72:	b289      	uxth	r1, r1
 8007b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007b78:	454e      	cmp	r6, r9
 8007b7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b7e:	f84a 1b04 	str.w	r1, [sl], #4
 8007b82:	d8e6      	bhi.n	8007b52 <__mdiff+0x7e>
 8007b84:	1b73      	subs	r3, r6, r5
 8007b86:	3b15      	subs	r3, #21
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	3515      	adds	r5, #21
 8007b8e:	3304      	adds	r3, #4
 8007b90:	42ae      	cmp	r6, r5
 8007b92:	bf38      	it	cc
 8007b94:	2304      	movcc	r3, #4
 8007b96:	4418      	add	r0, r3
 8007b98:	4443      	add	r3, r8
 8007b9a:	461e      	mov	r6, r3
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	4575      	cmp	r5, lr
 8007ba0:	d30e      	bcc.n	8007bc0 <__mdiff+0xec>
 8007ba2:	f10e 0103 	add.w	r1, lr, #3
 8007ba6:	1a09      	subs	r1, r1, r0
 8007ba8:	f021 0103 	bic.w	r1, r1, #3
 8007bac:	3803      	subs	r0, #3
 8007bae:	4586      	cmp	lr, r0
 8007bb0:	bf38      	it	cc
 8007bb2:	2100      	movcc	r1, #0
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bba:	b189      	cbz	r1, 8007be0 <__mdiff+0x10c>
 8007bbc:	6117      	str	r7, [r2, #16]
 8007bbe:	e7a3      	b.n	8007b08 <__mdiff+0x34>
 8007bc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8007bc4:	fa1f f188 	uxth.w	r1, r8
 8007bc8:	4461      	add	r1, ip
 8007bca:	140c      	asrs	r4, r1, #16
 8007bcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bd0:	b289      	uxth	r1, r1
 8007bd2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bd6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007bda:	f846 1b04 	str.w	r1, [r6], #4
 8007bde:	e7de      	b.n	8007b9e <__mdiff+0xca>
 8007be0:	3f01      	subs	r7, #1
 8007be2:	e7e8      	b.n	8007bb6 <__mdiff+0xe2>
 8007be4:	0800a41e 	.word	0x0800a41e
 8007be8:	0800a42f 	.word	0x0800a42f

08007bec <__d2b>:
 8007bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4617      	mov	r7, r2
 8007bf2:	461c      	mov	r4, r3
 8007bf4:	9e08      	ldr	r6, [sp, #32]
 8007bf6:	f7ff fcd7 	bl	80075a8 <_Balloc>
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	b930      	cbnz	r0, 8007c0c <__d2b+0x20>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	f240 310f 	movw	r1, #783	; 0x30f
 8007c04:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <__d2b+0xa4>)
 8007c06:	4823      	ldr	r0, [pc, #140]	; (8007c94 <__d2b+0xa8>)
 8007c08:	f000 fa58 	bl	80080bc <__assert_func>
 8007c0c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007c10:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007c14:	bb24      	cbnz	r4, 8007c60 <__d2b+0x74>
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	d026      	beq.n	8007c6a <__d2b+0x7e>
 8007c1c:	4668      	mov	r0, sp
 8007c1e:	9700      	str	r7, [sp, #0]
 8007c20:	f7ff fd8a 	bl	8007738 <__lo0bits>
 8007c24:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c28:	b1e8      	cbz	r0, 8007c66 <__d2b+0x7a>
 8007c2a:	f1c0 0320 	rsb	r3, r0, #32
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	430b      	orrs	r3, r1
 8007c34:	40c2      	lsrs	r2, r0
 8007c36:	616b      	str	r3, [r5, #20]
 8007c38:	9201      	str	r2, [sp, #4]
 8007c3a:	9b01      	ldr	r3, [sp, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bf14      	ite	ne
 8007c40:	2102      	movne	r1, #2
 8007c42:	2101      	moveq	r1, #1
 8007c44:	61ab      	str	r3, [r5, #24]
 8007c46:	6129      	str	r1, [r5, #16]
 8007c48:	b1bc      	cbz	r4, 8007c7a <__d2b+0x8e>
 8007c4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c4e:	4404      	add	r4, r0
 8007c50:	6034      	str	r4, [r6, #0]
 8007c52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c58:	6018      	str	r0, [r3, #0]
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c64:	e7d7      	b.n	8007c16 <__d2b+0x2a>
 8007c66:	6169      	str	r1, [r5, #20]
 8007c68:	e7e7      	b.n	8007c3a <__d2b+0x4e>
 8007c6a:	a801      	add	r0, sp, #4
 8007c6c:	f7ff fd64 	bl	8007738 <__lo0bits>
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	2101      	movs	r1, #1
 8007c74:	616b      	str	r3, [r5, #20]
 8007c76:	3020      	adds	r0, #32
 8007c78:	e7e5      	b.n	8007c46 <__d2b+0x5a>
 8007c7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c7e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007c82:	6030      	str	r0, [r6, #0]
 8007c84:	6918      	ldr	r0, [r3, #16]
 8007c86:	f7ff fd37 	bl	80076f8 <__hi0bits>
 8007c8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c8e:	e7e2      	b.n	8007c56 <__d2b+0x6a>
 8007c90:	0800a41e 	.word	0x0800a41e
 8007c94:	0800a42f 	.word	0x0800a42f

08007c98 <__ssputs_r>:
 8007c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9c:	461f      	mov	r7, r3
 8007c9e:	688e      	ldr	r6, [r1, #8]
 8007ca0:	4682      	mov	sl, r0
 8007ca2:	42be      	cmp	r6, r7
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	4690      	mov	r8, r2
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	d82c      	bhi.n	8007d06 <__ssputs_r+0x6e>
 8007cac:	898a      	ldrh	r2, [r1, #12]
 8007cae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cb2:	d026      	beq.n	8007d02 <__ssputs_r+0x6a>
 8007cb4:	6965      	ldr	r5, [r4, #20]
 8007cb6:	6909      	ldr	r1, [r1, #16]
 8007cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cbc:	eba3 0901 	sub.w	r9, r3, r1
 8007cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cc4:	1c7b      	adds	r3, r7, #1
 8007cc6:	444b      	add	r3, r9
 8007cc8:	106d      	asrs	r5, r5, #1
 8007cca:	429d      	cmp	r5, r3
 8007ccc:	bf38      	it	cc
 8007cce:	461d      	movcc	r5, r3
 8007cd0:	0553      	lsls	r3, r2, #21
 8007cd2:	d527      	bpl.n	8007d24 <__ssputs_r+0x8c>
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f7ff fbdb 	bl	8007490 <_malloc_r>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	b360      	cbz	r0, 8007d38 <__ssputs_r+0xa0>
 8007cde:	464a      	mov	r2, r9
 8007ce0:	6921      	ldr	r1, [r4, #16]
 8007ce2:	f7fe fcea 	bl	80066ba <memcpy>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf0:	81a3      	strh	r3, [r4, #12]
 8007cf2:	6126      	str	r6, [r4, #16]
 8007cf4:	444e      	add	r6, r9
 8007cf6:	6026      	str	r6, [r4, #0]
 8007cf8:	463e      	mov	r6, r7
 8007cfa:	6165      	str	r5, [r4, #20]
 8007cfc:	eba5 0509 	sub.w	r5, r5, r9
 8007d00:	60a5      	str	r5, [r4, #8]
 8007d02:	42be      	cmp	r6, r7
 8007d04:	d900      	bls.n	8007d08 <__ssputs_r+0x70>
 8007d06:	463e      	mov	r6, r7
 8007d08:	4632      	mov	r2, r6
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	f7fe fc2c 	bl	800656a <memmove>
 8007d12:	2000      	movs	r0, #0
 8007d14:	68a3      	ldr	r3, [r4, #8]
 8007d16:	1b9b      	subs	r3, r3, r6
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	4433      	add	r3, r6
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	462a      	mov	r2, r5
 8007d26:	f000 fa0d 	bl	8008144 <_realloc_r>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1e0      	bne.n	8007cf2 <__ssputs_r+0x5a>
 8007d30:	4650      	mov	r0, sl
 8007d32:	6921      	ldr	r1, [r4, #16]
 8007d34:	f7ff fb3c 	bl	80073b0 <_free_r>
 8007d38:	230c      	movs	r3, #12
 8007d3a:	f8ca 3000 	str.w	r3, [sl]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295
 8007d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	e7e9      	b.n	8007d20 <__ssputs_r+0x88>

08007d4c <_svfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4698      	mov	r8, r3
 8007d52:	898b      	ldrh	r3, [r1, #12]
 8007d54:	4607      	mov	r7, r0
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	460d      	mov	r5, r1
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	b09d      	sub	sp, #116	; 0x74
 8007d5e:	d50e      	bpl.n	8007d7e <_svfiprintf_r+0x32>
 8007d60:	690b      	ldr	r3, [r1, #16]
 8007d62:	b963      	cbnz	r3, 8007d7e <_svfiprintf_r+0x32>
 8007d64:	2140      	movs	r1, #64	; 0x40
 8007d66:	f7ff fb93 	bl	8007490 <_malloc_r>
 8007d6a:	6028      	str	r0, [r5, #0]
 8007d6c:	6128      	str	r0, [r5, #16]
 8007d6e:	b920      	cbnz	r0, 8007d7a <_svfiprintf_r+0x2e>
 8007d70:	230c      	movs	r3, #12
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	e0d0      	b.n	8007f1c <_svfiprintf_r+0x1d0>
 8007d7a:	2340      	movs	r3, #64	; 0x40
 8007d7c:	616b      	str	r3, [r5, #20]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9309      	str	r3, [sp, #36]	; 0x24
 8007d82:	2320      	movs	r3, #32
 8007d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d88:	2330      	movs	r3, #48	; 0x30
 8007d8a:	f04f 0901 	mov.w	r9, #1
 8007d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d92:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007f34 <_svfiprintf_r+0x1e8>
 8007d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d9a:	4623      	mov	r3, r4
 8007d9c:	469a      	mov	sl, r3
 8007d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da2:	b10a      	cbz	r2, 8007da8 <_svfiprintf_r+0x5c>
 8007da4:	2a25      	cmp	r2, #37	; 0x25
 8007da6:	d1f9      	bne.n	8007d9c <_svfiprintf_r+0x50>
 8007da8:	ebba 0b04 	subs.w	fp, sl, r4
 8007dac:	d00b      	beq.n	8007dc6 <_svfiprintf_r+0x7a>
 8007dae:	465b      	mov	r3, fp
 8007db0:	4622      	mov	r2, r4
 8007db2:	4629      	mov	r1, r5
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff ff6f 	bl	8007c98 <__ssputs_r>
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f000 80a9 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc2:	445a      	add	r2, fp
 8007dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80a1 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dda:	f10a 0a01 	add.w	sl, sl, #1
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	9307      	str	r3, [sp, #28]
 8007de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007de6:	931a      	str	r3, [sp, #104]	; 0x68
 8007de8:	4654      	mov	r4, sl
 8007dea:	2205      	movs	r2, #5
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	4850      	ldr	r0, [pc, #320]	; (8007f34 <_svfiprintf_r+0x1e8>)
 8007df2:	f7fe fc54 	bl	800669e <memchr>
 8007df6:	9a04      	ldr	r2, [sp, #16]
 8007df8:	b9d8      	cbnz	r0, 8007e32 <_svfiprintf_r+0xe6>
 8007dfa:	06d0      	lsls	r0, r2, #27
 8007dfc:	bf44      	itt	mi
 8007dfe:	2320      	movmi	r3, #32
 8007e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e04:	0711      	lsls	r1, r2, #28
 8007e06:	bf44      	itt	mi
 8007e08:	232b      	movmi	r3, #43	; 0x2b
 8007e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e12:	2b2a      	cmp	r3, #42	; 0x2a
 8007e14:	d015      	beq.n	8007e42 <_svfiprintf_r+0xf6>
 8007e16:	4654      	mov	r4, sl
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f04f 0c0a 	mov.w	ip, #10
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	4621      	mov	r1, r4
 8007e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e26:	3b30      	subs	r3, #48	; 0x30
 8007e28:	2b09      	cmp	r3, #9
 8007e2a:	d94d      	bls.n	8007ec8 <_svfiprintf_r+0x17c>
 8007e2c:	b1b0      	cbz	r0, 8007e5c <_svfiprintf_r+0x110>
 8007e2e:	9207      	str	r2, [sp, #28]
 8007e30:	e014      	b.n	8007e5c <_svfiprintf_r+0x110>
 8007e32:	eba0 0308 	sub.w	r3, r0, r8
 8007e36:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	46a2      	mov	sl, r4
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	e7d2      	b.n	8007de8 <_svfiprintf_r+0x9c>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	1d19      	adds	r1, r3, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	9103      	str	r1, [sp, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bfbb      	ittet	lt
 8007e4e:	425b      	neglt	r3, r3
 8007e50:	f042 0202 	orrlt.w	r2, r2, #2
 8007e54:	9307      	strge	r3, [sp, #28]
 8007e56:	9307      	strlt	r3, [sp, #28]
 8007e58:	bfb8      	it	lt
 8007e5a:	9204      	strlt	r2, [sp, #16]
 8007e5c:	7823      	ldrb	r3, [r4, #0]
 8007e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e60:	d10c      	bne.n	8007e7c <_svfiprintf_r+0x130>
 8007e62:	7863      	ldrb	r3, [r4, #1]
 8007e64:	2b2a      	cmp	r3, #42	; 0x2a
 8007e66:	d134      	bne.n	8007ed2 <_svfiprintf_r+0x186>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	3402      	adds	r4, #2
 8007e6c:	1d1a      	adds	r2, r3, #4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	9203      	str	r2, [sp, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfb8      	it	lt
 8007e76:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007f38 <_svfiprintf_r+0x1ec>
 8007e80:	2203      	movs	r2, #3
 8007e82:	4650      	mov	r0, sl
 8007e84:	7821      	ldrb	r1, [r4, #0]
 8007e86:	f7fe fc0a 	bl	800669e <memchr>
 8007e8a:	b138      	cbz	r0, 8007e9c <_svfiprintf_r+0x150>
 8007e8c:	2240      	movs	r2, #64	; 0x40
 8007e8e:	9b04      	ldr	r3, [sp, #16]
 8007e90:	eba0 000a 	sub.w	r0, r0, sl
 8007e94:	4082      	lsls	r2, r0
 8007e96:	4313      	orrs	r3, r2
 8007e98:	3401      	adds	r4, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea0:	2206      	movs	r2, #6
 8007ea2:	4826      	ldr	r0, [pc, #152]	; (8007f3c <_svfiprintf_r+0x1f0>)
 8007ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ea8:	f7fe fbf9 	bl	800669e <memchr>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d038      	beq.n	8007f22 <_svfiprintf_r+0x1d6>
 8007eb0:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <_svfiprintf_r+0x1f4>)
 8007eb2:	bb1b      	cbnz	r3, 8007efc <_svfiprintf_r+0x1b0>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec2:	4433      	add	r3, r6
 8007ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec6:	e768      	b.n	8007d9a <_svfiprintf_r+0x4e>
 8007ec8:	460c      	mov	r4, r1
 8007eca:	2001      	movs	r0, #1
 8007ecc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed0:	e7a6      	b.n	8007e20 <_svfiprintf_r+0xd4>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f04f 0c0a 	mov.w	ip, #10
 8007ed8:	4619      	mov	r1, r3
 8007eda:	3401      	adds	r4, #1
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee4:	3a30      	subs	r2, #48	; 0x30
 8007ee6:	2a09      	cmp	r2, #9
 8007ee8:	d903      	bls.n	8007ef2 <_svfiprintf_r+0x1a6>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c6      	beq.n	8007e7c <_svfiprintf_r+0x130>
 8007eee:	9105      	str	r1, [sp, #20]
 8007ef0:	e7c4      	b.n	8007e7c <_svfiprintf_r+0x130>
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007efa:	e7f0      	b.n	8007ede <_svfiprintf_r+0x192>
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4638      	mov	r0, r7
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <_svfiprintf_r+0x1f8>)
 8007f06:	a904      	add	r1, sp, #16
 8007f08:	f7fd fe48 	bl	8005b9c <_printf_float>
 8007f0c:	1c42      	adds	r2, r0, #1
 8007f0e:	4606      	mov	r6, r0
 8007f10:	d1d6      	bne.n	8007ec0 <_svfiprintf_r+0x174>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	065b      	lsls	r3, r3, #25
 8007f16:	f53f af2d 	bmi.w	8007d74 <_svfiprintf_r+0x28>
 8007f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f1c:	b01d      	add	sp, #116	; 0x74
 8007f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f22:	ab03      	add	r3, sp, #12
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	462a      	mov	r2, r5
 8007f28:	4638      	mov	r0, r7
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <_svfiprintf_r+0x1f8>)
 8007f2c:	a904      	add	r1, sp, #16
 8007f2e:	f7fe f8d5 	bl	80060dc <_printf_i>
 8007f32:	e7eb      	b.n	8007f0c <_svfiprintf_r+0x1c0>
 8007f34:	0800a584 	.word	0x0800a584
 8007f38:	0800a58a 	.word	0x0800a58a
 8007f3c:	0800a58e 	.word	0x0800a58e
 8007f40:	08005b9d 	.word	0x08005b9d
 8007f44:	08007c99 	.word	0x08007c99

08007f48 <__sflush_r>:
 8007f48:	898a      	ldrh	r2, [r1, #12]
 8007f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	0710      	lsls	r0, r2, #28
 8007f50:	460c      	mov	r4, r1
 8007f52:	d457      	bmi.n	8008004 <__sflush_r+0xbc>
 8007f54:	684b      	ldr	r3, [r1, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dc04      	bgt.n	8007f64 <__sflush_r+0x1c>
 8007f5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc01      	bgt.n	8007f64 <__sflush_r+0x1c>
 8007f60:	2000      	movs	r0, #0
 8007f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d0fa      	beq.n	8007f60 <__sflush_r+0x18>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f70:	682f      	ldr	r7, [r5, #0]
 8007f72:	6a21      	ldr	r1, [r4, #32]
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	d032      	beq.n	8007fde <__sflush_r+0x96>
 8007f78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	075a      	lsls	r2, r3, #29
 8007f7e:	d505      	bpl.n	8007f8c <__sflush_r+0x44>
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	1ac0      	subs	r0, r0, r3
 8007f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f86:	b10b      	cbz	r3, 8007f8c <__sflush_r+0x44>
 8007f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f8a:	1ac0      	subs	r0, r0, r3
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4602      	mov	r2, r0
 8007f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f92:	4628      	mov	r0, r5
 8007f94:	6a21      	ldr	r1, [r4, #32]
 8007f96:	47b0      	blx	r6
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	d106      	bne.n	8007fac <__sflush_r+0x64>
 8007f9e:	6829      	ldr	r1, [r5, #0]
 8007fa0:	291d      	cmp	r1, #29
 8007fa2:	d82b      	bhi.n	8007ffc <__sflush_r+0xb4>
 8007fa4:	4a28      	ldr	r2, [pc, #160]	; (8008048 <__sflush_r+0x100>)
 8007fa6:	410a      	asrs	r2, r1
 8007fa8:	07d6      	lsls	r6, r2, #31
 8007faa:	d427      	bmi.n	8007ffc <__sflush_r+0xb4>
 8007fac:	2200      	movs	r2, #0
 8007fae:	6062      	str	r2, [r4, #4]
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	04d9      	lsls	r1, r3, #19
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	d504      	bpl.n	8007fc2 <__sflush_r+0x7a>
 8007fb8:	1c42      	adds	r2, r0, #1
 8007fba:	d101      	bne.n	8007fc0 <__sflush_r+0x78>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b903      	cbnz	r3, 8007fc2 <__sflush_r+0x7a>
 8007fc0:	6560      	str	r0, [r4, #84]	; 0x54
 8007fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc4:	602f      	str	r7, [r5, #0]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	d0ca      	beq.n	8007f60 <__sflush_r+0x18>
 8007fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fce:	4299      	cmp	r1, r3
 8007fd0:	d002      	beq.n	8007fd8 <__sflush_r+0x90>
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7ff f9ec 	bl	80073b0 <_free_r>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	6360      	str	r0, [r4, #52]	; 0x34
 8007fdc:	e7c1      	b.n	8007f62 <__sflush_r+0x1a>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b0      	blx	r6
 8007fe4:	1c41      	adds	r1, r0, #1
 8007fe6:	d1c8      	bne.n	8007f7a <__sflush_r+0x32>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0c5      	beq.n	8007f7a <__sflush_r+0x32>
 8007fee:	2b1d      	cmp	r3, #29
 8007ff0:	d001      	beq.n	8007ff6 <__sflush_r+0xae>
 8007ff2:	2b16      	cmp	r3, #22
 8007ff4:	d101      	bne.n	8007ffa <__sflush_r+0xb2>
 8007ff6:	602f      	str	r7, [r5, #0]
 8007ff8:	e7b2      	b.n	8007f60 <__sflush_r+0x18>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	e7ae      	b.n	8007f62 <__sflush_r+0x1a>
 8008004:	690f      	ldr	r7, [r1, #16]
 8008006:	2f00      	cmp	r7, #0
 8008008:	d0aa      	beq.n	8007f60 <__sflush_r+0x18>
 800800a:	0793      	lsls	r3, r2, #30
 800800c:	bf18      	it	ne
 800800e:	2300      	movne	r3, #0
 8008010:	680e      	ldr	r6, [r1, #0]
 8008012:	bf08      	it	eq
 8008014:	694b      	ldreq	r3, [r1, #20]
 8008016:	1bf6      	subs	r6, r6, r7
 8008018:	600f      	str	r7, [r1, #0]
 800801a:	608b      	str	r3, [r1, #8]
 800801c:	2e00      	cmp	r6, #0
 800801e:	dd9f      	ble.n	8007f60 <__sflush_r+0x18>
 8008020:	4633      	mov	r3, r6
 8008022:	463a      	mov	r2, r7
 8008024:	4628      	mov	r0, r5
 8008026:	6a21      	ldr	r1, [r4, #32]
 8008028:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800802c:	47e0      	blx	ip
 800802e:	2800      	cmp	r0, #0
 8008030:	dc06      	bgt.n	8008040 <__sflush_r+0xf8>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	e790      	b.n	8007f62 <__sflush_r+0x1a>
 8008040:	4407      	add	r7, r0
 8008042:	1a36      	subs	r6, r6, r0
 8008044:	e7ea      	b.n	800801c <__sflush_r+0xd4>
 8008046:	bf00      	nop
 8008048:	dfbffffe 	.word	0xdfbffffe

0800804c <_fflush_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	690b      	ldr	r3, [r1, #16]
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b913      	cbnz	r3, 800805c <_fflush_r+0x10>
 8008056:	2500      	movs	r5, #0
 8008058:	4628      	mov	r0, r5
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	b118      	cbz	r0, 8008066 <_fflush_r+0x1a>
 800805e:	6a03      	ldr	r3, [r0, #32]
 8008060:	b90b      	cbnz	r3, 8008066 <_fflush_r+0x1a>
 8008062:	f7fe f9e9 	bl	8006438 <__sinit>
 8008066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f3      	beq.n	8008056 <_fflush_r+0xa>
 800806e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008070:	07d0      	lsls	r0, r2, #31
 8008072:	d404      	bmi.n	800807e <_fflush_r+0x32>
 8008074:	0599      	lsls	r1, r3, #22
 8008076:	d402      	bmi.n	800807e <_fflush_r+0x32>
 8008078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800807a:	f7fe fb0e 	bl	800669a <__retarget_lock_acquire_recursive>
 800807e:	4628      	mov	r0, r5
 8008080:	4621      	mov	r1, r4
 8008082:	f7ff ff61 	bl	8007f48 <__sflush_r>
 8008086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008088:	4605      	mov	r5, r0
 800808a:	07da      	lsls	r2, r3, #31
 800808c:	d4e4      	bmi.n	8008058 <_fflush_r+0xc>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d4e1      	bmi.n	8008058 <_fflush_r+0xc>
 8008094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008096:	f7fe fb01 	bl	800669c <__retarget_lock_release_recursive>
 800809a:	e7dd      	b.n	8008058 <_fflush_r+0xc>

0800809c <_sbrk_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	2300      	movs	r3, #0
 80080a0:	4d05      	ldr	r5, [pc, #20]	; (80080b8 <_sbrk_r+0x1c>)
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7fa fda4 	bl	8002bf4 <_sbrk>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_sbrk_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_sbrk_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20001064 	.word	0x20001064

080080bc <__assert_func>:
 80080bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080be:	4614      	mov	r4, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <__assert_func+0x2c>)
 80080c4:	4605      	mov	r5, r0
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68d8      	ldr	r0, [r3, #12]
 80080ca:	b14c      	cbz	r4, 80080e0 <__assert_func+0x24>
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <__assert_func+0x30>)
 80080ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080d2:	9100      	str	r1, [sp, #0]
 80080d4:	462b      	mov	r3, r5
 80080d6:	4906      	ldr	r1, [pc, #24]	; (80080f0 <__assert_func+0x34>)
 80080d8:	f000 f870 	bl	80081bc <fiprintf>
 80080dc:	f000 f880 	bl	80081e0 <abort>
 80080e0:	4b04      	ldr	r3, [pc, #16]	; (80080f4 <__assert_func+0x38>)
 80080e2:	461c      	mov	r4, r3
 80080e4:	e7f3      	b.n	80080ce <__assert_func+0x12>
 80080e6:	bf00      	nop
 80080e8:	20000084 	.word	0x20000084
 80080ec:	0800a59f 	.word	0x0800a59f
 80080f0:	0800a5ac 	.word	0x0800a5ac
 80080f4:	0800a5da 	.word	0x0800a5da

080080f8 <_calloc_r>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	fba1 5402 	umull	r5, r4, r1, r2
 80080fe:	b934      	cbnz	r4, 800810e <_calloc_r+0x16>
 8008100:	4629      	mov	r1, r5
 8008102:	f7ff f9c5 	bl	8007490 <_malloc_r>
 8008106:	4606      	mov	r6, r0
 8008108:	b928      	cbnz	r0, 8008116 <_calloc_r+0x1e>
 800810a:	4630      	mov	r0, r6
 800810c:	bd70      	pop	{r4, r5, r6, pc}
 800810e:	220c      	movs	r2, #12
 8008110:	2600      	movs	r6, #0
 8008112:	6002      	str	r2, [r0, #0]
 8008114:	e7f9      	b.n	800810a <_calloc_r+0x12>
 8008116:	462a      	mov	r2, r5
 8008118:	4621      	mov	r1, r4
 800811a:	f7fe fa40 	bl	800659e <memset>
 800811e:	e7f4      	b.n	800810a <_calloc_r+0x12>

08008120 <__ascii_mbtowc>:
 8008120:	b082      	sub	sp, #8
 8008122:	b901      	cbnz	r1, 8008126 <__ascii_mbtowc+0x6>
 8008124:	a901      	add	r1, sp, #4
 8008126:	b142      	cbz	r2, 800813a <__ascii_mbtowc+0x1a>
 8008128:	b14b      	cbz	r3, 800813e <__ascii_mbtowc+0x1e>
 800812a:	7813      	ldrb	r3, [r2, #0]
 800812c:	600b      	str	r3, [r1, #0]
 800812e:	7812      	ldrb	r2, [r2, #0]
 8008130:	1e10      	subs	r0, r2, #0
 8008132:	bf18      	it	ne
 8008134:	2001      	movne	r0, #1
 8008136:	b002      	add	sp, #8
 8008138:	4770      	bx	lr
 800813a:	4610      	mov	r0, r2
 800813c:	e7fb      	b.n	8008136 <__ascii_mbtowc+0x16>
 800813e:	f06f 0001 	mvn.w	r0, #1
 8008142:	e7f8      	b.n	8008136 <__ascii_mbtowc+0x16>

08008144 <_realloc_r>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4680      	mov	r8, r0
 800814a:	4614      	mov	r4, r2
 800814c:	460e      	mov	r6, r1
 800814e:	b921      	cbnz	r1, 800815a <_realloc_r+0x16>
 8008150:	4611      	mov	r1, r2
 8008152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008156:	f7ff b99b 	b.w	8007490 <_malloc_r>
 800815a:	b92a      	cbnz	r2, 8008168 <_realloc_r+0x24>
 800815c:	f7ff f928 	bl	80073b0 <_free_r>
 8008160:	4625      	mov	r5, r4
 8008162:	4628      	mov	r0, r5
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	f000 f841 	bl	80081ee <_malloc_usable_size_r>
 800816c:	4284      	cmp	r4, r0
 800816e:	4607      	mov	r7, r0
 8008170:	d802      	bhi.n	8008178 <_realloc_r+0x34>
 8008172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008176:	d812      	bhi.n	800819e <_realloc_r+0x5a>
 8008178:	4621      	mov	r1, r4
 800817a:	4640      	mov	r0, r8
 800817c:	f7ff f988 	bl	8007490 <_malloc_r>
 8008180:	4605      	mov	r5, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d0ed      	beq.n	8008162 <_realloc_r+0x1e>
 8008186:	42bc      	cmp	r4, r7
 8008188:	4622      	mov	r2, r4
 800818a:	4631      	mov	r1, r6
 800818c:	bf28      	it	cs
 800818e:	463a      	movcs	r2, r7
 8008190:	f7fe fa93 	bl	80066ba <memcpy>
 8008194:	4631      	mov	r1, r6
 8008196:	4640      	mov	r0, r8
 8008198:	f7ff f90a 	bl	80073b0 <_free_r>
 800819c:	e7e1      	b.n	8008162 <_realloc_r+0x1e>
 800819e:	4635      	mov	r5, r6
 80081a0:	e7df      	b.n	8008162 <_realloc_r+0x1e>

080081a2 <__ascii_wctomb>:
 80081a2:	4603      	mov	r3, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	b141      	cbz	r1, 80081ba <__ascii_wctomb+0x18>
 80081a8:	2aff      	cmp	r2, #255	; 0xff
 80081aa:	d904      	bls.n	80081b6 <__ascii_wctomb+0x14>
 80081ac:	228a      	movs	r2, #138	; 0x8a
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	4770      	bx	lr
 80081b6:	2001      	movs	r0, #1
 80081b8:	700a      	strb	r2, [r1, #0]
 80081ba:	4770      	bx	lr

080081bc <fiprintf>:
 80081bc:	b40e      	push	{r1, r2, r3}
 80081be:	b503      	push	{r0, r1, lr}
 80081c0:	4601      	mov	r1, r0
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	4805      	ldr	r0, [pc, #20]	; (80081dc <fiprintf+0x20>)
 80081c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ca:	6800      	ldr	r0, [r0, #0]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f000 f83d 	bl	800824c <_vfiprintf_r>
 80081d2:	b002      	add	sp, #8
 80081d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d8:	b003      	add	sp, #12
 80081da:	4770      	bx	lr
 80081dc:	20000084 	.word	0x20000084

080081e0 <abort>:
 80081e0:	2006      	movs	r0, #6
 80081e2:	b508      	push	{r3, lr}
 80081e4:	f000 fa0a 	bl	80085fc <raise>
 80081e8:	2001      	movs	r0, #1
 80081ea:	f7fa fc90 	bl	8002b0e <_exit>

080081ee <_malloc_usable_size_r>:
 80081ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f2:	1f18      	subs	r0, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbc      	itt	lt
 80081f8:	580b      	ldrlt	r3, [r1, r0]
 80081fa:	18c0      	addlt	r0, r0, r3
 80081fc:	4770      	bx	lr

080081fe <__sfputc_r>:
 80081fe:	6893      	ldr	r3, [r2, #8]
 8008200:	b410      	push	{r4}
 8008202:	3b01      	subs	r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	6093      	str	r3, [r2, #8]
 8008208:	da07      	bge.n	800821a <__sfputc_r+0x1c>
 800820a:	6994      	ldr	r4, [r2, #24]
 800820c:	42a3      	cmp	r3, r4
 800820e:	db01      	blt.n	8008214 <__sfputc_r+0x16>
 8008210:	290a      	cmp	r1, #10
 8008212:	d102      	bne.n	800821a <__sfputc_r+0x1c>
 8008214:	bc10      	pop	{r4}
 8008216:	f000 b933 	b.w	8008480 <__swbuf_r>
 800821a:	6813      	ldr	r3, [r2, #0]
 800821c:	1c58      	adds	r0, r3, #1
 800821e:	6010      	str	r0, [r2, #0]
 8008220:	7019      	strb	r1, [r3, #0]
 8008222:	4608      	mov	r0, r1
 8008224:	bc10      	pop	{r4}
 8008226:	4770      	bx	lr

08008228 <__sfputs_r>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	4614      	mov	r4, r2
 8008230:	18d5      	adds	r5, r2, r3
 8008232:	42ac      	cmp	r4, r5
 8008234:	d101      	bne.n	800823a <__sfputs_r+0x12>
 8008236:	2000      	movs	r0, #0
 8008238:	e007      	b.n	800824a <__sfputs_r+0x22>
 800823a:	463a      	mov	r2, r7
 800823c:	4630      	mov	r0, r6
 800823e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008242:	f7ff ffdc 	bl	80081fe <__sfputc_r>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	d1f3      	bne.n	8008232 <__sfputs_r+0xa>
 800824a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800824c <_vfiprintf_r>:
 800824c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	460d      	mov	r5, r1
 8008252:	4614      	mov	r4, r2
 8008254:	4698      	mov	r8, r3
 8008256:	4606      	mov	r6, r0
 8008258:	b09d      	sub	sp, #116	; 0x74
 800825a:	b118      	cbz	r0, 8008264 <_vfiprintf_r+0x18>
 800825c:	6a03      	ldr	r3, [r0, #32]
 800825e:	b90b      	cbnz	r3, 8008264 <_vfiprintf_r+0x18>
 8008260:	f7fe f8ea 	bl	8006438 <__sinit>
 8008264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008266:	07d9      	lsls	r1, r3, #31
 8008268:	d405      	bmi.n	8008276 <_vfiprintf_r+0x2a>
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	059a      	lsls	r2, r3, #22
 800826e:	d402      	bmi.n	8008276 <_vfiprintf_r+0x2a>
 8008270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008272:	f7fe fa12 	bl	800669a <__retarget_lock_acquire_recursive>
 8008276:	89ab      	ldrh	r3, [r5, #12]
 8008278:	071b      	lsls	r3, r3, #28
 800827a:	d501      	bpl.n	8008280 <_vfiprintf_r+0x34>
 800827c:	692b      	ldr	r3, [r5, #16]
 800827e:	b99b      	cbnz	r3, 80082a8 <_vfiprintf_r+0x5c>
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f93a 	bl	80084fc <__swsetup_r>
 8008288:	b170      	cbz	r0, 80082a8 <_vfiprintf_r+0x5c>
 800828a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800828c:	07dc      	lsls	r4, r3, #31
 800828e:	d504      	bpl.n	800829a <_vfiprintf_r+0x4e>
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	b01d      	add	sp, #116	; 0x74
 8008296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	0598      	lsls	r0, r3, #22
 800829e:	d4f7      	bmi.n	8008290 <_vfiprintf_r+0x44>
 80082a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082a2:	f7fe f9fb 	bl	800669c <__retarget_lock_release_recursive>
 80082a6:	e7f3      	b.n	8008290 <_vfiprintf_r+0x44>
 80082a8:	2300      	movs	r3, #0
 80082aa:	9309      	str	r3, [sp, #36]	; 0x24
 80082ac:	2320      	movs	r3, #32
 80082ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082b2:	2330      	movs	r3, #48	; 0x30
 80082b4:	f04f 0901 	mov.w	r9, #1
 80082b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800846c <_vfiprintf_r+0x220>
 80082c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c4:	4623      	mov	r3, r4
 80082c6:	469a      	mov	sl, r3
 80082c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082cc:	b10a      	cbz	r2, 80082d2 <_vfiprintf_r+0x86>
 80082ce:	2a25      	cmp	r2, #37	; 0x25
 80082d0:	d1f9      	bne.n	80082c6 <_vfiprintf_r+0x7a>
 80082d2:	ebba 0b04 	subs.w	fp, sl, r4
 80082d6:	d00b      	beq.n	80082f0 <_vfiprintf_r+0xa4>
 80082d8:	465b      	mov	r3, fp
 80082da:	4622      	mov	r2, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff ffa2 	bl	8008228 <__sfputs_r>
 80082e4:	3001      	adds	r0, #1
 80082e6:	f000 80a9 	beq.w	800843c <_vfiprintf_r+0x1f0>
 80082ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ec:	445a      	add	r2, fp
 80082ee:	9209      	str	r2, [sp, #36]	; 0x24
 80082f0:	f89a 3000 	ldrb.w	r3, [sl]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80a1 	beq.w	800843c <_vfiprintf_r+0x1f0>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008304:	f10a 0a01 	add.w	sl, sl, #1
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	9307      	str	r3, [sp, #28]
 800830c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008310:	931a      	str	r3, [sp, #104]	; 0x68
 8008312:	4654      	mov	r4, sl
 8008314:	2205      	movs	r2, #5
 8008316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831a:	4854      	ldr	r0, [pc, #336]	; (800846c <_vfiprintf_r+0x220>)
 800831c:	f7fe f9bf 	bl	800669e <memchr>
 8008320:	9a04      	ldr	r2, [sp, #16]
 8008322:	b9d8      	cbnz	r0, 800835c <_vfiprintf_r+0x110>
 8008324:	06d1      	lsls	r1, r2, #27
 8008326:	bf44      	itt	mi
 8008328:	2320      	movmi	r3, #32
 800832a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800832e:	0713      	lsls	r3, r2, #28
 8008330:	bf44      	itt	mi
 8008332:	232b      	movmi	r3, #43	; 0x2b
 8008334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008338:	f89a 3000 	ldrb.w	r3, [sl]
 800833c:	2b2a      	cmp	r3, #42	; 0x2a
 800833e:	d015      	beq.n	800836c <_vfiprintf_r+0x120>
 8008340:	4654      	mov	r4, sl
 8008342:	2000      	movs	r0, #0
 8008344:	f04f 0c0a 	mov.w	ip, #10
 8008348:	9a07      	ldr	r2, [sp, #28]
 800834a:	4621      	mov	r1, r4
 800834c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008350:	3b30      	subs	r3, #48	; 0x30
 8008352:	2b09      	cmp	r3, #9
 8008354:	d94d      	bls.n	80083f2 <_vfiprintf_r+0x1a6>
 8008356:	b1b0      	cbz	r0, 8008386 <_vfiprintf_r+0x13a>
 8008358:	9207      	str	r2, [sp, #28]
 800835a:	e014      	b.n	8008386 <_vfiprintf_r+0x13a>
 800835c:	eba0 0308 	sub.w	r3, r0, r8
 8008360:	fa09 f303 	lsl.w	r3, r9, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	46a2      	mov	sl, r4
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	e7d2      	b.n	8008312 <_vfiprintf_r+0xc6>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	1d19      	adds	r1, r3, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	9103      	str	r1, [sp, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfbb      	ittet	lt
 8008378:	425b      	neglt	r3, r3
 800837a:	f042 0202 	orrlt.w	r2, r2, #2
 800837e:	9307      	strge	r3, [sp, #28]
 8008380:	9307      	strlt	r3, [sp, #28]
 8008382:	bfb8      	it	lt
 8008384:	9204      	strlt	r2, [sp, #16]
 8008386:	7823      	ldrb	r3, [r4, #0]
 8008388:	2b2e      	cmp	r3, #46	; 0x2e
 800838a:	d10c      	bne.n	80083a6 <_vfiprintf_r+0x15a>
 800838c:	7863      	ldrb	r3, [r4, #1]
 800838e:	2b2a      	cmp	r3, #42	; 0x2a
 8008390:	d134      	bne.n	80083fc <_vfiprintf_r+0x1b0>
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	3402      	adds	r4, #2
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	9203      	str	r2, [sp, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfb8      	it	lt
 80083a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80083a4:	9305      	str	r3, [sp, #20]
 80083a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008470 <_vfiprintf_r+0x224>
 80083aa:	2203      	movs	r2, #3
 80083ac:	4650      	mov	r0, sl
 80083ae:	7821      	ldrb	r1, [r4, #0]
 80083b0:	f7fe f975 	bl	800669e <memchr>
 80083b4:	b138      	cbz	r0, 80083c6 <_vfiprintf_r+0x17a>
 80083b6:	2240      	movs	r2, #64	; 0x40
 80083b8:	9b04      	ldr	r3, [sp, #16]
 80083ba:	eba0 000a 	sub.w	r0, r0, sl
 80083be:	4082      	lsls	r2, r0
 80083c0:	4313      	orrs	r3, r2
 80083c2:	3401      	adds	r4, #1
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ca:	2206      	movs	r2, #6
 80083cc:	4829      	ldr	r0, [pc, #164]	; (8008474 <_vfiprintf_r+0x228>)
 80083ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083d2:	f7fe f964 	bl	800669e <memchr>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d03f      	beq.n	800845a <_vfiprintf_r+0x20e>
 80083da:	4b27      	ldr	r3, [pc, #156]	; (8008478 <_vfiprintf_r+0x22c>)
 80083dc:	bb1b      	cbnz	r3, 8008426 <_vfiprintf_r+0x1da>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	3307      	adds	r3, #7
 80083e2:	f023 0307 	bic.w	r3, r3, #7
 80083e6:	3308      	adds	r3, #8
 80083e8:	9303      	str	r3, [sp, #12]
 80083ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ec:	443b      	add	r3, r7
 80083ee:	9309      	str	r3, [sp, #36]	; 0x24
 80083f0:	e768      	b.n	80082c4 <_vfiprintf_r+0x78>
 80083f2:	460c      	mov	r4, r1
 80083f4:	2001      	movs	r0, #1
 80083f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083fa:	e7a6      	b.n	800834a <_vfiprintf_r+0xfe>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f04f 0c0a 	mov.w	ip, #10
 8008402:	4619      	mov	r1, r3
 8008404:	3401      	adds	r4, #1
 8008406:	9305      	str	r3, [sp, #20]
 8008408:	4620      	mov	r0, r4
 800840a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800840e:	3a30      	subs	r2, #48	; 0x30
 8008410:	2a09      	cmp	r2, #9
 8008412:	d903      	bls.n	800841c <_vfiprintf_r+0x1d0>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0c6      	beq.n	80083a6 <_vfiprintf_r+0x15a>
 8008418:	9105      	str	r1, [sp, #20]
 800841a:	e7c4      	b.n	80083a6 <_vfiprintf_r+0x15a>
 800841c:	4604      	mov	r4, r0
 800841e:	2301      	movs	r3, #1
 8008420:	fb0c 2101 	mla	r1, ip, r1, r2
 8008424:	e7f0      	b.n	8008408 <_vfiprintf_r+0x1bc>
 8008426:	ab03      	add	r3, sp, #12
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	462a      	mov	r2, r5
 800842c:	4630      	mov	r0, r6
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <_vfiprintf_r+0x230>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	f7fd fbb3 	bl	8005b9c <_printf_float>
 8008436:	4607      	mov	r7, r0
 8008438:	1c78      	adds	r0, r7, #1
 800843a:	d1d6      	bne.n	80083ea <_vfiprintf_r+0x19e>
 800843c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800843e:	07d9      	lsls	r1, r3, #31
 8008440:	d405      	bmi.n	800844e <_vfiprintf_r+0x202>
 8008442:	89ab      	ldrh	r3, [r5, #12]
 8008444:	059a      	lsls	r2, r3, #22
 8008446:	d402      	bmi.n	800844e <_vfiprintf_r+0x202>
 8008448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800844a:	f7fe f927 	bl	800669c <__retarget_lock_release_recursive>
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	065b      	lsls	r3, r3, #25
 8008452:	f53f af1d 	bmi.w	8008290 <_vfiprintf_r+0x44>
 8008456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008458:	e71c      	b.n	8008294 <_vfiprintf_r+0x48>
 800845a:	ab03      	add	r3, sp, #12
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	462a      	mov	r2, r5
 8008460:	4630      	mov	r0, r6
 8008462:	4b06      	ldr	r3, [pc, #24]	; (800847c <_vfiprintf_r+0x230>)
 8008464:	a904      	add	r1, sp, #16
 8008466:	f7fd fe39 	bl	80060dc <_printf_i>
 800846a:	e7e4      	b.n	8008436 <_vfiprintf_r+0x1ea>
 800846c:	0800a584 	.word	0x0800a584
 8008470:	0800a58a 	.word	0x0800a58a
 8008474:	0800a58e 	.word	0x0800a58e
 8008478:	08005b9d 	.word	0x08005b9d
 800847c:	08008229 	.word	0x08008229

08008480 <__swbuf_r>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	460e      	mov	r6, r1
 8008484:	4614      	mov	r4, r2
 8008486:	4605      	mov	r5, r0
 8008488:	b118      	cbz	r0, 8008492 <__swbuf_r+0x12>
 800848a:	6a03      	ldr	r3, [r0, #32]
 800848c:	b90b      	cbnz	r3, 8008492 <__swbuf_r+0x12>
 800848e:	f7fd ffd3 	bl	8006438 <__sinit>
 8008492:	69a3      	ldr	r3, [r4, #24]
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	071a      	lsls	r2, r3, #28
 800849a:	d525      	bpl.n	80084e8 <__swbuf_r+0x68>
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	b31b      	cbz	r3, 80084e8 <__swbuf_r+0x68>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	6922      	ldr	r2, [r4, #16]
 80084a4:	b2f6      	uxtb	r6, r6
 80084a6:	1a98      	subs	r0, r3, r2
 80084a8:	6963      	ldr	r3, [r4, #20]
 80084aa:	4637      	mov	r7, r6
 80084ac:	4283      	cmp	r3, r0
 80084ae:	dc04      	bgt.n	80084ba <__swbuf_r+0x3a>
 80084b0:	4621      	mov	r1, r4
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7ff fdca 	bl	800804c <_fflush_r>
 80084b8:	b9e0      	cbnz	r0, 80084f4 <__swbuf_r+0x74>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	3b01      	subs	r3, #1
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	701e      	strb	r6, [r3, #0]
 80084c8:	6962      	ldr	r2, [r4, #20]
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d004      	beq.n	80084da <__swbuf_r+0x5a>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	07db      	lsls	r3, r3, #31
 80084d4:	d506      	bpl.n	80084e4 <__swbuf_r+0x64>
 80084d6:	2e0a      	cmp	r6, #10
 80084d8:	d104      	bne.n	80084e4 <__swbuf_r+0x64>
 80084da:	4621      	mov	r1, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	f7ff fdb5 	bl	800804c <_fflush_r>
 80084e2:	b938      	cbnz	r0, 80084f4 <__swbuf_r+0x74>
 80084e4:	4638      	mov	r0, r7
 80084e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e8:	4621      	mov	r1, r4
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 f806 	bl	80084fc <__swsetup_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0d5      	beq.n	80084a0 <__swbuf_r+0x20>
 80084f4:	f04f 37ff 	mov.w	r7, #4294967295
 80084f8:	e7f4      	b.n	80084e4 <__swbuf_r+0x64>
	...

080084fc <__swsetup_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <__swsetup_r+0xac>)
 8008500:	4605      	mov	r5, r0
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	460c      	mov	r4, r1
 8008506:	b118      	cbz	r0, 8008510 <__swsetup_r+0x14>
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b90b      	cbnz	r3, 8008510 <__swsetup_r+0x14>
 800850c:	f7fd ff94 	bl	8006438 <__sinit>
 8008510:	89a3      	ldrh	r3, [r4, #12]
 8008512:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008516:	0718      	lsls	r0, r3, #28
 8008518:	d422      	bmi.n	8008560 <__swsetup_r+0x64>
 800851a:	06d9      	lsls	r1, r3, #27
 800851c:	d407      	bmi.n	800852e <__swsetup_r+0x32>
 800851e:	2309      	movs	r3, #9
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008526:	f04f 30ff 	mov.w	r0, #4294967295
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	e034      	b.n	8008598 <__swsetup_r+0x9c>
 800852e:	0758      	lsls	r0, r3, #29
 8008530:	d512      	bpl.n	8008558 <__swsetup_r+0x5c>
 8008532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008534:	b141      	cbz	r1, 8008548 <__swsetup_r+0x4c>
 8008536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800853a:	4299      	cmp	r1, r3
 800853c:	d002      	beq.n	8008544 <__swsetup_r+0x48>
 800853e:	4628      	mov	r0, r5
 8008540:	f7fe ff36 	bl	80073b0 <_free_r>
 8008544:	2300      	movs	r3, #0
 8008546:	6363      	str	r3, [r4, #52]	; 0x34
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	2300      	movs	r3, #0
 8008552:	6063      	str	r3, [r4, #4]
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f043 0308 	orr.w	r3, r3, #8
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	b94b      	cbnz	r3, 8008578 <__swsetup_r+0x7c>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800856a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800856e:	d003      	beq.n	8008578 <__swsetup_r+0x7c>
 8008570:	4621      	mov	r1, r4
 8008572:	4628      	mov	r0, r5
 8008574:	f000 f883 	bl	800867e <__smakebuf_r>
 8008578:	89a0      	ldrh	r0, [r4, #12]
 800857a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800857e:	f010 0301 	ands.w	r3, r0, #1
 8008582:	d00a      	beq.n	800859a <__swsetup_r+0x9e>
 8008584:	2300      	movs	r3, #0
 8008586:	60a3      	str	r3, [r4, #8]
 8008588:	6963      	ldr	r3, [r4, #20]
 800858a:	425b      	negs	r3, r3
 800858c:	61a3      	str	r3, [r4, #24]
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	b943      	cbnz	r3, 80085a4 <__swsetup_r+0xa8>
 8008592:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008596:	d1c4      	bne.n	8008522 <__swsetup_r+0x26>
 8008598:	bd38      	pop	{r3, r4, r5, pc}
 800859a:	0781      	lsls	r1, r0, #30
 800859c:	bf58      	it	pl
 800859e:	6963      	ldrpl	r3, [r4, #20]
 80085a0:	60a3      	str	r3, [r4, #8]
 80085a2:	e7f4      	b.n	800858e <__swsetup_r+0x92>
 80085a4:	2000      	movs	r0, #0
 80085a6:	e7f7      	b.n	8008598 <__swsetup_r+0x9c>
 80085a8:	20000084 	.word	0x20000084

080085ac <_raise_r>:
 80085ac:	291f      	cmp	r1, #31
 80085ae:	b538      	push	{r3, r4, r5, lr}
 80085b0:	4604      	mov	r4, r0
 80085b2:	460d      	mov	r5, r1
 80085b4:	d904      	bls.n	80085c0 <_raise_r+0x14>
 80085b6:	2316      	movs	r3, #22
 80085b8:	6003      	str	r3, [r0, #0]
 80085ba:	f04f 30ff 	mov.w	r0, #4294967295
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085c2:	b112      	cbz	r2, 80085ca <_raise_r+0x1e>
 80085c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085c8:	b94b      	cbnz	r3, 80085de <_raise_r+0x32>
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f830 	bl	8008630 <_getpid_r>
 80085d0:	462a      	mov	r2, r5
 80085d2:	4601      	mov	r1, r0
 80085d4:	4620      	mov	r0, r4
 80085d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085da:	f000 b817 	b.w	800860c <_kill_r>
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d00a      	beq.n	80085f8 <_raise_r+0x4c>
 80085e2:	1c59      	adds	r1, r3, #1
 80085e4:	d103      	bne.n	80085ee <_raise_r+0x42>
 80085e6:	2316      	movs	r3, #22
 80085e8:	6003      	str	r3, [r0, #0]
 80085ea:	2001      	movs	r0, #1
 80085ec:	e7e7      	b.n	80085be <_raise_r+0x12>
 80085ee:	2400      	movs	r4, #0
 80085f0:	4628      	mov	r0, r5
 80085f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085f6:	4798      	blx	r3
 80085f8:	2000      	movs	r0, #0
 80085fa:	e7e0      	b.n	80085be <_raise_r+0x12>

080085fc <raise>:
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <raise+0xc>)
 80085fe:	4601      	mov	r1, r0
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	f7ff bfd3 	b.w	80085ac <_raise_r>
 8008606:	bf00      	nop
 8008608:	20000084 	.word	0x20000084

0800860c <_kill_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	2300      	movs	r3, #0
 8008610:	4d06      	ldr	r5, [pc, #24]	; (800862c <_kill_r+0x20>)
 8008612:	4604      	mov	r4, r0
 8008614:	4608      	mov	r0, r1
 8008616:	4611      	mov	r1, r2
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	f7fa fa68 	bl	8002aee <_kill>
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	d102      	bne.n	8008628 <_kill_r+0x1c>
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	b103      	cbz	r3, 8008628 <_kill_r+0x1c>
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	bd38      	pop	{r3, r4, r5, pc}
 800862a:	bf00      	nop
 800862c:	20001064 	.word	0x20001064

08008630 <_getpid_r>:
 8008630:	f7fa ba56 	b.w	8002ae0 <_getpid>

08008634 <__swhatbuf_r>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	460c      	mov	r4, r1
 8008638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863c:	4615      	mov	r5, r2
 800863e:	2900      	cmp	r1, #0
 8008640:	461e      	mov	r6, r3
 8008642:	b096      	sub	sp, #88	; 0x58
 8008644:	da0c      	bge.n	8008660 <__swhatbuf_r+0x2c>
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	2100      	movs	r1, #0
 800864a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800864e:	bf0c      	ite	eq
 8008650:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008654:	2340      	movne	r3, #64	; 0x40
 8008656:	2000      	movs	r0, #0
 8008658:	6031      	str	r1, [r6, #0]
 800865a:	602b      	str	r3, [r5, #0]
 800865c:	b016      	add	sp, #88	; 0x58
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	466a      	mov	r2, sp
 8008662:	f000 f849 	bl	80086f8 <_fstat_r>
 8008666:	2800      	cmp	r0, #0
 8008668:	dbed      	blt.n	8008646 <__swhatbuf_r+0x12>
 800866a:	9901      	ldr	r1, [sp, #4]
 800866c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008670:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008674:	4259      	negs	r1, r3
 8008676:	4159      	adcs	r1, r3
 8008678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867c:	e7eb      	b.n	8008656 <__swhatbuf_r+0x22>

0800867e <__smakebuf_r>:
 800867e:	898b      	ldrh	r3, [r1, #12]
 8008680:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008682:	079d      	lsls	r5, r3, #30
 8008684:	4606      	mov	r6, r0
 8008686:	460c      	mov	r4, r1
 8008688:	d507      	bpl.n	800869a <__smakebuf_r+0x1c>
 800868a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	2301      	movs	r3, #1
 8008694:	6163      	str	r3, [r4, #20]
 8008696:	b002      	add	sp, #8
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	466a      	mov	r2, sp
 800869c:	ab01      	add	r3, sp, #4
 800869e:	f7ff ffc9 	bl	8008634 <__swhatbuf_r>
 80086a2:	9900      	ldr	r1, [sp, #0]
 80086a4:	4605      	mov	r5, r0
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7fe fef2 	bl	8007490 <_malloc_r>
 80086ac:	b948      	cbnz	r0, 80086c2 <__smakebuf_r+0x44>
 80086ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b2:	059a      	lsls	r2, r3, #22
 80086b4:	d4ef      	bmi.n	8008696 <__smakebuf_r+0x18>
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	f043 0302 	orr.w	r3, r3, #2
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	e7e3      	b.n	800868a <__smakebuf_r+0xc>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	6020      	str	r0, [r4, #0]
 80086c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ca:	81a3      	strh	r3, [r4, #12]
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	6120      	str	r0, [r4, #16]
 80086d0:	6163      	str	r3, [r4, #20]
 80086d2:	9b01      	ldr	r3, [sp, #4]
 80086d4:	b15b      	cbz	r3, 80086ee <__smakebuf_r+0x70>
 80086d6:	4630      	mov	r0, r6
 80086d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086dc:	f000 f81e 	bl	800871c <_isatty_r>
 80086e0:	b128      	cbz	r0, 80086ee <__smakebuf_r+0x70>
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	f023 0303 	bic.w	r3, r3, #3
 80086e8:	f043 0301 	orr.w	r3, r3, #1
 80086ec:	81a3      	strh	r3, [r4, #12]
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	431d      	orrs	r5, r3
 80086f2:	81a5      	strh	r5, [r4, #12]
 80086f4:	e7cf      	b.n	8008696 <__smakebuf_r+0x18>
	...

080086f8 <_fstat_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	2300      	movs	r3, #0
 80086fc:	4d06      	ldr	r5, [pc, #24]	; (8008718 <_fstat_r+0x20>)
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	f7fa fa50 	bl	8002baa <_fstat>
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	d102      	bne.n	8008714 <_fstat_r+0x1c>
 800870e:	682b      	ldr	r3, [r5, #0]
 8008710:	b103      	cbz	r3, 8008714 <_fstat_r+0x1c>
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	bd38      	pop	{r3, r4, r5, pc}
 8008716:	bf00      	nop
 8008718:	20001064 	.word	0x20001064

0800871c <_isatty_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	2300      	movs	r3, #0
 8008720:	4d05      	ldr	r5, [pc, #20]	; (8008738 <_isatty_r+0x1c>)
 8008722:	4604      	mov	r4, r0
 8008724:	4608      	mov	r0, r1
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	f7fa fa4e 	bl	8002bc8 <_isatty>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_isatty_r+0x1a>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_isatty_r+0x1a>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20001064 	.word	0x20001064

0800873c <_init>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	bf00      	nop
 8008740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008742:	bc08      	pop	{r3}
 8008744:	469e      	mov	lr, r3
 8008746:	4770      	bx	lr

08008748 <_fini>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	bf00      	nop
 800874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874e:	bc08      	pop	{r3}
 8008750:	469e      	mov	lr, r3
 8008752:	4770      	bx	lr
