
FirstTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002224  08009710  08009710  00019710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b934  0800b934  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800b934  0800b934  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b934  0800b934  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b934  0800b934  0001b934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b938  0800b938  0001b938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e8c  20000200  0800bb3c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000108c  0800bb3c  0002108c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef71  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000246a  00000000  00000000  0002f1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5a  00000000  00000000  00032628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195b0  00000000  00000000  00033282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012636  00000000  00000000  0004c832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092500  00000000  00000000  0005ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005574  00000000  00000000  000f1368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f68dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	080096f4 	.word	0x080096f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	080096f4 	.word	0x080096f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <calculateECSET1>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */


float calculateECSET1(float voltage) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 250;  // Voltage increase per ohm
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <calculateECSET1+0x50>)
 80010da:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 80010dc:	6939      	ldr	r1, [r7, #16]
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fee4 	bl	8000eac <__aeabi_fdiv>
 80010e4:	4603      	mov	r3, r0
 80010e6:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 80010ee:	f04f 0100 	mov.w	r1, #0
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f7ff ffba 	bl	800106c <__aeabi_fcmpeq>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10b      	bne.n	8001116 <calculateECSET1+0x46>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 80010fe:	68f9      	ldr	r1, [r7, #12]
 8001100:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001104:	f7ff fed2 	bl	8000eac <__aeabi_fdiv>
 8001108:	4603      	mov	r3, r0
 800110a:	4906      	ldr	r1, [pc, #24]	; (8001124 <calculateECSET1+0x54>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe19 	bl	8000d44 <__aeabi_fmul>
 8001112:	4603      	mov	r3, r0
 8001114:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 8001116:	697b      	ldr	r3, [r7, #20]

}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	437a0000 	.word	0x437a0000
 8001124:	41200000 	.word	0x41200000

08001128 <calculateECSET10>:
float calculateECSET10(float voltage) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 1.69;  // Voltage increase per ohm
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <calculateECSET10+0x50>)
 8001132:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff feb8 	bl	8000eac <__aeabi_fdiv>
 800113c:	4603      	mov	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 8001146:	f04f 0100 	mov.w	r1, #0
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff8e 	bl	800106c <__aeabi_fcmpeq>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <calculateECSET10+0x46>
		conductivity = (1 / resistance) * 10;  // Convert S/m to mS/cm
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800115c:	f7ff fea6 	bl	8000eac <__aeabi_fdiv>
 8001160:	4603      	mov	r3, r0
 8001162:	4906      	ldr	r1, [pc, #24]	; (800117c <calculateECSET10+0x54>)
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fded 	bl	8000d44 <__aeabi_fmul>
 800116a:	4603      	mov	r3, r0
 800116c:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 800116e:	697b      	ldr	r3, [r7, #20]

}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	3fd851ec 	.word	0x3fd851ec
 800117c:	41200000 	.word	0x41200000

08001180 <calculateECSET100>:
float calculateECSET100(float voltage) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 0.172;  // Voltage increase per ohm
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <calculateECSET100+0x50>)
 800118a:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fe8c 	bl	8000eac <__aeabi_fdiv>
 8001194:	4603      	mov	r3, r0
 8001196:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 800119e:	f04f 0100 	mov.w	r1, #0
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f7ff ff62 	bl	800106c <__aeabi_fcmpeq>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10b      	bne.n	80011c6 <calculateECSET100+0x46>
		conductivity = (1 / resistance) * 10000;  // uS/cm
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80011b4:	f7ff fe7a 	bl	8000eac <__aeabi_fdiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4906      	ldr	r1, [pc, #24]	; (80011d4 <calculateECSET100+0x54>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fdc1 	bl	8000d44 <__aeabi_fmul>
 80011c2:	4603      	mov	r3, r0
 80011c4:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 80011c6:	697b      	ldr	r3, [r7, #20]

}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	3e3020c5 	.word	0x3e3020c5
 80011d4:	461c4000 	.word	0x461c4000

080011d8 <calculateECSET1000>:
float calculateECSET1000(float voltage) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 0.0172;  // Voltage increase per ohm
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <calculateECSET1000+0x50>)
 80011e2:	613b      	str	r3, [r7, #16]
	float resistance = voltage / voltagePerOhm;
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe60 	bl	8000eac <__aeabi_fdiv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60fb      	str	r3, [r7, #12]
	float conductivity = 0;
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

	if (resistance != 0) {
 80011f6:	f04f 0100 	mov.w	r1, #0
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7ff ff36 	bl	800106c <__aeabi_fcmpeq>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10b      	bne.n	800121e <calculateECSET1000+0x46>
		conductivity = (1 / resistance) * 10000;  // uS/cm
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800120c:	f7ff fe4e 	bl	8000eac <__aeabi_fdiv>
 8001210:	4603      	mov	r3, r0
 8001212:	4906      	ldr	r1, [pc, #24]	; (800122c <calculateECSET1000+0x54>)
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd95 	bl	8000d44 <__aeabi_fmul>
 800121a:	4603      	mov	r3, r0
 800121c:	617b      	str	r3, [r7, #20]
	}

	return conductivity;
 800121e:	697b      	ldr	r3, [r7, #20]

}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	3c8ce704 	.word	0x3c8ce704
 800122c:	461c4000 	.word	0x461c4000

08001230 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d129      	bne.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x66>
		counter++;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800124a:	6013      	str	r3, [r2, #0]
		counter2++;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001254:	6013      	str	r3, [r2, #0]
		if (counter>65535)
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d302      	bcc.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			counter=0;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
		}
		if (counter>30)
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b1e      	cmp	r3, #30
 800126c:	d902      	bls.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			counterflagPWM=1;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]

		}
		if (counter>1000)
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800127c:	d902      	bls.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			counterflagPWM2=1;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
		}
		if(counter2>20000)
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f644 6220 	movw	r2, #20000	; 0x4e20
 800128c:	4293      	cmp	r3, r2
 800128e:	d902      	bls.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timeout=1;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001292:	2201      	movs	r2, #1
 8001294:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40000400 	.word	0x40000400
 80012a4:	200003c4 	.word	0x200003c4
 80012a8:	200003c8 	.word	0x200003c8
 80012ac:	20000b2c 	.word	0x20000b2c
 80012b0:	20000b2d 	.word	0x20000b2d
 80012b4:	200003cc 	.word	0x200003cc

080012b8 <salinity_fertilizer>:

void salinity_fertilizer() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
	if((SET1==1)||(SET10==1))
 80012be:	4baa      	ldr	r3, [pc, #680]	; (8001568 <salinity_fertilizer+0x2b0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d004      	beq.n	80012d0 <salinity_fertilizer+0x18>
 80012c6:	4ba9      	ldr	r3, [pc, #676]	; (800156c <salinity_fertilizer+0x2b4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	f040 8136 	bne.w	800153c <salinity_fertilizer+0x284>
	{
		if(conductivity==0){
 80012d0:	4ba7      	ldr	r3, [pc, #668]	; (8001570 <salinity_fertilizer+0x2b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f04f 0100 	mov.w	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fec7 	bl	800106c <__aeabi_fcmpeq>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d03b      	beq.n	800135c <salinity_fertilizer+0xa4>
			for(int i=0;i<5;i++){
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	e035      	b.n	8001356 <salinity_fertilizer+0x9e>
				ssd1306_Fill(0);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f002 f8f8 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80012f0:	f002 f90e 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 80012f4:	2100      	movs	r1, #0
 80012f6:	2000      	movs	r0, #0
 80012f8:	f002 fa32 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("NO CONDUCTIVITY ",Font_7x10,1);
 80012fc:	4a9d      	ldr	r2, [pc, #628]	; (8001574 <salinity_fertilizer+0x2bc>)
 80012fe:	2301      	movs	r3, #1
 8001300:	ca06      	ldmia	r2, {r1, r2}
 8001302:	489d      	ldr	r0, [pc, #628]	; (8001578 <salinity_fertilizer+0x2c0>)
 8001304:	f002 fa06 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001308:	210a      	movs	r1, #10
 800130a:	2000      	movs	r0, #0
 800130c:	f002 fa28 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("MEASUREMENT",Font_7x10,1);
 8001310:	4a98      	ldr	r2, [pc, #608]	; (8001574 <salinity_fertilizer+0x2bc>)
 8001312:	2301      	movs	r3, #1
 8001314:	ca06      	ldmia	r2, {r1, r2}
 8001316:	4899      	ldr	r0, [pc, #612]	; (800157c <salinity_fertilizer+0x2c4>)
 8001318:	f002 f9fc 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 800131c:	2114      	movs	r1, #20
 800131e:	2000      	movs	r0, #0
 8001320:	f002 fa1e 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("CAN'T ESTIMATE",Font_7x10,1);
 8001324:	4a93      	ldr	r2, [pc, #588]	; (8001574 <salinity_fertilizer+0x2bc>)
 8001326:	2301      	movs	r3, #1
 8001328:	ca06      	ldmia	r2, {r1, r2}
 800132a:	4895      	ldr	r0, [pc, #596]	; (8001580 <salinity_fertilizer+0x2c8>)
 800132c:	f002 f9f2 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8001330:	211e      	movs	r1, #30
 8001332:	2000      	movs	r0, #0
 8001334:	f002 fa14 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 8001338:	4a8e      	ldr	r2, [pc, #568]	; (8001574 <salinity_fertilizer+0x2bc>)
 800133a:	2301      	movs	r3, #1
 800133c:	ca06      	ldmia	r2, {r1, r2}
 800133e:	4891      	ldr	r0, [pc, #580]	; (8001584 <salinity_fertilizer+0x2cc>)
 8001340:	f002 f9e8 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001344:	f002 f8e4 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134c:	f002 fcf0 	bl	8003d30 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3301      	adds	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2b04      	cmp	r3, #4
 800135a:	ddc6      	ble.n	80012ea <salinity_fertilizer+0x32>
			}
		}
		if((conductivity<=2)&&(conductivity!=0))
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <salinity_fertilizer+0x2b8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe95 	bl	8001094 <__aeabi_fcmple>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d045      	beq.n	80013fc <salinity_fertilizer+0x144>
 8001370:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <salinity_fertilizer+0x2b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f04f 0100 	mov.w	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe77 	bl	800106c <__aeabi_fcmpeq>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d13b      	bne.n	80013fc <salinity_fertilizer+0x144>
		{
			for(int i=0;i<5;i++){
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	e035      	b.n	80013f6 <salinity_fertilizer+0x13e>
				ssd1306_Fill(0);
 800138a:	2000      	movs	r0, #0
 800138c:	f002 f8a8 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001390:	f002 f8be 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001394:	2100      	movs	r1, #0
 8001396:	2000      	movs	r0, #0
 8001398:	f002 f9e2 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 800139c:	4a75      	ldr	r2, [pc, #468]	; (8001574 <salinity_fertilizer+0x2bc>)
 800139e:	2301      	movs	r3, #1
 80013a0:	ca06      	ldmia	r2, {r1, r2}
 80013a2:	4878      	ldr	r0, [pc, #480]	; (8001584 <salinity_fertilizer+0x2cc>)
 80013a4:	f002 f9b6 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 80013a8:	210a      	movs	r1, #10
 80013aa:	2000      	movs	r0, #0
 80013ac:	f002 f9d8 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("LOW",Font_7x10,1);
 80013b0:	4a70      	ldr	r2, [pc, #448]	; (8001574 <salinity_fertilizer+0x2bc>)
 80013b2:	2301      	movs	r3, #1
 80013b4:	ca06      	ldmia	r2, {r1, r2}
 80013b6:	4874      	ldr	r0, [pc, #464]	; (8001588 <salinity_fertilizer+0x2d0>)
 80013b8:	f002 f9ac 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 80013bc:	2114      	movs	r1, #20
 80013be:	2000      	movs	r0, #0
 80013c0:	f002 f9ce 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("GOOD FOR",Font_7x10,1);
 80013c4:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <salinity_fertilizer+0x2bc>)
 80013c6:	2301      	movs	r3, #1
 80013c8:	ca06      	ldmia	r2, {r1, r2}
 80013ca:	4870      	ldr	r0, [pc, #448]	; (800158c <salinity_fertilizer+0x2d4>)
 80013cc:	f002 f9a2 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 80013d0:	211e      	movs	r1, #30
 80013d2:	2000      	movs	r0, #0
 80013d4:	f002 f9c4 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("CROPS",Font_7x10,1);
 80013d8:	4a66      	ldr	r2, [pc, #408]	; (8001574 <salinity_fertilizer+0x2bc>)
 80013da:	2301      	movs	r3, #1
 80013dc:	ca06      	ldmia	r2, {r1, r2}
 80013de:	486c      	ldr	r0, [pc, #432]	; (8001590 <salinity_fertilizer+0x2d8>)
 80013e0:	f002 f998 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80013e4:	f002 f894 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f002 fca0 	bl	8003d30 <HAL_Delay>
			for(int i=0;i<5;i++){
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	ddc6      	ble.n	800138a <salinity_fertilizer+0xd2>
			}
		}
		if((conductivity>=2)&&(conductivity<=4))
 80013fc:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <salinity_fertilizer+0x2b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe4f 	bl	80010a8 <__aeabi_fcmpge>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d045      	beq.n	800149c <salinity_fertilizer+0x1e4>
 8001410:	4b57      	ldr	r3, [pc, #348]	; (8001570 <salinity_fertilizer+0x2b8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe3b 	bl	8001094 <__aeabi_fcmple>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d03b      	beq.n	800149c <salinity_fertilizer+0x1e4>
		{
			for(int i=0;i<5;i++){
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e035      	b.n	8001496 <salinity_fertilizer+0x1de>
				ssd1306_Fill(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f002 f858 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001430:	f002 f86e 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001434:	2100      	movs	r1, #0
 8001436:	2000      	movs	r0, #0
 8001438:	f002 f992 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <salinity_fertilizer+0x2bc>)
 800143e:	2301      	movs	r3, #1
 8001440:	ca06      	ldmia	r2, {r1, r2}
 8001442:	4850      	ldr	r0, [pc, #320]	; (8001584 <salinity_fertilizer+0x2cc>)
 8001444:	f002 f966 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001448:	210a      	movs	r1, #10
 800144a:	2000      	movs	r0, #0
 800144c:	f002 f988 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("MODERATE",Font_7x10,1);
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <salinity_fertilizer+0x2bc>)
 8001452:	2301      	movs	r3, #1
 8001454:	ca06      	ldmia	r2, {r1, r2}
 8001456:	484f      	ldr	r0, [pc, #316]	; (8001594 <salinity_fertilizer+0x2dc>)
 8001458:	f002 f95c 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 800145c:	2114      	movs	r1, #20
 800145e:	2000      	movs	r0, #0
 8001460:	f002 f97e 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("MAY HARM",Font_7x10,1);
 8001464:	4a43      	ldr	r2, [pc, #268]	; (8001574 <salinity_fertilizer+0x2bc>)
 8001466:	2301      	movs	r3, #1
 8001468:	ca06      	ldmia	r2, {r1, r2}
 800146a:	484b      	ldr	r0, [pc, #300]	; (8001598 <salinity_fertilizer+0x2e0>)
 800146c:	f002 f952 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8001470:	211e      	movs	r1, #30
 8001472:	2000      	movs	r0, #0
 8001474:	f002 f974 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("CROPS",Font_7x10,1);
 8001478:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <salinity_fertilizer+0x2bc>)
 800147a:	2301      	movs	r3, #1
 800147c:	ca06      	ldmia	r2, {r1, r2}
 800147e:	4844      	ldr	r0, [pc, #272]	; (8001590 <salinity_fertilizer+0x2d8>)
 8001480:	f002 f948 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001484:	f002 f844 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f002 fc50 	bl	8003d30 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b04      	cmp	r3, #4
 800149a:	ddc6      	ble.n	800142a <salinity_fertilizer+0x172>
			}
		}
		if((conductivity>=4)&&(conductivity!=0))
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <salinity_fertilizer+0x2b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fdff 	bl	80010a8 <__aeabi_fcmpge>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d045      	beq.n	800153c <salinity_fertilizer+0x284>
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <salinity_fertilizer+0x2b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdd7 	bl	800106c <__aeabi_fcmpeq>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d13b      	bne.n	800153c <salinity_fertilizer+0x284>
		{
			for(int i=0;i<5;i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	e035      	b.n	8001536 <salinity_fertilizer+0x27e>
				ssd1306_Fill(0);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 f808 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80014d0:	f002 f81e 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 80014d4:	2100      	movs	r1, #0
 80014d6:	2000      	movs	r0, #0
 80014d8:	f002 f942 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 80014dc:	4a25      	ldr	r2, [pc, #148]	; (8001574 <salinity_fertilizer+0x2bc>)
 80014de:	2301      	movs	r3, #1
 80014e0:	ca06      	ldmia	r2, {r1, r2}
 80014e2:	4828      	ldr	r0, [pc, #160]	; (8001584 <salinity_fertilizer+0x2cc>)
 80014e4:	f002 f916 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 80014e8:	210a      	movs	r1, #10
 80014ea:	2000      	movs	r0, #0
 80014ec:	f002 f938 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("HIGH",Font_7x10,1);
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <salinity_fertilizer+0x2bc>)
 80014f2:	2301      	movs	r3, #1
 80014f4:	ca06      	ldmia	r2, {r1, r2}
 80014f6:	4829      	ldr	r0, [pc, #164]	; (800159c <salinity_fertilizer+0x2e4>)
 80014f8:	f002 f90c 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 80014fc:	2114      	movs	r1, #20
 80014fe:	2000      	movs	r0, #0
 8001500:	f002 f92e 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("BAD FOR",Font_7x10,1);
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <salinity_fertilizer+0x2bc>)
 8001506:	2301      	movs	r3, #1
 8001508:	ca06      	ldmia	r2, {r1, r2}
 800150a:	4825      	ldr	r0, [pc, #148]	; (80015a0 <salinity_fertilizer+0x2e8>)
 800150c:	f002 f902 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8001510:	211e      	movs	r1, #30
 8001512:	2000      	movs	r0, #0
 8001514:	f002 f924 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("CROPS",Font_7x10,1);
 8001518:	4a16      	ldr	r2, [pc, #88]	; (8001574 <salinity_fertilizer+0x2bc>)
 800151a:	2301      	movs	r3, #1
 800151c:	ca06      	ldmia	r2, {r1, r2}
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <salinity_fertilizer+0x2d8>)
 8001520:	f002 f8f8 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001524:	f001 fff4 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8001528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800152c:	f002 fc00 	bl	8003d30 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	3301      	adds	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b04      	cmp	r3, #4
 800153a:	ddc6      	ble.n	80014ca <salinity_fertilizer+0x212>
			}
		}
	}
	if((SET100==1)||(SET1000==1))
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <salinity_fertilizer+0x2ec>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d004      	beq.n	800154e <salinity_fertilizer+0x296>
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <salinity_fertilizer+0x2f0>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	f040 8101 	bne.w	8001750 <salinity_fertilizer+0x498>
	{
		if(conductivity==0){
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <salinity_fertilizer+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd88 	bl	800106c <__aeabi_fcmpeq>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d05d      	beq.n	800161e <salinity_fertilizer+0x366>
			for(int i=0;i<5;i++){
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e057      	b.n	8001618 <salinity_fertilizer+0x360>
 8001568:	20000b08 	.word	0x20000b08
 800156c:	20000b09 	.word	0x20000b09
 8001570:	200003e0 	.word	0x200003e0
 8001574:	2000001c 	.word	0x2000001c
 8001578:	08009710 	.word	0x08009710
 800157c:	08009724 	.word	0x08009724
 8001580:	08009730 	.word	0x08009730
 8001584:	08009740 	.word	0x08009740
 8001588:	0800974c 	.word	0x0800974c
 800158c:	08009750 	.word	0x08009750
 8001590:	0800975c 	.word	0x0800975c
 8001594:	08009764 	.word	0x08009764
 8001598:	08009770 	.word	0x08009770
 800159c:	0800977c 	.word	0x0800977c
 80015a0:	08009784 	.word	0x08009784
 80015a4:	20000b0a 	.word	0x20000b0a
 80015a8:	20000b0b 	.word	0x20000b0b
				ssd1306_Fill(0);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f001 ff97 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80015b2:	f001 ffad 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2000      	movs	r0, #0
 80015ba:	f002 f8d1 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("NO CONDUCTIVITY ",Font_7x10,1);
 80015be:	4a6c      	ldr	r2, [pc, #432]	; (8001770 <salinity_fertilizer+0x4b8>)
 80015c0:	2301      	movs	r3, #1
 80015c2:	ca06      	ldmia	r2, {r1, r2}
 80015c4:	486b      	ldr	r0, [pc, #428]	; (8001774 <salinity_fertilizer+0x4bc>)
 80015c6:	f002 f8a5 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 80015ca:	210a      	movs	r1, #10
 80015cc:	2000      	movs	r0, #0
 80015ce:	f002 f8c7 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("MEASUREMENT",Font_7x10,1);
 80015d2:	4a67      	ldr	r2, [pc, #412]	; (8001770 <salinity_fertilizer+0x4b8>)
 80015d4:	2301      	movs	r3, #1
 80015d6:	ca06      	ldmia	r2, {r1, r2}
 80015d8:	4867      	ldr	r0, [pc, #412]	; (8001778 <salinity_fertilizer+0x4c0>)
 80015da:	f002 f89b 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 80015de:	2114      	movs	r1, #20
 80015e0:	2000      	movs	r0, #0
 80015e2:	f002 f8bd 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("CAN'T ESTIMATE",Font_7x10,1);
 80015e6:	4a62      	ldr	r2, [pc, #392]	; (8001770 <salinity_fertilizer+0x4b8>)
 80015e8:	2301      	movs	r3, #1
 80015ea:	ca06      	ldmia	r2, {r1, r2}
 80015ec:	4863      	ldr	r0, [pc, #396]	; (800177c <salinity_fertilizer+0x4c4>)
 80015ee:	f002 f891 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 80015f2:	211e      	movs	r1, #30
 80015f4:	2000      	movs	r0, #0
 80015f6:	f002 f8b3 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("SALINITY",Font_7x10,1);
 80015fa:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <salinity_fertilizer+0x4b8>)
 80015fc:	2301      	movs	r3, #1
 80015fe:	ca06      	ldmia	r2, {r1, r2}
 8001600:	485f      	ldr	r0, [pc, #380]	; (8001780 <salinity_fertilizer+0x4c8>)
 8001602:	f002 f887 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001606:	f001 ff83 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 800160a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160e:	f002 fb8f 	bl	8003d30 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b04      	cmp	r3, #4
 800161c:	ddc6      	ble.n	80015ac <salinity_fertilizer+0x2f4>
			}
		}
		if((conductivity<=5.55)&&(conductivity>=1.55))
 800161e:	4b59      	ldr	r3, [pc, #356]	; (8001784 <salinity_fertilizer+0x4cc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff00 	bl	8000428 <__aeabi_f2d>
 8001628:	a34b      	add	r3, pc, #300	; (adr r3, 8001758 <salinity_fertilizer+0x4a0>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f9cf 	bl	80009d0 <__aeabi_dcmple>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d100      	bne.n	800163a <salinity_fertilizer+0x382>
					HAL_Delay(1000);
				}
			}
		}
	}
}
 8001638:	e08a      	b.n	8001750 <salinity_fertilizer+0x498>
		if((conductivity<=5.55)&&(conductivity>=1.55))
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <salinity_fertilizer+0x4cc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fef2 	bl	8000428 <__aeabi_f2d>
 8001644:	a346      	add	r3, pc, #280	; (adr r3, 8001760 <salinity_fertilizer+0x4a8>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff f9cb 	bl	80009e4 <__aeabi_dcmpge>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <salinity_fertilizer+0x39e>
}
 8001654:	e07c      	b.n	8001750 <salinity_fertilizer+0x498>
			for(int i=0;i<5;i++){
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	e02b      	b.n	80016b4 <salinity_fertilizer+0x3fc>
				ssd1306_Fill(0);
 800165c:	2000      	movs	r0, #0
 800165e:	f001 ff3f 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001662:	f001 ff55 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f002 f879 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("SOIL",Font_7x10,1);
 800166e:	4a40      	ldr	r2, [pc, #256]	; (8001770 <salinity_fertilizer+0x4b8>)
 8001670:	2301      	movs	r3, #1
 8001672:	ca06      	ldmia	r2, {r1, r2}
 8001674:	4844      	ldr	r0, [pc, #272]	; (8001788 <salinity_fertilizer+0x4d0>)
 8001676:	f002 f84d 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 800167a:	210a      	movs	r1, #10
 800167c:	2000      	movs	r0, #0
 800167e:	f002 f86f 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("LACKS OF",Font_7x10,1);
 8001682:	4a3b      	ldr	r2, [pc, #236]	; (8001770 <salinity_fertilizer+0x4b8>)
 8001684:	2301      	movs	r3, #1
 8001686:	ca06      	ldmia	r2, {r1, r2}
 8001688:	4840      	ldr	r0, [pc, #256]	; (800178c <salinity_fertilizer+0x4d4>)
 800168a:	f002 f843 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 800168e:	2114      	movs	r1, #20
 8001690:	2000      	movs	r0, #0
 8001692:	f002 f865 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("NUTRITIENTS",Font_7x10,1);
 8001696:	4a36      	ldr	r2, [pc, #216]	; (8001770 <salinity_fertilizer+0x4b8>)
 8001698:	2301      	movs	r3, #1
 800169a:	ca06      	ldmia	r2, {r1, r2}
 800169c:	483c      	ldr	r0, [pc, #240]	; (8001790 <salinity_fertilizer+0x4d8>)
 800169e:	f002 f839 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80016a2:	f001 ff35 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 80016a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016aa:	f002 fb41 	bl	8003d30 <HAL_Delay>
			for(int i=0;i<5;i++){
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	ddd0      	ble.n	800165c <salinity_fertilizer+0x3a4>
			if((conductivity<=2.55)&&(conductivity>=0))
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <salinity_fertilizer+0x4cc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe feb2 	bl	8000428 <__aeabi_f2d>
 80016c4:	a328      	add	r3, pc, #160	; (adr r3, 8001768 <salinity_fertilizer+0x4b0>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f981 	bl	80009d0 <__aeabi_dcmple>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d100      	bne.n	80016d6 <salinity_fertilizer+0x41e>
}
 80016d4:	e03c      	b.n	8001750 <salinity_fertilizer+0x498>
			if((conductivity<=2.55)&&(conductivity>=0))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <salinity_fertilizer+0x4cc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fce2 	bl	80010a8 <__aeabi_fcmpge>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d100      	bne.n	80016ec <salinity_fertilizer+0x434>
}
 80016ea:	e031      	b.n	8001750 <salinity_fertilizer+0x498>
				for(int i=0;i<5;i++){
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	e02b      	b.n	800174a <salinity_fertilizer+0x492>
					ssd1306_Fill(0);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f001 fef4 	bl	80034e0 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 80016f8:	f001 ff0a 	bl	8003510 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	2000      	movs	r0, #0
 8001700:	f002 f82e 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("SOIL",Font_7x10,1);
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <salinity_fertilizer+0x4b8>)
 8001706:	2301      	movs	r3, #1
 8001708:	ca06      	ldmia	r2, {r1, r2}
 800170a:	481f      	ldr	r0, [pc, #124]	; (8001788 <salinity_fertilizer+0x4d0>)
 800170c:	f002 f802 	bl	8003714 <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001710:	210a      	movs	r1, #10
 8001712:	2000      	movs	r0, #0
 8001714:	f002 f824 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("NEEDS",Font_7x10,1);
 8001718:	4a15      	ldr	r2, [pc, #84]	; (8001770 <salinity_fertilizer+0x4b8>)
 800171a:	2301      	movs	r3, #1
 800171c:	ca06      	ldmia	r2, {r1, r2}
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <salinity_fertilizer+0x4dc>)
 8001720:	f001 fff8 	bl	8003714 <ssd1306_WriteString>
					ssd1306_SetCursor(0,20);
 8001724:	2114      	movs	r1, #20
 8001726:	2000      	movs	r0, #0
 8001728:	f002 f81a 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("FERTILIZERS",Font_7x10,1);
 800172c:	4a10      	ldr	r2, [pc, #64]	; (8001770 <salinity_fertilizer+0x4b8>)
 800172e:	2301      	movs	r3, #1
 8001730:	ca06      	ldmia	r2, {r1, r2}
 8001732:	4819      	ldr	r0, [pc, #100]	; (8001798 <salinity_fertilizer+0x4e0>)
 8001734:	f001 ffee 	bl	8003714 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001738:	f001 feea 	bl	8003510 <ssd1306_UpdateScreen>
					HAL_Delay(1000);
 800173c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001740:	f002 faf6 	bl	8003d30 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b04      	cmp	r3, #4
 800174e:	ddd0      	ble.n	80016f2 <salinity_fertilizer+0x43a>
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	33333333 	.word	0x33333333
 800175c:	40163333 	.word	0x40163333
 8001760:	cccccccd 	.word	0xcccccccd
 8001764:	3ff8cccc 	.word	0x3ff8cccc
 8001768:	66666666 	.word	0x66666666
 800176c:	40046666 	.word	0x40046666
 8001770:	2000001c 	.word	0x2000001c
 8001774:	08009710 	.word	0x08009710
 8001778:	08009724 	.word	0x08009724
 800177c:	08009730 	.word	0x08009730
 8001780:	08009740 	.word	0x08009740
 8001784:	200003e0 	.word	0x200003e0
 8001788:	0800978c 	.word	0x0800978c
 800178c:	08009794 	.word	0x08009794
 8001790:	080097a0 	.word	0x080097a0
 8001794:	080097ac 	.word	0x080097ac
 8001798:	080097b4 	.word	0x080097b4

0800179c <PWM_COND>:

void PWM_COND() {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

	counterflagPWM=0;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <PWM_COND+0x70>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	counter=0;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <PWM_COND+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
	do{
		delay2(delay_time);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <PWM_COND+0x78>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fab5 	bl	8001d20 <delay2>
		GPIOB->BSRR = GPIO_PIN_6; // Set Pin 7 (output high)
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <PWM_COND+0x7c>)
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	611a      	str	r2, [r3, #16]
		delay2(delay_time); // Adjust delay time as needed
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <PWM_COND+0x78>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 faad 	bl	8001d20 <delay2>
		GPIOB->BSRR = GPIO_PIN_6 << 16; // Reset Pin 7 (output low)
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <PWM_COND+0x7c>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017cc:	611a      	str	r2, [r3, #16]

		delay2(delay_band);
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <PWM_COND+0x80>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 faa4 	bl	8001d20 <delay2>

		// Toggle GPIOB Pin 6
		//        delay2(delay_time);
		GPIOB->BSRR = GPIO_PIN_7; // Set Pin 6 (output high)
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <PWM_COND+0x7c>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	611a      	str	r2, [r3, #16]
		delay2(delay_time); // Adjust delay time as needed
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <PWM_COND+0x78>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fa9c 	bl	8001d20 <delay2>
		GPIOB->BSRR = GPIO_PIN_7 << 16; // Reset Pin 6 (output low)
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <PWM_COND+0x7c>)
 80017ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017ee:	611a      	str	r2, [r3, #16]
		delay2(delay_time);
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <PWM_COND+0x78>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fa93 	bl	8001d20 <delay2>
	}while(counterflagPWM==0);
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <PWM_COND+0x70>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0d3      	beq.n	80017ac <PWM_COND+0x10>


}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000b2c 	.word	0x20000b2c
 8001810:	200003c4 	.word	0x200003c4
 8001814:	20000000 	.word	0x20000000
 8001818:	40010c00 	.word	0x40010c00
 800181c:	20000004 	.word	0x20000004

08001820 <PWM_MOIST>:

void PWM_MOIST(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

	counterflagPWM2=0;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <PWM_MOIST+0x54>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	counter=0;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <PWM_MOIST+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
	// Set PB3 as output
	GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3); // Clear bits
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <PWM_MOIST+0x5c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <PWM_MOIST+0x5c>)
 8001836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800183a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0; // Set pin mode to general purpose output push-pull 10MHz
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <PWM_MOIST+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <PWM_MOIST+0x5c>)
 8001842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001846:	6013      	str	r3, [r2, #0]
	do{

		GPIOB->ODR ^= GPIO_ODR_ODR3;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <PWM_MOIST+0x5c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <PWM_MOIST+0x5c>)
 800184e:	f083 0308 	eor.w	r3, r3, #8
 8001852:	60d3      	str	r3, [r2, #12]
		delay2(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 fa63 	bl	8001d20 <delay2>


	}while(counterflagPWM2==0);
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <PWM_MOIST+0x54>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f1      	beq.n	8001848 <PWM_MOIST+0x28>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2108      	movs	r1, #8
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <PWM_MOIST+0x5c>)
 800186a:	f003 f986 	bl	8004b7a <HAL_GPIO_WritePin>

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000b2d 	.word	0x20000b2d
 8001878:	200003c4 	.word	0x200003c4
 800187c:	40010c00 	.word	0x40010c00

08001880 <SSD1306_INITS>:


void SSD1306_INITS()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001884:	f001 fdc2 	bl	800340c <ssd1306_Init>
	ssd1306_UpdateScreen();
 8001888:	f001 fe42 	bl	8003510 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 800188c:	2032      	movs	r0, #50	; 0x32
 800188e:	f002 fa4f 	bl	8003d30 <HAL_Delay>
	ssd1306_Fill(0);
 8001892:	2000      	movs	r0, #0
 8001894:	f001 fe24 	bl	80034e0 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001898:	f001 fe3a 	bl	8003510 <ssd1306_UpdateScreen>
	ssd1306_WriteString("Telectronio",Font_11x18,1);
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <SSD1306_INITS+0x9c>)
 800189e:	2301      	movs	r3, #1
 80018a0:	ca06      	ldmia	r2, {r1, r2}
 80018a2:	481f      	ldr	r0, [pc, #124]	; (8001920 <SSD1306_INITS+0xa0>)
 80018a4:	f001 ff36 	bl	8003714 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018a8:	f001 fe32 	bl	8003510 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80018ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b0:	f002 fa3e 	bl	8003d30 <HAL_Delay>
	ssd1306_Fill(0);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f001 fe13 	bl	80034e0 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80018ba:	f001 fe29 	bl	8003510 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 80018be:	2032      	movs	r0, #50	; 0x32
 80018c0:	f002 fa36 	bl	8003d30 <HAL_Delay>
	ssd1306_SetCursor(0, 0);
 80018c4:	2100      	movs	r1, #0
 80018c6:	2000      	movs	r0, #0
 80018c8:	f001 ff4a 	bl	8003760 <ssd1306_SetCursor>
	ssd1306_WriteString("Soil", Font_11x18,1);
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <SSD1306_INITS+0x9c>)
 80018ce:	2301      	movs	r3, #1
 80018d0:	ca06      	ldmia	r2, {r1, r2}
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <SSD1306_INITS+0xa4>)
 80018d4:	f001 ff1e 	bl	8003714 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 19);
 80018d8:	2113      	movs	r1, #19
 80018da:	2000      	movs	r0, #0
 80018dc:	f001 ff40 	bl	8003760 <ssd1306_SetCursor>
	ssd1306_WriteString("Meaurement", Font_11x18,1);
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <SSD1306_INITS+0x9c>)
 80018e2:	2301      	movs	r3, #1
 80018e4:	ca06      	ldmia	r2, {r1, r2}
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <SSD1306_INITS+0xa8>)
 80018e8:	f001 ff14 	bl	8003714 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 38);
 80018ec:	2126      	movs	r1, #38	; 0x26
 80018ee:	2000      	movs	r0, #0
 80018f0:	f001 ff36 	bl	8003760 <ssd1306_SetCursor>
	ssd1306_WriteString("Version1", Font_11x18,1);
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <SSD1306_INITS+0x9c>)
 80018f6:	2301      	movs	r3, #1
 80018f8:	ca06      	ldmia	r2, {r1, r2}
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <SSD1306_INITS+0xac>)
 80018fc:	f001 ff0a 	bl	8003714 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001900:	f001 fe06 	bl	8003510 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001908:	f002 fa12 	bl	8003d30 <HAL_Delay>
	ssd1306_Fill(0);
 800190c:	2000      	movs	r0, #0
 800190e:	f001 fde7 	bl	80034e0 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001912:	f001 fdfd 	bl	8003510 <ssd1306_UpdateScreen>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000024 	.word	0x20000024
 8001920:	080097c0 	.word	0x080097c0
 8001924:	080097cc 	.word	0x080097cc
 8001928:	080097d4 	.word	0x080097d4
 800192c:	080097e0 	.word	0x080097e0

08001930 <delay>:

void delay(uint16_t delay){
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <delay+0x2c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 8001942:	bf00      	nop
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <delay+0x2c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	429a      	cmp	r2, r3
 800194e:	d3f9      	bcc.n	8001944 <delay+0x14>
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	200002a0 	.word	0x200002a0

08001960 <Set_Pin_Output>:


void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_LOW;
 8001982:	2302      	movs	r3, #2
 8001984:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f002 ff59 	bl	8004844 <HAL_GPIO_Init>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f002 ff3c 	bl	8004844 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <DS18B20_Start>:
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
uint8_t DS18B20_Start (void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	uint8_t Response=0;
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80019de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e2:	4815      	ldr	r0, [pc, #84]	; (8001a38 <DS18B20_Start+0x64>)
 80019e4:	f7ff ffbc 	bl	8001960 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ee:	4812      	ldr	r0, [pc, #72]	; (8001a38 <DS18B20_Start+0x64>)
 80019f0:	f003 f8c3 	bl	8004b7a <HAL_GPIO_WritePin>
	delay(480);
 80019f4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80019f8:	f7ff ff9a 	bl	8001930 <delay>
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 80019fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <DS18B20_Start+0x64>)
 8001a02:	f7ff ffca 	bl	800199a <Set_Pin_Input>
	delay(60);
 8001a06:	203c      	movs	r0, #60	; 0x3c
 8001a08:	f7ff ff92 	bl	8001930 <delay>

	if(!(HAL_GPIO_ReadPin (DS18B20_PORT,DS18B20_PIN))) Response =1;
 8001a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <DS18B20_Start+0x64>)
 8001a12:	f003 f89b 	bl	8004b4c <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <DS18B20_Start+0x4e>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	e001      	b.n	8001a26 <DS18B20_Start+0x52>
	else Response = -1;
 8001a22:	23ff      	movs	r3, #255	; 0xff
 8001a24:	71fb      	strb	r3, [r7, #7]
	delay(480);
 8001a26:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a2a:	f7ff ff81 	bl	8001930 <delay>
	return Response;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40010c00 	.word	0x40010c00

08001a3c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4a:	4821      	ldr	r0, [pc, #132]	; (8001ad0 <DS18B20_Write+0x94>)
 8001a4c:	f7ff ff88 	bl	8001960 <Set_Pin_Output>

	for(int i=0; i<8; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e034      	b.n	8001ac0 <DS18B20_Write+0x84>
	{
		if((data&(1<<i))!=0)
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	fa42 f303 	asr.w	r3, r2, r3
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <DS18B20_Write+0x58>
		{
			//write 1
			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <DS18B20_Write+0x94>)
 8001a6c:	f7ff ff78 	bl	8001960 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a76:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <DS18B20_Write+0x94>)
 8001a78:	f003 f87f 	bl	8004b7a <HAL_GPIO_WritePin>
			delay(1);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7ff ff57 	bl	8001930 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a86:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <DS18B20_Write+0x94>)
 8001a88:	f7ff ff87 	bl	800199a <Set_Pin_Input>
			delay(60);
 8001a8c:	203c      	movs	r0, #60	; 0x3c
 8001a8e:	f7ff ff4f 	bl	8001930 <delay>
 8001a92:	e012      	b.n	8001aba <DS18B20_Write+0x7e>
		}
		else
		{
			//write 0

			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <DS18B20_Write+0x94>)
 8001a9a:	f7ff ff61 	bl	8001960 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa4:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <DS18B20_Write+0x94>)
 8001aa6:	f003 f868 	bl	8004b7a <HAL_GPIO_WritePin>
			delay(60);
 8001aaa:	203c      	movs	r0, #60	; 0x3c
 8001aac:	f7ff ff40 	bl	8001930 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab4:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <DS18B20_Write+0x94>)
 8001ab6:	f7ff ff70 	bl	800199a <Set_Pin_Input>
	for(int i=0; i<8; i++)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b07      	cmp	r3, #7
 8001ac4:	ddc7      	ble.n	8001a56 <DS18B20_Write+0x1a>

		}
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae2:	481c      	ldr	r0, [pc, #112]	; (8001b54 <DS18B20_Read+0x80>)
 8001ae4:	f7ff ff59 	bl	800199a <Set_Pin_Input>

	for(int i=0;i<8;i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	e02a      	b.n	8001b44 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af2:	4818      	ldr	r0, [pc, #96]	; (8001b54 <DS18B20_Read+0x80>)
 8001af4:	f7ff ff34 	bl	8001960 <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001afe:	4815      	ldr	r0, [pc, #84]	; (8001b54 <DS18B20_Read+0x80>)
 8001b00:	f003 f83b 	bl	8004b7a <HAL_GPIO_WritePin>
		delay(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff ff13 	bl	8001930 <delay>
		Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0e:	4811      	ldr	r0, [pc, #68]	; (8001b54 <DS18B20_Read+0x80>)
 8001b10:	f7ff ff43 	bl	800199a <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT,DS18B20_PIN))
 8001b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <DS18B20_Read+0x80>)
 8001b1a:	f003 f817 	bl	8004b4c <HAL_GPIO_ReadPin>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <DS18B20_Read+0x64>
		{
			value |= 1<<i; //read=1
 8001b24:	2201      	movs	r2, #1
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8001b38:	203c      	movs	r0, #60	; 0x3c
 8001b3a:	f7ff fef9 	bl	8001930 <delay>
	for(int i=0;i<8;i++)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b07      	cmp	r3, #7
 8001b48:	ddd1      	ble.n	8001aee <DS18B20_Read+0x1a>
	}
	return value;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40010c00 	.word	0x40010c00

08001b58 <DS18B20_GetTemp>:



float DS18B20_GetTemp(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 8001b5c:	f7ff ff3a 	bl	80019d4 <DS18B20_Start>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <DS18B20_GetTemp+0xa4>)
 8001b66:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f002 f8e1 	bl	8003d30 <HAL_Delay>

	DS18B20_Write(0xCC); // SKIP ROM
 8001b6e:	20cc      	movs	r0, #204	; 0xcc
 8001b70:	f7ff ff64 	bl	8001a3c <DS18B20_Write>
	DS18B20_Write(0x44); // Convert T
 8001b74:	2044      	movs	r0, #68	; 0x44
 8001b76:	f7ff ff61 	bl	8001a3c <DS18B20_Write>

	HAL_Delay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f002 f8d8 	bl	8003d30 <HAL_Delay>

	Presence = DS18B20_Start();
 8001b80:	f7ff ff28 	bl	80019d4 <DS18B20_Start>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <DS18B20_GetTemp+0xa4>)
 8001b8a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f002 f8cf 	bl	8003d30 <HAL_Delay>

	DS18B20_Write(0xCC);
 8001b92:	20cc      	movs	r0, #204	; 0xcc
 8001b94:	f7ff ff52 	bl	8001a3c <DS18B20_Write>
	DS18B20_Write(0xBE); // Read scratch pad
 8001b98:	20be      	movs	r0, #190	; 0xbe
 8001b9a:	f7ff ff4f 	bl	8001a3c <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8001b9e:	f7ff ff99 	bl	8001ad4 <DS18B20_Read>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <DS18B20_GetTemp+0xa8>)
 8001ba8:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8001baa:	f7ff ff93 	bl	8001ad4 <DS18B20_Read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <DS18B20_GetTemp+0xac>)
 8001bb4:	701a      	strb	r2, [r3, #0]
	TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <DS18B20_GetTemp+0xac>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <DS18B20_GetTemp+0xa8>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <DS18B20_GetTemp+0xb0>)
 8001bcc:	801a      	strh	r2, [r3, #0]
	Temperature = (float)TEMP / 16;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <DS18B20_GetTemp+0xb0>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f85e 	bl	8000c94 <__aeabi_ui2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f964 	bl	8000eac <__aeabi_fdiv>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <DS18B20_GetTemp+0xb4>)
 8001bea:	601a      	str	r2, [r3, #0]



	HAL_Delay(10);
 8001bec:	200a      	movs	r0, #10
 8001bee:	f002 f89f 	bl	8003d30 <HAL_Delay>

	return Temperature;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <DS18B20_GetTemp+0xb4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200003f8 	.word	0x200003f8
 8001c00:	200003f9 	.word	0x200003f9
 8001c04:	200003fa 	.word	0x200003fa
 8001c08:	200003fc 	.word	0x200003fc
 8001c0c:	200003f4 	.word	0x200003f4

08001c10 <ADC_CH1>:

void ADC_CH1(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <ADC_CH1+0x38>)
 8001c32:	f002 fb65 	bl	8004300 <HAL_ADC_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <ADC_CH1+0x30>
	{
		Error_Handler();
 8001c3c:	f001 fba8 	bl	8003390 <Error_Handler>
	}
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000021c 	.word	0x2000021c

08001c4c <ADC_CH2>:
void ADC_CH2(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001c64:	2304      	movs	r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <ADC_CH2+0x38>)
 8001c6e:	f002 fb47 	bl	8004300 <HAL_ADC_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <ADC_CH2+0x30>
	{
		Error_Handler();
 8001c78:	f001 fb8a 	bl	8003390 <Error_Handler>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000021c 	.word	0x2000021c

08001c88 <ADC_CH3>:
void ADC_CH3(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <ADC_CH3+0x38>)
 8001caa:	f002 fb29 	bl	8004300 <HAL_ADC_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <ADC_CH3+0x30>
	{
		Error_Handler();
 8001cb4:	f001 fb6c 	bl	8003390 <Error_Handler>
	}
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	2000021c 	.word	0x2000021c
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <adc_value_to_voltage>:
float adc_value_to_voltage(uint16_t adc_value) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
	return (adc_value / 4095.0) * VREF; // 4095 for 12-bit resolution
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fb95 	bl	8000404 <__aeabi_i2d>
 8001cda:	a30d      	add	r3, pc, #52	; (adr r3, 8001d10 <adc_value_to_voltage+0x48>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fd24 	bl	800072c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	a30a      	add	r3, pc, #40	; (adr r3, 8001d18 <adc_value_to_voltage+0x50>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fbf1 	bl	80004d8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fec3 	bl	8000a88 <__aeabi_d2f>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40affe00 	.word	0x40affe00
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40a9dc00 	.word	0x40a9dc00

08001d20 <delay2>:

void delay2(uint32_t delay_time) {
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < delay_time; ++i) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e003      	b.n	8001d36 <delay2+0x16>
		__NOP(); // Use NOP instruction for delay
 8001d2e:	bf00      	nop
	for (uint32_t i = 0; i < delay_time; ++i) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3f7      	bcc.n	8001d2e <delay2+0xe>
	}
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <EC_out_of_range>:

void EC_out_of_range()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
	if((final_average_cond>=3100)&& (SET1==1))
 8001d52:	4bad      	ldr	r3, [pc, #692]	; (8002008 <EC_out_of_range+0x2bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	49ad      	ldr	r1, [pc, #692]	; (800200c <EC_out_of_range+0x2c0>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f9a5 	bl	80010a8 <__aeabi_fcmpge>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02f      	beq.n	8001dc4 <EC_out_of_range+0x78>
 8001d64:	4baa      	ldr	r3, [pc, #680]	; (8002010 <EC_out_of_range+0x2c4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d12b      	bne.n	8001dc4 <EC_out_of_range+0x78>
	{
		for(int i=0;i<5;i++){
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e025      	b.n	8001dbe <EC_out_of_range+0x72>
			ssd1306_Fill(0);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f001 fbb4 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001d78:	f001 fbca 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f001 fcee 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001d84:	4aa3      	ldr	r2, [pc, #652]	; (8002014 <EC_out_of_range+0x2c8>)
 8001d86:	2301      	movs	r3, #1
 8001d88:	ca06      	ldmia	r2, {r1, r2}
 8001d8a:	48a3      	ldr	r0, [pc, #652]	; (8002018 <EC_out_of_range+0x2cc>)
 8001d8c:	f001 fcc2 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001d90:	210a      	movs	r1, #10
 8001d92:	2000      	movs	r0, #0
 8001d94:	f001 fce4 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001d98:	4a9e      	ldr	r2, [pc, #632]	; (8002014 <EC_out_of_range+0x2c8>)
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	ca06      	ldmia	r2, {r1, r2}
 8001d9e:	489f      	ldr	r0, [pc, #636]	; (800201c <EC_out_of_range+0x2d0>)
 8001da0:	f001 fcb8 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001da4:	f001 fbb4 	bl	8003510 <ssd1306_UpdateScreen>
			conductivity=0;
 8001da8:	4b9d      	ldr	r3, [pc, #628]	; (8002020 <EC_out_of_range+0x2d4>)
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db4:	f001 ffbc 	bl	8003d30 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	ddd6      	ble.n	8001d72 <EC_out_of_range+0x26>
		}
		//out of range
		//decrease sensitivity
	}
	if((final_average_cond>=3100)&& (SET10==1))
 8001dc4:	4b90      	ldr	r3, [pc, #576]	; (8002008 <EC_out_of_range+0x2bc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4990      	ldr	r1, [pc, #576]	; (800200c <EC_out_of_range+0x2c0>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f96c 	bl	80010a8 <__aeabi_fcmpge>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02f      	beq.n	8001e36 <EC_out_of_range+0xea>
 8001dd6:	4b93      	ldr	r3, [pc, #588]	; (8002024 <EC_out_of_range+0x2d8>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d12b      	bne.n	8001e36 <EC_out_of_range+0xea>
	{
		for(int i=0;i<5;i++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e025      	b.n	8001e30 <EC_out_of_range+0xe4>
			ssd1306_Fill(0);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f001 fb7b 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001dea:	f001 fb91 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001dee:	2100      	movs	r1, #0
 8001df0:	2000      	movs	r0, #0
 8001df2:	f001 fcb5 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001df6:	4a87      	ldr	r2, [pc, #540]	; (8002014 <EC_out_of_range+0x2c8>)
 8001df8:	2301      	movs	r3, #1
 8001dfa:	ca06      	ldmia	r2, {r1, r2}
 8001dfc:	4886      	ldr	r0, [pc, #536]	; (8002018 <EC_out_of_range+0x2cc>)
 8001dfe:	f001 fc89 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001e02:	210a      	movs	r1, #10
 8001e04:	2000      	movs	r0, #0
 8001e06:	f001 fcab 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001e0a:	4a82      	ldr	r2, [pc, #520]	; (8002014 <EC_out_of_range+0x2c8>)
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	ca06      	ldmia	r2, {r1, r2}
 8001e10:	4882      	ldr	r0, [pc, #520]	; (800201c <EC_out_of_range+0x2d0>)
 8001e12:	f001 fc7f 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001e16:	f001 fb7b 	bl	8003510 <ssd1306_UpdateScreen>
			conductivity=0;
 8001e1a:	4b81      	ldr	r3, [pc, #516]	; (8002020 <EC_out_of_range+0x2d4>)
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e26:	f001 ff83 	bl	8003d30 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	ddd6      	ble.n	8001de4 <EC_out_of_range+0x98>
		}
		//out of range
		//decrease sensitivity
	}
	if((final_average_cond>=3100)&& (SET100==1))
 8001e36:	4b74      	ldr	r3, [pc, #464]	; (8002008 <EC_out_of_range+0x2bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4974      	ldr	r1, [pc, #464]	; (800200c <EC_out_of_range+0x2c0>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f933 	bl	80010a8 <__aeabi_fcmpge>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02f      	beq.n	8001ea8 <EC_out_of_range+0x15c>
 8001e48:	4b77      	ldr	r3, [pc, #476]	; (8002028 <EC_out_of_range+0x2dc>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d12b      	bne.n	8001ea8 <EC_out_of_range+0x15c>
	{
		for(int i=0;i<5;i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e025      	b.n	8001ea2 <EC_out_of_range+0x156>
			ssd1306_Fill(0);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f001 fb42 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001e5c:	f001 fb58 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001e60:	2100      	movs	r1, #0
 8001e62:	2000      	movs	r0, #0
 8001e64:	f001 fc7c 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001e68:	4a6a      	ldr	r2, [pc, #424]	; (8002014 <EC_out_of_range+0x2c8>)
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	ca06      	ldmia	r2, {r1, r2}
 8001e6e:	486a      	ldr	r0, [pc, #424]	; (8002018 <EC_out_of_range+0x2cc>)
 8001e70:	f001 fc50 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001e74:	210a      	movs	r1, #10
 8001e76:	2000      	movs	r0, #0
 8001e78:	f001 fc72 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001e7c:	4a65      	ldr	r2, [pc, #404]	; (8002014 <EC_out_of_range+0x2c8>)
 8001e7e:	2301      	movs	r3, #1
 8001e80:	ca06      	ldmia	r2, {r1, r2}
 8001e82:	4866      	ldr	r0, [pc, #408]	; (800201c <EC_out_of_range+0x2d0>)
 8001e84:	f001 fc46 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001e88:	f001 fb42 	bl	8003510 <ssd1306_UpdateScreen>
			conductivity=0;
 8001e8c:	4b64      	ldr	r3, [pc, #400]	; (8002020 <EC_out_of_range+0x2d4>)
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e98:	f001 ff4a 	bl	8003d30 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	ddd6      	ble.n	8001e56 <EC_out_of_range+0x10a>
		}
		//out of range
		//decrease sensitivity
	}
	if((final_average_cond<=650) && (SET1000==1))
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <EC_out_of_range+0x2bc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	495f      	ldr	r1, [pc, #380]	; (800202c <EC_out_of_range+0x2e0>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8f0 	bl	8001094 <__aeabi_fcmple>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d02f      	beq.n	8001f1a <EC_out_of_range+0x1ce>
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <EC_out_of_range+0x2e4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d12b      	bne.n	8001f1a <EC_out_of_range+0x1ce>
	{
		for(int i=0;i<5;i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	e025      	b.n	8001f14 <EC_out_of_range+0x1c8>
			ssd1306_Fill(0);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f001 fb09 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001ece:	f001 fb1f 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f001 fc43 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001eda:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <EC_out_of_range+0x2c8>)
 8001edc:	2301      	movs	r3, #1
 8001ede:	ca06      	ldmia	r2, {r1, r2}
 8001ee0:	484d      	ldr	r0, [pc, #308]	; (8002018 <EC_out_of_range+0x2cc>)
 8001ee2:	f001 fc17 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001ee6:	210a      	movs	r1, #10
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f001 fc39 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001eee:	4a49      	ldr	r2, [pc, #292]	; (8002014 <EC_out_of_range+0x2c8>)
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	ca06      	ldmia	r2, {r1, r2}
 8001ef4:	484f      	ldr	r0, [pc, #316]	; (8002034 <EC_out_of_range+0x2e8>)
 8001ef6:	f001 fc0d 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001efa:	f001 fb09 	bl	8003510 <ssd1306_UpdateScreen>
			conductivity=0;
 8001efe:	4b48      	ldr	r3, [pc, #288]	; (8002020 <EC_out_of_range+0x2d4>)
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0a:	f001 ff11 	bl	8003d30 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	ddd6      	ble.n	8001ec8 <EC_out_of_range+0x17c>
		}
		//out of range
		//increase sensitivity
	}
	if((final_average_cond<=650) && (SET100==1))
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <EC_out_of_range+0x2bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4943      	ldr	r1, [pc, #268]	; (800202c <EC_out_of_range+0x2e0>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f8b7 	bl	8001094 <__aeabi_fcmple>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d02f      	beq.n	8001f8c <EC_out_of_range+0x240>
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <EC_out_of_range+0x2dc>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d12b      	bne.n	8001f8c <EC_out_of_range+0x240>
	{
		for(int i=0;i<5;i++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	e025      	b.n	8001f86 <EC_out_of_range+0x23a>
			ssd1306_Fill(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f001 fad0 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001f40:	f001 fae6 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001f44:	2100      	movs	r1, #0
 8001f46:	2000      	movs	r0, #0
 8001f48:	f001 fc0a 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001f4c:	4a31      	ldr	r2, [pc, #196]	; (8002014 <EC_out_of_range+0x2c8>)
 8001f4e:	2301      	movs	r3, #1
 8001f50:	ca06      	ldmia	r2, {r1, r2}
 8001f52:	4831      	ldr	r0, [pc, #196]	; (8002018 <EC_out_of_range+0x2cc>)
 8001f54:	f001 fbde 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001f58:	210a      	movs	r1, #10
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f001 fc00 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <EC_out_of_range+0x2c8>)
 8001f62:	2301      	movs	r3, #1
 8001f64:	ca06      	ldmia	r2, {r1, r2}
 8001f66:	4833      	ldr	r0, [pc, #204]	; (8002034 <EC_out_of_range+0x2e8>)
 8001f68:	f001 fbd4 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001f6c:	f001 fad0 	bl	8003510 <ssd1306_UpdateScreen>
			conductivity=0;
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <EC_out_of_range+0x2d4>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f7c:	f001 fed8 	bl	8003d30 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	ddd6      	ble.n	8001f3a <EC_out_of_range+0x1ee>
		}
		//out of range
		//increase sensitivity
	}
	if((final_average_cond<=650) && (SET10==1))
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <EC_out_of_range+0x2bc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4926      	ldr	r1, [pc, #152]	; (800202c <EC_out_of_range+0x2e0>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f87e 	bl	8001094 <__aeabi_fcmple>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d100      	bne.n	8001fa0 <EC_out_of_range+0x254>
			HAL_Delay(1000);
		}
		//out of range
		//increase sensitivity
	}
}
 8001f9e:	e02f      	b.n	8002000 <EC_out_of_range+0x2b4>
	if((final_average_cond<=650) && (SET10==1))
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <EC_out_of_range+0x2d8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d12b      	bne.n	8002000 <EC_out_of_range+0x2b4>
		for(int i=0;i<5;i++){
 8001fa8:	2300      	movs	r3, #0
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	e025      	b.n	8001ffa <EC_out_of_range+0x2ae>
			ssd1306_Fill(0);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f001 fa96 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8001fb4:	f001 faac 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f001 fbd0 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <EC_out_of_range+0x2c8>)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	ca06      	ldmia	r2, {r1, r2}
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <EC_out_of_range+0x2cc>)
 8001fc8:	f001 fba4 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0,10);
 8001fcc:	210a      	movs	r1, #10
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f001 fbc6 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <EC_out_of_range+0x2c8>)
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	ca06      	ldmia	r2, {r1, r2}
 8001fda:	4816      	ldr	r0, [pc, #88]	; (8002034 <EC_out_of_range+0x2e8>)
 8001fdc:	f001 fb9a 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001fe0:	f001 fa96 	bl	8003510 <ssd1306_UpdateScreen>
			conductivity=0;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <EC_out_of_range+0x2d4>)
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff0:	f001 fe9e 	bl	8003d30 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	ddd6      	ble.n	8001fae <EC_out_of_range+0x262>
}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200003d8 	.word	0x200003d8
 800200c:	4541c000 	.word	0x4541c000
 8002010:	20000b08 	.word	0x20000b08
 8002014:	2000001c 	.word	0x2000001c
 8002018:	080097ec 	.word	0x080097ec
 800201c:	08009800 	.word	0x08009800
 8002020:	200003e0 	.word	0x200003e0
 8002024:	20000b09 	.word	0x20000b09
 8002028:	20000b0a 	.word	0x20000b0a
 800202c:	44228000 	.word	0x44228000
 8002030:	20000b0b 	.word	0x20000b0b
 8002034:	08009810 	.word	0x08009810

08002038 <Set_counterFREQ>:

void Set_counterFREQ(){
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==1)
 800203c:	2104      	movs	r1, #4
 800203e:	482f      	ldr	r0, [pc, #188]	; (80020fc <Set_counterFREQ+0xc4>)
 8002040:	f002 fd84 	bl	8004b4c <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <Set_counterFREQ+0x24>
	{
		HAL_Delay(100);
 800204a:	2064      	movs	r0, #100	; 0x64
 800204c:	f001 fe70 	bl	8003d30 <HAL_Delay>
		counterFREQ++;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <Set_counterFREQ+0xc8>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <Set_counterFREQ+0xc8>)
 800205a:	801a      	strh	r2, [r3, #0]
	}
	if(counterFREQ==1){
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <Set_counterFREQ+0xc8>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d106      	bne.n	8002072 <Set_counterFREQ+0x3a>
		delay_time = 2000; // Initial delay time in microseconds
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <Set_counterFREQ+0xcc>)
 8002066:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800206a:	601a      	str	r2, [r3, #0]
		delay_band = 100; // Initial delay band in microseconds
 800206c:	4b26      	ldr	r3, [pc, #152]	; (8002108 <Set_counterFREQ+0xd0>)
 800206e:	2264      	movs	r2, #100	; 0x64
 8002070:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==2){
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <Set_counterFREQ+0xc8>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d105      	bne.n	8002086 <Set_counterFREQ+0x4e>
		delay_time = 200; // Initial delay time in microseconds
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <Set_counterFREQ+0xcc>)
 800207c:	22c8      	movs	r2, #200	; 0xc8
 800207e:	601a      	str	r2, [r3, #0]
		delay_band = 10; // Initial delay band in microseconds
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <Set_counterFREQ+0xd0>)
 8002082:	220a      	movs	r2, #10
 8002084:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==3){
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <Set_counterFREQ+0xc8>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d105      	bne.n	800209a <Set_counterFREQ+0x62>
		delay_time = 100; // Initial delay time in microseconds
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <Set_counterFREQ+0xcc>)
 8002090:	2264      	movs	r2, #100	; 0x64
 8002092:	601a      	str	r2, [r3, #0]
		delay_band = 5; // Initial delay band in microseconds
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <Set_counterFREQ+0xd0>)
 8002096:	2205      	movs	r2, #5
 8002098:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==4){
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <Set_counterFREQ+0xc8>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d105      	bne.n	80020ae <Set_counterFREQ+0x76>
		delay_time = 50; // Initial delay time in microseconds
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <Set_counterFREQ+0xcc>)
 80020a4:	2232      	movs	r2, #50	; 0x32
 80020a6:	601a      	str	r2, [r3, #0]
		delay_band = 2; // Initial delay band in microseconds
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <Set_counterFREQ+0xd0>)
 80020aa:	2202      	movs	r2, #2
 80020ac:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==5){
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <Set_counterFREQ+0xc8>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d105      	bne.n	80020c2 <Set_counterFREQ+0x8a>
		delay_time = 25; // Initial delay time in microseconds
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <Set_counterFREQ+0xcc>)
 80020b8:	2219      	movs	r2, #25
 80020ba:	601a      	str	r2, [r3, #0]
		delay_band = 1; // Initial delay band in microseconds
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <Set_counterFREQ+0xd0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==6){
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <Set_counterFREQ+0xc8>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d105      	bne.n	80020d6 <Set_counterFREQ+0x9e>
		delay_time = 12; // Initial delay time in microseconds
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <Set_counterFREQ+0xcc>)
 80020cc:	220c      	movs	r2, #12
 80020ce:	601a      	str	r2, [r3, #0]
		delay_band = 1; // Initial delay band in microseconds
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <Set_counterFREQ+0xd0>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ==7){
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <Set_counterFREQ+0xc8>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d105      	bne.n	80020ea <Set_counterFREQ+0xb2>
		delay_time = 6; // Initial delay time in microseconds
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <Set_counterFREQ+0xcc>)
 80020e0:	2206      	movs	r2, #6
 80020e2:	601a      	str	r2, [r3, #0]
		delay_band = 1; // Initial delay band in microseconds
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <Set_counterFREQ+0xd0>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
	}
	if(counterFREQ>7){
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <Set_counterFREQ+0xc8>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d902      	bls.n	80020f8 <Set_counterFREQ+0xc0>
		counterFREQ=0;
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <Set_counterFREQ+0xc8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
	}
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40011000 	.word	0x40011000
 8002100:	20000008 	.word	0x20000008
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <Set_SENSE>:

void Set_SENSE(){
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SET_1_GPIO_Port, SET_1_Pin) == 1) {
 8002110:	2140      	movs	r1, #64	; 0x40
 8002112:	4856      	ldr	r0, [pc, #344]	; (800226c <Set_SENSE+0x160>)
 8002114:	f002 fd1a 	bl	8004b4c <HAL_GPIO_ReadPin>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d123      	bne.n	8002166 <Set_SENSE+0x5a>
		SET1=1;
 800211e:	4b54      	ldr	r3, [pc, #336]	; (8002270 <Set_SENSE+0x164>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
		SET10=0;
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <Set_SENSE+0x168>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
		SET100=0;
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <Set_SENSE+0x16c>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
		SET1000=0;
 8002130:	4b52      	ldr	r3, [pc, #328]	; (800227c <Set_SENSE+0x170>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 8002136:	4b52      	ldr	r3, [pc, #328]	; (8002280 <Set_SENSE+0x174>)
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 800213e:	4b51      	ldr	r3, [pc, #324]	; (8002284 <Set_SENSE+0x178>)
 8002140:	4a51      	ldr	r2, [pc, #324]	; (8002288 <Set_SENSE+0x17c>)
 8002142:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 8002144:	4b51      	ldr	r3, [pc, #324]	; (800228c <Set_SENSE+0x180>)
 8002146:	4a52      	ldr	r2, [pc, #328]	; (8002290 <Set_SENSE+0x184>)
 8002148:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 800214a:	2129      	movs	r1, #41	; 0x29
 800214c:	2000      	movs	r0, #0
 800214e:	f001 fb07 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferSET1, "SENSE = x1     ");
 8002152:	4950      	ldr	r1, [pc, #320]	; (8002294 <Set_SENSE+0x188>)
 8002154:	4850      	ldr	r0, [pc, #320]	; (8002298 <Set_SENSE+0x18c>)
 8002156:	f005 f97f 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferSET1, Font_6x8, 1);
 800215a:	4a50      	ldr	r2, [pc, #320]	; (800229c <Set_SENSE+0x190>)
 800215c:	2301      	movs	r3, #1
 800215e:	ca06      	ldmia	r2, {r1, r2}
 8002160:	484d      	ldr	r0, [pc, #308]	; (8002298 <Set_SENSE+0x18c>)
 8002162:	f001 fad7 	bl	8003714 <ssd1306_WriteString>

	}

	if (HAL_GPIO_ReadPin(SET_10_GPIO_Port, SET_10_Pin) == 1) {
 8002166:	2104      	movs	r1, #4
 8002168:	484d      	ldr	r0, [pc, #308]	; (80022a0 <Set_SENSE+0x194>)
 800216a:	f002 fcef 	bl	8004b4c <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d123      	bne.n	80021bc <Set_SENSE+0xb0>
		SET1=0;
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <Set_SENSE+0x164>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
		SET10=1;
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <Set_SENSE+0x168>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
		SET100=0;
 8002180:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <Set_SENSE+0x16c>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
		SET1000=0;
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <Set_SENSE+0x170>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <Set_SENSE+0x174>)
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <Set_SENSE+0x178>)
 8002196:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <Set_SENSE+0x17c>)
 8002198:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <Set_SENSE+0x180>)
 800219c:	4a3c      	ldr	r2, [pc, #240]	; (8002290 <Set_SENSE+0x184>)
 800219e:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 80021a0:	2129      	movs	r1, #41	; 0x29
 80021a2:	2000      	movs	r0, #0
 80021a4:	f001 fadc 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferSET10, "SENSE = x10     ");
 80021a8:	493e      	ldr	r1, [pc, #248]	; (80022a4 <Set_SENSE+0x198>)
 80021aa:	483f      	ldr	r0, [pc, #252]	; (80022a8 <Set_SENSE+0x19c>)
 80021ac:	f005 f954 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferSET10, Font_6x8, 1);
 80021b0:	4a3a      	ldr	r2, [pc, #232]	; (800229c <Set_SENSE+0x190>)
 80021b2:	2301      	movs	r3, #1
 80021b4:	ca06      	ldmia	r2, {r1, r2}
 80021b6:	483c      	ldr	r0, [pc, #240]	; (80022a8 <Set_SENSE+0x19c>)
 80021b8:	f001 faac 	bl	8003714 <ssd1306_WriteString>

	}

	if (HAL_GPIO_ReadPin(SET_100_GPIO_Port, SET_100_Pin) == 1) {
 80021bc:	2102      	movs	r1, #2
 80021be:	4838      	ldr	r0, [pc, #224]	; (80022a0 <Set_SENSE+0x194>)
 80021c0:	f002 fcc4 	bl	8004b4c <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d123      	bne.n	8002212 <Set_SENSE+0x106>
		SET1=0;
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <Set_SENSE+0x164>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
		SET10=0;
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <Set_SENSE+0x168>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
		SET100=1;
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <Set_SENSE+0x16c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
		SET1000=0;
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <Set_SENSE+0x170>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <Set_SENSE+0x174>)
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <Set_SENSE+0x178>)
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <Set_SENSE+0x17c>)
 80021ee:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <Set_SENSE+0x180>)
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <Set_SENSE+0x184>)
 80021f4:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 80021f6:	2129      	movs	r1, #41	; 0x29
 80021f8:	2000      	movs	r0, #0
 80021fa:	f001 fab1 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferSET100, "SENSE = x100     ");
 80021fe:	492b      	ldr	r1, [pc, #172]	; (80022ac <Set_SENSE+0x1a0>)
 8002200:	482b      	ldr	r0, [pc, #172]	; (80022b0 <Set_SENSE+0x1a4>)
 8002202:	f005 f929 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferSET100, Font_6x8, 1);
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <Set_SENSE+0x190>)
 8002208:	2301      	movs	r3, #1
 800220a:	ca06      	ldmia	r2, {r1, r2}
 800220c:	4828      	ldr	r0, [pc, #160]	; (80022b0 <Set_SENSE+0x1a4>)
 800220e:	f001 fa81 	bl	8003714 <ssd1306_WriteString>

	}

	if (HAL_GPIO_ReadPin(SET_1000_GPIO_Port, SET_1000_Pin) == 1) {
 8002212:	2101      	movs	r1, #1
 8002214:	4822      	ldr	r0, [pc, #136]	; (80022a0 <Set_SENSE+0x194>)
 8002216:	f002 fc99 	bl	8004b4c <HAL_GPIO_ReadPin>
 800221a:	4603      	mov	r3, r0
 800221c:	2b01      	cmp	r3, #1
 800221e:	d123      	bne.n	8002268 <Set_SENSE+0x15c>
		SET1=0;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <Set_SENSE+0x164>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
		SET10=0;
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <Set_SENSE+0x168>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
		SET100=0;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <Set_SENSE+0x16c>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
		SET1000=1;
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <Set_SENSE+0x170>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
		moist_offset=0;
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <Set_SENSE+0x174>)
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
		MIN_VOLTAGE = 1630;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <Set_SENSE+0x178>)
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <Set_SENSE+0x17c>)
 8002244:	601a      	str	r2, [r3, #0]
		MAX_VOLTAGE = 2467;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <Set_SENSE+0x180>)
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <Set_SENSE+0x184>)
 800224a:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 41);
 800224c:	2129      	movs	r1, #41	; 0x29
 800224e:	2000      	movs	r0, #0
 8002250:	f001 fa86 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferSET1000, "SENSE = x1000     ");
 8002254:	4917      	ldr	r1, [pc, #92]	; (80022b4 <Set_SENSE+0x1a8>)
 8002256:	4818      	ldr	r0, [pc, #96]	; (80022b8 <Set_SENSE+0x1ac>)
 8002258:	f005 f8fe 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferSET1000, Font_6x8, 1);
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <Set_SENSE+0x190>)
 800225e:	2301      	movs	r3, #1
 8002260:	ca06      	ldmia	r2, {r1, r2}
 8002262:	4815      	ldr	r0, [pc, #84]	; (80022b8 <Set_SENSE+0x1ac>)
 8002264:	f001 fa56 	bl	8003714 <ssd1306_WriteString>

	}
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40011000 	.word	0x40011000
 8002270:	20000b08 	.word	0x20000b08
 8002274:	20000b09 	.word	0x20000b09
 8002278:	20000b0a 	.word	0x20000b0a
 800227c:	20000b0b 	.word	0x20000b0b
 8002280:	200003d0 	.word	0x200003d0
 8002284:	2000000c 	.word	0x2000000c
 8002288:	44cbc000 	.word	0x44cbc000
 800228c:	20000010 	.word	0x20000010
 8002290:	451a3000 	.word	0x451a3000
 8002294:	08009820 	.word	0x08009820
 8002298:	20000720 	.word	0x20000720
 800229c:	20000014 	.word	0x20000014
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	08009830 	.word	0x08009830
 80022a8:	200007e8 	.word	0x200007e8
 80022ac:	08009844 	.word	0x08009844
 80022b0:	200008b0 	.word	0x200008b0
 80022b4:	08009858 	.word	0x08009858
 80022b8:	20000978 	.word	0x20000978

080022bc <Set_counterFREQ_ssd1306>:

void Set_counterFREQ_ssd1306(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	if (counterFREQ==0){
 80022c0:	4b48      	ldr	r3, [pc, #288]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <Set_counterFREQ_ssd1306+0x28>
		ssd1306_SetCursor(0,51);
 80022c8:	2133      	movs	r1, #51	; 0x33
 80022ca:	2000      	movs	r0, #0
 80022cc:	f001 fa48 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:0 100Hz   ");
 80022d0:	4945      	ldr	r1, [pc, #276]	; (80023e8 <Set_counterFREQ_ssd1306+0x12c>)
 80022d2:	4846      	ldr	r0, [pc, #280]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80022d4:	f005 f8c0 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80022d8:	4a45      	ldr	r2, [pc, #276]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 80022da:	2301      	movs	r3, #1
 80022dc:	ca06      	ldmia	r2, {r1, r2}
 80022de:	4843      	ldr	r0, [pc, #268]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80022e0:	f001 fa18 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==1){
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10d      	bne.n	8002308 <Set_counterFREQ_ssd1306+0x4c>
		ssd1306_SetCursor(0,51);
 80022ec:	2133      	movs	r1, #51	; 0x33
 80022ee:	2000      	movs	r0, #0
 80022f0:	f001 fa36 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:1 1KHz  ");
 80022f4:	493f      	ldr	r1, [pc, #252]	; (80023f4 <Set_counterFREQ_ssd1306+0x138>)
 80022f6:	483d      	ldr	r0, [pc, #244]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80022f8:	f005 f8ae 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80022fc:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 80022fe:	2301      	movs	r3, #1
 8002300:	ca06      	ldmia	r2, {r1, r2}
 8002302:	483a      	ldr	r0, [pc, #232]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002304:	f001 fa06 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==2){
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d10d      	bne.n	800232c <Set_counterFREQ_ssd1306+0x70>
		ssd1306_SetCursor(0,51);
 8002310:	2133      	movs	r1, #51	; 0x33
 8002312:	2000      	movs	r0, #0
 8002314:	f001 fa24 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:2 6KHz  ");
 8002318:	4937      	ldr	r1, [pc, #220]	; (80023f8 <Set_counterFREQ_ssd1306+0x13c>)
 800231a:	4834      	ldr	r0, [pc, #208]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 800231c:	f005 f89c 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002320:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 8002322:	2301      	movs	r3, #1
 8002324:	ca06      	ldmia	r2, {r1, r2}
 8002326:	4831      	ldr	r0, [pc, #196]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002328:	f001 f9f4 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==3){
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d10d      	bne.n	8002350 <Set_counterFREQ_ssd1306+0x94>
		ssd1306_SetCursor(0,51);
 8002334:	2133      	movs	r1, #51	; 0x33
 8002336:	2000      	movs	r0, #0
 8002338:	f001 fa12 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:3 20KHz  ");
 800233c:	492f      	ldr	r1, [pc, #188]	; (80023fc <Set_counterFREQ_ssd1306+0x140>)
 800233e:	482b      	ldr	r0, [pc, #172]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002340:	f005 f88a 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 8002346:	2301      	movs	r3, #1
 8002348:	ca06      	ldmia	r2, {r1, r2}
 800234a:	4828      	ldr	r0, [pc, #160]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 800234c:	f001 f9e2 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==4){
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d10d      	bne.n	8002374 <Set_counterFREQ_ssd1306+0xb8>
		ssd1306_SetCursor(0,51);
 8002358:	2133      	movs	r1, #51	; 0x33
 800235a:	2000      	movs	r0, #0
 800235c:	f001 fa00 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:4 40KHz  ");
 8002360:	4927      	ldr	r1, [pc, #156]	; (8002400 <Set_counterFREQ_ssd1306+0x144>)
 8002362:	4822      	ldr	r0, [pc, #136]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002364:	f005 f878 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002368:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 800236a:	2301      	movs	r3, #1
 800236c:	ca06      	ldmia	r2, {r1, r2}
 800236e:	481f      	ldr	r0, [pc, #124]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002370:	f001 f9d0 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==5){
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d10d      	bne.n	8002398 <Set_counterFREQ_ssd1306+0xdc>
		ssd1306_SetCursor(0,51);
 800237c:	2133      	movs	r1, #51	; 0x33
 800237e:	2000      	movs	r0, #0
 8002380:	f001 f9ee 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:5 75KHz  ");
 8002384:	491f      	ldr	r1, [pc, #124]	; (8002404 <Set_counterFREQ_ssd1306+0x148>)
 8002386:	4819      	ldr	r0, [pc, #100]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002388:	f005 f866 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 800238c:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 800238e:	2301      	movs	r3, #1
 8002390:	ca06      	ldmia	r2, {r1, r2}
 8002392:	4816      	ldr	r0, [pc, #88]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 8002394:	f001 f9be 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==6){
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d10d      	bne.n	80023bc <Set_counterFREQ_ssd1306+0x100>
		ssd1306_SetCursor(0,51);
 80023a0:	2133      	movs	r1, #51	; 0x33
 80023a2:	2000      	movs	r0, #0
 80023a4:	f001 f9dc 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:6 133KHz  ");
 80023a8:	4917      	ldr	r1, [pc, #92]	; (8002408 <Set_counterFREQ_ssd1306+0x14c>)
 80023aa:	4810      	ldr	r0, [pc, #64]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80023ac:	f005 f854 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 80023b2:	2301      	movs	r3, #1
 80023b4:	ca06      	ldmia	r2, {r1, r2}
 80023b6:	480d      	ldr	r0, [pc, #52]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80023b8:	f001 f9ac 	bl	8003714 <ssd1306_WriteString>
	}
	if (counterFREQ==7){
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <Set_counterFREQ_ssd1306+0x128>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	2b07      	cmp	r3, #7
 80023c2:	d10d      	bne.n	80023e0 <Set_counterFREQ_ssd1306+0x124>
		ssd1306_SetCursor(0,51);
 80023c4:	2133      	movs	r1, #51	; 0x33
 80023c6:	2000      	movs	r0, #0
 80023c8:	f001 f9ca 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferFREQ,"Frequency:7 200KHz  ");
 80023cc:	490f      	ldr	r1, [pc, #60]	; (800240c <Set_counterFREQ_ssd1306+0x150>)
 80023ce:	4807      	ldr	r0, [pc, #28]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80023d0:	f005 f842 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80023d4:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <Set_counterFREQ_ssd1306+0x134>)
 80023d6:	2301      	movs	r3, #1
 80023d8:	ca06      	ldmia	r2, {r1, r2}
 80023da:	4804      	ldr	r0, [pc, #16]	; (80023ec <Set_counterFREQ_ssd1306+0x130>)
 80023dc:	f001 f99a 	bl	8003714 <ssd1306_WriteString>
	}
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000008 	.word	0x20000008
 80023e8:	0800986c 	.word	0x0800986c
 80023ec:	20000a40 	.word	0x20000a40
 80023f0:	20000014 	.word	0x20000014
 80023f4:	08009884 	.word	0x08009884
 80023f8:	08009898 	.word	0x08009898
 80023fc:	080098ac 	.word	0x080098ac
 8002400:	080098c0 	.word	0x080098c0
 8002404:	080098d4 	.word	0x080098d4
 8002408:	080098e8 	.word	0x080098e8
 800240c:	08009900 	.word	0x08009900

08002410 <moistconduct>:


void moistconduct(){
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)&((SET1||SET10)||SET100||SET1000))
 8002416:	2108      	movs	r1, #8
 8002418:	4880      	ldr	r0, [pc, #512]	; (800261c <moistconduct+0x20c>)
 800241a:	f002 fb97 	bl	8004b4c <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <moistconduct+0x210>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <moistconduct+0x3a>
 8002432:	4b7c      	ldr	r3, [pc, #496]	; (8002624 <moistconduct+0x214>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <moistconduct+0x3a>
 800243a:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <moistconduct+0x218>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <moistconduct+0x3a>
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <moistconduct+0x21c>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <moistconduct+0x3e>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <moistconduct+0x40>
 800244e:	2300      	movs	r3, #0
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4013      	ands	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8392 	beq.w	8002b84 <moistconduct+0x774>
	{

		counter2=0;
 8002460:	4b73      	ldr	r3, [pc, #460]	; (8002630 <moistconduct+0x220>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
		timeout=0;
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <moistconduct+0x224>)
 8002468:	2200      	movs	r2, #0
 800246a:	801a      	strh	r2, [r3, #0]
		while(timeout!=1)
 800246c:	e35f      	b.n	8002b2e <moistconduct+0x71e>
		{
			ssd1306_Fill(0);
 800246e:	2000      	movs	r0, #0
 8002470:	f001 f836 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8002474:	f001 f84c 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8002478:	2100      	movs	r1, #0
 800247a:	2000      	movs	r0, #0
 800247c:	f001 f970 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("1.Probe in Air",Font_6x8,1);
 8002480:	4a6d      	ldr	r2, [pc, #436]	; (8002638 <moistconduct+0x228>)
 8002482:	2301      	movs	r3, #1
 8002484:	ca06      	ldmia	r2, {r1, r2}
 8002486:	486d      	ldr	r0, [pc, #436]	; (800263c <moistconduct+0x22c>)
 8002488:	f001 f944 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 10);
 800248c:	210a      	movs	r1, #10
 800248e:	2000      	movs	r0, #0
 8002490:	f001 f966 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("2.Add Distilled Water",Font_6x8,1);
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <moistconduct+0x228>)
 8002496:	2301      	movs	r3, #1
 8002498:	ca06      	ldmia	r2, {r1, r2}
 800249a:	4869      	ldr	r0, [pc, #420]	; (8002640 <moistconduct+0x230>)
 800249c:	f001 f93a 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 20);
 80024a0:	2114      	movs	r1, #20
 80024a2:	2000      	movs	r0, #0
 80024a4:	f001 f95c 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("3.Mix Soil Sample",Font_6x8,1);
 80024a8:	4a63      	ldr	r2, [pc, #396]	; (8002638 <moistconduct+0x228>)
 80024aa:	2301      	movs	r3, #1
 80024ac:	ca06      	ldmia	r2, {r1, r2}
 80024ae:	4865      	ldr	r0, [pc, #404]	; (8002644 <moistconduct+0x234>)
 80024b0:	f001 f930 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 30);
 80024b4:	211e      	movs	r1, #30
 80024b6:	2000      	movs	r0, #0
 80024b8:	f001 f952 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("4.Probe in Soil",Font_6x8,1);
 80024bc:	4a5e      	ldr	r2, [pc, #376]	; (8002638 <moistconduct+0x228>)
 80024be:	2301      	movs	r3, #1
 80024c0:	ca06      	ldmia	r2, {r1, r2}
 80024c2:	4861      	ldr	r0, [pc, #388]	; (8002648 <moistconduct+0x238>)
 80024c4:	f001 f926 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 40);
 80024c8:	2128      	movs	r1, #40	; 0x28
 80024ca:	2000      	movs	r0, #0
 80024cc:	f001 f948 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("5.Press the Button",Font_6x8,1);
 80024d0:	4a59      	ldr	r2, [pc, #356]	; (8002638 <moistconduct+0x228>)
 80024d2:	2301      	movs	r3, #1
 80024d4:	ca06      	ldmia	r2, {r1, r2}
 80024d6:	485d      	ldr	r0, [pc, #372]	; (800264c <moistconduct+0x23c>)
 80024d8:	f001 f91c 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 50);
 80024dc:	2132      	movs	r1, #50	; 0x32
 80024de:	2000      	movs	r0, #0
 80024e0:	f001 f93e 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("5.Wait for the Results",Font_6x8,1);
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <moistconduct+0x228>)
 80024e6:	2301      	movs	r3, #1
 80024e8:	ca06      	ldmia	r2, {r1, r2}
 80024ea:	4859      	ldr	r0, [pc, #356]	; (8002650 <moistconduct+0x240>)
 80024ec:	f001 f912 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80024f0:	f001 f80e 	bl	8003510 <ssd1306_UpdateScreen>
			HAL_Delay(200);
 80024f4:	20c8      	movs	r0, #200	; 0xc8
 80024f6:	f001 fc1b 	bl	8003d30 <HAL_Delay>



			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)
 80024fa:	2108      	movs	r1, #8
 80024fc:	4847      	ldr	r0, [pc, #284]	; (800261c <moistconduct+0x20c>)
 80024fe:	f002 fb25 	bl	8004b4c <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	f040 8312 	bne.w	8002b2e <moistconduct+0x71e>
			{

				av_cond=0;
 800250a:	4b52      	ldr	r3, [pc, #328]	; (8002654 <moistconduct+0x244>)
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
				av_moist=0;
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <moistconduct+0x248>)
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
				final_average_cond=0;
 800251a:	4b50      	ldr	r3, [pc, #320]	; (800265c <moistconduct+0x24c>)
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

				ssd1306_Fill(0);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 ffdc 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002528:	f000 fff2 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 800252c:	2100      	movs	r1, #0
 800252e:	2000      	movs	r0, #0
 8002530:	f001 f916 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("Preparing ",Font_7x10,1);
 8002534:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <moistconduct+0x250>)
 8002536:	2301      	movs	r3, #1
 8002538:	ca06      	ldmia	r2, {r1, r2}
 800253a:	484a      	ldr	r0, [pc, #296]	; (8002664 <moistconduct+0x254>)
 800253c:	f001 f8ea 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 10);
 8002540:	210a      	movs	r1, #10
 8002542:	2000      	movs	r0, #0
 8002544:	f001 f90c 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("device for ",Font_7x10,1);
 8002548:	4a45      	ldr	r2, [pc, #276]	; (8002660 <moistconduct+0x250>)
 800254a:	2301      	movs	r3, #1
 800254c:	ca06      	ldmia	r2, {r1, r2}
 800254e:	4846      	ldr	r0, [pc, #280]	; (8002668 <moistconduct+0x258>)
 8002550:	f001 f8e0 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8002554:	2114      	movs	r1, #20
 8002556:	2000      	movs	r0, #0
 8002558:	f001 f902 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("moisture ",Font_7x10,1);
 800255c:	4a40      	ldr	r2, [pc, #256]	; (8002660 <moistconduct+0x250>)
 800255e:	2301      	movs	r3, #1
 8002560:	ca06      	ldmia	r2, {r1, r2}
 8002562:	4842      	ldr	r0, [pc, #264]	; (800266c <moistconduct+0x25c>)
 8002564:	f001 f8d6 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,30);
 8002568:	211e      	movs	r1, #30
 800256a:	2000      	movs	r0, #0
 800256c:	f001 f8f8 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("measurement...",Font_7x10,1);
 8002570:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <moistconduct+0x250>)
 8002572:	2301      	movs	r3, #1
 8002574:	ca06      	ldmia	r2, {r1, r2}
 8002576:	483e      	ldr	r0, [pc, #248]	; (8002670 <moistconduct+0x260>)
 8002578:	f001 f8cc 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800257c:	f000 ffc8 	bl	8003510 <ssd1306_UpdateScreen>
				for(i=0;i<15;i++)
 8002580:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <moistconduct+0x264>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e007      	b.n	8002598 <moistconduct+0x188>
				{
					PWM_MOIST();
 8002588:	f7ff f94a 	bl	8001820 <PWM_MOIST>
				for(i=0;i<15;i++)
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <moistconduct+0x264>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b37      	ldr	r3, [pc, #220]	; (8002674 <moistconduct+0x264>)
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <moistconduct+0x264>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b0e      	cmp	r3, #14
 800259e:	d9f3      	bls.n	8002588 <moistconduct+0x178>
				}

				ssd1306_Fill(0);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 ff9d 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80025a6:	f000 ffb3 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 80025aa:	2100      	movs	r1, #0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f001 f8d7 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("Measuring",Font_7x10,1);
 80025b2:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <moistconduct+0x250>)
 80025b4:	2301      	movs	r3, #1
 80025b6:	ca06      	ldmia	r2, {r1, r2}
 80025b8:	482f      	ldr	r0, [pc, #188]	; (8002678 <moistconduct+0x268>)
 80025ba:	f001 f8ab 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 10);
 80025be:	210a      	movs	r1, #10
 80025c0:	2000      	movs	r0, #0
 80025c2:	f001 f8cd 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("Moisture...",Font_7x10,1);
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <moistconduct+0x250>)
 80025c8:	2301      	movs	r3, #1
 80025ca:	ca06      	ldmia	r2, {r1, r2}
 80025cc:	482b      	ldr	r0, [pc, #172]	; (800267c <moistconduct+0x26c>)
 80025ce:	f001 f8a1 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80025d2:	f000 ff9d 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_Fill(0);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f000 ff82 	bl	80034e0 <ssd1306_Fill>

				ADC_CH2();
 80025dc:	f7ff fb36 	bl	8001c4c <ADC_CH2>

				// Inside your loop
				percentage_moist2 = 0; // Initialize averaged percentage variable
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <moistconduct+0x270>)
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

				av_moist_sum=0;
 80025e8:	4b26      	ldr	r3, [pc, #152]	; (8002684 <moistconduct+0x274>)
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

				for (j = 0; j < 4; j++) {
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <moistconduct+0x278>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e0dd      	b.n	80027b4 <moistconduct+0x3a4>
					percentage_moist=0;
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <moistconduct+0x27c>)
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
					av_moist = 0; // Reset av_moist for each iteration
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <moistconduct+0x248>)
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
					PWM_MOIST();
 8002608:	f7ff f90a 	bl	8001820 <PWM_MOIST>
					HAL_ADC_Start(&hadc2);
 800260c:	4820      	ldr	r0, [pc, #128]	; (8002690 <moistconduct+0x280>)
 800260e:	f001 fc8b 	bl	8003f28 <HAL_ADC_Start>
					for (i = 0; i < 5; i++) {
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <moistconduct+0x264>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e09f      	b.n	800275a <moistconduct+0x34a>
 800261a:	bf00      	nop
 800261c:	40011000 	.word	0x40011000
 8002620:	20000b08 	.word	0x20000b08
 8002624:	20000b09 	.word	0x20000b09
 8002628:	20000b0a 	.word	0x20000b0a
 800262c:	20000b0b 	.word	0x20000b0b
 8002630:	200003c8 	.word	0x200003c8
 8002634:	200003cc 	.word	0x200003cc
 8002638:	20000014 	.word	0x20000014
 800263c:	08009918 	.word	0x08009918
 8002640:	08009928 	.word	0x08009928
 8002644:	08009940 	.word	0x08009940
 8002648:	08009954 	.word	0x08009954
 800264c:	08009964 	.word	0x08009964
 8002650:	08009978 	.word	0x08009978
 8002654:	200003dc 	.word	0x200003dc
 8002658:	200003e4 	.word	0x200003e4
 800265c:	200003d8 	.word	0x200003d8
 8002660:	2000001c 	.word	0x2000001c
 8002664:	08009990 	.word	0x08009990
 8002668:	0800999c 	.word	0x0800999c
 800266c:	080099a8 	.word	0x080099a8
 8002670:	080099b4 	.word	0x080099b4
 8002674:	200003c0 	.word	0x200003c0
 8002678:	080099c4 	.word	0x080099c4
 800267c:	080099d0 	.word	0x080099d0
 8002680:	200003ec 	.word	0x200003ec
 8002684:	200003d4 	.word	0x200003d4
 8002688:	200003c1 	.word	0x200003c1
 800268c:	200003e8 	.word	0x200003e8
 8002690:	2000021c 	.word	0x2000021c
						HAL_ADC_PollForConversion(&hadc2, 1);
 8002694:	2101      	movs	r1, #1
 8002696:	489a      	ldr	r0, [pc, #616]	; (8002900 <moistconduct+0x4f0>)
 8002698:	f001 fd20 	bl	80040dc <HAL_ADC_PollForConversion>
						adc_buffer[1] = HAL_ADC_GetValue(&hadc2);
 800269c:	4898      	ldr	r0, [pc, #608]	; (8002900 <moistconduct+0x4f0>)
 800269e:	f001 fe23 	bl	80042e8 <HAL_ADC_GetValue>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a97      	ldr	r2, [pc, #604]	; (8002904 <moistconduct+0x4f4>)
 80026a6:	6053      	str	r3, [r2, #4]
						voltage_buffer[1] = adc_value_to_voltage(adc_buffer[1]);
 80026a8:	4b96      	ldr	r3, [pc, #600]	; (8002904 <moistconduct+0x4f4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fb0a 	bl	8001cc8 <adc_value_to_voltage>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a94      	ldr	r2, [pc, #592]	; (8002908 <moistconduct+0x4f8>)
 80026b8:	6053      	str	r3, [r2, #4]
						av_moist += voltage_buffer[1] / 5;
 80026ba:	4b93      	ldr	r3, [pc, #588]	; (8002908 <moistconduct+0x4f8>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4993      	ldr	r1, [pc, #588]	; (800290c <moistconduct+0x4fc>)
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fbf3 	bl	8000eac <__aeabi_fdiv>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <moistconduct+0x500>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f7fe fa2f 	bl	8000b34 <__addsf3>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	4b8d      	ldr	r3, [pc, #564]	; (8002910 <moistconduct+0x500>)
 80026dc:	601a      	str	r2, [r3, #0]
						percentage_moist = 100.0-(((((av_moist+moist_offset) - MIN_VOLTAGE)) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0);
 80026de:	4b8c      	ldr	r3, [pc, #560]	; (8002910 <moistconduct+0x500>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a8c      	ldr	r2, [pc, #560]	; (8002914 <moistconduct+0x504>)
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fa23 	bl	8000b34 <__addsf3>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b89      	ldr	r3, [pc, #548]	; (8002918 <moistconduct+0x508>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7fe fa19 	bl	8000b30 <__aeabi_fsub>
 80026fe:	4603      	mov	r3, r0
 8002700:	461c      	mov	r4, r3
 8002702:	4b86      	ldr	r3, [pc, #536]	; (800291c <moistconduct+0x50c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a84      	ldr	r2, [pc, #528]	; (8002918 <moistconduct+0x508>)
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fa0f 	bl	8000b30 <__aeabi_fsub>
 8002712:	4603      	mov	r3, r0
 8002714:	4619      	mov	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f7fe fbc8 	bl	8000eac <__aeabi_fdiv>
 800271c:	4603      	mov	r3, r0
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd fe82 	bl	8000428 <__aeabi_f2d>
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b7d      	ldr	r3, [pc, #500]	; (8002920 <moistconduct+0x510>)
 800272a:	f7fd fed5 	bl	80004d8 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	497a      	ldr	r1, [pc, #488]	; (8002920 <moistconduct+0x510>)
 8002738:	f7fd fd16 	bl	8000168 <__aeabi_dsub>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f9a0 	bl	8000a88 <__aeabi_d2f>
 8002748:	4603      	mov	r3, r0
 800274a:	4a76      	ldr	r2, [pc, #472]	; (8002924 <moistconduct+0x514>)
 800274c:	6013      	str	r3, [r2, #0]
					for (i = 0; i < 5; i++) {
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <moistconduct+0x518>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <moistconduct+0x518>)
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <moistconduct+0x518>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d998      	bls.n	8002694 <moistconduct+0x284>
					}
					HAL_ADC_Stop(&hadc2);
 8002762:	4867      	ldr	r0, [pc, #412]	; (8002900 <moistconduct+0x4f0>)
 8002764:	f001 fc8e 	bl	8004084 <HAL_ADC_Stop>

					// Calculate percentage_moist for this iteration
					av_moist_sum+=(av_moist+moist_offset);
 8002768:	4b69      	ldr	r3, [pc, #420]	; (8002910 <moistconduct+0x500>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a69      	ldr	r2, [pc, #420]	; (8002914 <moistconduct+0x504>)
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe f9de 	bl	8000b34 <__addsf3>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	4b6b      	ldr	r3, [pc, #428]	; (800292c <moistconduct+0x51c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f7fe f9d6 	bl	8000b34 <__addsf3>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b67      	ldr	r3, [pc, #412]	; (800292c <moistconduct+0x51c>)
 800278e:	601a      	str	r2, [r3, #0]

					// Accumulate the calculated percentage
					percentage_moist2 += percentage_moist;
 8002790:	4b67      	ldr	r3, [pc, #412]	; (8002930 <moistconduct+0x520>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a63      	ldr	r2, [pc, #396]	; (8002924 <moistconduct+0x514>)
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe f9ca 	bl	8000b34 <__addsf3>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b62      	ldr	r3, [pc, #392]	; (8002930 <moistconduct+0x520>)
 80027a6:	601a      	str	r2, [r3, #0]
				for (j = 0; j < 4; j++) {
 80027a8:	4b62      	ldr	r3, [pc, #392]	; (8002934 <moistconduct+0x524>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b60      	ldr	r3, [pc, #384]	; (8002934 <moistconduct+0x524>)
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <moistconduct+0x524>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	f67f af1d 	bls.w	80025f8 <moistconduct+0x1e8>

				}

				// Calculate the average of percentage_moist over 15 measurements
				av_moist_sum/=4;
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <moistconduct+0x51c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fb70 	bl	8000eac <__aeabi_fdiv>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b56      	ldr	r3, [pc, #344]	; (800292c <moistconduct+0x51c>)
 80027d2:	601a      	str	r2, [r3, #0]
				percentage_moist2 /= 4;
 80027d4:	4b56      	ldr	r3, [pc, #344]	; (8002930 <moistconduct+0x520>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fb65 	bl	8000eac <__aeabi_fdiv>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b52      	ldr	r3, [pc, #328]	; (8002930 <moistconduct+0x520>)
 80027e8:	601a      	str	r2, [r3, #0]
				// Manipulate the last value of percentage_moist2
				if (percentage_moist2 > 100) {
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <moistconduct+0x520>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4952      	ldr	r1, [pc, #328]	; (8002938 <moistconduct+0x528>)
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc63 	bl	80010bc <__aeabi_fcmpgt>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <moistconduct+0x3f4>
					percentage_moist2 = 100;
 80027fc:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <moistconduct+0x520>)
 80027fe:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <moistconduct+0x528>)
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e00d      	b.n	8002820 <moistconduct+0x410>
				} else if (percentage_moist2 < 0) {
 8002804:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <moistconduct+0x520>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fc37 	bl	8001080 <__aeabi_fcmplt>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <moistconduct+0x410>
					percentage_moist2 = 0;
 8002818:	4b45      	ldr	r3, [pc, #276]	; (8002930 <moistconduct+0x520>)
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
				}
				if(percentage_moist2>=80)
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <moistconduct+0x520>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4945      	ldr	r1, [pc, #276]	; (800293c <moistconduct+0x52c>)
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc3e 	bl	80010a8 <__aeabi_fcmpge>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d022      	beq.n	8002878 <moistconduct+0x468>
				{
					ssd1306_Fill(0);
 8002832:	2000      	movs	r0, #0
 8002834:	f000 fe54 	bl	80034e0 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002838:	f000 fe6a 	bl	8003510 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 800283c:	2100      	movs	r1, #0
 800283e:	2000      	movs	r0, #0
 8002840:	f000 ff8e 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("MOISTURE OK",Font_7x10,1);
 8002844:	4a3e      	ldr	r2, [pc, #248]	; (8002940 <moistconduct+0x530>)
 8002846:	2301      	movs	r3, #1
 8002848:	ca06      	ldmia	r2, {r1, r2}
 800284a:	483e      	ldr	r0, [pc, #248]	; (8002944 <moistconduct+0x534>)
 800284c:	f000 ff62 	bl	8003714 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 15);
 8002850:	210f      	movs	r1, #15
 8002852:	2000      	movs	r0, #0
 8002854:	f000 ff84 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("OVER 80%",Font_7x10,1);
 8002858:	4a39      	ldr	r2, [pc, #228]	; (8002940 <moistconduct+0x530>)
 800285a:	2301      	movs	r3, #1
 800285c:	ca06      	ldmia	r2, {r1, r2}
 800285e:	483a      	ldr	r0, [pc, #232]	; (8002948 <moistconduct+0x538>)
 8002860:	f000 ff58 	bl	8003714 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002864:	f000 fe54 	bl	8003510 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 8002868:	2000      	movs	r0, #0
 800286a:	f000 fe39 	bl	80034e0 <ssd1306_Fill>
					HAL_Delay(5000);
 800286e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002872:	f001 fa5d 	bl	8003d30 <HAL_Delay>
 8002876:	e073      	b.n	8002960 <moistconduct+0x550>
				}
				else if(percentage_moist2<80)
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <moistconduct+0x520>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	492f      	ldr	r1, [pc, #188]	; (800293c <moistconduct+0x52c>)
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fbfe 	bl	8001080 <__aeabi_fcmplt>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06a      	beq.n	8002960 <moistconduct+0x550>
				{
					ssd1306_Fill(0);
 800288a:	2000      	movs	r0, #0
 800288c:	f000 fe28 	bl	80034e0 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002890:	f000 fe3e 	bl	8003510 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8002894:	2100      	movs	r1, #0
 8002896:	2000      	movs	r0, #0
 8002898:	f000 ff62 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("MOISTURE LOW",Font_7x10,1);
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <moistconduct+0x530>)
 800289e:	2301      	movs	r3, #1
 80028a0:	ca06      	ldmia	r2, {r1, r2}
 80028a2:	482a      	ldr	r0, [pc, #168]	; (800294c <moistconduct+0x53c>)
 80028a4:	f000 ff36 	bl	8003714 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 15);
 80028a8:	210f      	movs	r1, #15
 80028aa:	2000      	movs	r0, #0
 80028ac:	f000 ff58 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("UNDER 80%",Font_7x10,1);
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <moistconduct+0x530>)
 80028b2:	2301      	movs	r3, #1
 80028b4:	ca06      	ldmia	r2, {r1, r2}
 80028b6:	4826      	ldr	r0, [pc, #152]	; (8002950 <moistconduct+0x540>)
 80028b8:	f000 ff2c 	bl	8003714 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 30);
 80028bc:	211e      	movs	r1, #30
 80028be:	2000      	movs	r0, #0
 80028c0:	f000 ff4e 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("ADD DISTILLED",Font_7x10,1);
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <moistconduct+0x530>)
 80028c6:	2301      	movs	r3, #1
 80028c8:	ca06      	ldmia	r2, {r1, r2}
 80028ca:	4822      	ldr	r0, [pc, #136]	; (8002954 <moistconduct+0x544>)
 80028cc:	f000 ff22 	bl	8003714 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 45);
 80028d0:	212d      	movs	r1, #45	; 0x2d
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 ff44 	bl	8003760 <ssd1306_SetCursor>
					ssd1306_WriteString("WATER",Font_7x10,1);
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <moistconduct+0x530>)
 80028da:	2301      	movs	r3, #1
 80028dc:	ca06      	ldmia	r2, {r1, r2}
 80028de:	481e      	ldr	r0, [pc, #120]	; (8002958 <moistconduct+0x548>)
 80028e0:	f000 ff18 	bl	8003714 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80028e4:	f000 fe14 	bl	8003510 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f000 fdf9 	bl	80034e0 <ssd1306_Fill>
					HAL_Delay(5000);
 80028ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80028f2:	f001 fa1d 	bl	8003d30 <HAL_Delay>
					timeout=0;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <moistconduct+0x54c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	801a      	strh	r2, [r3, #0]
					break;
 80028fc:	e11c      	b.n	8002b38 <moistconduct+0x728>
 80028fe:	bf00      	nop
 8002900:	2000021c 	.word	0x2000021c
 8002904:	20000b0c 	.word	0x20000b0c
 8002908:	20000b1c 	.word	0x20000b1c
 800290c:	40a00000 	.word	0x40a00000
 8002910:	200003e4 	.word	0x200003e4
 8002914:	200003d0 	.word	0x200003d0
 8002918:	2000000c 	.word	0x2000000c
 800291c:	20000010 	.word	0x20000010
 8002920:	40590000 	.word	0x40590000
 8002924:	200003e8 	.word	0x200003e8
 8002928:	200003c0 	.word	0x200003c0
 800292c:	200003d4 	.word	0x200003d4
 8002930:	200003ec 	.word	0x200003ec
 8002934:	200003c1 	.word	0x200003c1
 8002938:	42c80000 	.word	0x42c80000
 800293c:	42a00000 	.word	0x42a00000
 8002940:	2000001c 	.word	0x2000001c
 8002944:	080099dc 	.word	0x080099dc
 8002948:	080099e8 	.word	0x080099e8
 800294c:	080099f4 	.word	0x080099f4
 8002950:	08009a04 	.word	0x08009a04
 8002954:	08009a10 	.word	0x08009a10
 8002958:	08009a20 	.word	0x08009a20
 800295c:	200003cc 	.word	0x200003cc
				}


				ssd1306_Fill(0);
 8002960:	2000      	movs	r0, #0
 8002962:	f000 fdbd 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002966:	f000 fdd3 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 800296a:	2100      	movs	r1, #0
 800296c:	2000      	movs	r0, #0
 800296e:	f000 fef7 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("Measuring",Font_7x10,1);
 8002972:	4a86      	ldr	r2, [pc, #536]	; (8002b8c <moistconduct+0x77c>)
 8002974:	2301      	movs	r3, #1
 8002976:	ca06      	ldmia	r2, {r1, r2}
 8002978:	4885      	ldr	r0, [pc, #532]	; (8002b90 <moistconduct+0x780>)
 800297a:	f000 fecb 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 10);
 800297e:	210a      	movs	r1, #10
 8002980:	2000      	movs	r0, #0
 8002982:	f000 feed 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("Conductivity...",Font_7x10,1);
 8002986:	4a81      	ldr	r2, [pc, #516]	; (8002b8c <moistconduct+0x77c>)
 8002988:	2301      	movs	r3, #1
 800298a:	ca06      	ldmia	r2, {r1, r2}
 800298c:	4881      	ldr	r0, [pc, #516]	; (8002b94 <moistconduct+0x784>)
 800298e:	f000 fec1 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8002992:	f000 fdbd 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_Fill(0);
 8002996:	2000      	movs	r0, #0
 8002998:	f000 fda2 	bl	80034e0 <ssd1306_Fill>
				HAL_Delay(1000);
 800299c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a0:	f001 f9c6 	bl	8003d30 <HAL_Delay>

				ADC_CH1();
 80029a4:	f7ff f934 	bl	8001c10 <ADC_CH1>
				for(int i=0;i<50;i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e004      	b.n	80029b8 <moistconduct+0x5a8>
				{
					PWM_COND();
 80029ae:	f7fe fef5 	bl	800179c <PWM_COND>
				for(int i=0;i<50;i++)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b31      	cmp	r3, #49	; 0x31
 80029bc:	ddf7      	ble.n	80029ae <moistconduct+0x59e>
				}



				float av_cond_sum = 0;
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]

				for(int j = 0; j < 15; j++) {
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e041      	b.n	8002a4e <moistconduct+0x63e>

					HAL_ADC_Start(&hadc2);
 80029ca:	4873      	ldr	r0, [pc, #460]	; (8002b98 <moistconduct+0x788>)
 80029cc:	f001 faac 	bl	8003f28 <HAL_ADC_Start>
					PWM_COND();
 80029d0:	f7fe fee4 	bl	800179c <PWM_COND>
					float av_cond = 0; // Initialize av_cond for each iteration
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

					for(int i = 0; i < 30; i++) {
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	e024      	b.n	8002a2a <moistconduct+0x61a>

						PWM_COND();
 80029e0:	f7fe fedc 	bl	800179c <PWM_COND>
						HAL_ADC_PollForConversion(&hadc2, 1);
 80029e4:	2101      	movs	r1, #1
 80029e6:	486c      	ldr	r0, [pc, #432]	; (8002b98 <moistconduct+0x788>)
 80029e8:	f001 fb78 	bl	80040dc <HAL_ADC_PollForConversion>
						adc_buffer[0] = HAL_ADC_GetValue(&hadc2);
 80029ec:	486a      	ldr	r0, [pc, #424]	; (8002b98 <moistconduct+0x788>)
 80029ee:	f001 fc7b 	bl	80042e8 <HAL_ADC_GetValue>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a69      	ldr	r2, [pc, #420]	; (8002b9c <moistconduct+0x78c>)
 80029f6:	6013      	str	r3, [r2, #0]
						voltage_buffer[0] = adc_value_to_voltage(adc_buffer[0]);
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <moistconduct+0x78c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f962 	bl	8001cc8 <adc_value_to_voltage>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <moistconduct+0x790>)
 8002a08:	6013      	str	r3, [r2, #0]
						av_cond += voltage_buffer[0] / 30; // Accumulate the value
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <moistconduct+0x790>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4965      	ldr	r1, [pc, #404]	; (8002ba4 <moistconduct+0x794>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fa4b 	bl	8000eac <__aeabi_fdiv>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4619      	mov	r1, r3
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	f7fe f88a 	bl	8000b34 <__addsf3>
 8002a20:	4603      	mov	r3, r0
 8002a22:	60bb      	str	r3, [r7, #8]
					for(int i = 0; i < 30; i++) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3301      	adds	r3, #1
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b1d      	cmp	r3, #29
 8002a2e:	ddd7      	ble.n	80029e0 <moistconduct+0x5d0>

					}

					HAL_ADC_Stop(&hadc2);
 8002a30:	4859      	ldr	r0, [pc, #356]	; (8002b98 <moistconduct+0x788>)
 8002a32:	f001 fb27 	bl	8004084 <HAL_ADC_Stop>
					HAL_Delay(100);
 8002a36:	2064      	movs	r0, #100	; 0x64
 8002a38:	f001 f97a 	bl	8003d30 <HAL_Delay>
					//						Set_Conductivity_outputs_PD();
					//


					// Add the average of this iteration to av_cond_sum
					av_cond_sum += av_cond;
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6938      	ldr	r0, [r7, #16]
 8002a40:	f7fe f878 	bl	8000b34 <__addsf3>
 8002a44:	4603      	mov	r3, r0
 8002a46:	613b      	str	r3, [r7, #16]
				for(int j = 0; j < 15; j++) {
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b0e      	cmp	r3, #14
 8002a52:	ddba      	ble.n	80029ca <moistconduct+0x5ba>
				}


				// Calculate the final average
				final_average_cond = av_cond_sum / 15;
 8002a54:	4954      	ldr	r1, [pc, #336]	; (8002ba8 <moistconduct+0x798>)
 8002a56:	6938      	ldr	r0, [r7, #16]
 8002a58:	f7fe fa28 	bl	8000eac <__aeabi_fdiv>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <moistconduct+0x79c>)
 8002a62:	601a      	str	r2, [r3, #0]



				ssd1306_Fill(0);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f000 fd3b 	bl	80034e0 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002a6a:	f000 fd51 	bl	8003510 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 fe75 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("Conductivity ",Font_7x10,1);
 8002a76:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <moistconduct+0x77c>)
 8002a78:	2301      	movs	r3, #1
 8002a7a:	ca06      	ldmia	r2, {r1, r2}
 8002a7c:	484c      	ldr	r0, [pc, #304]	; (8002bb0 <moistconduct+0x7a0>)
 8002a7e:	f000 fe49 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8002a82:	210a      	movs	r1, #10
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 fe6b 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("measurement",Font_7x10,1);
 8002a8a:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <moistconduct+0x77c>)
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	ca06      	ldmia	r2, {r1, r2}
 8002a90:	4848      	ldr	r0, [pc, #288]	; (8002bb4 <moistconduct+0x7a4>)
 8002a92:	f000 fe3f 	bl	8003714 <ssd1306_WriteString>
				ssd1306_SetCursor(0,20);
 8002a96:	2114      	movs	r1, #20
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f000 fe61 	bl	8003760 <ssd1306_SetCursor>
				ssd1306_WriteString("finished",Font_7x10,1);
 8002a9e:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <moistconduct+0x77c>)
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	ca06      	ldmia	r2, {r1, r2}
 8002aa4:	4844      	ldr	r0, [pc, #272]	; (8002bb8 <moistconduct+0x7a8>)
 8002aa6:	f000 fe35 	bl	8003714 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8002aaa:	f000 fd31 	bl	8003510 <ssd1306_UpdateScreen>
				HAL_Delay(4000);
 8002aae:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002ab2:	f001 f93d 	bl	8003d30 <HAL_Delay>
				if(SET1==1)
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <moistconduct+0x7ac>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <moistconduct+0x6be>
				{
					conductivity=calculateECSET1(final_average_cond);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <moistconduct+0x79c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fb04 	bl	80010d0 <calculateECSET1>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a3d      	ldr	r2, [pc, #244]	; (8002bc0 <moistconduct+0x7b0>)
 8002acc:	6013      	str	r3, [r2, #0]
				}
				if(SET10==1)
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <moistconduct+0x7b4>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <moistconduct+0x6d6>
				{
					conductivity=calculateECSET10(final_average_cond);
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <moistconduct+0x79c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fb24 	bl	8001128 <calculateECSET10>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a37      	ldr	r2, [pc, #220]	; (8002bc0 <moistconduct+0x7b0>)
 8002ae4:	6013      	str	r3, [r2, #0]
				}
				if(SET100==1)
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <moistconduct+0x7b8>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <moistconduct+0x6ee>
				{
					conductivity=calculateECSET100(final_average_cond);
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <moistconduct+0x79c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fb44 	bl	8001180 <calculateECSET100>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <moistconduct+0x7b0>)
 8002afc:	6013      	str	r3, [r2, #0]
				}
				if(SET1000==1)
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <moistconduct+0x7bc>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <moistconduct+0x706>
				{
					conductivity=calculateECSET1000(final_average_cond);
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <moistconduct+0x79c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fb64 	bl	80011d8 <calculateECSET1000>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <moistconduct+0x7b0>)
 8002b14:	6013      	str	r3, [r2, #0]
				}
				HAL_Delay(4000);
 8002b16:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002b1a:	f001 f909 	bl	8003d30 <HAL_Delay>
				EC_out_of_range();
 8002b1e:	f7ff f915 	bl	8001d4c <EC_out_of_range>
				salinity_fertilizer();
 8002b22:	f7fe fbc9 	bl	80012b8 <salinity_fertilizer>

				timeout=0;
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <moistconduct+0x7c0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	801a      	strh	r2, [r3, #0]
				break;
 8002b2c:	e004      	b.n	8002b38 <moistconduct+0x728>
		while(timeout!=1)
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <moistconduct+0x7c0>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f47f ac9b 	bne.w	800246e <moistconduct+0x5e>

			}
		}
		if(timeout==1)
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <moistconduct+0x7c0>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d121      	bne.n	8002b84 <moistconduct+0x774>
		{
			ssd1306_Fill(0);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f000 fccd 	bl	80034e0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8002b46:	f000 fce3 	bl	8003510 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(0, 0);
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f000 fe07 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("Timeout",Font_7x10,1);
 8002b52:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <moistconduct+0x77c>)
 8002b54:	2301      	movs	r3, #1
 8002b56:	ca06      	ldmia	r2, {r1, r2}
 8002b58:	481e      	ldr	r0, [pc, #120]	; (8002bd4 <moistconduct+0x7c4>)
 8002b5a:	f000 fddb 	bl	8003714 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 10);
 8002b5e:	210a      	movs	r1, #10
 8002b60:	2000      	movs	r0, #0
 8002b62:	f000 fdfd 	bl	8003760 <ssd1306_SetCursor>
			ssd1306_WriteString("Triggered",Font_7x10,1);
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <moistconduct+0x77c>)
 8002b68:	2301      	movs	r3, #1
 8002b6a:	ca06      	ldmia	r2, {r1, r2}
 8002b6c:	481a      	ldr	r0, [pc, #104]	; (8002bd8 <moistconduct+0x7c8>)
 8002b6e:	f000 fdd1 	bl	8003714 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002b72:	f000 fccd 	bl	8003510 <ssd1306_UpdateScreen>
			HAL_Delay(1000);
 8002b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b7a:	f001 f8d9 	bl	8003d30 <HAL_Delay>
			timeout=0;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <moistconduct+0x7c0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	2000001c 	.word	0x2000001c
 8002b90:	080099c4 	.word	0x080099c4
 8002b94:	08009a28 	.word	0x08009a28
 8002b98:	2000021c 	.word	0x2000021c
 8002b9c:	20000b0c 	.word	0x20000b0c
 8002ba0:	20000b1c 	.word	0x20000b1c
 8002ba4:	41f00000 	.word	0x41f00000
 8002ba8:	41700000 	.word	0x41700000
 8002bac:	200003d8 	.word	0x200003d8
 8002bb0:	08009a38 	.word	0x08009a38
 8002bb4:	08009a48 	.word	0x08009a48
 8002bb8:	08009a54 	.word	0x08009a54
 8002bbc:	20000b08 	.word	0x20000b08
 8002bc0:	200003e0 	.word	0x200003e0
 8002bc4:	20000b09 	.word	0x20000b09
 8002bc8:	20000b0a 	.word	0x20000b0a
 8002bcc:	20000b0b 	.word	0x20000b0b
 8002bd0:	200003cc 	.word	0x200003cc
 8002bd4:	08009a60 	.word	0x08009a60
 8002bd8:	08009a68 	.word	0x08009a68

08002bdc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002be2:	f001 f843 	bl	8003c6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002be6:	f000 f94d 	bl	8002e84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002bea:	f000 fb47 	bl	800327c <MX_GPIO_Init>
	MX_I2C1_Init();
 8002bee:	f000 f9d5 	bl	8002f9c <MX_I2C1_Init>
	MX_ADC2_Init();
 8002bf2:	f000 f9a3 	bl	8002f3c <MX_ADC2_Init>
	MX_TIM1_Init();
 8002bf6:	f000 f9ff 	bl	8002ff8 <MX_TIM1_Init>
	MX_TIM4_Init();
 8002bfa:	f000 fae7 	bl	80031cc <MX_TIM4_Init>
	MX_TIM3_Init();
 8002bfe:	f000 fa97 	bl	8003130 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002c02:	f000 fa49 	bl	8003098 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_INITS();
 8002c06:	f7fe fe3b 	bl	8001880 <SSD1306_INITS>
	HAL_ADC_Init(&hadc2);
 8002c0a:	4883      	ldr	r0, [pc, #524]	; (8002e18 <main+0x23c>)
 8002c0c:	f001 f8b4 	bl	8003d78 <HAL_ADC_Init>
	HAL_TIM_Base_Start(&htim1);
 8002c10:	4882      	ldr	r0, [pc, #520]	; (8002e1c <main+0x240>)
 8002c12:	f003 fa43 	bl	800609c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8002c16:	4882      	ldr	r0, [pc, #520]	; (8002e20 <main+0x244>)
 8002c18:	f003 fa40 	bl	800609c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8002c1c:	4881      	ldr	r0, [pc, #516]	; (8002e24 <main+0x248>)
 8002c1e:	f003 fa3d 	bl	800609c <HAL_TIM_Base_Start>

	//  PWM_BEGIN_MOIST();
	HAL_TIM_Base_Start_IT(&htim3);
 8002c22:	4881      	ldr	r0, [pc, #516]	; (8002e28 <main+0x24c>)
 8002c24:	f003 fa84 	bl	8006130 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);  // Set priority and subpriority as needed
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	201d      	movs	r0, #29
 8002c2e:	f001 fdd2 	bl	80047d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c32:	201d      	movs	r0, #29
 8002c34:	f001 fdeb 	bl	800480e <HAL_NVIC_EnableIRQ>
	GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8002c38:	4b7c      	ldr	r3, [pc, #496]	; (8002e2c <main+0x250>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7b      	ldr	r2, [pc, #492]	; (8002e2c <main+0x250>)
 8002c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c42:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3;  // Output mode, max speed 50 MHz
 8002c44:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <main+0x250>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a78      	ldr	r2, [pc, #480]	; (8002e2c <main+0x250>)
 8002c4a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002c4e:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7); // Pin 7
 8002c50:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <main+0x250>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <main+0x250>)
 8002c56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c5a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE7_0; // Output mode, max speed 10 MHz
 8002c5c:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <main+0x250>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a72      	ldr	r2, [pc, #456]	; (8002e2c <main+0x250>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6); // Pin 6
 8002c68:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <main+0x250>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <main+0x250>)
 8002c6e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002c72:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE6_0; // Output mode, max speed 10 MHz
 8002c74:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <main+0x250>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <main+0x250>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		Set_counterFREQ();
 8002c80:	f7ff f9da 	bl	8002038 <Set_counterFREQ>
		//MEASURE SEQUENTIAL

		moistconduct();
 8002c84:	f7ff fbc4 	bl	8002410 <moistconduct>

		//DS18B20
		Temp=DS18B20_GetTemp();
 8002c88:	f7fe ff66 	bl	8001b58 <DS18B20_GetTemp>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4a68      	ldr	r2, [pc, #416]	; (8002e30 <main+0x254>)
 8002c90:	6013      	str	r3, [r2, #0]


		//NTC BOARD TEMP
		ADC_CH3();
 8002c92:	f7fe fff9 	bl	8001c88 <ADC_CH3>
		HAL_ADC_Start(&hadc2);
 8002c96:	4860      	ldr	r0, [pc, #384]	; (8002e18 <main+0x23c>)
 8002c98:	f001 f946 	bl	8003f28 <HAL_ADC_Start>
		HAL_Delay(2);
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f001 f847 	bl	8003d30 <HAL_Delay>
		HAL_ADC_PollForConversion(&hadc2, 100);
 8002ca2:	2164      	movs	r1, #100	; 0x64
 8002ca4:	485c      	ldr	r0, [pc, #368]	; (8002e18 <main+0x23c>)
 8002ca6:	f001 fa19 	bl	80040dc <HAL_ADC_PollForConversion>
		adc_buffer[2]=HAL_ADC_GetValue(&hadc2);
 8002caa:	485b      	ldr	r0, [pc, #364]	; (8002e18 <main+0x23c>)
 8002cac:	f001 fb1c 	bl	80042e8 <HAL_ADC_GetValue>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <main+0x258>)
 8002cb4:	6093      	str	r3, [r2, #8]
		voltage_buffer[2]=adc_value_to_voltage(adc_buffer[2]);
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <main+0x258>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f803 	bl	8001cc8 <adc_value_to_voltage>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <main+0x25c>)
 8002cc6:	6093      	str	r3, [r2, #8]
		HAL_ADC_Stop(&hadc2);
 8002cc8:	4853      	ldr	r0, [pc, #332]	; (8002e18 <main+0x23c>)
 8002cca:	f001 f9db 	bl	8004084 <HAL_ADC_Stop>
		HAL_Delay(2);
 8002cce:	2002      	movs	r0, #2
 8002cd0:	f001 f82e 	bl	8003d30 <HAL_Delay>




		if((SET1==1)||SET10==1){
 8002cd4:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <main+0x260>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d003      	beq.n	8002ce4 <main+0x108>
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <main+0x264>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d11f      	bne.n	8002d24 <main+0x148>
			ssd1306_SetCursor(0, 0);
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 fd3a 	bl	8003760 <ssd1306_SetCursor>
			sprintf(bufferConduct,"EC %.fmV %.2f mS/cm",final_average_cond,conductivity);
 8002cec:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <main+0x268>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fb99 	bl	8000428 <__aeabi_f2d>
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	460d      	mov	r5, r1
 8002cfa:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <main+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fb92 	bl	8000428 <__aeabi_f2d>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	e9cd 2300 	strd	r2, r3, [sp]
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	462b      	mov	r3, r5
 8002d10:	494e      	ldr	r1, [pc, #312]	; (8002e4c <main+0x270>)
 8002d12:	484f      	ldr	r0, [pc, #316]	; (8002e50 <main+0x274>)
 8002d14:	f004 fba0 	bl	8007458 <siprintf>
			ssd1306_WriteString(bufferConduct,Font_6x8,1);
 8002d18:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <main+0x278>)
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	ca06      	ldmia	r2, {r1, r2}
 8002d1e:	484c      	ldr	r0, [pc, #304]	; (8002e50 <main+0x274>)
 8002d20:	f000 fcf8 	bl	8003714 <ssd1306_WriteString>
		}
		if((SET100==1)||SET1000==1){
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <main+0x27c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d003      	beq.n	8002d34 <main+0x158>
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <main+0x280>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d11f      	bne.n	8002d74 <main+0x198>
			ssd1306_SetCursor(0, 0);
 8002d34:	2100      	movs	r1, #0
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 fd12 	bl	8003760 <ssd1306_SetCursor>
			sprintf(bufferConduct,"EC %.fmV %.2f uS/cm",final_average_cond,conductivity);
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <main+0x268>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fb71 	bl	8000428 <__aeabi_f2d>
 8002d46:	4604      	mov	r4, r0
 8002d48:	460d      	mov	r5, r1
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <main+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fb6a 	bl	8000428 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	e9cd 2300 	strd	r2, r3, [sp]
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	462b      	mov	r3, r5
 8002d60:	493f      	ldr	r1, [pc, #252]	; (8002e60 <main+0x284>)
 8002d62:	483b      	ldr	r0, [pc, #236]	; (8002e50 <main+0x274>)
 8002d64:	f004 fb78 	bl	8007458 <siprintf>
			ssd1306_WriteString(bufferConduct,Font_6x8,1);
 8002d68:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <main+0x278>)
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	ca06      	ldmia	r2, {r1, r2}
 8002d6e:	4838      	ldr	r0, [pc, #224]	; (8002e50 <main+0x274>)
 8002d70:	f000 fcd0 	bl	8003714 <ssd1306_WriteString>
		}
		ssd1306_SetCursor(0, 11);
 8002d74:	210b      	movs	r1, #11
 8002d76:	2000      	movs	r0, #0
 8002d78:	f000 fcf2 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferMoist,"Moist %.1fV %.1f%%",av_moist_sum,percentage_moist2);
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <main+0x288>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fb51 	bl	8000428 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <main+0x28c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fb4a 	bl	8000428 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	e9cd 2300 	strd	r2, r3, [sp]
 8002d9c:	4622      	mov	r2, r4
 8002d9e:	462b      	mov	r3, r5
 8002da0:	4932      	ldr	r1, [pc, #200]	; (8002e6c <main+0x290>)
 8002da2:	4833      	ldr	r0, [pc, #204]	; (8002e70 <main+0x294>)
 8002da4:	f004 fb58 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferMoist,Font_6x8,1);
 8002da8:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <main+0x278>)
 8002daa:	2301      	movs	r3, #1
 8002dac:	ca06      	ldmia	r2, {r1, r2}
 8002dae:	4830      	ldr	r0, [pc, #192]	; (8002e70 <main+0x294>)
 8002db0:	f000 fcb0 	bl	8003714 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 21);
 8002db4:	2115      	movs	r1, #21
 8002db6:	2000      	movs	r0, #0
 8002db8:	f000 fcd2 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferTemp,"Temp MCU %.2fV",voltage_buffer[2]);
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <main+0x25c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fb31 	bl	8000428 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	492a      	ldr	r1, [pc, #168]	; (8002e74 <main+0x298>)
 8002dcc:	482a      	ldr	r0, [pc, #168]	; (8002e78 <main+0x29c>)
 8002dce:	f004 fb43 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferTemp,Font_6x8,1);
 8002dd2:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <main+0x278>)
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	ca06      	ldmia	r2, {r1, r2}
 8002dd8:	4827      	ldr	r0, [pc, #156]	; (8002e78 <main+0x29c>)
 8002dda:	f000 fc9b 	bl	8003714 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 31);
 8002dde:	211f      	movs	r1, #31
 8002de0:	2000      	movs	r0, #0
 8002de2:	f000 fcbd 	bl	8003760 <ssd1306_SetCursor>
		sprintf(bufferDs18b20,"ds18b20 %.2fC",Temp);
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <main+0x254>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb1c 	bl	8000428 <__aeabi_f2d>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4921      	ldr	r1, [pc, #132]	; (8002e7c <main+0x2a0>)
 8002df6:	4822      	ldr	r0, [pc, #136]	; (8002e80 <main+0x2a4>)
 8002df8:	f004 fb2e 	bl	8007458 <siprintf>
		ssd1306_WriteString(bufferDs18b20,Font_6x8,1);
 8002dfc:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <main+0x278>)
 8002dfe:	2301      	movs	r3, #1
 8002e00:	ca06      	ldmia	r2, {r1, r2}
 8002e02:	481f      	ldr	r0, [pc, #124]	; (8002e80 <main+0x2a4>)
 8002e04:	f000 fc86 	bl	8003714 <ssd1306_WriteString>

		Set_SENSE();
 8002e08:	f7ff f980 	bl	800210c <Set_SENSE>
		Set_counterFREQ_ssd1306();
 8002e0c:	f7ff fa56 	bl	80022bc <Set_counterFREQ_ssd1306>
		ssd1306_UpdateScreen();
 8002e10:	f000 fb7e 	bl	8003510 <ssd1306_UpdateScreen>
	{
 8002e14:	e734      	b.n	8002c80 <main+0xa4>
 8002e16:	bf00      	nop
 8002e18:	2000021c 	.word	0x2000021c
 8002e1c:	200002a0 	.word	0x200002a0
 8002e20:	200002e8 	.word	0x200002e8
 8002e24:	20000378 	.word	0x20000378
 8002e28:	20000330 	.word	0x20000330
 8002e2c:	40010c00 	.word	0x40010c00
 8002e30:	200003f0 	.word	0x200003f0
 8002e34:	20000b0c 	.word	0x20000b0c
 8002e38:	20000b1c 	.word	0x20000b1c
 8002e3c:	20000b08 	.word	0x20000b08
 8002e40:	20000b09 	.word	0x20000b09
 8002e44:	200003d8 	.word	0x200003d8
 8002e48:	200003e0 	.word	0x200003e0
 8002e4c:	08009a74 	.word	0x08009a74
 8002e50:	20000400 	.word	0x20000400
 8002e54:	20000014 	.word	0x20000014
 8002e58:	20000b0a 	.word	0x20000b0a
 8002e5c:	20000b0b 	.word	0x20000b0b
 8002e60:	08009a88 	.word	0x08009a88
 8002e64:	200003d4 	.word	0x200003d4
 8002e68:	200003ec 	.word	0x200003ec
 8002e6c:	08009a9c 	.word	0x08009a9c
 8002e70:	200004c8 	.word	0x200004c8
 8002e74:	08009ab0 	.word	0x08009ab0
 8002e78:	20000590 	.word	0x20000590
 8002e7c:	08009ac0 	.word	0x08009ac0
 8002e80:	20000658 	.word	0x20000658

08002e84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b094      	sub	sp, #80	; 0x50
 8002e88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e8e:	2228      	movs	r2, #40	; 0x28
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fb5d 	bl	8007552 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ed0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fb12 	bl	8005504 <HAL_RCC_OscConfig>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <SystemClock_Config+0x66>
	{
		Error_Handler();
 8002ee6:	f000 fa53 	bl	8003390 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eea:	230f      	movs	r3, #15
 8002eec:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002efa:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2102      	movs	r1, #2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fd7e 	bl	8005a08 <HAL_RCC_ClockConfig>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002f12:	f000 fa3d 	bl	8003390 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f16:	2302      	movs	r3, #2
 8002f18:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fefe 	bl	8005d24 <HAL_RCCEx_PeriphCLKConfig>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8002f2e:	f000 fa2f 	bl	8003390 <Error_Handler>
	}
}
 8002f32:	bf00      	nop
 8002f34:	3750      	adds	r7, #80	; 0x50
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <MX_ADC2_Init+0x5c>)
 8002f50:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f58:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f68:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002f6c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <MX_ADC2_Init+0x58>)
 8002f7c:	f000 fefc 	bl	8003d78 <HAL_ADC_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_ADC2_Init+0x4e>
	{
		Error_Handler();
 8002f86:	f000 fa03 	bl	8003390 <Error_Handler>
	//  }
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000021c 	.word	0x2000021c
 8002f98:	40012800 	.word	0x40012800

08002f9c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <MX_I2C1_Init+0x54>)
 8002fa4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fa8:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <MX_I2C1_Init+0x58>)
 8002faa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fbe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <MX_I2C1_Init+0x50>)
 8002fda:	f001 fde7 	bl	8004bac <HAL_I2C_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002fe4:	f000 f9d4 	bl	8003390 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000024c 	.word	0x2000024c
 8002ff0:	40005400 	.word	0x40005400
 8002ff4:	000186a0 	.word	0x000186a0

08002ff8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	463b      	mov	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003014:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <MX_TIM1_Init+0x98>)
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <MX_TIM1_Init+0x9c>)
 8003018:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <MX_TIM1_Init+0x98>)
 800301c:	2247      	movs	r2, #71	; 0x47
 800301e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <MX_TIM1_Init+0x98>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff-1;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <MX_TIM1_Init+0x98>)
 8003028:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800302c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <MX_TIM1_Init+0x98>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <MX_TIM1_Init+0x98>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <MX_TIM1_Init+0x98>)
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003040:	4813      	ldr	r0, [pc, #76]	; (8003090 <MX_TIM1_Init+0x98>)
 8003042:	f002 ffdb 	bl	8005ffc <HAL_TIM_Base_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 800304c:	f000 f9a0 	bl	8003390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003054:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	4619      	mov	r1, r3
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <MX_TIM1_Init+0x98>)
 800305e:	f003 fa63 	bl	8006528 <HAL_TIM_ConfigClockSource>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8003068:	f000 f992 	bl	8003390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003074:	463b      	mov	r3, r7
 8003076:	4619      	mov	r1, r3
 8003078:	4805      	ldr	r0, [pc, #20]	; (8003090 <MX_TIM1_Init+0x98>)
 800307a:	f003 fc5d 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8003084:	f000 f984 	bl	8003390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200002a0 	.word	0x200002a0
 8003094:	40012c00 	.word	0x40012c00

08003098 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ac:	463b      	mov	r3, r7
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <MX_TIM2_Init+0x94>)
 80030b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <MX_TIM2_Init+0x94>)
 80030be:	2247      	movs	r2, #71	; 0x47
 80030c0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <MX_TIM2_Init+0x94>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535-1;
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <MX_TIM2_Init+0x94>)
 80030ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030ce:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d0:	4b16      	ldr	r3, [pc, #88]	; (800312c <MX_TIM2_Init+0x94>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <MX_TIM2_Init+0x94>)
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030dc:	4813      	ldr	r0, [pc, #76]	; (800312c <MX_TIM2_Init+0x94>)
 80030de:	f002 ff8d 	bl	8005ffc <HAL_TIM_Base_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80030e8:	f000 f952 	bl	8003390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4619      	mov	r1, r3
 80030f8:	480c      	ldr	r0, [pc, #48]	; (800312c <MX_TIM2_Init+0x94>)
 80030fa:	f003 fa15 	bl	8006528 <HAL_TIM_ConfigClockSource>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8003104:	f000 f944 	bl	8003390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003108:	2300      	movs	r3, #0
 800310a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003110:	463b      	mov	r3, r7
 8003112:	4619      	mov	r1, r3
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <MX_TIM2_Init+0x94>)
 8003116:	f003 fc0f 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8003120:	f000 f936 	bl	8003390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003124:	bf00      	nop
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200002e8 	.word	0x200002e8

08003130 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003144:	463b      	mov	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <MX_TIM3_Init+0x94>)
 800314e:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <MX_TIM3_Init+0x98>)
 8003150:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7199;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <MX_TIM3_Init+0x94>)
 8003154:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003158:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <MX_TIM3_Init+0x94>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10;
 8003160:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <MX_TIM3_Init+0x94>)
 8003162:	220a      	movs	r2, #10
 8003164:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_TIM3_Init+0x94>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <MX_TIM3_Init+0x94>)
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003172:	4814      	ldr	r0, [pc, #80]	; (80031c4 <MX_TIM3_Init+0x94>)
 8003174:	f002 ff42 	bl	8005ffc <HAL_TIM_Base_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800317e:	f000 f907 	bl	8003390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003186:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	4619      	mov	r1, r3
 800318e:	480d      	ldr	r0, [pc, #52]	; (80031c4 <MX_TIM3_Init+0x94>)
 8003190:	f003 f9ca 	bl	8006528 <HAL_TIM_ConfigClockSource>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800319a:	f000 f8f9 	bl	8003390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031a6:	463b      	mov	r3, r7
 80031a8:	4619      	mov	r1, r3
 80031aa:	4806      	ldr	r0, [pc, #24]	; (80031c4 <MX_TIM3_Init+0x94>)
 80031ac:	f003 fbc4 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80031b6:	f000 f8eb 	bl	8003390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000330 	.word	0x20000330
 80031c8:	40000400 	.word	0x40000400

080031cc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e0:	463b      	mov	r3, r7
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80031e8:	4b22      	ldr	r3, [pc, #136]	; (8003274 <MX_TIM4_Init+0xa8>)
 80031ea:	4a23      	ldr	r2, [pc, #140]	; (8003278 <MX_TIM4_Init+0xac>)
 80031ec:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 47999;
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <MX_TIM4_Init+0xa8>)
 80031f0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80031f4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <MX_TIM4_Init+0xa8>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 255;
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <MX_TIM4_Init+0xa8>)
 80031fe:	22ff      	movs	r2, #255	; 0xff
 8003200:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <MX_TIM4_Init+0xa8>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <MX_TIM4_Init+0xa8>)
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800320e:	4819      	ldr	r0, [pc, #100]	; (8003274 <MX_TIM4_Init+0xa8>)
 8003210:	f002 fef4 	bl	8005ffc <HAL_TIM_Base_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 800321a:	f000 f8b9 	bl	8003390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800321e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003222:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	4619      	mov	r1, r3
 800322a:	4812      	ldr	r0, [pc, #72]	; (8003274 <MX_TIM4_Init+0xa8>)
 800322c:	f003 f97c 	bl	8006528 <HAL_TIM_ConfigClockSource>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8003236:	f000 f8ab 	bl	8003390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003242:	463b      	mov	r3, r7
 8003244:	4619      	mov	r1, r3
 8003246:	480b      	ldr	r0, [pc, #44]	; (8003274 <MX_TIM4_Init+0xa8>)
 8003248:	f003 fb76 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8003252:	f000 f89d 	bl	8003390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003256:	2100      	movs	r1, #0
 8003258:	4806      	ldr	r0, [pc, #24]	; (8003274 <MX_TIM4_Init+0xa8>)
 800325a:	f002 ffbb 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_Delay(100); // Introduce a delay (adjust as needed)
 800325e:	2064      	movs	r0, #100	; 0x64
 8003260:	f000 fd66 	bl	8003d30 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003264:	2104      	movs	r1, #4
 8003266:	4803      	ldr	r0, [pc, #12]	; (8003274 <MX_TIM4_Init+0xa8>)
 8003268:	f002 ffb4 	bl	80061d4 <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */

}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000378 	.word	0x20000378
 8003278:	40000800 	.word	0x40000800

0800327c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003282:	f107 0310 	add.w	r3, r7, #16
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003290:	4b3c      	ldr	r3, [pc, #240]	; (8003384 <MX_GPIO_Init+0x108>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a3b      	ldr	r2, [pc, #236]	; (8003384 <MX_GPIO_Init+0x108>)
 8003296:	f043 0320 	orr.w	r3, r3, #32
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <MX_GPIO_Init+0x108>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <MX_GPIO_Init+0x108>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a35      	ldr	r2, [pc, #212]	; (8003384 <MX_GPIO_Init+0x108>)
 80032ae:	f043 0310 	orr.w	r3, r3, #16
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <MX_GPIO_Init+0x108>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	4b30      	ldr	r3, [pc, #192]	; (8003384 <MX_GPIO_Init+0x108>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <MX_GPIO_Init+0x108>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6193      	str	r3, [r2, #24]
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <MX_GPIO_Init+0x108>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80032d8:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <MX_GPIO_Init+0x108>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4a29      	ldr	r2, [pc, #164]	; (8003384 <MX_GPIO_Init+0x108>)
 80032de:	f043 0308 	orr.w	r3, r3, #8
 80032e2:	6193      	str	r3, [r2, #24]
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <MX_GPIO_Init+0x108>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80032f0:	2200      	movs	r2, #0
 80032f2:	21c8      	movs	r1, #200	; 0xc8
 80032f4:	4824      	ldr	r0, [pc, #144]	; (8003388 <MX_GPIO_Init+0x10c>)
 80032f6:	f001 fc40 	bl	8004b7a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC2 PC3 SET_1_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|SET_1_Pin;
 80032fa:	234c      	movs	r3, #76	; 0x4c
 80032fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003302:	2302      	movs	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	4619      	mov	r1, r3
 800330c:	481f      	ldr	r0, [pc, #124]	; (800338c <MX_GPIO_Init+0x110>)
 800330e:	f001 fa99 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : SET_1000_Pin SET_100_Pin SET_10_Pin */
	GPIO_InitStruct.Pin = SET_1000_Pin|SET_100_Pin|SET_10_Pin;
 8003312:	2307      	movs	r3, #7
 8003314:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800331a:	2302      	movs	r3, #2
 800331c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	4619      	mov	r1, r3
 8003324:	4818      	ldr	r0, [pc, #96]	; (8003388 <MX_GPIO_Init+0x10c>)
 8003326:	f001 fa8d 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800332a:	2308      	movs	r3, #8
 800332c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	4619      	mov	r1, r3
 8003340:	4811      	ldr	r0, [pc, #68]	; (8003388 <MX_GPIO_Init+0x10c>)
 8003342:	f001 fa7f 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003346:	23c0      	movs	r3, #192	; 0xc0
 8003348:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334a:	2301      	movs	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2302      	movs	r3, #2
 8003354:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f107 0310 	add.w	r3, r7, #16
 800335a:	4619      	mov	r1, r3
 800335c:	480a      	ldr	r0, [pc, #40]	; (8003388 <MX_GPIO_Init+0x10c>)
 800335e:	f001 fa71 	bl	8004844 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003362:	2308      	movs	r3, #8
 8003364:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull
 8003366:	2302      	movs	r3, #2
 8003368:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800336a:	2303      	movs	r3, #3
 800336c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336e:	f107 0310 	add.w	r3, r7, #16
 8003372:	4619      	mov	r1, r3
 8003374:	4804      	ldr	r0, [pc, #16]	; (8003388 <MX_GPIO_Init+0x10c>)
 8003376:	f001 fa65 	bl	8004844 <HAL_GPIO_Init>
	/* USER CODE END MX_GPIO_Init_2 */
}
 800337a:	bf00      	nop
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	40010c00 	.word	0x40010c00
 800338c:	40011000 	.word	0x40011000

08003390 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003394:	b672      	cpsid	i
}
 8003396:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003398:	e7fe      	b.n	8003398 <Error_Handler+0x8>

0800339a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
	...

080033a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af04      	add	r7, sp, #16
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	2301      	movs	r3, #1
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2301      	movs	r3, #1
 80033c2:	2200      	movs	r2, #0
 80033c4:	2178      	movs	r1, #120	; 0x78
 80033c6:	4803      	ldr	r0, [pc, #12]	; (80033d4 <ssd1306_WriteCommand+0x2c>)
 80033c8:	f001 fd34 	bl	8004e34 <HAL_I2C_Mem_Write>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	2000024c 	.word	0x2000024c

080033d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af04      	add	r7, sp, #16
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ea:	9202      	str	r2, [sp, #8]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2301      	movs	r3, #1
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	2178      	movs	r1, #120	; 0x78
 80033f8:	4803      	ldr	r0, [pc, #12]	; (8003408 <ssd1306_WriteData+0x30>)
 80033fa:	f001 fd1b 	bl	8004e34 <HAL_I2C_Mem_Write>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000024c 	.word	0x2000024c

0800340c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003410:	f7ff ffc3 	bl	800339a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003414:	2064      	movs	r0, #100	; 0x64
 8003416:	f000 fc8b 	bl	8003d30 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800341a:	2000      	movs	r0, #0
 800341c:	f000 f9cc 	bl	80037b8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003420:	2020      	movs	r0, #32
 8003422:	f7ff ffc1 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff ffbe 	bl	80033a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800342c:	20b0      	movs	r0, #176	; 0xb0
 800342e:	f7ff ffbb 	bl	80033a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003432:	20c8      	movs	r0, #200	; 0xc8
 8003434:	f7ff ffb8 	bl	80033a8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003438:	2000      	movs	r0, #0
 800343a:	f7ff ffb5 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800343e:	2010      	movs	r0, #16
 8003440:	f7ff ffb2 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003444:	2040      	movs	r0, #64	; 0x40
 8003446:	f7ff ffaf 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800344a:	20ff      	movs	r0, #255	; 0xff
 800344c:	f000 f9a0 	bl	8003790 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003450:	20a1      	movs	r0, #161	; 0xa1
 8003452:	f7ff ffa9 	bl	80033a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003456:	20a6      	movs	r0, #166	; 0xa6
 8003458:	f7ff ffa6 	bl	80033a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800345c:	20a8      	movs	r0, #168	; 0xa8
 800345e:	f7ff ffa3 	bl	80033a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003462:	203f      	movs	r0, #63	; 0x3f
 8003464:	f7ff ffa0 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003468:	20a4      	movs	r0, #164	; 0xa4
 800346a:	f7ff ff9d 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800346e:	20d3      	movs	r0, #211	; 0xd3
 8003470:	f7ff ff9a 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003474:	2000      	movs	r0, #0
 8003476:	f7ff ff97 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800347a:	20d5      	movs	r0, #213	; 0xd5
 800347c:	f7ff ff94 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003480:	20f0      	movs	r0, #240	; 0xf0
 8003482:	f7ff ff91 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003486:	20d9      	movs	r0, #217	; 0xd9
 8003488:	f7ff ff8e 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800348c:	2022      	movs	r0, #34	; 0x22
 800348e:	f7ff ff8b 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003492:	20da      	movs	r0, #218	; 0xda
 8003494:	f7ff ff88 	bl	80033a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003498:	2012      	movs	r0, #18
 800349a:	f7ff ff85 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800349e:	20db      	movs	r0, #219	; 0xdb
 80034a0:	f7ff ff82 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80034a4:	2020      	movs	r0, #32
 80034a6:	f7ff ff7f 	bl	80033a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80034aa:	208d      	movs	r0, #141	; 0x8d
 80034ac:	f7ff ff7c 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80034b0:	2014      	movs	r0, #20
 80034b2:	f7ff ff79 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80034b6:	2001      	movs	r0, #1
 80034b8:	f000 f97e 	bl	80037b8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80034bc:	2000      	movs	r0, #0
 80034be:	f000 f80f 	bl	80034e0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80034c2:	f000 f825 	bl	8003510 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <ssd1306_Init+0xd0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <ssd1306_Init+0xd0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80034d2:	4b02      	ldr	r3, [pc, #8]	; (80034dc <ssd1306_Init+0xd0>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	711a      	strb	r2, [r3, #4]
}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000f30 	.word	0x20000f30

080034e0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <ssd1306_Fill+0x14>
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <ssd1306_Fill+0x16>
 80034f4:	23ff      	movs	r3, #255	; 0xff
 80034f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fa:	4619      	mov	r1, r3
 80034fc:	4803      	ldr	r0, [pc, #12]	; (800350c <ssd1306_Fill+0x2c>)
 80034fe:	f004 f828 	bl	8007552 <memset>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000b30 	.word	0x20000b30

08003510 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
 800351a:	e016      	b.n	800354a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	3b50      	subs	r3, #80	; 0x50
 8003520:	b2db      	uxtb	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff40 	bl	80033a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003528:	2000      	movs	r0, #0
 800352a:	f7ff ff3d 	bl	80033a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800352e:	2010      	movs	r0, #16
 8003530:	f7ff ff3a 	bl	80033a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	01db      	lsls	r3, r3, #7
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <ssd1306_UpdateScreen+0x4c>)
 800353a:	4413      	add	r3, r2
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff4a 	bl	80033d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	3301      	adds	r3, #1
 8003548:	71fb      	strb	r3, [r7, #7]
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b07      	cmp	r3, #7
 800354e:	d9e5      	bls.n	800351c <ssd1306_UpdateScreen+0xc>
    }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000b30 	.word	0x20000b30

08003560 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	460b      	mov	r3, r1
 800356c:	71bb      	strb	r3, [r7, #6]
 800356e:	4613      	mov	r3, r2
 8003570:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db3d      	blt.n	80035f6 <ssd1306_DrawPixel+0x96>
 800357a:	79bb      	ldrb	r3, [r7, #6]
 800357c:	2b3f      	cmp	r3, #63	; 0x3f
 800357e:	d83a      	bhi.n	80035f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003580:	797b      	ldrb	r3, [r7, #5]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d11a      	bne.n	80035bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003586:	79fa      	ldrb	r2, [r7, #7]
 8003588:	79bb      	ldrb	r3, [r7, #6]
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	b2d8      	uxtb	r0, r3
 800358e:	4603      	mov	r3, r0
 8003590:	01db      	lsls	r3, r3, #7
 8003592:	4413      	add	r3, r2
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <ssd1306_DrawPixel+0xa0>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	b25a      	sxtb	r2, r3
 800359a:	79bb      	ldrb	r3, [r7, #6]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b259      	sxtb	r1, r3
 80035ac:	79fa      	ldrb	r2, [r7, #7]
 80035ae:	4603      	mov	r3, r0
 80035b0:	01db      	lsls	r3, r3, #7
 80035b2:	4413      	add	r3, r2
 80035b4:	b2c9      	uxtb	r1, r1
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <ssd1306_DrawPixel+0xa0>)
 80035b8:	54d1      	strb	r1, [r2, r3]
 80035ba:	e01d      	b.n	80035f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035bc:	79fa      	ldrb	r2, [r7, #7]
 80035be:	79bb      	ldrb	r3, [r7, #6]
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	b2d8      	uxtb	r0, r3
 80035c4:	4603      	mov	r3, r0
 80035c6:	01db      	lsls	r3, r3, #7
 80035c8:	4413      	add	r3, r2
 80035ca:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <ssd1306_DrawPixel+0xa0>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	b25a      	sxtb	r2, r3
 80035d0:	79bb      	ldrb	r3, [r7, #6]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	4013      	ands	r3, r2
 80035e4:	b259      	sxtb	r1, r3
 80035e6:	79fa      	ldrb	r2, [r7, #7]
 80035e8:	4603      	mov	r3, r0
 80035ea:	01db      	lsls	r3, r3, #7
 80035ec:	4413      	add	r3, r2
 80035ee:	b2c9      	uxtb	r1, r1
 80035f0:	4a03      	ldr	r2, [pc, #12]	; (8003600 <ssd1306_DrawPixel+0xa0>)
 80035f2:	54d1      	strb	r1, [r2, r3]
 80035f4:	e000      	b.n	80035f8 <ssd1306_DrawPixel+0x98>
        return;
 80035f6:	bf00      	nop
    }
}
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000b30 	.word	0x20000b30

08003604 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	4604      	mov	r4, r0
 800360c:	1d38      	adds	r0, r7, #4
 800360e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003612:	461a      	mov	r2, r3
 8003614:	4623      	mov	r3, r4
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	4613      	mov	r3, r2
 800361a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b1f      	cmp	r3, #31
 8003620:	d902      	bls.n	8003628 <ssd1306_WriteChar+0x24>
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b7e      	cmp	r3, #126	; 0x7e
 8003626:	d901      	bls.n	800362c <ssd1306_WriteChar+0x28>
        return 0;
 8003628:	2300      	movs	r3, #0
 800362a:	e06d      	b.n	8003708 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800362c:	4b38      	ldr	r3, [pc, #224]	; (8003710 <ssd1306_WriteChar+0x10c>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	793b      	ldrb	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	dc06      	bgt.n	8003648 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800363a:	4b35      	ldr	r3, [pc, #212]	; (8003710 <ssd1306_WriteChar+0x10c>)
 800363c:	885b      	ldrh	r3, [r3, #2]
 800363e:	461a      	mov	r2, r3
 8003640:	797b      	ldrb	r3, [r7, #5]
 8003642:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	dd01      	ble.n	800364c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003648:	2300      	movs	r3, #0
 800364a:	e05d      	b.n	8003708 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e04c      	b.n	80036ec <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	3b20      	subs	r3, #32
 8003658:	7979      	ldrb	r1, [r7, #5]
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4619      	mov	r1, r3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	440b      	add	r3, r1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e034      	b.n	80036dc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d012      	beq.n	80036a8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003682:	4b23      	ldr	r3, [pc, #140]	; (8003710 <ssd1306_WriteChar+0x10c>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4413      	add	r3, r2
 800368e:	b2d8      	uxtb	r0, r3
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <ssd1306_WriteChar+0x10c>)
 8003692:	885b      	ldrh	r3, [r3, #2]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	4413      	add	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	7bba      	ldrb	r2, [r7, #14]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7ff ff5d 	bl	8003560 <ssd1306_DrawPixel>
 80036a6:	e016      	b.n	80036d6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <ssd1306_WriteChar+0x10c>)
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	b2d8      	uxtb	r0, r3
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <ssd1306_WriteChar+0x10c>)
 80036b8:	885b      	ldrh	r3, [r3, #2]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	b2d9      	uxtb	r1, r3
 80036c4:	7bbb      	ldrb	r3, [r7, #14]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf0c      	ite	eq
 80036ca:	2301      	moveq	r3, #1
 80036cc:	2300      	movne	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	f7ff ff45 	bl	8003560 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3301      	adds	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	793b      	ldrb	r3, [r7, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d3c5      	bcc.n	8003672 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	797b      	ldrb	r3, [r7, #5]
 80036ee:	461a      	mov	r2, r3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d3ad      	bcc.n	8003652 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <ssd1306_WriteChar+0x10c>)
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	793b      	ldrb	r3, [r7, #4]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4413      	add	r3, r2
 8003700:	b29a      	uxth	r2, r3
 8003702:	4b03      	ldr	r3, [pc, #12]	; (8003710 <ssd1306_WriteChar+0x10c>)
 8003704:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3724      	adds	r7, #36	; 0x24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}
 8003710:	20000f30 	.word	0x20000f30

08003714 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	1d38      	adds	r0, r7, #4
 800371e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003722:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003724:	e012      	b.n	800374c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	7818      	ldrb	r0, [r3, #0]
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	1d3a      	adds	r2, r7, #4
 800372e:	ca06      	ldmia	r2, {r1, r2}
 8003730:	f7ff ff68 	bl	8003604 <ssd1306_WriteChar>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d002      	beq.n	8003746 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	e008      	b.n	8003758 <ssd1306_WriteString+0x44>
        }
        str++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e8      	bne.n	8003726 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	781b      	ldrb	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	460a      	mov	r2, r1
 800376a:	71fb      	strb	r3, [r7, #7]
 800376c:	4613      	mov	r3, r2
 800376e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	b29a      	uxth	r2, r3
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <ssd1306_SetCursor+0x2c>)
 8003776:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003778:	79bb      	ldrb	r3, [r7, #6]
 800377a:	b29a      	uxth	r2, r3
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <ssd1306_SetCursor+0x2c>)
 800377e:	805a      	strh	r2, [r3, #2]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000f30 	.word	0x20000f30

08003790 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800379a:	2381      	movs	r3, #129	; 0x81
 800379c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fe01 	bl	80033a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fdfd 	bl	80033a8 <ssd1306_WriteCommand>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80037c8:	23af      	movs	r3, #175	; 0xaf
 80037ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <ssd1306_SetDisplayOn+0x38>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	715a      	strb	r2, [r3, #5]
 80037d2:	e004      	b.n	80037de <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80037d4:	23ae      	movs	r3, #174	; 0xae
 80037d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <ssd1306_SetDisplayOn+0x38>)
 80037da:	2200      	movs	r2, #0
 80037dc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fde1 	bl	80033a8 <ssd1306_WriteCommand>
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000f30 	.word	0x20000f30

080037f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_MspInit+0x5c>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_MspInit+0x5c>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6193      	str	r3, [r2, #24]
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_MspInit+0x5c>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_MspInit+0x5c>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4a0e      	ldr	r2, [pc, #56]	; (8003850 <HAL_MspInit+0x5c>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381c:	61d3      	str	r3, [r2, #28]
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <HAL_MspInit+0x5c>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_MspInit+0x60>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_MspInit+0x60>)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	40021000 	.word	0x40021000
 8003854:	40010000 	.word	0x40010000

08003858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <HAL_ADC_MspInit+0x6c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d121      	bne.n	80038bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_ADC_MspInit+0x70>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_ADC_MspInit+0x70>)
 800387e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003882:	6193      	str	r3, [r2, #24]
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_ADC_MspInit+0x70>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_ADC_MspInit+0x70>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <HAL_ADC_MspInit+0x70>)
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	6193      	str	r3, [r2, #24]
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_ADC_MspInit+0x70>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80038a8:	230e      	movs	r3, #14
 80038aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ac:	2303      	movs	r3, #3
 80038ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	4619      	mov	r1, r3
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <HAL_ADC_MspInit+0x74>)
 80038b8:	f000 ffc4 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40012800 	.word	0x40012800
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010800 	.word	0x40010800

080038d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_I2C_MspInit+0x90>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d132      	bne.n	8003956 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f0:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_I2C_MspInit+0x94>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_I2C_MspInit+0x94>)
 80038f6:	f043 0308 	orr.w	r3, r3, #8
 80038fa:	6193      	str	r3, [r2, #24]
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_I2C_MspInit+0x94>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800390c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800390e:	2312      	movs	r3, #18
 8003910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	4812      	ldr	r0, [pc, #72]	; (8003968 <HAL_I2C_MspInit+0x98>)
 800391e:	f000 ff91 	bl	8004844 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_I2C_MspInit+0x9c>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	4a0c      	ldr	r2, [pc, #48]	; (800396c <HAL_I2C_MspInit+0x9c>)
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_I2C_MspInit+0x94>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <HAL_I2C_MspInit+0x94>)
 8003944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003948:	61d3      	str	r3, [r2, #28]
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_I2C_MspInit+0x94>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40005400 	.word	0x40005400
 8003964:	40021000 	.word	0x40021000
 8003968:	40010c00 	.word	0x40010c00
 800396c:	40010000 	.word	0x40010000

08003970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10c      	bne.n	800399c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 8003988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800398c:	6193      	str	r3, [r2, #24]
 800398e:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800399a:	e03c      	b.n	8003a16 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d10c      	bne.n	80039c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
}
 80039be:	e02a      	b.n	8003a16 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_TIM_Base_MspInit+0xb8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d114      	bne.n	80039f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	61d3      	str	r3, [r2, #28]
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2100      	movs	r1, #0
 80039e6:	201d      	movs	r0, #29
 80039e8:	f000 fef5 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039ec:	201d      	movs	r0, #29
 80039ee:	f000 ff0e 	bl	800480e <HAL_NVIC_EnableIRQ>
}
 80039f2:	e010      	b.n	8003a16 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <HAL_TIM_Base_MspInit+0xbc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10b      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800

08003a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a34:	e7fe      	b.n	8003a34 <NMI_Handler+0x4>

08003a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <HardFault_Handler+0x4>

08003a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <MemManage_Handler+0x4>

08003a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <BusFault_Handler+0x4>

08003a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <UsageFault_Handler+0x4>

08003a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a76:	f000 f93f 	bl	8003cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <TIM3_IRQHandler+0x10>)
 8003a86:	f002 fc47 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000330 	.word	0x20000330

08003a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return 1;
 8003a98:	2301      	movs	r3, #1
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <_kill>:

int _kill(int pid, int sig)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003aac:	f003 fda4 	bl	80075f8 <__errno>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2216      	movs	r2, #22
 8003ab4:	601a      	str	r2, [r3, #0]
  return -1;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_exit>:

void _exit (int status)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003aca:	f04f 31ff 	mov.w	r1, #4294967295
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ffe7 	bl	8003aa2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ad4:	e7fe      	b.n	8003ad4 <_exit+0x12>

08003ad6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e00a      	b.n	8003afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ae8:	f3af 8000 	nop.w
 8003aec:	4601      	mov	r1, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	60ba      	str	r2, [r7, #8]
 8003af4:	b2ca      	uxtb	r2, r1
 8003af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3301      	adds	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	dbf0      	blt.n	8003ae8 <_read+0x12>
  }

  return len;
 8003b06:	687b      	ldr	r3, [r7, #4]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e009      	b.n	8003b36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	60ba      	str	r2, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3301      	adds	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	dbf1      	blt.n	8003b22 <_write+0x12>
  }
  return len;
 8003b3e:	687b      	ldr	r3, [r7, #4]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_close>:

int _close(int file)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <_isatty>:

int _isatty(int file)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b84:	2301      	movs	r3, #1
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <_sbrk+0x5c>)
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <_sbrk+0x60>)
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <_sbrk+0x64>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <_sbrk+0x64>)
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <_sbrk+0x68>)
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <_sbrk+0x64>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d207      	bcs.n	8003be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bd8:	f003 fd0e 	bl	80075f8 <__errno>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	220c      	movs	r2, #12
 8003be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e009      	b.n	8003bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <_sbrk+0x64>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <_sbrk+0x64>)
 8003bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20005000 	.word	0x20005000
 8003c08:	00000400 	.word	0x00000400
 8003c0c:	20000f38 	.word	0x20000f38
 8003c10:	20001090 	.word	0x20001090

08003c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c20:	f7ff fff8 	bl	8003c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c24:	480b      	ldr	r0, [pc, #44]	; (8003c54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c26:	490c      	ldr	r1, [pc, #48]	; (8003c58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c28:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c3c:	4c09      	ldr	r4, [pc, #36]	; (8003c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4a:	f003 fcdb 	bl	8007604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c4e:	f7fe ffc5 	bl	8002bdc <main>
  bx lr
 8003c52:	4770      	bx	lr
  ldr r0, =_sdata
 8003c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c58:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003c5c:	0800b93c 	.word	0x0800b93c
  ldr r2, =_sbss
 8003c60:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003c64:	2000108c 	.word	0x2000108c

08003c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c68:	e7fe      	b.n	8003c68 <ADC1_2_IRQHandler>
	...

08003c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_Init+0x28>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_Init+0x28>)
 8003c76:	f043 0310 	orr.w	r3, r3, #16
 8003c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c7c:	2003      	movs	r0, #3
 8003c7e:	f000 fd9f 	bl	80047c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c82:	200f      	movs	r0, #15
 8003c84:	f000 f808 	bl	8003c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c88:	f7ff fdb4 	bl	80037f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40022000 	.word	0x40022000

08003c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_InitTick+0x54>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_InitTick+0x58>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fdb7 	bl	800482a <HAL_SYSTICK_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00e      	b.n	8003ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0f      	cmp	r3, #15
 8003cca:	d80a      	bhi.n	8003ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	f000 fd7f 	bl	80047d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cd8:	4a06      	ldr	r2, [pc, #24]	; (8003cf4 <HAL_InitTick+0x5c>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2000002c 	.word	0x2000002c
 8003cf0:	20000034 	.word	0x20000034
 8003cf4:	20000030 	.word	0x20000030

08003cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_IncTick+0x1c>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_IncTick+0x20>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_IncTick+0x20>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	20000034 	.word	0x20000034
 8003d18:	20000f3c 	.word	0x20000f3c

08003d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d20:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <HAL_GetTick+0x10>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	20000f3c 	.word	0x20000f3c

08003d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d005      	beq.n	8003d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_Delay+0x44>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d56:	bf00      	nop
 8003d58:	f7ff ffe0 	bl	8003d1c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d8f7      	bhi.n	8003d58 <HAL_Delay+0x28>
  {
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000034 	.word	0x20000034

08003d78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0be      	b.n	8003f18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fd4e 	bl	8003858 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fbf1 	bl	80045a4 <ADC_ConversionStop_Disable>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 8099 	bne.w	8003f06 <HAL_ADC_Init+0x18e>
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 8095 	bne.w	8003f06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003de4:	f023 0302 	bic.w	r3, r3, #2
 8003de8:	f043 0202 	orr.w	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003df8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7b1b      	ldrb	r3, [r3, #12]
 8003dfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d003      	beq.n	8003e1a <HAL_ADC_Init+0xa2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d102      	bne.n	8003e20 <HAL_ADC_Init+0xa8>
 8003e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e1e:	e000      	b.n	8003e22 <HAL_ADC_Init+0xaa>
 8003e20:	2300      	movs	r3, #0
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7d1b      	ldrb	r3, [r3, #20]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d119      	bne.n	8003e64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7b1b      	ldrb	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	035a      	lsls	r2, r3, #13
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	e00b      	b.n	8003e64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f043 0201 	orr.w	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <HAL_ADC_Init+0x1a8>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d003      	beq.n	8003e9e <HAL_ADC_Init+0x126>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d104      	bne.n	8003ea8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	051b      	lsls	r3, r3, #20
 8003ea6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <HAL_ADC_Init+0x1ac>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d10b      	bne.n	8003ee4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ee2:	e018      	b.n	8003f16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f023 0312 	bic.w	r3, r3, #18
 8003eec:	f043 0210 	orr.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f04:	e007      	b.n	8003f16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f043 0210 	orr.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	ffe1f7fd 	.word	0xffe1f7fd
 8003f24:	ff1f0efe 	.word	0xff1f0efe

08003f28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_Start+0x1a>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e098      	b.n	8004074 <HAL_ADC_Start+0x14c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fad0 	bl	80044f0 <ADC_Enable>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8087 	bne.w	800406a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a41      	ldr	r2, [pc, #260]	; (800407c <HAL_ADC_Start+0x154>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_Start+0x5e>
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_ADC_Start+0x158>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d115      	bne.n	8003fb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d026      	beq.n	8003fee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fb0:	e01d      	b.n	8003fee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <HAL_ADC_Start+0x158>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_ADC_Start+0xaa>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2b      	ldr	r2, [pc, #172]	; (800407c <HAL_ADC_Start+0x154>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10d      	bne.n	8003fee <HAL_ADC_Start+0xc6>
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_ADC_Start+0x158>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fe6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f023 0206 	bic.w	r2, r3, #6
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	62da      	str	r2, [r3, #44]	; 0x2c
 8004006:	e002      	b.n	800400e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0202 	mvn.w	r2, #2
 800401e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800402a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800402e:	d113      	bne.n	8004058 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_ADC_Start+0x154>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d105      	bne.n	8004046 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_ADC_Start+0x158>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	e00c      	b.n	8004072 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	e003      	b.n	8004072 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40012800 	.word	0x40012800
 8004080:	40012400 	.word	0x40012400

08004084 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_ADC_Stop+0x1a>
 800409a:	2302      	movs	r3, #2
 800409c:	e01a      	b.n	80040d4 <HAL_ADC_Stop+0x50>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa7c 	bl	80045a4 <ADC_ConversionStop_Disable>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80040f2:	f7ff fe13 	bl	8003d1c <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0d3      	b.n	80042c6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d131      	bne.n	8004190 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	d12a      	bne.n	8004190 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800413a:	e021      	b.n	8004180 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d01d      	beq.n	8004180 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_ADC_PollForConversion+0x7e>
 800414a:	f7ff fde7 	bl	8003d1c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d212      	bcs.n	8004180 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	f043 0204 	orr.w	r2, r3, #4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0a2      	b.n	80042c6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0d6      	beq.n	800413c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800418e:	e070      	b.n	8004272 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004190:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <HAL_ADC_PollForConversion+0x1f4>)
 8004192:	681c      	ldr	r4, [r3, #0]
 8004194:	2002      	movs	r0, #2
 8004196:	f001 fe7b 	bl	8005e90 <HAL_RCCEx_GetPeriphCLKFreq>
 800419a:	4603      	mov	r3, r0
 800419c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6919      	ldr	r1, [r3, #16]
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_ADC_PollForConversion+0x1f8>)
 80041a8:	400b      	ands	r3, r1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d118      	bne.n	80041e0 <HAL_ADC_PollForConversion+0x104>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68d9      	ldr	r1, [r3, #12]
 80041b4:	4b48      	ldr	r3, [pc, #288]	; (80042d8 <HAL_ADC_PollForConversion+0x1fc>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <HAL_ADC_PollForConversion+0x104>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6919      	ldr	r1, [r3, #16]
 80041c2:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_ADC_PollForConversion+0x200>)
 80041c4:	400b      	ands	r3, r1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <HAL_ADC_PollForConversion+0x100>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68d9      	ldr	r1, [r3, #12]
 80041d0:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_ADC_PollForConversion+0x204>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_PollForConversion+0x100>
 80041d8:	2314      	movs	r3, #20
 80041da:	e020      	b.n	800421e <HAL_ADC_PollForConversion+0x142>
 80041dc:	2329      	movs	r3, #41	; 0x29
 80041de:	e01e      	b.n	800421e <HAL_ADC_PollForConversion+0x142>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6919      	ldr	r1, [r3, #16]
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_ADC_PollForConversion+0x200>)
 80041e8:	400b      	ands	r3, r1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_ADC_PollForConversion+0x120>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68d9      	ldr	r1, [r3, #12]
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_ADC_PollForConversion+0x204>)
 80041f6:	400b      	ands	r3, r1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_ADC_PollForConversion+0x13c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6919      	ldr	r1, [r3, #16]
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <HAL_ADC_PollForConversion+0x208>)
 8004204:	400b      	ands	r3, r1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <HAL_ADC_PollForConversion+0x140>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68d9      	ldr	r1, [r3, #12]
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_ADC_PollForConversion+0x208>)
 8004212:	400b      	ands	r3, r1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_PollForConversion+0x140>
 8004218:	2354      	movs	r3, #84	; 0x54
 800421a:	e000      	b.n	800421e <HAL_ADC_PollForConversion+0x142>
 800421c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004224:	e021      	b.n	800426a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d01a      	beq.n	8004264 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_ADC_PollForConversion+0x168>
 8004234:	f7ff fd72 	bl	8003d1c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d20f      	bcs.n	8004264 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	429a      	cmp	r2, r3
 800424a:	d90b      	bls.n	8004264 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	f043 0204 	orr.w	r2, r3, #4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e030      	b.n	80042c6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3301      	adds	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d8d9      	bhi.n	8004226 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 0212 	mvn.w	r2, #18
 800427a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004292:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004296:	d115      	bne.n	80042c4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	2000002c 	.word	0x2000002c
 80042d4:	24924924 	.word	0x24924924
 80042d8:	00924924 	.word	0x00924924
 80042dc:	12492492 	.word	0x12492492
 80042e0:	00492492 	.word	0x00492492
 80042e4:	00249249 	.word	0x00249249

080042e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x20>
 800431c:	2302      	movs	r3, #2
 800431e:	e0dc      	b.n	80044da <HAL_ADC_ConfigChannel+0x1da>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d81c      	bhi.n	800436a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	3b05      	subs	r3, #5
 8004342:	221f      	movs	r2, #31
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	4019      	ands	r1, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	3b05      	subs	r3, #5
 800435c:	fa00 f203 	lsl.w	r2, r0, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
 8004368:	e03c      	b.n	80043e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d81c      	bhi.n	80043ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	3b23      	subs	r3, #35	; 0x23
 8004384:	221f      	movs	r2, #31
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	4019      	ands	r1, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	3b23      	subs	r3, #35	; 0x23
 800439e:	fa00 f203 	lsl.w	r2, r0, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
 80043aa:	e01b      	b.n	80043e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	3b41      	subs	r3, #65	; 0x41
 80043be:	221f      	movs	r2, #31
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	4019      	ands	r1, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	3b41      	subs	r3, #65	; 0x41
 80043d8:	fa00 f203 	lsl.w	r2, r0, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b09      	cmp	r3, #9
 80043ea:	d91c      	bls.n	8004426 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68d9      	ldr	r1, [r3, #12]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	3b1e      	subs	r3, #30
 80043fe:	2207      	movs	r2, #7
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	4019      	ands	r1, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6898      	ldr	r0, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	3b1e      	subs	r3, #30
 8004418:	fa00 f203 	lsl.w	r2, r0, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	60da      	str	r2, [r3, #12]
 8004424:	e019      	b.n	800445a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6919      	ldr	r1, [r3, #16]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	2207      	movs	r2, #7
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	4019      	ands	r1, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6898      	ldr	r0, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	fa00 f203 	lsl.w	r2, r0, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b10      	cmp	r3, #16
 8004460:	d003      	beq.n	800446a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004466:	2b11      	cmp	r3, #17
 8004468:	d132      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d125      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d126      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004490:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d11a      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_ADC_ConfigChannel+0x1ec>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0c9a      	lsrs	r2, r3, #18
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044b0:	e002      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f9      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x1b2>
 80044be:	e007      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40012400 	.word	0x40012400
 80044e8:	2000002c 	.word	0x2000002c
 80044ec:	431bde83 	.word	0x431bde83

080044f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d040      	beq.n	8004590 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <ADC_Enable+0xac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <ADC_Enable+0xb0>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	0c9b      	lsrs	r3, r3, #18
 800452a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800452c:	e002      	b.n	8004534 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3b01      	subs	r3, #1
 8004532:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f9      	bne.n	800452e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800453a:	f7ff fbef 	bl	8003d1c <HAL_GetTick>
 800453e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004540:	e01f      	b.n	8004582 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004542:	f7ff fbeb 	bl	8003d1c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d918      	bls.n	8004582 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d011      	beq.n	8004582 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f043 0210 	orr.w	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e007      	b.n	8004592 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d1d8      	bne.n	8004542 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000002c 	.word	0x2000002c
 80045a0:	431bde83 	.word	0x431bde83

080045a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d12e      	bne.n	800461c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ce:	f7ff fba5 	bl	8003d1c <HAL_GetTick>
 80045d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045d4:	e01b      	b.n	800460e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045d6:	f7ff fba1 	bl	8003d1c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d914      	bls.n	800460e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10d      	bne.n	800460e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f043 0210 	orr.w	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	f043 0201 	orr.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e007      	b.n	800461e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d0dc      	beq.n	80045d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004644:	4013      	ands	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	60d3      	str	r3, [r2, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <__NVIC_GetPriorityGrouping+0x18>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f003 0307 	and.w	r3, r3, #7
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	2b00      	cmp	r3, #0
 800469c:	db0b      	blt.n	80046b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <__NVIC_EnableIRQ+0x34>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2001      	movs	r0, #1
 80046ae:	fa00 f202 	lsl.w	r2, r0, r2
 80046b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	e000e100 	.word	0xe000e100

080046c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	db0a      	blt.n	80046ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	490c      	ldr	r1, [pc, #48]	; (8004710 <__NVIC_SetPriority+0x4c>)
 80046de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	440b      	add	r3, r1
 80046e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046ec:	e00a      	b.n	8004704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4908      	ldr	r1, [pc, #32]	; (8004714 <__NVIC_SetPriority+0x50>)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3b04      	subs	r3, #4
 80046fc:	0112      	lsls	r2, r2, #4
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	440b      	add	r3, r1
 8004702:	761a      	strb	r2, [r3, #24]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e100 	.word	0xe000e100
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f1c3 0307 	rsb	r3, r3, #7
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf28      	it	cs
 8004736:	2304      	movcs	r3, #4
 8004738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3304      	adds	r3, #4
 800473e:	2b06      	cmp	r3, #6
 8004740:	d902      	bls.n	8004748 <NVIC_EncodePriority+0x30>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3b03      	subs	r3, #3
 8004746:	e000      	b.n	800474a <NVIC_EncodePriority+0x32>
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	401a      	ands	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004760:	f04f 31ff 	mov.w	r1, #4294967295
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	43d9      	mvns	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	4313      	orrs	r3, r2
         );
}
 8004772:	4618      	mov	r0, r3
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800478c:	d301      	bcc.n	8004792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478e:	2301      	movs	r3, #1
 8004790:	e00f      	b.n	80047b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <SysTick_Config+0x40>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479a:	210f      	movs	r1, #15
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f7ff ff90 	bl	80046c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <SysTick_Config+0x40>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <SysTick_Config+0x40>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000e010 	.word	0xe000e010

080047c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ff2d 	bl	8004628 <__NVIC_SetPriorityGrouping>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047e8:	f7ff ff42 	bl	8004670 <__NVIC_GetPriorityGrouping>
 80047ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff90 	bl	8004718 <NVIC_EncodePriority>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff5f 	bl	80046c4 <__NVIC_SetPriority>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff35 	bl	800468c <__NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ffa2 	bl	800477c <SysTick_Config>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b08b      	sub	sp, #44	; 0x2c
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004852:	2300      	movs	r3, #0
 8004854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004856:	e169      	b.n	8004b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004858:	2201      	movs	r2, #1
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	f040 8158 	bne.w	8004b26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a9a      	ldr	r2, [pc, #616]	; (8004ae4 <HAL_GPIO_Init+0x2a0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d05e      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 8004880:	4a98      	ldr	r2, [pc, #608]	; (8004ae4 <HAL_GPIO_Init+0x2a0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d875      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 8004886:	4a98      	ldr	r2, [pc, #608]	; (8004ae8 <HAL_GPIO_Init+0x2a4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d058      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 800488c:	4a96      	ldr	r2, [pc, #600]	; (8004ae8 <HAL_GPIO_Init+0x2a4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d86f      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 8004892:	4a96      	ldr	r2, [pc, #600]	; (8004aec <HAL_GPIO_Init+0x2a8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d052      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 8004898:	4a94      	ldr	r2, [pc, #592]	; (8004aec <HAL_GPIO_Init+0x2a8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d869      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 800489e:	4a94      	ldr	r2, [pc, #592]	; (8004af0 <HAL_GPIO_Init+0x2ac>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d04c      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 80048a4:	4a92      	ldr	r2, [pc, #584]	; (8004af0 <HAL_GPIO_Init+0x2ac>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d863      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048aa:	4a92      	ldr	r2, [pc, #584]	; (8004af4 <HAL_GPIO_Init+0x2b0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d046      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 80048b0:	4a90      	ldr	r2, [pc, #576]	; (8004af4 <HAL_GPIO_Init+0x2b0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d85d      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048b6:	2b12      	cmp	r3, #18
 80048b8:	d82a      	bhi.n	8004910 <HAL_GPIO_Init+0xcc>
 80048ba:	2b12      	cmp	r3, #18
 80048bc:	d859      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_GPIO_Init+0x80>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	0800493f 	.word	0x0800493f
 80048c8:	08004919 	.word	0x08004919
 80048cc:	0800492b 	.word	0x0800492b
 80048d0:	0800496d 	.word	0x0800496d
 80048d4:	08004973 	.word	0x08004973
 80048d8:	08004973 	.word	0x08004973
 80048dc:	08004973 	.word	0x08004973
 80048e0:	08004973 	.word	0x08004973
 80048e4:	08004973 	.word	0x08004973
 80048e8:	08004973 	.word	0x08004973
 80048ec:	08004973 	.word	0x08004973
 80048f0:	08004973 	.word	0x08004973
 80048f4:	08004973 	.word	0x08004973
 80048f8:	08004973 	.word	0x08004973
 80048fc:	08004973 	.word	0x08004973
 8004900:	08004973 	.word	0x08004973
 8004904:	08004973 	.word	0x08004973
 8004908:	08004921 	.word	0x08004921
 800490c:	08004935 	.word	0x08004935
 8004910:	4a79      	ldr	r2, [pc, #484]	; (8004af8 <HAL_GPIO_Init+0x2b4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004916:	e02c      	b.n	8004972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	623b      	str	r3, [r7, #32]
          break;
 800491e:	e029      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	623b      	str	r3, [r7, #32]
          break;
 8004928:	e024      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	3308      	adds	r3, #8
 8004930:	623b      	str	r3, [r7, #32]
          break;
 8004932:	e01f      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	330c      	adds	r3, #12
 800493a:	623b      	str	r3, [r7, #32]
          break;
 800493c:	e01a      	b.n	8004974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004946:	2304      	movs	r3, #4
 8004948:	623b      	str	r3, [r7, #32]
          break;
 800494a:	e013      	b.n	8004974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004954:	2308      	movs	r3, #8
 8004956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	611a      	str	r2, [r3, #16]
          break;
 800495e:	e009      	b.n	8004974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004960:	2308      	movs	r3, #8
 8004962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	615a      	str	r2, [r3, #20]
          break;
 800496a:	e003      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
          break;
 8004970:	e000      	b.n	8004974 <HAL_GPIO_Init+0x130>
          break;
 8004972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d801      	bhi.n	800497e <HAL_GPIO_Init+0x13a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	e001      	b.n	8004982 <HAL_GPIO_Init+0x13e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2bff      	cmp	r3, #255	; 0xff
 8004988:	d802      	bhi.n	8004990 <HAL_GPIO_Init+0x14c>
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	e002      	b.n	8004996 <HAL_GPIO_Init+0x152>
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	3b08      	subs	r3, #8
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	210f      	movs	r1, #15
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	401a      	ands	r2, r3
 80049a8:	6a39      	ldr	r1, [r7, #32]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80b1 	beq.w	8004b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049c4:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_GPIO_Init+0x2b8>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4a4c      	ldr	r2, [pc, #304]	; (8004afc <HAL_GPIO_Init+0x2b8>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6193      	str	r3, [r2, #24]
 80049d0:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <HAL_GPIO_Init+0x2b8>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049dc:	4a48      	ldr	r2, [pc, #288]	; (8004b00 <HAL_GPIO_Init+0x2bc>)
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a40      	ldr	r2, [pc, #256]	; (8004b04 <HAL_GPIO_Init+0x2c0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_GPIO_Init+0x1ec>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <HAL_GPIO_Init+0x2c4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00d      	beq.n	8004a2c <HAL_GPIO_Init+0x1e8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3e      	ldr	r2, [pc, #248]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <HAL_GPIO_Init+0x1e4>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <HAL_GPIO_Init+0x2cc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_GPIO_Init+0x1e0>
 8004a20:	2303      	movs	r3, #3
 8004a22:	e006      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a24:	2304      	movs	r3, #4
 8004a26:	e004      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e002      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a30:	2300      	movs	r3, #0
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	f002 0203 	and.w	r2, r2, #3
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a42:	492f      	ldr	r1, [pc, #188]	; (8004b00 <HAL_GPIO_Init+0x2bc>)
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	492c      	ldr	r1, [pc, #176]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	608b      	str	r3, [r1, #8]
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	4928      	ldr	r1, [pc, #160]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a84:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4922      	ldr	r1, [pc, #136]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60cb      	str	r3, [r1, #12]
 8004a90:	e006      	b.n	8004aa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	491e      	ldr	r1, [pc, #120]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4918      	ldr	r1, [pc, #96]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	e006      	b.n	8004ac8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	4914      	ldr	r1, [pc, #80]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d021      	beq.n	8004b18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	e021      	b.n	8004b26 <HAL_GPIO_Init+0x2e2>
 8004ae2:	bf00      	nop
 8004ae4:	10320000 	.word	0x10320000
 8004ae8:	10310000 	.word	0x10310000
 8004aec:	10220000 	.word	0x10220000
 8004af0:	10210000 	.word	0x10210000
 8004af4:	10120000 	.word	0x10120000
 8004af8:	10110000 	.word	0x10110000
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010800 	.word	0x40010800
 8004b08:	40010c00 	.word	0x40010c00
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_GPIO_Init+0x304>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	4909      	ldr	r1, [pc, #36]	; (8004b48 <HAL_GPIO_Init+0x304>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	3301      	adds	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f47f ae8e 	bne.w	8004858 <HAL_GPIO_Init+0x14>
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	372c      	adds	r7, #44	; 0x2c
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	40010400 	.word	0x40010400

08004b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
 8004b68:	e001      	b.n	8004b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	807b      	strh	r3, [r7, #2]
 8004b86:	4613      	mov	r3, r2
 8004b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b8a:	787b      	ldrb	r3, [r7, #1]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b90:	887a      	ldrh	r2, [r7, #2]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b96:	e003      	b.n	8004ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b98:	887b      	ldrh	r3, [r7, #2]
 8004b9a:	041a      	lsls	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	611a      	str	r2, [r3, #16]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e12b      	b.n	8004e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe fe7c 	bl	80038d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c10:	f001 f842 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4a81      	ldr	r2, [pc, #516]	; (8004e20 <HAL_I2C_Init+0x274>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d807      	bhi.n	8004c30 <HAL_I2C_Init+0x84>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a80      	ldr	r2, [pc, #512]	; (8004e24 <HAL_I2C_Init+0x278>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bf94      	ite	ls
 8004c28:	2301      	movls	r3, #1
 8004c2a:	2300      	movhi	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e006      	b.n	8004c3e <HAL_I2C_Init+0x92>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a7d      	ldr	r2, [pc, #500]	; (8004e28 <HAL_I2C_Init+0x27c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bf94      	ite	ls
 8004c38:	2301      	movls	r3, #1
 8004c3a:	2300      	movhi	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0e7      	b.n	8004e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a78      	ldr	r2, [pc, #480]	; (8004e2c <HAL_I2C_Init+0x280>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0c9b      	lsrs	r3, r3, #18
 8004c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4a6a      	ldr	r2, [pc, #424]	; (8004e20 <HAL_I2C_Init+0x274>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d802      	bhi.n	8004c80 <HAL_I2C_Init+0xd4>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	e009      	b.n	8004c94 <HAL_I2C_Init+0xe8>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	4a69      	ldr	r2, [pc, #420]	; (8004e30 <HAL_I2C_Init+0x284>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	3301      	adds	r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	495c      	ldr	r1, [pc, #368]	; (8004e20 <HAL_I2C_Init+0x274>)
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d819      	bhi.n	8004ce8 <HAL_I2C_Init+0x13c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e59      	subs	r1, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cc8:	400b      	ands	r3, r1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_I2C_Init+0x138>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1e59      	subs	r1, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce2:	e051      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	e04f      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <HAL_I2C_Init+0x168>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1e58      	subs	r0, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	440b      	add	r3, r1
 8004cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d02:	3301      	adds	r3, #1
 8004d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e012      	b.n	8004d3a <HAL_I2C_Init+0x18e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e58      	subs	r0, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	0099      	lsls	r1, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Init+0x196>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e022      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10e      	bne.n	8004d68 <HAL_I2C_Init+0x1bc>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1e58      	subs	r0, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	440b      	add	r3, r1
 8004d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d66:	e00f      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1e58      	subs	r0, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	0099      	lsls	r1, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	6809      	ldr	r1, [r1, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6911      	ldr	r1, [r2, #16]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	000186a0 	.word	0x000186a0
 8004e24:	001e847f 	.word	0x001e847f
 8004e28:	003d08ff 	.word	0x003d08ff
 8004e2c:	431bde83 	.word	0x431bde83
 8004e30:	10624dd3 	.word	0x10624dd3

08004e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	817b      	strh	r3, [r7, #10]
 8004e46:	460b      	mov	r3, r1
 8004e48:	813b      	strh	r3, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e4e:	f7fe ff65 	bl	8003d1c <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	f040 80d9 	bne.w	8005014 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2319      	movs	r3, #25
 8004e68:	2201      	movs	r2, #1
 8004e6a:	496d      	ldr	r1, [pc, #436]	; (8005020 <HAL_I2C_Mem_Write+0x1ec>)
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f971 	bl	8005154 <I2C_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e0cc      	b.n	8005016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_I2C_Mem_Write+0x56>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0c5      	b.n	8005016 <HAL_I2C_Mem_Write+0x1e2>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d007      	beq.n	8004eb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2221      	movs	r2, #33	; 0x21
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2240      	movs	r2, #64	; 0x40
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a4d      	ldr	r2, [pc, #308]	; (8005024 <HAL_I2C_Mem_Write+0x1f0>)
 8004ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ef2:	88f8      	ldrh	r0, [r7, #6]
 8004ef4:	893a      	ldrh	r2, [r7, #8]
 8004ef6:	8979      	ldrh	r1, [r7, #10]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f890 	bl	8005028 <I2C_RequestMemoryWrite>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d052      	beq.n	8004fb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e081      	b.n	8005016 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fa36 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d107      	bne.n	8004f3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e06b      	b.n	8005016 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_I2C_Mem_Write+0x180>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d017      	beq.n	8004fb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1aa      	bne.n	8004f12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fa29 	bl	8005418 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d107      	bne.n	8004fe4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e016      	b.n	8005016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	00100002 	.word	0x00100002
 8005024:	ffff0000 	.word	0xffff0000

08005028 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4603      	mov	r3, r0
 8005038:	817b      	strh	r3, [r7, #10]
 800503a:	460b      	mov	r3, r1
 800503c:	813b      	strh	r3, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	2200      	movs	r2, #0
 800505a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f878 	bl	8005154 <I2C_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005078:	d103      	bne.n	8005082 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e05f      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005086:	897b      	ldrh	r3, [r7, #10]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	492d      	ldr	r1, [pc, #180]	; (8005150 <I2C_RequestMemoryWrite+0x128>)
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f8d3 	bl	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e04c      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	6a39      	ldr	r1, [r7, #32]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f95e 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d107      	bne.n	80050ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e02b      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f4:	893b      	ldrh	r3, [r7, #8]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	611a      	str	r2, [r3, #16]
 80050fe:	e021      	b.n	8005144 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005110:	6a39      	ldr	r1, [r7, #32]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f938 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2b04      	cmp	r3, #4
 8005124:	d107      	bne.n	8005136 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e005      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800513a:	893b      	ldrh	r3, [r7, #8]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	00010002 	.word	0x00010002

08005154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005164:	e048      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d044      	beq.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fe fdd5 	bl	8003d1c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_WaitOnFlagUntilTimeout+0x30>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d139      	bne.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d10d      	bne.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	43da      	mvns	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4013      	ands	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	e00c      	b.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d116      	bne.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e023      	b.n	8005240 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10d      	bne.n	800521e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	43da      	mvns	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	e00c      	b.n	8005238 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	43da      	mvns	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	429a      	cmp	r2, r3
 800523c:	d093      	beq.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005256:	e071      	b.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005266:	d123      	bne.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005276:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e067      	b.n	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d041      	beq.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b8:	f7fe fd30 	bl	8003d1c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d136      	bne.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d10c      	bne.n	80052f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e00b      	b.n	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	43da      	mvns	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e021      	b.n	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10c      	bne.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	43da      	mvns	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e00b      	b.n	8005378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	43da      	mvns	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	f47f af6d 	bne.w	8005258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005394:	e034      	b.n	8005400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f886 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e034      	b.n	8005410 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d028      	beq.n	8005400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fe fcb5 	bl	8003d1c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11d      	bne.n	8005400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d016      	beq.n	8005400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e007      	b.n	8005410 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d1c3      	bne.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005424:	e034      	b.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f83e 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e034      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d028      	beq.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fe fc6d 	bl	8003d1c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11d      	bne.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d016      	beq.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d1c3      	bne.n	8005426 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d11b      	bne.n	80054f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f043 0204 	orr.w	r2, r3, #4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e272      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8087 	beq.w	8005632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005524:	4b92      	ldr	r3, [pc, #584]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 030c 	and.w	r3, r3, #12
 800552c:	2b04      	cmp	r3, #4
 800552e:	d00c      	beq.n	800554a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005530:	4b8f      	ldr	r3, [pc, #572]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 030c 	and.w	r3, r3, #12
 8005538:	2b08      	cmp	r3, #8
 800553a:	d112      	bne.n	8005562 <HAL_RCC_OscConfig+0x5e>
 800553c:	4b8c      	ldr	r3, [pc, #560]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d10b      	bne.n	8005562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554a:	4b89      	ldr	r3, [pc, #548]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d06c      	beq.n	8005630 <HAL_RCC_OscConfig+0x12c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d168      	bne.n	8005630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e24c      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556a:	d106      	bne.n	800557a <HAL_RCC_OscConfig+0x76>
 800556c:	4b80      	ldr	r3, [pc, #512]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a7f      	ldr	r2, [pc, #508]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e02e      	b.n	80055d8 <HAL_RCC_OscConfig+0xd4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x98>
 8005582:	4b7b      	ldr	r3, [pc, #492]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7a      	ldr	r2, [pc, #488]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b78      	ldr	r3, [pc, #480]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a77      	ldr	r2, [pc, #476]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e01d      	b.n	80055d8 <HAL_RCC_OscConfig+0xd4>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0xbc>
 80055a6:	4b72      	ldr	r3, [pc, #456]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a71      	ldr	r2, [pc, #452]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	4b6f      	ldr	r3, [pc, #444]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6e      	ldr	r2, [pc, #440]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e00b      	b.n	80055d8 <HAL_RCC_OscConfig+0xd4>
 80055c0:	4b6b      	ldr	r3, [pc, #428]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a6a      	ldr	r2, [pc, #424]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a67      	ldr	r2, [pc, #412]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d013      	beq.n	8005608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fe fb9c 	bl	8003d1c <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e8:	f7fe fb98 	bl	8003d1c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	; 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e200      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	4b5d      	ldr	r3, [pc, #372]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0xe4>
 8005606:	e014      	b.n	8005632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005608:	f7fe fb88 	bl	8003d1c <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005610:	f7fe fb84 	bl	8003d1c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	; 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e1ec      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005622:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_OscConfig+0x10c>
 800562e:	e000      	b.n	8005632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d063      	beq.n	8005706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800563e:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800564a:	4b49      	ldr	r3, [pc, #292]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b08      	cmp	r3, #8
 8005654:	d11c      	bne.n	8005690 <HAL_RCC_OscConfig+0x18c>
 8005656:	4b46      	ldr	r3, [pc, #280]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d116      	bne.n	8005690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005662:	4b43      	ldr	r3, [pc, #268]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_RCC_OscConfig+0x176>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d001      	beq.n	800567a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e1c0      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4939      	ldr	r1, [pc, #228]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568e:	e03a      	b.n	8005706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCC_OscConfig+0x270>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569e:	f7fe fb3d 	bl	8003d1c <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a6:	f7fe fb39 	bl	8003d1c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e1a1      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c4:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4927      	ldr	r1, [pc, #156]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	600b      	str	r3, [r1, #0]
 80056d8:	e015      	b.n	8005706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056da:	4b26      	ldr	r3, [pc, #152]	; (8005774 <HAL_RCC_OscConfig+0x270>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fe fb1c 	bl	8003d1c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e8:	f7fe fb18 	bl	8003d1c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e180      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d03a      	beq.n	8005788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d019      	beq.n	800574e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571a:	4b17      	ldr	r3, [pc, #92]	; (8005778 <HAL_RCC_OscConfig+0x274>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005720:	f7fe fafc 	bl	8003d1c <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005728:	f7fe faf8 	bl	8003d1c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e160      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <HAL_RCC_OscConfig+0x26c>)
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005746:	2001      	movs	r0, #1
 8005748:	f000 face 	bl	8005ce8 <RCC_Delay>
 800574c:	e01c      	b.n	8005788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <HAL_RCC_OscConfig+0x274>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005754:	f7fe fae2 	bl	8003d1c <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575a:	e00f      	b.n	800577c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575c:	f7fe fade 	bl	8003d1c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d908      	bls.n	800577c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e146      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000
 8005774:	42420000 	.word	0x42420000
 8005778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577c:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e9      	bne.n	800575c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80a6 	beq.w	80058e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579a:	4b8b      	ldr	r3, [pc, #556]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	4b88      	ldr	r3, [pc, #544]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4a87      	ldr	r2, [pc, #540]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b0:	61d3      	str	r3, [r2, #28]
 80057b2:	4b85      	ldr	r3, [pc, #532]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	4b82      	ldr	r3, [pc, #520]	; (80059cc <HAL_RCC_OscConfig+0x4c8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d118      	bne.n	8005800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ce:	4b7f      	ldr	r3, [pc, #508]	; (80059cc <HAL_RCC_OscConfig+0x4c8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7e      	ldr	r2, [pc, #504]	; (80059cc <HAL_RCC_OscConfig+0x4c8>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057da:	f7fe fa9f 	bl	8003d1c <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e2:	f7fe fa9b 	bl	8003d1c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b64      	cmp	r3, #100	; 0x64
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e103      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	4b75      	ldr	r3, [pc, #468]	; (80059cc <HAL_RCC_OscConfig+0x4c8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d106      	bne.n	8005816 <HAL_RCC_OscConfig+0x312>
 8005808:	4b6f      	ldr	r3, [pc, #444]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	4a6e      	ldr	r2, [pc, #440]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	6213      	str	r3, [r2, #32]
 8005814:	e02d      	b.n	8005872 <HAL_RCC_OscConfig+0x36e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x334>
 800581e:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	4a69      	ldr	r2, [pc, #420]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	6213      	str	r3, [r2, #32]
 800582a:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	4a66      	ldr	r2, [pc, #408]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6213      	str	r3, [r2, #32]
 8005836:	e01c      	b.n	8005872 <HAL_RCC_OscConfig+0x36e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b05      	cmp	r3, #5
 800583e:	d10c      	bne.n	800585a <HAL_RCC_OscConfig+0x356>
 8005840:	4b61      	ldr	r3, [pc, #388]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4a60      	ldr	r2, [pc, #384]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	6213      	str	r3, [r2, #32]
 800584c:	4b5e      	ldr	r3, [pc, #376]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	4a5d      	ldr	r2, [pc, #372]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6213      	str	r3, [r2, #32]
 8005858:	e00b      	b.n	8005872 <HAL_RCC_OscConfig+0x36e>
 800585a:	4b5b      	ldr	r3, [pc, #364]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4a5a      	ldr	r2, [pc, #360]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6213      	str	r3, [r2, #32]
 8005866:	4b58      	ldr	r3, [pc, #352]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	4a57      	ldr	r2, [pc, #348]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d015      	beq.n	80058a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587a:	f7fe fa4f 	bl	8003d1c <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005880:	e00a      	b.n	8005898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fe fa4b 	bl	8003d1c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e0b1      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005898:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ee      	beq.n	8005882 <HAL_RCC_OscConfig+0x37e>
 80058a4:	e014      	b.n	80058d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a6:	f7fe fa39 	bl	8003d1c <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fe fa35 	bl	8003d1c <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e09b      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c4:	4b40      	ldr	r3, [pc, #256]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ee      	bne.n	80058ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d105      	bne.n	80058e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d6:	4b3c      	ldr	r3, [pc, #240]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4a3b      	ldr	r2, [pc, #236]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80058dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8087 	beq.w	80059fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ec:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d061      	beq.n	80059bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d146      	bne.n	800598e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005900:	4b33      	ldr	r3, [pc, #204]	; (80059d0 <HAL_RCC_OscConfig+0x4cc>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fe fa09 	bl	8003d1c <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fe fa05 	bl	8003d1c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e06d      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f0      	bne.n	800590e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d108      	bne.n	8005948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4921      	ldr	r1, [pc, #132]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005948:	4b1f      	ldr	r3, [pc, #124]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a19      	ldr	r1, [r3, #32]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	430b      	orrs	r3, r1
 800595a:	491b      	ldr	r1, [pc, #108]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_RCC_OscConfig+0x4cc>)
 8005962:	2201      	movs	r2, #1
 8005964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005966:	f7fe f9d9 	bl	8003d1c <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596e:	f7fe f9d5 	bl	8003d1c <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e03d      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005980:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x46a>
 800598c:	e035      	b.n	80059fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <HAL_RCC_OscConfig+0x4cc>)
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005994:	f7fe f9c2 	bl	8003d1c <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599c:	f7fe f9be 	bl	8003d1c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e026      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x498>
 80059ba:	e01e      	b.n	80059fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d107      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e019      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40007000 	.word	0x40007000
 80059d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_RCC_OscConfig+0x500>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d106      	bne.n	80059f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40021000 	.word	0x40021000

08005a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0d0      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b6a      	ldr	r3, [pc, #424]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d910      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b67      	ldr	r3, [pc, #412]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 0207 	bic.w	r2, r3, #7
 8005a32:	4965      	ldr	r1, [pc, #404]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0b8      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a58      	ldr	r2, [pc, #352]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a7c:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	494d      	ldr	r1, [pc, #308]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d040      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d115      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e07f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e073      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e06b      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4936      	ldr	r1, [pc, #216]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af8:	f7fe f910 	bl	8003d1c <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fe f90c 	bl	8003d1c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e053      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d210      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 0207 	bic.w	r2, r3, #7
 8005b3e:	4922      	ldr	r1, [pc, #136]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4916      	ldr	r1, [pc, #88]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	490e      	ldr	r1, [pc, #56]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b96:	f000 f821 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba8:	5ccb      	ldrb	r3, [r1, r3]
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe f86e 	bl	8003c98 <HAL_InitTick>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40022000 	.word	0x40022000
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	0800b588 	.word	0x0800b588
 8005bd4:	2000002c 	.word	0x2000002c
 8005bd8:	20000030 	.word	0x20000030

08005bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d002      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0x30>
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d003      	beq.n	8005c12 <HAL_RCC_GetSysClockFreq+0x36>
 8005c0a:	e027      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c0e:	613b      	str	r3, [r7, #16]
      break;
 8005c10:	e027      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0c9b      	lsrs	r3, r3, #18
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c1c:	5cd3      	ldrb	r3, [r2, r3]
 8005c1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d010      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	0c5b      	lsrs	r3, r3, #17
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	4a11      	ldr	r2, [pc, #68]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c36:	5cd3      	ldrb	r3, [r2, r3]
 8005c38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c3e:	fb03 f202 	mul.w	r2, r3, r2
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e004      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	613b      	str	r3, [r7, #16]
      break;
 8005c5a:	e002      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c5e:	613b      	str	r3, [r7, #16]
      break;
 8005c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c62:	693b      	ldr	r3, [r7, #16]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	007a1200 	.word	0x007a1200
 8005c78:	0800b5a0 	.word	0x0800b5a0
 8005c7c:	0800b5b0 	.word	0x0800b5b0
 8005c80:	003d0900 	.word	0x003d0900

08005c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c88:	4b02      	ldr	r3, [pc, #8]	; (8005c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr
 8005c94:	2000002c 	.word	0x2000002c

08005c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c9c:	f7ff fff2 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4903      	ldr	r1, [pc, #12]	; (8005cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	0800b598 	.word	0x0800b598

08005cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cc4:	f7ff ffde 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	0adb      	lsrs	r3, r3, #11
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	4903      	ldr	r1, [pc, #12]	; (8005ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cd6:	5ccb      	ldrb	r3, [r1, r3]
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	0800b598 	.word	0x0800b598

08005ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <RCC_Delay+0x34>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <RCC_Delay+0x38>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	0a5b      	lsrs	r3, r3, #9
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d04:	bf00      	nop
  }
  while (Delay --);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1e5a      	subs	r2, r3, #1
 8005d0a:	60fa      	str	r2, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f9      	bne.n	8005d04 <RCC_Delay+0x1c>
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	2000002c 	.word	0x2000002c
 8005d20:	10624dd3 	.word	0x10624dd3

08005d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d07d      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d40:	2300      	movs	r3, #0
 8005d42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d44:	4b4f      	ldr	r3, [pc, #316]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10d      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d50:	4b4c      	ldr	r3, [pc, #304]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	4a4b      	ldr	r2, [pc, #300]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	61d3      	str	r3, [r2, #28]
 8005d5c:	4b49      	ldr	r3, [pc, #292]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	4b46      	ldr	r3, [pc, #280]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d118      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d78:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a42      	ldr	r2, [pc, #264]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d84:	f7fd ffca 	bl	8003d1c <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8a:	e008      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fd ffc6 	bl	8003d1c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b64      	cmp	r3, #100	; 0x64
 8005d98:	d901      	bls.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e06d      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9e:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005daa:	4b36      	ldr	r3, [pc, #216]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02e      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d027      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dd2:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dde:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d014      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fd ff95 	bl	8003d1c <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df6:	f7fd ff91 	bl	8003d1c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e036      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0ee      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4917      	ldr	r1, [pc, #92]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e48:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	490b      	ldr	r1, [pc, #44]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4904      	ldr	r1, [pc, #16]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40007000 	.word	0x40007000
 8005e8c:	42420440 	.word	0x42420440

08005e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	f200 808a 	bhi.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d045      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d075      	beq.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ec6:	e082      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005ec8:	4b46      	ldr	r3, [pc, #280]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ece:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d07b      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	0c9b      	lsrs	r3, r3, #18
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	4a41      	ldr	r2, [pc, #260]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005ee4:	5cd3      	ldrb	r3, [r2, r3]
 8005ee6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ef2:	4b3c      	ldr	r3, [pc, #240]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	0c5b      	lsrs	r3, r3, #17
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	4a3b      	ldr	r2, [pc, #236]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00d      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f0c:	4a38      	ldr	r2, [pc, #224]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4a34      	ldr	r2, [pc, #208]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f28:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f34:	d102      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	61bb      	str	r3, [r7, #24]
      break;
 8005f3a:	e04a      	b.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	61bb      	str	r3, [r7, #24]
      break;
 8005f4a:	e042      	b.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005f4c:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	d108      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e01f      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7a:	d109      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005f7c:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005f88:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	e00f      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9a:	d11c      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005fa8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005fac:	61bb      	str	r3, [r7, #24]
      break;
 8005fae:	e012      	b.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005fb0:	e011      	b.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005fb2:	f7ff fe85 	bl	8005cc0 <HAL_RCC_GetPCLK2Freq>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	0b9b      	lsrs	r3, r3, #14
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	61bb      	str	r3, [r7, #24]
      break;
 8005fcc:	e004      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e002      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fd6:	bf00      	nop
    }
  }
  return (frequency);
 8005fd8:	69bb      	ldr	r3, [r7, #24]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	0800b5b4 	.word	0x0800b5b4
 8005fec:	0800b5c4 	.word	0x0800b5c4
 8005ff0:	007a1200 	.word	0x007a1200
 8005ff4:	003d0900 	.word	0x003d0900
 8005ff8:	aaaaaaab 	.word	0xaaaaaaab

08005ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e041      	b.n	8006092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fd fca4 	bl	8003970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fb60 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d001      	beq.n	80060b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e032      	b.n	800611a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <HAL_TIM_Base_Start+0x88>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_TIM_Base_Start+0x48>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_Base_Start+0x48>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a14      	ldr	r2, [pc, #80]	; (8006128 <HAL_TIM_Base_Start+0x8c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_Base_Start+0x48>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <HAL_TIM_Base_Start+0x90>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d111      	bne.n	8006108 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d010      	beq.n	8006118 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	e007      	b.n	8006118 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800

08006130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d001      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e03a      	b.n	80061be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <HAL_TIM_Base_Start_IT+0x98>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <HAL_TIM_Base_Start_IT+0x58>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d009      	beq.n	8006188 <HAL_TIM_Base_Start_IT+0x58>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a14      	ldr	r2, [pc, #80]	; (80061cc <HAL_TIM_Base_Start_IT+0x9c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <HAL_TIM_Base_Start_IT+0x58>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d111      	bne.n	80061ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b06      	cmp	r3, #6
 8006198:	d010      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061aa:	e007      	b.n	80061bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800

080061d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_PWM_Start+0x24>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e022      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d109      	bne.n	8006212 <HAL_TIM_PWM_Start+0x3e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e015      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d109      	bne.n	800622c <HAL_TIM_PWM_Start+0x58>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e008      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e05e      	b.n	8006304 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Start+0x82>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	e013      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Start+0x92>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006264:	e00b      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006274:	e003      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2201      	movs	r2, #1
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fb32 	bl	80068f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1e      	ldr	r2, [pc, #120]	; (800630c <HAL_TIM_PWM_Start+0x138>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_TIM_PWM_Start+0x138>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIM_PWM_Start+0xfa>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d009      	beq.n	80062ce <HAL_TIM_PWM_Start+0xfa>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a14      	ldr	r2, [pc, #80]	; (8006310 <HAL_TIM_PWM_Start+0x13c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIM_PWM_Start+0xfa>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a12      	ldr	r2, [pc, #72]	; (8006314 <HAL_TIM_PWM_Start+0x140>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d111      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d010      	beq.n	8006302 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e007      	b.n	8006302 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800

08006318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d122      	bne.n	8006374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d11b      	bne.n	8006374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0202 	mvn.w	r2, #2
 8006344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f9b4 	bl	80066c8 <HAL_TIM_IC_CaptureCallback>
 8006360:	e005      	b.n	800636e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9a7 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f9b6 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b04      	cmp	r3, #4
 8006380:	d122      	bne.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b04      	cmp	r3, #4
 800638e:	d11b      	bne.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0204 	mvn.w	r2, #4
 8006398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f98a 	bl	80066c8 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f97d 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f98c 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d122      	bne.n	800641c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d11b      	bne.n	800641c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0208 	mvn.w	r2, #8
 80063ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2204      	movs	r2, #4
 80063f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f960 	bl	80066c8 <HAL_TIM_IC_CaptureCallback>
 8006408:	e005      	b.n	8006416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f953 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f962 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b10      	cmp	r3, #16
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0210 	mvn.w	r2, #16
 8006440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2208      	movs	r2, #8
 8006446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f936 	bl	80066c8 <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f929 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f938 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10e      	bne.n	800649c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0201 	mvn.w	r2, #1
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa feca 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d10e      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b80      	cmp	r3, #128	; 0x80
 80064b6:	d107      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa9f 	bl	8006a06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8fc 	bl	80066ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b20      	cmp	r3, #32
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0220 	mvn.w	r2, #32
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa6a 	bl	80069f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_TIM_ConfigClockSource+0x1c>
 8006540:	2302      	movs	r3, #2
 8006542:	e0b4      	b.n	80066ae <HAL_TIM_ConfigClockSource+0x186>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800656a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657c:	d03e      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0xd4>
 800657e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006582:	f200 8087 	bhi.w	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	f000 8086 	beq.w	800669a <HAL_TIM_ConfigClockSource+0x172>
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d87f      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b70      	cmp	r3, #112	; 0x70
 8006596:	d01a      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0xa6>
 8006598:	2b70      	cmp	r3, #112	; 0x70
 800659a:	d87b      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b60      	cmp	r3, #96	; 0x60
 800659e:	d050      	beq.n	8006642 <HAL_TIM_ConfigClockSource+0x11a>
 80065a0:	2b60      	cmp	r3, #96	; 0x60
 80065a2:	d877      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b50      	cmp	r3, #80	; 0x50
 80065a6:	d03c      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0xfa>
 80065a8:	2b50      	cmp	r3, #80	; 0x50
 80065aa:	d873      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d058      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x13a>
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d86f      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b30      	cmp	r3, #48	; 0x30
 80065b6:	d064      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x15a>
 80065b8:	2b30      	cmp	r3, #48	; 0x30
 80065ba:	d86b      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d060      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x15a>
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d867      	bhi.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d05c      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x15a>
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d05a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x15a>
 80065cc:	e062      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065de:	f000 f968 	bl	80068b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	609a      	str	r2, [r3, #8]
      break;
 80065fa:	e04f      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800660c:	f000 f951 	bl	80068b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800661e:	609a      	str	r2, [r3, #8]
      break;
 8006620:	e03c      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800662e:	461a      	mov	r2, r3
 8006630:	f000 f8c8 	bl	80067c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2150      	movs	r1, #80	; 0x50
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f91f 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 8006640:	e02c      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800664e:	461a      	mov	r2, r3
 8006650:	f000 f8e6 	bl	8006820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2160      	movs	r1, #96	; 0x60
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f90f 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 8006660:	e01c      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666e:	461a      	mov	r2, r3
 8006670:	f000 f8a8 	bl	80067c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2140      	movs	r1, #64	; 0x40
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f8ff 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 8006680:	e00c      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f000 f8f6 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 8006692:	e003      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
      break;
 8006698:	e000      	b.n	800669c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800669a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
	...

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a29      	ldr	r2, [pc, #164]	; (80067b8 <TIM_Base_SetConfig+0xb8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_Base_SetConfig+0x30>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d007      	beq.n	8006730 <TIM_Base_SetConfig+0x30>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a26      	ldr	r2, [pc, #152]	; (80067bc <TIM_Base_SetConfig+0xbc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_Base_SetConfig+0x30>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <TIM_Base_SetConfig+0xc0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d108      	bne.n	8006742 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a1c      	ldr	r2, [pc, #112]	; (80067b8 <TIM_Base_SetConfig+0xb8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <TIM_Base_SetConfig+0x62>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006750:	d007      	beq.n	8006762 <TIM_Base_SetConfig+0x62>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a19      	ldr	r2, [pc, #100]	; (80067bc <TIM_Base_SetConfig+0xbc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_Base_SetConfig+0x62>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <TIM_Base_SetConfig+0xc0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d108      	bne.n	8006774 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a07      	ldr	r2, [pc, #28]	; (80067b8 <TIM_Base_SetConfig+0xb8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d103      	bne.n	80067a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	615a      	str	r2, [r3, #20]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800

080067c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f023 0201 	bic.w	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 030a 	bic.w	r3, r3, #10
 8006800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0210 	bic.w	r2, r3, #16
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800684a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	031b      	lsls	r3, r3, #12
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800685c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	621a      	str	r2, [r3, #32]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	f043 0307 	orr.w	r3, r3, #7
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	609a      	str	r2, [r3, #8]
}
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr

080068b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	021a      	lsls	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4313      	orrs	r3, r2
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	609a      	str	r2, [r3, #8]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2201      	movs	r2, #1
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a1a      	ldr	r2, [r3, #32]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	43db      	mvns	r3, r3
 8006912:	401a      	ands	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	431a      	orrs	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e046      	b.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699c:	d009      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10c      	bne.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800

080069f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <__cvt>:
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1e:	461f      	mov	r7, r3
 8006a20:	bfbb      	ittet	lt
 8006a22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a26:	461f      	movlt	r7, r3
 8006a28:	2300      	movge	r3, #0
 8006a2a:	232d      	movlt	r3, #45	; 0x2d
 8006a2c:	b088      	sub	sp, #32
 8006a2e:	4614      	mov	r4, r2
 8006a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a34:	7013      	strb	r3, [r2, #0]
 8006a36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a38:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a3c:	f023 0820 	bic.w	r8, r3, #32
 8006a40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a44:	d005      	beq.n	8006a52 <__cvt+0x3a>
 8006a46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a4a:	d100      	bne.n	8006a4e <__cvt+0x36>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e000      	b.n	8006a54 <__cvt+0x3c>
 8006a52:	2303      	movs	r3, #3
 8006a54:	aa07      	add	r2, sp, #28
 8006a56:	9204      	str	r2, [sp, #16]
 8006a58:	aa06      	add	r2, sp, #24
 8006a5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a5e:	e9cd 3500 	strd	r3, r5, [sp]
 8006a62:	4622      	mov	r2, r4
 8006a64:	463b      	mov	r3, r7
 8006a66:	f000 fe9b 	bl	80077a0 <_dtoa_r>
 8006a6a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a6e:	4606      	mov	r6, r0
 8006a70:	d102      	bne.n	8006a78 <__cvt+0x60>
 8006a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a74:	07db      	lsls	r3, r3, #31
 8006a76:	d522      	bpl.n	8006abe <__cvt+0xa6>
 8006a78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a7c:	eb06 0905 	add.w	r9, r6, r5
 8006a80:	d110      	bne.n	8006aa4 <__cvt+0x8c>
 8006a82:	7833      	ldrb	r3, [r6, #0]
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d10a      	bne.n	8006a9e <__cvt+0x86>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7f9 ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8006a94:	b918      	cbnz	r0, 8006a9e <__cvt+0x86>
 8006a96:	f1c5 0501 	rsb	r5, r5, #1
 8006a9a:	f8ca 5000 	str.w	r5, [sl]
 8006a9e:	f8da 3000 	ldr.w	r3, [sl]
 8006aa2:	4499      	add	r9, r3
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4639      	mov	r1, r7
 8006aac:	f7f9 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ab0:	b108      	cbz	r0, 8006ab6 <__cvt+0x9e>
 8006ab2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ab6:	2230      	movs	r2, #48	; 0x30
 8006ab8:	9b07      	ldr	r3, [sp, #28]
 8006aba:	454b      	cmp	r3, r9
 8006abc:	d307      	bcc.n	8006ace <__cvt+0xb6>
 8006abe:	4630      	mov	r0, r6
 8006ac0:	9b07      	ldr	r3, [sp, #28]
 8006ac2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ac4:	1b9b      	subs	r3, r3, r6
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	b008      	add	sp, #32
 8006aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ace:	1c59      	adds	r1, r3, #1
 8006ad0:	9107      	str	r1, [sp, #28]
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e7f0      	b.n	8006ab8 <__cvt+0xa0>

08006ad6 <__exponent>:
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ada:	2900      	cmp	r1, #0
 8006adc:	f803 2b02 	strb.w	r2, [r3], #2
 8006ae0:	bfb6      	itet	lt
 8006ae2:	222d      	movlt	r2, #45	; 0x2d
 8006ae4:	222b      	movge	r2, #43	; 0x2b
 8006ae6:	4249      	neglt	r1, r1
 8006ae8:	2909      	cmp	r1, #9
 8006aea:	7042      	strb	r2, [r0, #1]
 8006aec:	dd2a      	ble.n	8006b44 <__exponent+0x6e>
 8006aee:	f10d 0207 	add.w	r2, sp, #7
 8006af2:	4617      	mov	r7, r2
 8006af4:	260a      	movs	r6, #10
 8006af6:	fb91 f5f6 	sdiv	r5, r1, r6
 8006afa:	4694      	mov	ip, r2
 8006afc:	fb06 1415 	mls	r4, r6, r5, r1
 8006b00:	3430      	adds	r4, #48	; 0x30
 8006b02:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b06:	460c      	mov	r4, r1
 8006b08:	2c63      	cmp	r4, #99	; 0x63
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b10:	dcf1      	bgt.n	8006af6 <__exponent+0x20>
 8006b12:	3130      	adds	r1, #48	; 0x30
 8006b14:	f1ac 0402 	sub.w	r4, ip, #2
 8006b18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	1c41      	adds	r1, r0, #1
 8006b20:	42ba      	cmp	r2, r7
 8006b22:	d30a      	bcc.n	8006b3a <__exponent+0x64>
 8006b24:	f10d 0209 	add.w	r2, sp, #9
 8006b28:	eba2 020c 	sub.w	r2, r2, ip
 8006b2c:	42bc      	cmp	r4, r7
 8006b2e:	bf88      	it	hi
 8006b30:	2200      	movhi	r2, #0
 8006b32:	4413      	add	r3, r2
 8006b34:	1a18      	subs	r0, r3, r0
 8006b36:	b003      	add	sp, #12
 8006b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b3e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b42:	e7ed      	b.n	8006b20 <__exponent+0x4a>
 8006b44:	2330      	movs	r3, #48	; 0x30
 8006b46:	3130      	adds	r1, #48	; 0x30
 8006b48:	7083      	strb	r3, [r0, #2]
 8006b4a:	70c1      	strb	r1, [r0, #3]
 8006b4c:	1d03      	adds	r3, r0, #4
 8006b4e:	e7f1      	b.n	8006b34 <__exponent+0x5e>

08006b50 <_printf_float>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	b091      	sub	sp, #68	; 0x44
 8006b56:	460c      	mov	r4, r1
 8006b58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	461f      	mov	r7, r3
 8006b60:	4605      	mov	r5, r0
 8006b62:	f000 fcff 	bl	8007564 <_localeconv_r>
 8006b66:	6803      	ldr	r3, [r0, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6c:	f7f9 faf0 	bl	8000150 <strlen>
 8006b70:	2300      	movs	r3, #0
 8006b72:	930e      	str	r3, [sp, #56]	; 0x38
 8006b74:	f8d8 3000 	ldr.w	r3, [r8]
 8006b78:	900a      	str	r0, [sp, #40]	; 0x28
 8006b7a:	3307      	adds	r3, #7
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	f103 0208 	add.w	r2, r3, #8
 8006b84:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b88:	f8d4 b000 	ldr.w	fp, [r4]
 8006b8c:	f8c8 2000 	str.w	r2, [r8]
 8006b90:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006b94:	4652      	mov	r2, sl
 8006b96:	4643      	mov	r3, r8
 8006b98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b9c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	4b9c      	ldr	r3, [pc, #624]	; (8006e1c <_printf_float+0x2cc>)
 8006baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bac:	f7f9 ff2e 	bl	8000a0c <__aeabi_dcmpun>
 8006bb0:	bb70      	cbnz	r0, 8006c10 <_printf_float+0xc0>
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	4b98      	ldr	r3, [pc, #608]	; (8006e1c <_printf_float+0x2cc>)
 8006bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bbc:	f7f9 ff08 	bl	80009d0 <__aeabi_dcmple>
 8006bc0:	bb30      	cbnz	r0, 8006c10 <_printf_float+0xc0>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4650      	mov	r0, sl
 8006bc8:	4641      	mov	r1, r8
 8006bca:	f7f9 fef7 	bl	80009bc <__aeabi_dcmplt>
 8006bce:	b110      	cbz	r0, 8006bd6 <_printf_float+0x86>
 8006bd0:	232d      	movs	r3, #45	; 0x2d
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd6:	4a92      	ldr	r2, [pc, #584]	; (8006e20 <_printf_float+0x2d0>)
 8006bd8:	4b92      	ldr	r3, [pc, #584]	; (8006e24 <_printf_float+0x2d4>)
 8006bda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bde:	bf94      	ite	ls
 8006be0:	4690      	movls	r8, r2
 8006be2:	4698      	movhi	r8, r3
 8006be4:	2303      	movs	r3, #3
 8006be6:	f04f 0a00 	mov.w	sl, #0
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	f02b 0304 	bic.w	r3, fp, #4
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	4633      	mov	r3, r6
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	9700      	str	r7, [sp, #0]
 8006bfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8006bfc:	f000 f9d6 	bl	8006fac <_printf_common>
 8006c00:	3001      	adds	r0, #1
 8006c02:	f040 8090 	bne.w	8006d26 <_printf_float+0x1d6>
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	b011      	add	sp, #68	; 0x44
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c10:	4652      	mov	r2, sl
 8006c12:	4643      	mov	r3, r8
 8006c14:	4650      	mov	r0, sl
 8006c16:	4641      	mov	r1, r8
 8006c18:	f7f9 fef8 	bl	8000a0c <__aeabi_dcmpun>
 8006c1c:	b148      	cbz	r0, 8006c32 <_printf_float+0xe2>
 8006c1e:	f1b8 0f00 	cmp.w	r8, #0
 8006c22:	bfb8      	it	lt
 8006c24:	232d      	movlt	r3, #45	; 0x2d
 8006c26:	4a80      	ldr	r2, [pc, #512]	; (8006e28 <_printf_float+0x2d8>)
 8006c28:	bfb8      	it	lt
 8006c2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c2e:	4b7f      	ldr	r3, [pc, #508]	; (8006e2c <_printf_float+0x2dc>)
 8006c30:	e7d3      	b.n	8006bda <_printf_float+0x8a>
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	d142      	bne.n	8006cc2 <_printf_float+0x172>
 8006c3c:	2306      	movs	r3, #6
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	9206      	str	r2, [sp, #24]
 8006c44:	aa0e      	add	r2, sp, #56	; 0x38
 8006c46:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c4a:	aa0d      	add	r2, sp, #52	; 0x34
 8006c4c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c50:	9203      	str	r2, [sp, #12]
 8006c52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	6863      	ldr	r3, [r4, #4]
 8006c5e:	4652      	mov	r2, sl
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	4628      	mov	r0, r5
 8006c64:	4643      	mov	r3, r8
 8006c66:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c68:	f7ff fed6 	bl	8006a18 <__cvt>
 8006c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c6e:	4680      	mov	r8, r0
 8006c70:	2947      	cmp	r1, #71	; 0x47
 8006c72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c74:	d108      	bne.n	8006c88 <_printf_float+0x138>
 8006c76:	1cc8      	adds	r0, r1, #3
 8006c78:	db02      	blt.n	8006c80 <_printf_float+0x130>
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	dd40      	ble.n	8006d02 <_printf_float+0x1b2>
 8006c80:	f1a9 0902 	sub.w	r9, r9, #2
 8006c84:	fa5f f989 	uxtb.w	r9, r9
 8006c88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c8c:	d81f      	bhi.n	8006cce <_printf_float+0x17e>
 8006c8e:	464a      	mov	r2, r9
 8006c90:	3901      	subs	r1, #1
 8006c92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c96:	910d      	str	r1, [sp, #52]	; 0x34
 8006c98:	f7ff ff1d 	bl	8006ad6 <__exponent>
 8006c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	1813      	adds	r3, r2, r0
 8006ca2:	2a01      	cmp	r2, #1
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	dc02      	bgt.n	8006cae <_printf_float+0x15e>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	07d2      	lsls	r2, r2, #31
 8006cac:	d501      	bpl.n	8006cb2 <_printf_float+0x162>
 8006cae:	3301      	adds	r3, #1
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d09b      	beq.n	8006bf2 <_printf_float+0xa2>
 8006cba:	232d      	movs	r3, #45	; 0x2d
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	e797      	b.n	8006bf2 <_printf_float+0xa2>
 8006cc2:	2947      	cmp	r1, #71	; 0x47
 8006cc4:	d1bc      	bne.n	8006c40 <_printf_float+0xf0>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1ba      	bne.n	8006c40 <_printf_float+0xf0>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e7b7      	b.n	8006c3e <_printf_float+0xee>
 8006cce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006cd2:	d118      	bne.n	8006d06 <_printf_float+0x1b6>
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	dd0b      	ble.n	8006cf2 <_printf_float+0x1a2>
 8006cda:	6121      	str	r1, [r4, #16]
 8006cdc:	b913      	cbnz	r3, 8006ce4 <_printf_float+0x194>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	07d0      	lsls	r0, r2, #31
 8006ce2:	d502      	bpl.n	8006cea <_printf_float+0x19a>
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	440b      	add	r3, r1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cf0:	e7df      	b.n	8006cb2 <_printf_float+0x162>
 8006cf2:	b913      	cbnz	r3, 8006cfa <_printf_float+0x1aa>
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	07d2      	lsls	r2, r2, #31
 8006cf8:	d501      	bpl.n	8006cfe <_printf_float+0x1ae>
 8006cfa:	3302      	adds	r3, #2
 8006cfc:	e7f4      	b.n	8006ce8 <_printf_float+0x198>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e7f2      	b.n	8006ce8 <_printf_float+0x198>
 8006d02:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	db05      	blt.n	8006d18 <_printf_float+0x1c8>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	6121      	str	r1, [r4, #16]
 8006d10:	07d8      	lsls	r0, r3, #31
 8006d12:	d5ea      	bpl.n	8006cea <_printf_float+0x19a>
 8006d14:	1c4b      	adds	r3, r1, #1
 8006d16:	e7e7      	b.n	8006ce8 <_printf_float+0x198>
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	bfcc      	ite	gt
 8006d1c:	2201      	movgt	r2, #1
 8006d1e:	f1c1 0202 	rsble	r2, r1, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	e7e0      	b.n	8006ce8 <_printf_float+0x198>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	055a      	lsls	r2, r3, #21
 8006d2a:	d407      	bmi.n	8006d3c <_printf_float+0x1ec>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	4642      	mov	r2, r8
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	d12b      	bne.n	8006d92 <_printf_float+0x242>
 8006d3a:	e764      	b.n	8006c06 <_printf_float+0xb6>
 8006d3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d40:	f240 80dd 	bls.w	8006efe <_printf_float+0x3ae>
 8006d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f7f9 fe2c 	bl	80009a8 <__aeabi_dcmpeq>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d033      	beq.n	8006dbc <_printf_float+0x26c>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	4a35      	ldr	r2, [pc, #212]	; (8006e30 <_printf_float+0x2e0>)
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f43f af51 	beq.w	8006c06 <_printf_float+0xb6>
 8006d64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	db02      	blt.n	8006d72 <_printf_float+0x222>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07d8      	lsls	r0, r3, #31
 8006d70:	d50f      	bpl.n	8006d92 <_printf_float+0x242>
 8006d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	f43f af42 	beq.w	8006c06 <_printf_float+0xb6>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	f104 091a 	add.w	r9, r4, #26
 8006d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	4543      	cmp	r3, r8
 8006d90:	dc09      	bgt.n	8006da6 <_printf_float+0x256>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	079b      	lsls	r3, r3, #30
 8006d96:	f100 8104 	bmi.w	8006fa2 <_printf_float+0x452>
 8006d9a:	68e0      	ldr	r0, [r4, #12]
 8006d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d9e:	4298      	cmp	r0, r3
 8006da0:	bfb8      	it	lt
 8006da2:	4618      	movlt	r0, r3
 8006da4:	e731      	b.n	8006c0a <_printf_float+0xba>
 8006da6:	2301      	movs	r3, #1
 8006da8:	464a      	mov	r2, r9
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f af28 	beq.w	8006c06 <_printf_float+0xb6>
 8006db6:	f108 0801 	add.w	r8, r8, #1
 8006dba:	e7e6      	b.n	8006d8a <_printf_float+0x23a>
 8006dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	dc38      	bgt.n	8006e34 <_printf_float+0x2e4>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <_printf_float+0x2e0>)
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f af1a 	beq.w	8006c06 <_printf_float+0xb6>
 8006dd2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	d102      	bne.n	8006de0 <_printf_float+0x290>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	07d9      	lsls	r1, r3, #31
 8006dde:	d5d8      	bpl.n	8006d92 <_printf_float+0x242>
 8006de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af0b 	beq.w	8006c06 <_printf_float+0xb6>
 8006df0:	f04f 0900 	mov.w	r9, #0
 8006df4:	f104 0a1a 	add.w	sl, r4, #26
 8006df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	454b      	cmp	r3, r9
 8006dfe:	dc01      	bgt.n	8006e04 <_printf_float+0x2b4>
 8006e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e02:	e794      	b.n	8006d2e <_printf_float+0x1de>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4652      	mov	r2, sl
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f aef9 	beq.w	8006c06 <_printf_float+0xb6>
 8006e14:	f109 0901 	add.w	r9, r9, #1
 8006e18:	e7ee      	b.n	8006df8 <_printf_float+0x2a8>
 8006e1a:	bf00      	nop
 8006e1c:	7fefffff 	.word	0x7fefffff
 8006e20:	0800b5c6 	.word	0x0800b5c6
 8006e24:	0800b5ca 	.word	0x0800b5ca
 8006e28:	0800b5ce 	.word	0x0800b5ce
 8006e2c:	0800b5d2 	.word	0x0800b5d2
 8006e30:	0800b5d6 	.word	0x0800b5d6
 8006e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	bfa8      	it	ge
 8006e3c:	461a      	movge	r2, r3
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	4691      	mov	r9, r2
 8006e42:	dc37      	bgt.n	8006eb4 <_printf_float+0x364>
 8006e44:	f04f 0b00 	mov.w	fp, #0
 8006e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e4c:	f104 021a 	add.w	r2, r4, #26
 8006e50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e54:	ebaa 0309 	sub.w	r3, sl, r9
 8006e58:	455b      	cmp	r3, fp
 8006e5a:	dc33      	bgt.n	8006ec4 <_printf_float+0x374>
 8006e5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e60:	429a      	cmp	r2, r3
 8006e62:	db3b      	blt.n	8006edc <_printf_float+0x38c>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d438      	bmi.n	8006edc <_printf_float+0x38c>
 8006e6a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e6e:	eba2 0903 	sub.w	r9, r2, r3
 8006e72:	eba2 020a 	sub.w	r2, r2, sl
 8006e76:	4591      	cmp	r9, r2
 8006e78:	bfa8      	it	ge
 8006e7a:	4691      	movge	r9, r2
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	dc34      	bgt.n	8006eec <_printf_float+0x39c>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8a:	f104 0a1a 	add.w	sl, r4, #26
 8006e8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	eba3 0309 	sub.w	r3, r3, r9
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	f77f af7a 	ble.w	8006d92 <_printf_float+0x242>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f aeac 	beq.w	8006c06 <_printf_float+0xb6>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	e7ec      	b.n	8006e8e <_printf_float+0x33e>
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d1c0      	bne.n	8006e44 <_printf_float+0x2f4>
 8006ec2:	e6a0      	b.n	8006c06 <_printf_float+0xb6>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f ae99 	beq.w	8006c06 <_printf_float+0xb6>
 8006ed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ed6:	f10b 0b01 	add.w	fp, fp, #1
 8006eda:	e7b9      	b.n	8006e50 <_printf_float+0x300>
 8006edc:	4631      	mov	r1, r6
 8006ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d1bf      	bne.n	8006e6a <_printf_float+0x31a>
 8006eea:	e68c      	b.n	8006c06 <_printf_float+0xb6>
 8006eec:	464b      	mov	r3, r9
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	eb08 020a 	add.w	r2, r8, sl
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d1c2      	bne.n	8006e82 <_printf_float+0x332>
 8006efc:	e683      	b.n	8006c06 <_printf_float+0xb6>
 8006efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f00:	2a01      	cmp	r2, #1
 8006f02:	dc01      	bgt.n	8006f08 <_printf_float+0x3b8>
 8006f04:	07db      	lsls	r3, r3, #31
 8006f06:	d539      	bpl.n	8006f7c <_printf_float+0x42c>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4642      	mov	r2, r8
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	f43f ae77 	beq.w	8006c06 <_printf_float+0xb6>
 8006f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f ae6f 	beq.w	8006c06 <_printf_float+0xb6>
 8006f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006f34:	f7f9 fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8006f38:	b9d8      	cbnz	r0, 8006f72 <_printf_float+0x422>
 8006f3a:	f109 33ff 	add.w	r3, r9, #4294967295
 8006f3e:	f108 0201 	add.w	r2, r8, #1
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d10e      	bne.n	8006f6a <_printf_float+0x41a>
 8006f4c:	e65b      	b.n	8006c06 <_printf_float+0xb6>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	464a      	mov	r2, r9
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f ae54 	beq.w	8006c06 <_printf_float+0xb6>
 8006f5e:	f108 0801 	add.w	r8, r8, #1
 8006f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4543      	cmp	r3, r8
 8006f68:	dcf1      	bgt.n	8006f4e <_printf_float+0x3fe>
 8006f6a:	4653      	mov	r3, sl
 8006f6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f70:	e6de      	b.n	8006d30 <_printf_float+0x1e0>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	f104 091a 	add.w	r9, r4, #26
 8006f7a:	e7f2      	b.n	8006f62 <_printf_float+0x412>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4642      	mov	r2, r8
 8006f80:	e7df      	b.n	8006f42 <_printf_float+0x3f2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	464a      	mov	r2, r9
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae3a 	beq.w	8006c06 <_printf_float+0xb6>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f9a:	1a5b      	subs	r3, r3, r1
 8006f9c:	4543      	cmp	r3, r8
 8006f9e:	dcf0      	bgt.n	8006f82 <_printf_float+0x432>
 8006fa0:	e6fb      	b.n	8006d9a <_printf_float+0x24a>
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	f104 0919 	add.w	r9, r4, #25
 8006faa:	e7f4      	b.n	8006f96 <_printf_float+0x446>

08006fac <_printf_common>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	4699      	mov	r9, r3
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	4607      	mov	r7, r0
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	bfb8      	it	lt
 8006fbe:	4613      	movlt	r3, r2
 8006fc0:	6033      	str	r3, [r6, #0]
 8006fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fcc:	b10a      	cbz	r2, 8006fd2 <_printf_common+0x26>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	0699      	lsls	r1, r3, #26
 8006fd6:	bf42      	ittt	mi
 8006fd8:	6833      	ldrmi	r3, [r6, #0]
 8006fda:	3302      	addmi	r3, #2
 8006fdc:	6033      	strmi	r3, [r6, #0]
 8006fde:	6825      	ldr	r5, [r4, #0]
 8006fe0:	f015 0506 	ands.w	r5, r5, #6
 8006fe4:	d106      	bne.n	8006ff4 <_printf_common+0x48>
 8006fe6:	f104 0a19 	add.w	sl, r4, #25
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	6832      	ldr	r2, [r6, #0]
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dc2b      	bgt.n	800704c <_printf_common+0xa0>
 8006ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ff8:	1e13      	subs	r3, r2, #0
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	bf18      	it	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d430      	bmi.n	8007066 <_printf_common+0xba>
 8007004:	4649      	mov	r1, r9
 8007006:	4638      	mov	r0, r7
 8007008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d023      	beq.n	800705a <_printf_common+0xae>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	6922      	ldr	r2, [r4, #16]
 8007016:	f003 0306 	and.w	r3, r3, #6
 800701a:	2b04      	cmp	r3, #4
 800701c:	bf14      	ite	ne
 800701e:	2500      	movne	r5, #0
 8007020:	6833      	ldreq	r3, [r6, #0]
 8007022:	f04f 0600 	mov.w	r6, #0
 8007026:	bf08      	it	eq
 8007028:	68e5      	ldreq	r5, [r4, #12]
 800702a:	f104 041a 	add.w	r4, r4, #26
 800702e:	bf08      	it	eq
 8007030:	1aed      	subeq	r5, r5, r3
 8007032:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007036:	bf08      	it	eq
 8007038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800703c:	4293      	cmp	r3, r2
 800703e:	bfc4      	itt	gt
 8007040:	1a9b      	subgt	r3, r3, r2
 8007042:	18ed      	addgt	r5, r5, r3
 8007044:	42b5      	cmp	r5, r6
 8007046:	d11a      	bne.n	800707e <_printf_common+0xd2>
 8007048:	2000      	movs	r0, #0
 800704a:	e008      	b.n	800705e <_printf_common+0xb2>
 800704c:	2301      	movs	r3, #1
 800704e:	4652      	mov	r2, sl
 8007050:	4649      	mov	r1, r9
 8007052:	4638      	mov	r0, r7
 8007054:	47c0      	blx	r8
 8007056:	3001      	adds	r0, #1
 8007058:	d103      	bne.n	8007062 <_printf_common+0xb6>
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007062:	3501      	adds	r5, #1
 8007064:	e7c1      	b.n	8006fea <_printf_common+0x3e>
 8007066:	2030      	movs	r0, #48	; 0x30
 8007068:	18e1      	adds	r1, r4, r3
 800706a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007074:	4422      	add	r2, r4
 8007076:	3302      	adds	r3, #2
 8007078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800707c:	e7c2      	b.n	8007004 <_printf_common+0x58>
 800707e:	2301      	movs	r3, #1
 8007080:	4622      	mov	r2, r4
 8007082:	4649      	mov	r1, r9
 8007084:	4638      	mov	r0, r7
 8007086:	47c0      	blx	r8
 8007088:	3001      	adds	r0, #1
 800708a:	d0e6      	beq.n	800705a <_printf_common+0xae>
 800708c:	3601      	adds	r6, #1
 800708e:	e7d9      	b.n	8007044 <_printf_common+0x98>

08007090 <_printf_i>:
 8007090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	7e0f      	ldrb	r7, [r1, #24]
 8007096:	4691      	mov	r9, r2
 8007098:	2f78      	cmp	r7, #120	; 0x78
 800709a:	4680      	mov	r8, r0
 800709c:	460c      	mov	r4, r1
 800709e:	469a      	mov	sl, r3
 80070a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070a6:	d807      	bhi.n	80070b8 <_printf_i+0x28>
 80070a8:	2f62      	cmp	r7, #98	; 0x62
 80070aa:	d80a      	bhi.n	80070c2 <_printf_i+0x32>
 80070ac:	2f00      	cmp	r7, #0
 80070ae:	f000 80d5 	beq.w	800725c <_printf_i+0x1cc>
 80070b2:	2f58      	cmp	r7, #88	; 0x58
 80070b4:	f000 80c1 	beq.w	800723a <_printf_i+0x1aa>
 80070b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070c0:	e03a      	b.n	8007138 <_printf_i+0xa8>
 80070c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070c6:	2b15      	cmp	r3, #21
 80070c8:	d8f6      	bhi.n	80070b8 <_printf_i+0x28>
 80070ca:	a101      	add	r1, pc, #4	; (adr r1, 80070d0 <_printf_i+0x40>)
 80070cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070d0:	08007129 	.word	0x08007129
 80070d4:	0800713d 	.word	0x0800713d
 80070d8:	080070b9 	.word	0x080070b9
 80070dc:	080070b9 	.word	0x080070b9
 80070e0:	080070b9 	.word	0x080070b9
 80070e4:	080070b9 	.word	0x080070b9
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	080070b9 	.word	0x080070b9
 80070f0:	080070b9 	.word	0x080070b9
 80070f4:	080070b9 	.word	0x080070b9
 80070f8:	080070b9 	.word	0x080070b9
 80070fc:	08007243 	.word	0x08007243
 8007100:	08007169 	.word	0x08007169
 8007104:	080071fd 	.word	0x080071fd
 8007108:	080070b9 	.word	0x080070b9
 800710c:	080070b9 	.word	0x080070b9
 8007110:	08007265 	.word	0x08007265
 8007114:	080070b9 	.word	0x080070b9
 8007118:	08007169 	.word	0x08007169
 800711c:	080070b9 	.word	0x080070b9
 8007120:	080070b9 	.word	0x080070b9
 8007124:	08007205 	.word	0x08007205
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	1d1a      	adds	r2, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	602a      	str	r2, [r5, #0]
 8007130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007138:	2301      	movs	r3, #1
 800713a:	e0a0      	b.n	800727e <_printf_i+0x1ee>
 800713c:	6820      	ldr	r0, [r4, #0]
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	0607      	lsls	r7, r0, #24
 8007142:	f103 0104 	add.w	r1, r3, #4
 8007146:	6029      	str	r1, [r5, #0]
 8007148:	d501      	bpl.n	800714e <_printf_i+0xbe>
 800714a:	681e      	ldr	r6, [r3, #0]
 800714c:	e003      	b.n	8007156 <_printf_i+0xc6>
 800714e:	0646      	lsls	r6, r0, #25
 8007150:	d5fb      	bpl.n	800714a <_printf_i+0xba>
 8007152:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007156:	2e00      	cmp	r6, #0
 8007158:	da03      	bge.n	8007162 <_printf_i+0xd2>
 800715a:	232d      	movs	r3, #45	; 0x2d
 800715c:	4276      	negs	r6, r6
 800715e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007162:	230a      	movs	r3, #10
 8007164:	4859      	ldr	r0, [pc, #356]	; (80072cc <_printf_i+0x23c>)
 8007166:	e012      	b.n	800718e <_printf_i+0xfe>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	6029      	str	r1, [r5, #0]
 8007170:	0605      	lsls	r5, r0, #24
 8007172:	d501      	bpl.n	8007178 <_printf_i+0xe8>
 8007174:	681e      	ldr	r6, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0xee>
 8007178:	0641      	lsls	r1, r0, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0xe4>
 800717c:	881e      	ldrh	r6, [r3, #0]
 800717e:	2f6f      	cmp	r7, #111	; 0x6f
 8007180:	bf0c      	ite	eq
 8007182:	2308      	moveq	r3, #8
 8007184:	230a      	movne	r3, #10
 8007186:	4851      	ldr	r0, [pc, #324]	; (80072cc <_printf_i+0x23c>)
 8007188:	2100      	movs	r1, #0
 800718a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800718e:	6865      	ldr	r5, [r4, #4]
 8007190:	2d00      	cmp	r5, #0
 8007192:	bfa8      	it	ge
 8007194:	6821      	ldrge	r1, [r4, #0]
 8007196:	60a5      	str	r5, [r4, #8]
 8007198:	bfa4      	itt	ge
 800719a:	f021 0104 	bicge.w	r1, r1, #4
 800719e:	6021      	strge	r1, [r4, #0]
 80071a0:	b90e      	cbnz	r6, 80071a6 <_printf_i+0x116>
 80071a2:	2d00      	cmp	r5, #0
 80071a4:	d04b      	beq.n	800723e <_printf_i+0x1ae>
 80071a6:	4615      	mov	r5, r2
 80071a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ac:	fb03 6711 	mls	r7, r3, r1, r6
 80071b0:	5dc7      	ldrb	r7, [r0, r7]
 80071b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071b6:	4637      	mov	r7, r6
 80071b8:	42bb      	cmp	r3, r7
 80071ba:	460e      	mov	r6, r1
 80071bc:	d9f4      	bls.n	80071a8 <_printf_i+0x118>
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d10b      	bne.n	80071da <_printf_i+0x14a>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	07de      	lsls	r6, r3, #31
 80071c6:	d508      	bpl.n	80071da <_printf_i+0x14a>
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	6861      	ldr	r1, [r4, #4]
 80071cc:	4299      	cmp	r1, r3
 80071ce:	bfde      	ittt	le
 80071d0:	2330      	movle	r3, #48	; 0x30
 80071d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071da:	1b52      	subs	r2, r2, r5
 80071dc:	6122      	str	r2, [r4, #16]
 80071de:	464b      	mov	r3, r9
 80071e0:	4621      	mov	r1, r4
 80071e2:	4640      	mov	r0, r8
 80071e4:	f8cd a000 	str.w	sl, [sp]
 80071e8:	aa03      	add	r2, sp, #12
 80071ea:	f7ff fedf 	bl	8006fac <_printf_common>
 80071ee:	3001      	adds	r0, #1
 80071f0:	d14a      	bne.n	8007288 <_printf_i+0x1f8>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	b004      	add	sp, #16
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f043 0320 	orr.w	r3, r3, #32
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	2778      	movs	r7, #120	; 0x78
 8007206:	4832      	ldr	r0, [pc, #200]	; (80072d0 <_printf_i+0x240>)
 8007208:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	6829      	ldr	r1, [r5, #0]
 8007210:	061f      	lsls	r7, r3, #24
 8007212:	f851 6b04 	ldr.w	r6, [r1], #4
 8007216:	d402      	bmi.n	800721e <_printf_i+0x18e>
 8007218:	065f      	lsls	r7, r3, #25
 800721a:	bf48      	it	mi
 800721c:	b2b6      	uxthmi	r6, r6
 800721e:	07df      	lsls	r7, r3, #31
 8007220:	bf48      	it	mi
 8007222:	f043 0320 	orrmi.w	r3, r3, #32
 8007226:	6029      	str	r1, [r5, #0]
 8007228:	bf48      	it	mi
 800722a:	6023      	strmi	r3, [r4, #0]
 800722c:	b91e      	cbnz	r6, 8007236 <_printf_i+0x1a6>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f023 0320 	bic.w	r3, r3, #32
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	2310      	movs	r3, #16
 8007238:	e7a6      	b.n	8007188 <_printf_i+0xf8>
 800723a:	4824      	ldr	r0, [pc, #144]	; (80072cc <_printf_i+0x23c>)
 800723c:	e7e4      	b.n	8007208 <_printf_i+0x178>
 800723e:	4615      	mov	r5, r2
 8007240:	e7bd      	b.n	80071be <_printf_i+0x12e>
 8007242:	682b      	ldr	r3, [r5, #0]
 8007244:	6826      	ldr	r6, [r4, #0]
 8007246:	1d18      	adds	r0, r3, #4
 8007248:	6961      	ldr	r1, [r4, #20]
 800724a:	6028      	str	r0, [r5, #0]
 800724c:	0635      	lsls	r5, r6, #24
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	d501      	bpl.n	8007256 <_printf_i+0x1c6>
 8007252:	6019      	str	r1, [r3, #0]
 8007254:	e002      	b.n	800725c <_printf_i+0x1cc>
 8007256:	0670      	lsls	r0, r6, #25
 8007258:	d5fb      	bpl.n	8007252 <_printf_i+0x1c2>
 800725a:	8019      	strh	r1, [r3, #0]
 800725c:	2300      	movs	r3, #0
 800725e:	4615      	mov	r5, r2
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	e7bc      	b.n	80071de <_printf_i+0x14e>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	2100      	movs	r1, #0
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	602a      	str	r2, [r5, #0]
 800726c:	681d      	ldr	r5, [r3, #0]
 800726e:	6862      	ldr	r2, [r4, #4]
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f9ee 	bl	8007652 <memchr>
 8007276:	b108      	cbz	r0, 800727c <_printf_i+0x1ec>
 8007278:	1b40      	subs	r0, r0, r5
 800727a:	6060      	str	r0, [r4, #4]
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	2300      	movs	r3, #0
 8007282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007286:	e7aa      	b.n	80071de <_printf_i+0x14e>
 8007288:	462a      	mov	r2, r5
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	47d0      	blx	sl
 8007292:	3001      	adds	r0, #1
 8007294:	d0ad      	beq.n	80071f2 <_printf_i+0x162>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	079b      	lsls	r3, r3, #30
 800729a:	d413      	bmi.n	80072c4 <_printf_i+0x234>
 800729c:	68e0      	ldr	r0, [r4, #12]
 800729e:	9b03      	ldr	r3, [sp, #12]
 80072a0:	4298      	cmp	r0, r3
 80072a2:	bfb8      	it	lt
 80072a4:	4618      	movlt	r0, r3
 80072a6:	e7a6      	b.n	80071f6 <_printf_i+0x166>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4632      	mov	r2, r6
 80072ac:	4649      	mov	r1, r9
 80072ae:	4640      	mov	r0, r8
 80072b0:	47d0      	blx	sl
 80072b2:	3001      	adds	r0, #1
 80072b4:	d09d      	beq.n	80071f2 <_printf_i+0x162>
 80072b6:	3501      	adds	r5, #1
 80072b8:	68e3      	ldr	r3, [r4, #12]
 80072ba:	9903      	ldr	r1, [sp, #12]
 80072bc:	1a5b      	subs	r3, r3, r1
 80072be:	42ab      	cmp	r3, r5
 80072c0:	dcf2      	bgt.n	80072a8 <_printf_i+0x218>
 80072c2:	e7eb      	b.n	800729c <_printf_i+0x20c>
 80072c4:	2500      	movs	r5, #0
 80072c6:	f104 0619 	add.w	r6, r4, #25
 80072ca:	e7f5      	b.n	80072b8 <_printf_i+0x228>
 80072cc:	0800b5d8 	.word	0x0800b5d8
 80072d0:	0800b5e9 	.word	0x0800b5e9

080072d4 <std>:
 80072d4:	2300      	movs	r3, #0
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	e9c0 3300 	strd	r3, r3, [r0]
 80072de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072e2:	6083      	str	r3, [r0, #8]
 80072e4:	8181      	strh	r1, [r0, #12]
 80072e6:	6643      	str	r3, [r0, #100]	; 0x64
 80072e8:	81c2      	strh	r2, [r0, #14]
 80072ea:	6183      	str	r3, [r0, #24]
 80072ec:	4619      	mov	r1, r3
 80072ee:	2208      	movs	r2, #8
 80072f0:	305c      	adds	r0, #92	; 0x5c
 80072f2:	f000 f92e 	bl	8007552 <memset>
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <std+0x58>)
 80072f8:	6224      	str	r4, [r4, #32]
 80072fa:	6263      	str	r3, [r4, #36]	; 0x24
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <std+0x5c>)
 80072fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <std+0x60>)
 8007302:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007304:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <std+0x64>)
 8007306:	6323      	str	r3, [r4, #48]	; 0x30
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <std+0x68>)
 800730a:	429c      	cmp	r4, r3
 800730c:	d006      	beq.n	800731c <std+0x48>
 800730e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007312:	4294      	cmp	r4, r2
 8007314:	d002      	beq.n	800731c <std+0x48>
 8007316:	33d0      	adds	r3, #208	; 0xd0
 8007318:	429c      	cmp	r4, r3
 800731a:	d105      	bne.n	8007328 <std+0x54>
 800731c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f000 b992 	b.w	800764c <__retarget_lock_init_recursive>
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	08007499 	.word	0x08007499
 8007330:	080074bb 	.word	0x080074bb
 8007334:	080074f3 	.word	0x080074f3
 8007338:	08007517 	.word	0x08007517
 800733c:	20000f40 	.word	0x20000f40

08007340 <stdio_exit_handler>:
 8007340:	4a02      	ldr	r2, [pc, #8]	; (800734c <stdio_exit_handler+0xc>)
 8007342:	4903      	ldr	r1, [pc, #12]	; (8007350 <stdio_exit_handler+0x10>)
 8007344:	4803      	ldr	r0, [pc, #12]	; (8007354 <stdio_exit_handler+0x14>)
 8007346:	f000 b869 	b.w	800741c <_fwalk_sglue>
 800734a:	bf00      	nop
 800734c:	20000038 	.word	0x20000038
 8007350:	08009005 	.word	0x08009005
 8007354:	20000044 	.word	0x20000044

08007358 <cleanup_stdio>:
 8007358:	6841      	ldr	r1, [r0, #4]
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <cleanup_stdio+0x34>)
 800735c:	b510      	push	{r4, lr}
 800735e:	4299      	cmp	r1, r3
 8007360:	4604      	mov	r4, r0
 8007362:	d001      	beq.n	8007368 <cleanup_stdio+0x10>
 8007364:	f001 fe4e 	bl	8009004 <_fflush_r>
 8007368:	68a1      	ldr	r1, [r4, #8]
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <cleanup_stdio+0x38>)
 800736c:	4299      	cmp	r1, r3
 800736e:	d002      	beq.n	8007376 <cleanup_stdio+0x1e>
 8007370:	4620      	mov	r0, r4
 8007372:	f001 fe47 	bl	8009004 <_fflush_r>
 8007376:	68e1      	ldr	r1, [r4, #12]
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <cleanup_stdio+0x3c>)
 800737a:	4299      	cmp	r1, r3
 800737c:	d004      	beq.n	8007388 <cleanup_stdio+0x30>
 800737e:	4620      	mov	r0, r4
 8007380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007384:	f001 be3e 	b.w	8009004 <_fflush_r>
 8007388:	bd10      	pop	{r4, pc}
 800738a:	bf00      	nop
 800738c:	20000f40 	.word	0x20000f40
 8007390:	20000fa8 	.word	0x20000fa8
 8007394:	20001010 	.word	0x20001010

08007398 <global_stdio_init.part.0>:
 8007398:	b510      	push	{r4, lr}
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <global_stdio_init.part.0+0x30>)
 800739c:	4c0b      	ldr	r4, [pc, #44]	; (80073cc <global_stdio_init.part.0+0x34>)
 800739e:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <global_stdio_init.part.0+0x38>)
 80073a0:	4620      	mov	r0, r4
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	2104      	movs	r1, #4
 80073a6:	2200      	movs	r2, #0
 80073a8:	f7ff ff94 	bl	80072d4 <std>
 80073ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073b0:	2201      	movs	r2, #1
 80073b2:	2109      	movs	r1, #9
 80073b4:	f7ff ff8e 	bl	80072d4 <std>
 80073b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073bc:	2202      	movs	r2, #2
 80073be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c2:	2112      	movs	r1, #18
 80073c4:	f7ff bf86 	b.w	80072d4 <std>
 80073c8:	20001078 	.word	0x20001078
 80073cc:	20000f40 	.word	0x20000f40
 80073d0:	08007341 	.word	0x08007341

080073d4 <__sfp_lock_acquire>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__sfp_lock_acquire+0x8>)
 80073d6:	f000 b93a 	b.w	800764e <__retarget_lock_acquire_recursive>
 80073da:	bf00      	nop
 80073dc:	20001081 	.word	0x20001081

080073e0 <__sfp_lock_release>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__sfp_lock_release+0x8>)
 80073e2:	f000 b935 	b.w	8007650 <__retarget_lock_release_recursive>
 80073e6:	bf00      	nop
 80073e8:	20001081 	.word	0x20001081

080073ec <__sinit>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4604      	mov	r4, r0
 80073f0:	f7ff fff0 	bl	80073d4 <__sfp_lock_acquire>
 80073f4:	6a23      	ldr	r3, [r4, #32]
 80073f6:	b11b      	cbz	r3, 8007400 <__sinit+0x14>
 80073f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fc:	f7ff bff0 	b.w	80073e0 <__sfp_lock_release>
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <__sinit+0x28>)
 8007402:	6223      	str	r3, [r4, #32]
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <__sinit+0x2c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f5      	bne.n	80073f8 <__sinit+0xc>
 800740c:	f7ff ffc4 	bl	8007398 <global_stdio_init.part.0>
 8007410:	e7f2      	b.n	80073f8 <__sinit+0xc>
 8007412:	bf00      	nop
 8007414:	08007359 	.word	0x08007359
 8007418:	20001078 	.word	0x20001078

0800741c <_fwalk_sglue>:
 800741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007420:	4607      	mov	r7, r0
 8007422:	4688      	mov	r8, r1
 8007424:	4614      	mov	r4, r2
 8007426:	2600      	movs	r6, #0
 8007428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800742c:	f1b9 0901 	subs.w	r9, r9, #1
 8007430:	d505      	bpl.n	800743e <_fwalk_sglue+0x22>
 8007432:	6824      	ldr	r4, [r4, #0]
 8007434:	2c00      	cmp	r4, #0
 8007436:	d1f7      	bne.n	8007428 <_fwalk_sglue+0xc>
 8007438:	4630      	mov	r0, r6
 800743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d907      	bls.n	8007454 <_fwalk_sglue+0x38>
 8007444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007448:	3301      	adds	r3, #1
 800744a:	d003      	beq.n	8007454 <_fwalk_sglue+0x38>
 800744c:	4629      	mov	r1, r5
 800744e:	4638      	mov	r0, r7
 8007450:	47c0      	blx	r8
 8007452:	4306      	orrs	r6, r0
 8007454:	3568      	adds	r5, #104	; 0x68
 8007456:	e7e9      	b.n	800742c <_fwalk_sglue+0x10>

08007458 <siprintf>:
 8007458:	b40e      	push	{r1, r2, r3}
 800745a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800745e:	b500      	push	{lr}
 8007460:	b09c      	sub	sp, #112	; 0x70
 8007462:	ab1d      	add	r3, sp, #116	; 0x74
 8007464:	9002      	str	r0, [sp, #8]
 8007466:	9006      	str	r0, [sp, #24]
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	9104      	str	r1, [sp, #16]
 800746c:	4808      	ldr	r0, [pc, #32]	; (8007490 <siprintf+0x38>)
 800746e:	4909      	ldr	r1, [pc, #36]	; (8007494 <siprintf+0x3c>)
 8007470:	f853 2b04 	ldr.w	r2, [r3], #4
 8007474:	9105      	str	r1, [sp, #20]
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	a902      	add	r1, sp, #8
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	f001 fc42 	bl	8008d04 <_svfiprintf_r>
 8007480:	2200      	movs	r2, #0
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	b01c      	add	sp, #112	; 0x70
 8007488:	f85d eb04 	ldr.w	lr, [sp], #4
 800748c:	b003      	add	sp, #12
 800748e:	4770      	bx	lr
 8007490:	20000090 	.word	0x20000090
 8007494:	ffff0208 	.word	0xffff0208

08007498 <__sread>:
 8007498:	b510      	push	{r4, lr}
 800749a:	460c      	mov	r4, r1
 800749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a0:	f000 f886 	bl	80075b0 <_read_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	bfab      	itete	ge
 80074a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074aa:	89a3      	ldrhlt	r3, [r4, #12]
 80074ac:	181b      	addge	r3, r3, r0
 80074ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074b2:	bfac      	ite	ge
 80074b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80074b6:	81a3      	strhlt	r3, [r4, #12]
 80074b8:	bd10      	pop	{r4, pc}

080074ba <__swrite>:
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	461f      	mov	r7, r3
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	4605      	mov	r5, r0
 80074c4:	05db      	lsls	r3, r3, #23
 80074c6:	460c      	mov	r4, r1
 80074c8:	4616      	mov	r6, r2
 80074ca:	d505      	bpl.n	80074d8 <__swrite+0x1e>
 80074cc:	2302      	movs	r3, #2
 80074ce:	2200      	movs	r2, #0
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	f000 f85a 	bl	800758c <_lseek_r>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	4632      	mov	r2, r6
 80074dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	4628      	mov	r0, r5
 80074e4:	463b      	mov	r3, r7
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	f000 b871 	b.w	80075d4 <_write_r>

080074f2 <__sseek>:
 80074f2:	b510      	push	{r4, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 f847 	bl	800758c <_lseek_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	bf15      	itete	ne
 8007504:	6560      	strne	r0, [r4, #84]	; 0x54
 8007506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800750a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800750e:	81a3      	strheq	r3, [r4, #12]
 8007510:	bf18      	it	ne
 8007512:	81a3      	strhne	r3, [r4, #12]
 8007514:	bd10      	pop	{r4, pc}

08007516 <__sclose>:
 8007516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751a:	f000 b827 	b.w	800756c <_close_r>

0800751e <memmove>:
 800751e:	4288      	cmp	r0, r1
 8007520:	b510      	push	{r4, lr}
 8007522:	eb01 0402 	add.w	r4, r1, r2
 8007526:	d902      	bls.n	800752e <memmove+0x10>
 8007528:	4284      	cmp	r4, r0
 800752a:	4623      	mov	r3, r4
 800752c:	d807      	bhi.n	800753e <memmove+0x20>
 800752e:	1e43      	subs	r3, r0, #1
 8007530:	42a1      	cmp	r1, r4
 8007532:	d008      	beq.n	8007546 <memmove+0x28>
 8007534:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007538:	f803 2f01 	strb.w	r2, [r3, #1]!
 800753c:	e7f8      	b.n	8007530 <memmove+0x12>
 800753e:	4601      	mov	r1, r0
 8007540:	4402      	add	r2, r0
 8007542:	428a      	cmp	r2, r1
 8007544:	d100      	bne.n	8007548 <memmove+0x2a>
 8007546:	bd10      	pop	{r4, pc}
 8007548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800754c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007550:	e7f7      	b.n	8007542 <memmove+0x24>

08007552 <memset>:
 8007552:	4603      	mov	r3, r0
 8007554:	4402      	add	r2, r0
 8007556:	4293      	cmp	r3, r2
 8007558:	d100      	bne.n	800755c <memset+0xa>
 800755a:	4770      	bx	lr
 800755c:	f803 1b01 	strb.w	r1, [r3], #1
 8007560:	e7f9      	b.n	8007556 <memset+0x4>
	...

08007564 <_localeconv_r>:
 8007564:	4800      	ldr	r0, [pc, #0]	; (8007568 <_localeconv_r+0x4>)
 8007566:	4770      	bx	lr
 8007568:	20000184 	.word	0x20000184

0800756c <_close_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	2300      	movs	r3, #0
 8007570:	4d05      	ldr	r5, [pc, #20]	; (8007588 <_close_r+0x1c>)
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7fc fae6 	bl	8003b48 <_close>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_close_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_close_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	2000107c 	.word	0x2000107c

0800758c <_lseek_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	2200      	movs	r2, #0
 8007596:	4d05      	ldr	r5, [pc, #20]	; (80075ac <_lseek_r+0x20>)
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fc faf8 	bl	8003b90 <_lseek>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_lseek_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_lseek_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	2000107c 	.word	0x2000107c

080075b0 <_read_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	4d05      	ldr	r5, [pc, #20]	; (80075d0 <_read_r+0x20>)
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7fc fa89 	bl	8003ad6 <_read>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_read_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_read_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	2000107c 	.word	0x2000107c

080075d4 <_write_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	2200      	movs	r2, #0
 80075de:	4d05      	ldr	r5, [pc, #20]	; (80075f4 <_write_r+0x20>)
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fc fa94 	bl	8003b10 <_write>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_write_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_write_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	2000107c 	.word	0x2000107c

080075f8 <__errno>:
 80075f8:	4b01      	ldr	r3, [pc, #4]	; (8007600 <__errno+0x8>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000090 	.word	0x20000090

08007604 <__libc_init_array>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	2600      	movs	r6, #0
 8007608:	4d0c      	ldr	r5, [pc, #48]	; (800763c <__libc_init_array+0x38>)
 800760a:	4c0d      	ldr	r4, [pc, #52]	; (8007640 <__libc_init_array+0x3c>)
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	42a6      	cmp	r6, r4
 8007612:	d109      	bne.n	8007628 <__libc_init_array+0x24>
 8007614:	f002 f86e 	bl	80096f4 <_init>
 8007618:	2600      	movs	r6, #0
 800761a:	4d0a      	ldr	r5, [pc, #40]	; (8007644 <__libc_init_array+0x40>)
 800761c:	4c0a      	ldr	r4, [pc, #40]	; (8007648 <__libc_init_array+0x44>)
 800761e:	1b64      	subs	r4, r4, r5
 8007620:	10a4      	asrs	r4, r4, #2
 8007622:	42a6      	cmp	r6, r4
 8007624:	d105      	bne.n	8007632 <__libc_init_array+0x2e>
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	f855 3b04 	ldr.w	r3, [r5], #4
 800762c:	4798      	blx	r3
 800762e:	3601      	adds	r6, #1
 8007630:	e7ee      	b.n	8007610 <__libc_init_array+0xc>
 8007632:	f855 3b04 	ldr.w	r3, [r5], #4
 8007636:	4798      	blx	r3
 8007638:	3601      	adds	r6, #1
 800763a:	e7f2      	b.n	8007622 <__libc_init_array+0x1e>
 800763c:	0800b934 	.word	0x0800b934
 8007640:	0800b934 	.word	0x0800b934
 8007644:	0800b934 	.word	0x0800b934
 8007648:	0800b938 	.word	0x0800b938

0800764c <__retarget_lock_init_recursive>:
 800764c:	4770      	bx	lr

0800764e <__retarget_lock_acquire_recursive>:
 800764e:	4770      	bx	lr

08007650 <__retarget_lock_release_recursive>:
 8007650:	4770      	bx	lr

08007652 <memchr>:
 8007652:	4603      	mov	r3, r0
 8007654:	b510      	push	{r4, lr}
 8007656:	b2c9      	uxtb	r1, r1
 8007658:	4402      	add	r2, r0
 800765a:	4293      	cmp	r3, r2
 800765c:	4618      	mov	r0, r3
 800765e:	d101      	bne.n	8007664 <memchr+0x12>
 8007660:	2000      	movs	r0, #0
 8007662:	e003      	b.n	800766c <memchr+0x1a>
 8007664:	7804      	ldrb	r4, [r0, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	428c      	cmp	r4, r1
 800766a:	d1f6      	bne.n	800765a <memchr+0x8>
 800766c:	bd10      	pop	{r4, pc}

0800766e <memcpy>:
 800766e:	440a      	add	r2, r1
 8007670:	4291      	cmp	r1, r2
 8007672:	f100 33ff 	add.w	r3, r0, #4294967295
 8007676:	d100      	bne.n	800767a <memcpy+0xc>
 8007678:	4770      	bx	lr
 800767a:	b510      	push	{r4, lr}
 800767c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007680:	4291      	cmp	r1, r2
 8007682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007686:	d1f9      	bne.n	800767c <memcpy+0xe>
 8007688:	bd10      	pop	{r4, pc}

0800768a <quorem>:
 800768a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768e:	6903      	ldr	r3, [r0, #16]
 8007690:	690c      	ldr	r4, [r1, #16]
 8007692:	4607      	mov	r7, r0
 8007694:	42a3      	cmp	r3, r4
 8007696:	db7f      	blt.n	8007798 <quorem+0x10e>
 8007698:	3c01      	subs	r4, #1
 800769a:	f100 0514 	add.w	r5, r0, #20
 800769e:	f101 0814 	add.w	r8, r1, #20
 80076a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076b0:	3301      	adds	r3, #1
 80076b2:	429a      	cmp	r2, r3
 80076b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076c0:	d331      	bcc.n	8007726 <quorem+0x9c>
 80076c2:	f04f 0e00 	mov.w	lr, #0
 80076c6:	4640      	mov	r0, r8
 80076c8:	46ac      	mov	ip, r5
 80076ca:	46f2      	mov	sl, lr
 80076cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80076d0:	b293      	uxth	r3, r2
 80076d2:	fb06 e303 	mla	r3, r6, r3, lr
 80076d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076da:	0c1a      	lsrs	r2, r3, #16
 80076dc:	b29b      	uxth	r3, r3
 80076de:	fb06 220e 	mla	r2, r6, lr, r2
 80076e2:	ebaa 0303 	sub.w	r3, sl, r3
 80076e6:	f8dc a000 	ldr.w	sl, [ip]
 80076ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ee:	fa1f fa8a 	uxth.w	sl, sl
 80076f2:	4453      	add	r3, sl
 80076f4:	f8dc a000 	ldr.w	sl, [ip]
 80076f8:	b292      	uxth	r2, r2
 80076fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007702:	b29b      	uxth	r3, r3
 8007704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007708:	4581      	cmp	r9, r0
 800770a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800770e:	f84c 3b04 	str.w	r3, [ip], #4
 8007712:	d2db      	bcs.n	80076cc <quorem+0x42>
 8007714:	f855 300b 	ldr.w	r3, [r5, fp]
 8007718:	b92b      	cbnz	r3, 8007726 <quorem+0x9c>
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	3b04      	subs	r3, #4
 800771e:	429d      	cmp	r5, r3
 8007720:	461a      	mov	r2, r3
 8007722:	d32d      	bcc.n	8007780 <quorem+0xf6>
 8007724:	613c      	str	r4, [r7, #16]
 8007726:	4638      	mov	r0, r7
 8007728:	f001 f994 	bl	8008a54 <__mcmp>
 800772c:	2800      	cmp	r0, #0
 800772e:	db23      	blt.n	8007778 <quorem+0xee>
 8007730:	4629      	mov	r1, r5
 8007732:	2000      	movs	r0, #0
 8007734:	3601      	adds	r6, #1
 8007736:	f858 2b04 	ldr.w	r2, [r8], #4
 800773a:	f8d1 c000 	ldr.w	ip, [r1]
 800773e:	b293      	uxth	r3, r2
 8007740:	1ac3      	subs	r3, r0, r3
 8007742:	0c12      	lsrs	r2, r2, #16
 8007744:	fa1f f08c 	uxth.w	r0, ip
 8007748:	4403      	add	r3, r0
 800774a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800774e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007758:	45c1      	cmp	r9, r8
 800775a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800775e:	f841 3b04 	str.w	r3, [r1], #4
 8007762:	d2e8      	bcs.n	8007736 <quorem+0xac>
 8007764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800776c:	b922      	cbnz	r2, 8007778 <quorem+0xee>
 800776e:	3b04      	subs	r3, #4
 8007770:	429d      	cmp	r5, r3
 8007772:	461a      	mov	r2, r3
 8007774:	d30a      	bcc.n	800778c <quorem+0x102>
 8007776:	613c      	str	r4, [r7, #16]
 8007778:	4630      	mov	r0, r6
 800777a:	b003      	add	sp, #12
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	6812      	ldr	r2, [r2, #0]
 8007782:	3b04      	subs	r3, #4
 8007784:	2a00      	cmp	r2, #0
 8007786:	d1cd      	bne.n	8007724 <quorem+0x9a>
 8007788:	3c01      	subs	r4, #1
 800778a:	e7c8      	b.n	800771e <quorem+0x94>
 800778c:	6812      	ldr	r2, [r2, #0]
 800778e:	3b04      	subs	r3, #4
 8007790:	2a00      	cmp	r2, #0
 8007792:	d1f0      	bne.n	8007776 <quorem+0xec>
 8007794:	3c01      	subs	r4, #1
 8007796:	e7eb      	b.n	8007770 <quorem+0xe6>
 8007798:	2000      	movs	r0, #0
 800779a:	e7ee      	b.n	800777a <quorem+0xf0>
 800779c:	0000      	movs	r0, r0
	...

080077a0 <_dtoa_r>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	4616      	mov	r6, r2
 80077a6:	461f      	mov	r7, r3
 80077a8:	69c4      	ldr	r4, [r0, #28]
 80077aa:	b099      	sub	sp, #100	; 0x64
 80077ac:	4605      	mov	r5, r0
 80077ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80077b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80077b6:	b974      	cbnz	r4, 80077d6 <_dtoa_r+0x36>
 80077b8:	2010      	movs	r0, #16
 80077ba:	f000 fe1d 	bl	80083f8 <malloc>
 80077be:	4602      	mov	r2, r0
 80077c0:	61e8      	str	r0, [r5, #28]
 80077c2:	b920      	cbnz	r0, 80077ce <_dtoa_r+0x2e>
 80077c4:	21ef      	movs	r1, #239	; 0xef
 80077c6:	4bac      	ldr	r3, [pc, #688]	; (8007a78 <_dtoa_r+0x2d8>)
 80077c8:	48ac      	ldr	r0, [pc, #688]	; (8007a7c <_dtoa_r+0x2dc>)
 80077ca:	f001 fc53 	bl	8009074 <__assert_func>
 80077ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d2:	6004      	str	r4, [r0, #0]
 80077d4:	60c4      	str	r4, [r0, #12]
 80077d6:	69eb      	ldr	r3, [r5, #28]
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	b151      	cbz	r1, 80077f2 <_dtoa_r+0x52>
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	2301      	movs	r3, #1
 80077e0:	4093      	lsls	r3, r2
 80077e2:	604a      	str	r2, [r1, #4]
 80077e4:	608b      	str	r3, [r1, #8]
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fefa 	bl	80085e0 <_Bfree>
 80077ec:	2200      	movs	r2, #0
 80077ee:	69eb      	ldr	r3, [r5, #28]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	1e3b      	subs	r3, r7, #0
 80077f4:	bfaf      	iteee	ge
 80077f6:	2300      	movge	r3, #0
 80077f8:	2201      	movlt	r2, #1
 80077fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077fe:	9305      	strlt	r3, [sp, #20]
 8007800:	bfa8      	it	ge
 8007802:	f8c8 3000 	strge.w	r3, [r8]
 8007806:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800780a:	4b9d      	ldr	r3, [pc, #628]	; (8007a80 <_dtoa_r+0x2e0>)
 800780c:	bfb8      	it	lt
 800780e:	f8c8 2000 	strlt.w	r2, [r8]
 8007812:	ea33 0309 	bics.w	r3, r3, r9
 8007816:	d119      	bne.n	800784c <_dtoa_r+0xac>
 8007818:	f242 730f 	movw	r3, #9999	; 0x270f
 800781c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007824:	4333      	orrs	r3, r6
 8007826:	f000 8589 	beq.w	800833c <_dtoa_r+0xb9c>
 800782a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800782c:	b953      	cbnz	r3, 8007844 <_dtoa_r+0xa4>
 800782e:	4b95      	ldr	r3, [pc, #596]	; (8007a84 <_dtoa_r+0x2e4>)
 8007830:	e023      	b.n	800787a <_dtoa_r+0xda>
 8007832:	4b95      	ldr	r3, [pc, #596]	; (8007a88 <_dtoa_r+0x2e8>)
 8007834:	9303      	str	r3, [sp, #12]
 8007836:	3308      	adds	r3, #8
 8007838:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	9803      	ldr	r0, [sp, #12]
 800783e:	b019      	add	sp, #100	; 0x64
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	4b8f      	ldr	r3, [pc, #572]	; (8007a84 <_dtoa_r+0x2e4>)
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	3303      	adds	r3, #3
 800784a:	e7f5      	b.n	8007838 <_dtoa_r+0x98>
 800784c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007850:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	2300      	movs	r3, #0
 800785c:	f7f9 f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8007860:	4680      	mov	r8, r0
 8007862:	b160      	cbz	r0, 800787e <_dtoa_r+0xde>
 8007864:	2301      	movs	r3, #1
 8007866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8562 	beq.w	8008336 <_dtoa_r+0xb96>
 8007872:	4b86      	ldr	r3, [pc, #536]	; (8007a8c <_dtoa_r+0x2ec>)
 8007874:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	3b01      	subs	r3, #1
 800787a:	9303      	str	r3, [sp, #12]
 800787c:	e7de      	b.n	800783c <_dtoa_r+0x9c>
 800787e:	ab16      	add	r3, sp, #88	; 0x58
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	ab17      	add	r3, sp, #92	; 0x5c
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4628      	mov	r0, r5
 8007888:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800788c:	f001 f98a 	bl	8008ba4 <__d2b>
 8007890:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007894:	4682      	mov	sl, r0
 8007896:	2c00      	cmp	r4, #0
 8007898:	d07e      	beq.n	8007998 <_dtoa_r+0x1f8>
 800789a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800789e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80078a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80078ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80078b4:	4619      	mov	r1, r3
 80078b6:	2200      	movs	r2, #0
 80078b8:	4b75      	ldr	r3, [pc, #468]	; (8007a90 <_dtoa_r+0x2f0>)
 80078ba:	f7f8 fc55 	bl	8000168 <__aeabi_dsub>
 80078be:	a368      	add	r3, pc, #416	; (adr r3, 8007a60 <_dtoa_r+0x2c0>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 fe08 	bl	80004d8 <__aeabi_dmul>
 80078c8:	a367      	add	r3, pc, #412	; (adr r3, 8007a68 <_dtoa_r+0x2c8>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f8 fc4d 	bl	800016c <__adddf3>
 80078d2:	4606      	mov	r6, r0
 80078d4:	4620      	mov	r0, r4
 80078d6:	460f      	mov	r7, r1
 80078d8:	f7f8 fd94 	bl	8000404 <__aeabi_i2d>
 80078dc:	a364      	add	r3, pc, #400	; (adr r3, 8007a70 <_dtoa_r+0x2d0>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fdf9 	bl	80004d8 <__aeabi_dmul>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7f8 fc3d 	bl	800016c <__adddf3>
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	f7f9 f89f 	bl	8000a38 <__aeabi_d2iz>
 80078fa:	2200      	movs	r2, #0
 80078fc:	4683      	mov	fp, r0
 80078fe:	2300      	movs	r3, #0
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f7f9 f85a 	bl	80009bc <__aeabi_dcmplt>
 8007908:	b148      	cbz	r0, 800791e <_dtoa_r+0x17e>
 800790a:	4658      	mov	r0, fp
 800790c:	f7f8 fd7a 	bl	8000404 <__aeabi_i2d>
 8007910:	4632      	mov	r2, r6
 8007912:	463b      	mov	r3, r7
 8007914:	f7f9 f848 	bl	80009a8 <__aeabi_dcmpeq>
 8007918:	b908      	cbnz	r0, 800791e <_dtoa_r+0x17e>
 800791a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800791e:	f1bb 0f16 	cmp.w	fp, #22
 8007922:	d857      	bhi.n	80079d4 <_dtoa_r+0x234>
 8007924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007928:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <_dtoa_r+0x2f4>)
 800792a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f9 f843 	bl	80009bc <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	d04e      	beq.n	80079d8 <_dtoa_r+0x238>
 800793a:	2300      	movs	r3, #0
 800793c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007940:	930f      	str	r3, [sp, #60]	; 0x3c
 8007942:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007944:	1b1b      	subs	r3, r3, r4
 8007946:	1e5a      	subs	r2, r3, #1
 8007948:	bf46      	itte	mi
 800794a:	f1c3 0901 	rsbmi	r9, r3, #1
 800794e:	2300      	movmi	r3, #0
 8007950:	f04f 0900 	movpl.w	r9, #0
 8007954:	9209      	str	r2, [sp, #36]	; 0x24
 8007956:	bf48      	it	mi
 8007958:	9309      	strmi	r3, [sp, #36]	; 0x24
 800795a:	f1bb 0f00 	cmp.w	fp, #0
 800795e:	db3d      	blt.n	80079dc <_dtoa_r+0x23c>
 8007960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007962:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007966:	445b      	add	r3, fp
 8007968:	9309      	str	r3, [sp, #36]	; 0x24
 800796a:	2300      	movs	r3, #0
 800796c:	930a      	str	r3, [sp, #40]	; 0x28
 800796e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007970:	2b09      	cmp	r3, #9
 8007972:	d867      	bhi.n	8007a44 <_dtoa_r+0x2a4>
 8007974:	2b05      	cmp	r3, #5
 8007976:	bfc4      	itt	gt
 8007978:	3b04      	subgt	r3, #4
 800797a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800797c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797e:	bfc8      	it	gt
 8007980:	2400      	movgt	r4, #0
 8007982:	f1a3 0302 	sub.w	r3, r3, #2
 8007986:	bfd8      	it	le
 8007988:	2401      	movle	r4, #1
 800798a:	2b03      	cmp	r3, #3
 800798c:	f200 8086 	bhi.w	8007a9c <_dtoa_r+0x2fc>
 8007990:	e8df f003 	tbb	[pc, r3]
 8007994:	5637392c 	.word	0x5637392c
 8007998:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800799c:	441c      	add	r4, r3
 800799e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	bfc1      	itttt	gt
 80079a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80079ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80079b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80079b6:	bfd6      	itet	le
 80079b8:	f1c3 0320 	rsble	r3, r3, #32
 80079bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80079c0:	fa06 f003 	lslle.w	r0, r6, r3
 80079c4:	f7f8 fd0e 	bl	80003e4 <__aeabi_ui2d>
 80079c8:	2201      	movs	r2, #1
 80079ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079ce:	3c01      	subs	r4, #1
 80079d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80079d2:	e76f      	b.n	80078b4 <_dtoa_r+0x114>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e7b3      	b.n	8007940 <_dtoa_r+0x1a0>
 80079d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80079da:	e7b2      	b.n	8007942 <_dtoa_r+0x1a2>
 80079dc:	f1cb 0300 	rsb	r3, fp, #0
 80079e0:	930a      	str	r3, [sp, #40]	; 0x28
 80079e2:	2300      	movs	r3, #0
 80079e4:	eba9 090b 	sub.w	r9, r9, fp
 80079e8:	930e      	str	r3, [sp, #56]	; 0x38
 80079ea:	e7c0      	b.n	800796e <_dtoa_r+0x1ce>
 80079ec:	2300      	movs	r3, #0
 80079ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80079f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc55      	bgt.n	8007aa2 <_dtoa_r+0x302>
 80079f6:	2301      	movs	r3, #1
 80079f8:	461a      	mov	r2, r3
 80079fa:	9306      	str	r3, [sp, #24]
 80079fc:	9308      	str	r3, [sp, #32]
 80079fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a00:	e00b      	b.n	8007a1a <_dtoa_r+0x27a>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7f3      	b.n	80079ee <_dtoa_r+0x24e>
 8007a06:	2300      	movs	r3, #0
 8007a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a0c:	445b      	add	r3, fp
 8007a0e:	9306      	str	r3, [sp, #24]
 8007a10:	3301      	adds	r3, #1
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	9308      	str	r3, [sp, #32]
 8007a16:	bfb8      	it	lt
 8007a18:	2301      	movlt	r3, #1
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	69e8      	ldr	r0, [r5, #28]
 8007a20:	f102 0614 	add.w	r6, r2, #20
 8007a24:	429e      	cmp	r6, r3
 8007a26:	d940      	bls.n	8007aaa <_dtoa_r+0x30a>
 8007a28:	6041      	str	r1, [r0, #4]
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 fd98 	bl	8008560 <_Balloc>
 8007a30:	9003      	str	r0, [sp, #12]
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d13c      	bne.n	8007ab0 <_dtoa_r+0x310>
 8007a36:	4602      	mov	r2, r0
 8007a38:	f240 11af 	movw	r1, #431	; 0x1af
 8007a3c:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <_dtoa_r+0x2f8>)
 8007a3e:	e6c3      	b.n	80077c8 <_dtoa_r+0x28>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e7e1      	b.n	8007a08 <_dtoa_r+0x268>
 8007a44:	2401      	movs	r4, #1
 8007a46:	2300      	movs	r3, #0
 8007a48:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a4a:	9322      	str	r3, [sp, #136]	; 0x88
 8007a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a50:	2200      	movs	r2, #0
 8007a52:	9306      	str	r3, [sp, #24]
 8007a54:	9308      	str	r3, [sp, #32]
 8007a56:	2312      	movs	r3, #18
 8007a58:	e7d1      	b.n	80079fe <_dtoa_r+0x25e>
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w
 8007a60:	636f4361 	.word	0x636f4361
 8007a64:	3fd287a7 	.word	0x3fd287a7
 8007a68:	8b60c8b3 	.word	0x8b60c8b3
 8007a6c:	3fc68a28 	.word	0x3fc68a28
 8007a70:	509f79fb 	.word	0x509f79fb
 8007a74:	3fd34413 	.word	0x3fd34413
 8007a78:	0800b607 	.word	0x0800b607
 8007a7c:	0800b61e 	.word	0x0800b61e
 8007a80:	7ff00000 	.word	0x7ff00000
 8007a84:	0800b603 	.word	0x0800b603
 8007a88:	0800b5fa 	.word	0x0800b5fa
 8007a8c:	0800b5d7 	.word	0x0800b5d7
 8007a90:	3ff80000 	.word	0x3ff80000
 8007a94:	0800b708 	.word	0x0800b708
 8007a98:	0800b676 	.word	0x0800b676
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa0:	e7d4      	b.n	8007a4c <_dtoa_r+0x2ac>
 8007aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aa4:	9306      	str	r3, [sp, #24]
 8007aa6:	9308      	str	r3, [sp, #32]
 8007aa8:	e7b7      	b.n	8007a1a <_dtoa_r+0x27a>
 8007aaa:	3101      	adds	r1, #1
 8007aac:	0052      	lsls	r2, r2, #1
 8007aae:	e7b7      	b.n	8007a20 <_dtoa_r+0x280>
 8007ab0:	69eb      	ldr	r3, [r5, #28]
 8007ab2:	9a03      	ldr	r2, [sp, #12]
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	9b08      	ldr	r3, [sp, #32]
 8007ab8:	2b0e      	cmp	r3, #14
 8007aba:	f200 80a8 	bhi.w	8007c0e <_dtoa_r+0x46e>
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	f000 80a5 	beq.w	8007c0e <_dtoa_r+0x46e>
 8007ac4:	f1bb 0f00 	cmp.w	fp, #0
 8007ac8:	dd34      	ble.n	8007b34 <_dtoa_r+0x394>
 8007aca:	4b9a      	ldr	r3, [pc, #616]	; (8007d34 <_dtoa_r+0x594>)
 8007acc:	f00b 020f 	and.w	r2, fp, #15
 8007ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007adc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ae0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007ae4:	d016      	beq.n	8007b14 <_dtoa_r+0x374>
 8007ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aea:	4b93      	ldr	r3, [pc, #588]	; (8007d38 <_dtoa_r+0x598>)
 8007aec:	2703      	movs	r7, #3
 8007aee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af2:	f7f8 fe1b 	bl	800072c <__aeabi_ddiv>
 8007af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007afa:	f004 040f 	and.w	r4, r4, #15
 8007afe:	4e8e      	ldr	r6, [pc, #568]	; (8007d38 <_dtoa_r+0x598>)
 8007b00:	b954      	cbnz	r4, 8007b18 <_dtoa_r+0x378>
 8007b02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b0a:	f7f8 fe0f 	bl	800072c <__aeabi_ddiv>
 8007b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b12:	e029      	b.n	8007b68 <_dtoa_r+0x3c8>
 8007b14:	2702      	movs	r7, #2
 8007b16:	e7f2      	b.n	8007afe <_dtoa_r+0x35e>
 8007b18:	07e1      	lsls	r1, r4, #31
 8007b1a:	d508      	bpl.n	8007b2e <_dtoa_r+0x38e>
 8007b1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b24:	f7f8 fcd8 	bl	80004d8 <__aeabi_dmul>
 8007b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b2c:	3701      	adds	r7, #1
 8007b2e:	1064      	asrs	r4, r4, #1
 8007b30:	3608      	adds	r6, #8
 8007b32:	e7e5      	b.n	8007b00 <_dtoa_r+0x360>
 8007b34:	f000 80a5 	beq.w	8007c82 <_dtoa_r+0x4e2>
 8007b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b3c:	f1cb 0400 	rsb	r4, fp, #0
 8007b40:	4b7c      	ldr	r3, [pc, #496]	; (8007d34 <_dtoa_r+0x594>)
 8007b42:	f004 020f 	and.w	r2, r4, #15
 8007b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	f7f8 fcc3 	bl	80004d8 <__aeabi_dmul>
 8007b52:	2702      	movs	r7, #2
 8007b54:	2300      	movs	r3, #0
 8007b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b5a:	4e77      	ldr	r6, [pc, #476]	; (8007d38 <_dtoa_r+0x598>)
 8007b5c:	1124      	asrs	r4, r4, #4
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	f040 8084 	bne.w	8007c6c <_dtoa_r+0x4cc>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1d2      	bne.n	8007b0e <_dtoa_r+0x36e>
 8007b68:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8087 	beq.w	8007c86 <_dtoa_r+0x4e6>
 8007b78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4b6f      	ldr	r3, [pc, #444]	; (8007d3c <_dtoa_r+0x59c>)
 8007b80:	f7f8 ff1c 	bl	80009bc <__aeabi_dcmplt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d07e      	beq.n	8007c86 <_dtoa_r+0x4e6>
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d07b      	beq.n	8007c86 <_dtoa_r+0x4e6>
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dd38      	ble.n	8007c06 <_dtoa_r+0x466>
 8007b94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4b69      	ldr	r3, [pc, #420]	; (8007d40 <_dtoa_r+0x5a0>)
 8007b9c:	f7f8 fc9c 	bl	80004d8 <__aeabi_dmul>
 8007ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ba4:	9c06      	ldr	r4, [sp, #24]
 8007ba6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007baa:	3701      	adds	r7, #1
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7f8 fc29 	bl	8000404 <__aeabi_i2d>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	f7f8 fc8f 	bl	80004d8 <__aeabi_dmul>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4b61      	ldr	r3, [pc, #388]	; (8007d44 <_dtoa_r+0x5a4>)
 8007bbe:	f7f8 fad5 	bl	800016c <__adddf3>
 8007bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007bc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bca:	9611      	str	r6, [sp, #68]	; 0x44
 8007bcc:	2c00      	cmp	r4, #0
 8007bce:	d15d      	bne.n	8007c8c <_dtoa_r+0x4ec>
 8007bd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <_dtoa_r+0x5a8>)
 8007bd8:	f7f8 fac6 	bl	8000168 <__aeabi_dsub>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007be4:	4633      	mov	r3, r6
 8007be6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007be8:	f7f8 ff06 	bl	80009f8 <__aeabi_dcmpgt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f040 8295 	bne.w	800811c <_dtoa_r+0x97c>
 8007bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bfc:	f7f8 fede 	bl	80009bc <__aeabi_dcmplt>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f040 8289 	bne.w	8008118 <_dtoa_r+0x978>
 8007c06:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007c0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f2c0 8151 	blt.w	8007eb8 <_dtoa_r+0x718>
 8007c16:	f1bb 0f0e 	cmp.w	fp, #14
 8007c1a:	f300 814d 	bgt.w	8007eb8 <_dtoa_r+0x718>
 8007c1e:	4b45      	ldr	r3, [pc, #276]	; (8007d34 <_dtoa_r+0x594>)
 8007c20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f280 80da 	bge.w	8007de8 <_dtoa_r+0x648>
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f300 80d6 	bgt.w	8007de8 <_dtoa_r+0x648>
 8007c3c:	f040 826b 	bne.w	8008116 <_dtoa_r+0x976>
 8007c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c44:	2200      	movs	r2, #0
 8007c46:	4b40      	ldr	r3, [pc, #256]	; (8007d48 <_dtoa_r+0x5a8>)
 8007c48:	f7f8 fc46 	bl	80004d8 <__aeabi_dmul>
 8007c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c50:	f7f8 fec8 	bl	80009e4 <__aeabi_dcmpge>
 8007c54:	9c08      	ldr	r4, [sp, #32]
 8007c56:	4626      	mov	r6, r4
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f040 8241 	bne.w	80080e0 <_dtoa_r+0x940>
 8007c5e:	2331      	movs	r3, #49	; 0x31
 8007c60:	9f03      	ldr	r7, [sp, #12]
 8007c62:	f10b 0b01 	add.w	fp, fp, #1
 8007c66:	f807 3b01 	strb.w	r3, [r7], #1
 8007c6a:	e23d      	b.n	80080e8 <_dtoa_r+0x948>
 8007c6c:	07e2      	lsls	r2, r4, #31
 8007c6e:	d505      	bpl.n	8007c7c <_dtoa_r+0x4dc>
 8007c70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c74:	f7f8 fc30 	bl	80004d8 <__aeabi_dmul>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	3701      	adds	r7, #1
 8007c7c:	1064      	asrs	r4, r4, #1
 8007c7e:	3608      	adds	r6, #8
 8007c80:	e76d      	b.n	8007b5e <_dtoa_r+0x3be>
 8007c82:	2702      	movs	r7, #2
 8007c84:	e770      	b.n	8007b68 <_dtoa_r+0x3c8>
 8007c86:	46d8      	mov	r8, fp
 8007c88:	9c08      	ldr	r4, [sp, #32]
 8007c8a:	e78f      	b.n	8007bac <_dtoa_r+0x40c>
 8007c8c:	9903      	ldr	r1, [sp, #12]
 8007c8e:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <_dtoa_r+0x594>)
 8007c90:	4421      	add	r1, r4
 8007c92:	9112      	str	r1, [sp, #72]	; 0x48
 8007c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ca2:	2900      	cmp	r1, #0
 8007ca4:	d054      	beq.n	8007d50 <_dtoa_r+0x5b0>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	4928      	ldr	r1, [pc, #160]	; (8007d4c <_dtoa_r+0x5ac>)
 8007caa:	f7f8 fd3f 	bl	800072c <__aeabi_ddiv>
 8007cae:	463b      	mov	r3, r7
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	f7f8 fa59 	bl	8000168 <__aeabi_dsub>
 8007cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cba:	9f03      	ldr	r7, [sp, #12]
 8007cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc0:	f7f8 feba 	bl	8000a38 <__aeabi_d2iz>
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	f7f8 fb9d 	bl	8000404 <__aeabi_i2d>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd2:	f7f8 fa49 	bl	8000168 <__aeabi_dsub>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	3430      	adds	r4, #48	; 0x30
 8007cdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ce4:	f807 4b01 	strb.w	r4, [r7], #1
 8007ce8:	f7f8 fe68 	bl	80009bc <__aeabi_dcmplt>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d173      	bne.n	8007dd8 <_dtoa_r+0x638>
 8007cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	4911      	ldr	r1, [pc, #68]	; (8007d3c <_dtoa_r+0x59c>)
 8007cf8:	f7f8 fa36 	bl	8000168 <__aeabi_dsub>
 8007cfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d00:	f7f8 fe5c 	bl	80009bc <__aeabi_dcmplt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f040 80b6 	bne.w	8007e76 <_dtoa_r+0x6d6>
 8007d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d0c:	429f      	cmp	r7, r3
 8007d0e:	f43f af7a 	beq.w	8007c06 <_dtoa_r+0x466>
 8007d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d16:	2200      	movs	r2, #0
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <_dtoa_r+0x5a0>)
 8007d1a:	f7f8 fbdd 	bl	80004d8 <__aeabi_dmul>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <_dtoa_r+0x5a0>)
 8007d2a:	f7f8 fbd5 	bl	80004d8 <__aeabi_dmul>
 8007d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d32:	e7c3      	b.n	8007cbc <_dtoa_r+0x51c>
 8007d34:	0800b708 	.word	0x0800b708
 8007d38:	0800b6e0 	.word	0x0800b6e0
 8007d3c:	3ff00000 	.word	0x3ff00000
 8007d40:	40240000 	.word	0x40240000
 8007d44:	401c0000 	.word	0x401c0000
 8007d48:	40140000 	.word	0x40140000
 8007d4c:	3fe00000 	.word	0x3fe00000
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 fbc0 	bl	80004d8 <__aeabi_dmul>
 8007d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d5e:	9c03      	ldr	r4, [sp, #12]
 8007d60:	9314      	str	r3, [sp, #80]	; 0x50
 8007d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d66:	f7f8 fe67 	bl	8000a38 <__aeabi_d2iz>
 8007d6a:	9015      	str	r0, [sp, #84]	; 0x54
 8007d6c:	f7f8 fb4a 	bl	8000404 <__aeabi_i2d>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d78:	f7f8 f9f6 	bl	8000168 <__aeabi_dsub>
 8007d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d7e:	4606      	mov	r6, r0
 8007d80:	3330      	adds	r3, #48	; 0x30
 8007d82:	f804 3b01 	strb.w	r3, [r4], #1
 8007d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d88:	460f      	mov	r7, r1
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	d124      	bne.n	8007ddc <_dtoa_r+0x63c>
 8007d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d96:	4baf      	ldr	r3, [pc, #700]	; (8008054 <_dtoa_r+0x8b4>)
 8007d98:	f7f8 f9e8 	bl	800016c <__adddf3>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d163      	bne.n	8007e74 <_dtoa_r+0x6d4>
 8007dac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007db0:	2000      	movs	r0, #0
 8007db2:	49a8      	ldr	r1, [pc, #672]	; (8008054 <_dtoa_r+0x8b4>)
 8007db4:	f7f8 f9d8 	bl	8000168 <__aeabi_dsub>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f7f8 fdfc 	bl	80009bc <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f43f af1e 	beq.w	8007c06 <_dtoa_r+0x466>
 8007dca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007dcc:	1e7b      	subs	r3, r7, #1
 8007dce:	9314      	str	r3, [sp, #80]	; 0x50
 8007dd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d0f8      	beq.n	8007dca <_dtoa_r+0x62a>
 8007dd8:	46c3      	mov	fp, r8
 8007dda:	e03b      	b.n	8007e54 <_dtoa_r+0x6b4>
 8007ddc:	4b9e      	ldr	r3, [pc, #632]	; (8008058 <_dtoa_r+0x8b8>)
 8007dde:	f7f8 fb7b 	bl	80004d8 <__aeabi_dmul>
 8007de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de6:	e7bc      	b.n	8007d62 <_dtoa_r+0x5c2>
 8007de8:	9f03      	ldr	r7, [sp, #12]
 8007dea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 fc99 	bl	800072c <__aeabi_ddiv>
 8007dfa:	f7f8 fe1d 	bl	8000a38 <__aeabi_d2iz>
 8007dfe:	4604      	mov	r4, r0
 8007e00:	f7f8 fb00 	bl	8000404 <__aeabi_i2d>
 8007e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e08:	f7f8 fb66 	bl	80004d8 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 f9a8 	bl	8000168 <__aeabi_dsub>
 8007e18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007e1c:	f807 6b01 	strb.w	r6, [r7], #1
 8007e20:	9e03      	ldr	r6, [sp, #12]
 8007e22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007e26:	1bbe      	subs	r6, r7, r6
 8007e28:	45b4      	cmp	ip, r6
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	d136      	bne.n	8007e9e <_dtoa_r+0x6fe>
 8007e30:	f7f8 f99c 	bl	800016c <__adddf3>
 8007e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	f7f8 fddc 	bl	80009f8 <__aeabi_dcmpgt>
 8007e40:	bb58      	cbnz	r0, 8007e9a <_dtoa_r+0x6fa>
 8007e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 fdad 	bl	80009a8 <__aeabi_dcmpeq>
 8007e4e:	b108      	cbz	r0, 8007e54 <_dtoa_r+0x6b4>
 8007e50:	07e3      	lsls	r3, r4, #31
 8007e52:	d422      	bmi.n	8007e9a <_dtoa_r+0x6fa>
 8007e54:	4651      	mov	r1, sl
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 fbc2 	bl	80085e0 <_Bfree>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e60:	703b      	strb	r3, [r7, #0]
 8007e62:	f10b 0301 	add.w	r3, fp, #1
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f43f ace6 	beq.w	800783c <_dtoa_r+0x9c>
 8007e70:	601f      	str	r7, [r3, #0]
 8007e72:	e4e3      	b.n	800783c <_dtoa_r+0x9c>
 8007e74:	4627      	mov	r7, r4
 8007e76:	463b      	mov	r3, r7
 8007e78:	461f      	mov	r7, r3
 8007e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e7e:	2a39      	cmp	r2, #57	; 0x39
 8007e80:	d107      	bne.n	8007e92 <_dtoa_r+0x6f2>
 8007e82:	9a03      	ldr	r2, [sp, #12]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d1f7      	bne.n	8007e78 <_dtoa_r+0x6d8>
 8007e88:	2230      	movs	r2, #48	; 0x30
 8007e8a:	9903      	ldr	r1, [sp, #12]
 8007e8c:	f108 0801 	add.w	r8, r8, #1
 8007e90:	700a      	strb	r2, [r1, #0]
 8007e92:	781a      	ldrb	r2, [r3, #0]
 8007e94:	3201      	adds	r2, #1
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e79e      	b.n	8007dd8 <_dtoa_r+0x638>
 8007e9a:	46d8      	mov	r8, fp
 8007e9c:	e7eb      	b.n	8007e76 <_dtoa_r+0x6d6>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b6d      	ldr	r3, [pc, #436]	; (8008058 <_dtoa_r+0x8b8>)
 8007ea2:	f7f8 fb19 	bl	80004d8 <__aeabi_dmul>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4680      	mov	r8, r0
 8007eac:	4689      	mov	r9, r1
 8007eae:	f7f8 fd7b 	bl	80009a8 <__aeabi_dcmpeq>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d09b      	beq.n	8007dee <_dtoa_r+0x64e>
 8007eb6:	e7cd      	b.n	8007e54 <_dtoa_r+0x6b4>
 8007eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	f000 80c4 	beq.w	8008048 <_dtoa_r+0x8a8>
 8007ec0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ec2:	2a01      	cmp	r2, #1
 8007ec4:	f300 80a8 	bgt.w	8008018 <_dtoa_r+0x878>
 8007ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	f000 80a0 	beq.w	8008010 <_dtoa_r+0x870>
 8007ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ed4:	464f      	mov	r7, r9
 8007ed6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eda:	2101      	movs	r1, #1
 8007edc:	441a      	add	r2, r3
 8007ede:	4628      	mov	r0, r5
 8007ee0:	4499      	add	r9, r3
 8007ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee4:	f000 fc32 	bl	800874c <__i2b>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	b15f      	cbz	r7, 8007f04 <_dtoa_r+0x764>
 8007eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd08      	ble.n	8007f04 <_dtoa_r+0x764>
 8007ef2:	42bb      	cmp	r3, r7
 8007ef4:	bfa8      	it	ge
 8007ef6:	463b      	movge	r3, r7
 8007ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007efa:	eba9 0903 	sub.w	r9, r9, r3
 8007efe:	1aff      	subs	r7, r7, r3
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	9309      	str	r3, [sp, #36]	; 0x24
 8007f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f06:	b1f3      	cbz	r3, 8007f46 <_dtoa_r+0x7a6>
 8007f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 80a0 	beq.w	8008050 <_dtoa_r+0x8b0>
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	dd10      	ble.n	8007f36 <_dtoa_r+0x796>
 8007f14:	4631      	mov	r1, r6
 8007f16:	4622      	mov	r2, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 fcd5 	bl	80088c8 <__pow5mult>
 8007f1e:	4652      	mov	r2, sl
 8007f20:	4601      	mov	r1, r0
 8007f22:	4606      	mov	r6, r0
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 fc27 	bl	8008778 <__multiply>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	4651      	mov	r1, sl
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 fb56 	bl	80085e0 <_Bfree>
 8007f34:	46c2      	mov	sl, r8
 8007f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f38:	1b1a      	subs	r2, r3, r4
 8007f3a:	d004      	beq.n	8007f46 <_dtoa_r+0x7a6>
 8007f3c:	4651      	mov	r1, sl
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f000 fcc2 	bl	80088c8 <__pow5mult>
 8007f44:	4682      	mov	sl, r0
 8007f46:	2101      	movs	r1, #1
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 fbff 	bl	800874c <__i2b>
 8007f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f50:	4604      	mov	r4, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f340 8082 	ble.w	800805c <_dtoa_r+0x8bc>
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f000 fcb3 	bl	80088c8 <__pow5mult>
 8007f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f64:	4604      	mov	r4, r0
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	dd7b      	ble.n	8008062 <_dtoa_r+0x8c2>
 8007f6a:	f04f 0800 	mov.w	r8, #0
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f74:	6918      	ldr	r0, [r3, #16]
 8007f76:	f000 fb9b 	bl	80086b0 <__hi0bits>
 8007f7a:	f1c0 0020 	rsb	r0, r0, #32
 8007f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f80:	4418      	add	r0, r3
 8007f82:	f010 001f 	ands.w	r0, r0, #31
 8007f86:	f000 8092 	beq.w	80080ae <_dtoa_r+0x90e>
 8007f8a:	f1c0 0320 	rsb	r3, r0, #32
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	f340 8085 	ble.w	800809e <_dtoa_r+0x8fe>
 8007f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f96:	f1c0 001c 	rsb	r0, r0, #28
 8007f9a:	4403      	add	r3, r0
 8007f9c:	4481      	add	r9, r0
 8007f9e:	4407      	add	r7, r0
 8007fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa2:	f1b9 0f00 	cmp.w	r9, #0
 8007fa6:	dd05      	ble.n	8007fb4 <_dtoa_r+0x814>
 8007fa8:	4651      	mov	r1, sl
 8007faa:	464a      	mov	r2, r9
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 fce5 	bl	800897c <__lshift>
 8007fb2:	4682      	mov	sl, r0
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd05      	ble.n	8007fc6 <_dtoa_r+0x826>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 fcdc 	bl	800897c <__lshift>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d072      	beq.n	80080b2 <_dtoa_r+0x912>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4650      	mov	r0, sl
 8007fd0:	f000 fd40 	bl	8008a54 <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	da6c      	bge.n	80080b2 <_dtoa_r+0x912>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4651      	mov	r1, sl
 8007fdc:	220a      	movs	r2, #10
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fb20 	bl	8008624 <__multadd>
 8007fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 81ac 	beq.w	800834a <_dtoa_r+0xbaa>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 fb13 	bl	8008624 <__multadd>
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	4606      	mov	r6, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	f300 8093 	bgt.w	800812e <_dtoa_r+0x98e>
 8008008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800800a:	2b02      	cmp	r3, #2
 800800c:	dc59      	bgt.n	80080c2 <_dtoa_r+0x922>
 800800e:	e08e      	b.n	800812e <_dtoa_r+0x98e>
 8008010:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008012:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008016:	e75d      	b.n	8007ed4 <_dtoa_r+0x734>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	1e5c      	subs	r4, r3, #1
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	42a3      	cmp	r3, r4
 8008020:	bfbf      	itttt	lt
 8008022:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008024:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008026:	1ae3      	sublt	r3, r4, r3
 8008028:	18d2      	addlt	r2, r2, r3
 800802a:	bfa8      	it	ge
 800802c:	1b1c      	subge	r4, r3, r4
 800802e:	9b08      	ldr	r3, [sp, #32]
 8008030:	bfbe      	ittt	lt
 8008032:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008034:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008036:	2400      	movlt	r4, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfb5      	itete	lt
 800803c:	eba9 0703 	sublt.w	r7, r9, r3
 8008040:	464f      	movge	r7, r9
 8008042:	2300      	movlt	r3, #0
 8008044:	9b08      	ldrge	r3, [sp, #32]
 8008046:	e747      	b.n	8007ed8 <_dtoa_r+0x738>
 8008048:	464f      	mov	r7, r9
 800804a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800804c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800804e:	e74c      	b.n	8007eea <_dtoa_r+0x74a>
 8008050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008052:	e773      	b.n	8007f3c <_dtoa_r+0x79c>
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	40240000 	.word	0x40240000
 800805c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800805e:	2b01      	cmp	r3, #1
 8008060:	dc18      	bgt.n	8008094 <_dtoa_r+0x8f4>
 8008062:	9b04      	ldr	r3, [sp, #16]
 8008064:	b9b3      	cbnz	r3, 8008094 <_dtoa_r+0x8f4>
 8008066:	9b05      	ldr	r3, [sp, #20]
 8008068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800806c:	b993      	cbnz	r3, 8008094 <_dtoa_r+0x8f4>
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008074:	0d1b      	lsrs	r3, r3, #20
 8008076:	051b      	lsls	r3, r3, #20
 8008078:	b17b      	cbz	r3, 800809a <_dtoa_r+0x8fa>
 800807a:	f04f 0801 	mov.w	r8, #1
 800807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008080:	f109 0901 	add.w	r9, r9, #1
 8008084:	3301      	adds	r3, #1
 8008086:	9309      	str	r3, [sp, #36]	; 0x24
 8008088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	f47f af6f 	bne.w	8007f6e <_dtoa_r+0x7ce>
 8008090:	2001      	movs	r0, #1
 8008092:	e774      	b.n	8007f7e <_dtoa_r+0x7de>
 8008094:	f04f 0800 	mov.w	r8, #0
 8008098:	e7f6      	b.n	8008088 <_dtoa_r+0x8e8>
 800809a:	4698      	mov	r8, r3
 800809c:	e7f4      	b.n	8008088 <_dtoa_r+0x8e8>
 800809e:	d080      	beq.n	8007fa2 <_dtoa_r+0x802>
 80080a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a2:	331c      	adds	r3, #28
 80080a4:	441a      	add	r2, r3
 80080a6:	4499      	add	r9, r3
 80080a8:	441f      	add	r7, r3
 80080aa:	9209      	str	r2, [sp, #36]	; 0x24
 80080ac:	e779      	b.n	8007fa2 <_dtoa_r+0x802>
 80080ae:	4603      	mov	r3, r0
 80080b0:	e7f6      	b.n	80080a0 <_dtoa_r+0x900>
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc34      	bgt.n	8008122 <_dtoa_r+0x982>
 80080b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	dd31      	ble.n	8008122 <_dtoa_r+0x982>
 80080be:	9b08      	ldr	r3, [sp, #32]
 80080c0:	9306      	str	r3, [sp, #24]
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	b963      	cbnz	r3, 80080e0 <_dtoa_r+0x940>
 80080c6:	4621      	mov	r1, r4
 80080c8:	2205      	movs	r2, #5
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 faaa 	bl	8008624 <__multadd>
 80080d0:	4601      	mov	r1, r0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4650      	mov	r0, sl
 80080d6:	f000 fcbd 	bl	8008a54 <__mcmp>
 80080da:	2800      	cmp	r0, #0
 80080dc:	f73f adbf 	bgt.w	8007c5e <_dtoa_r+0x4be>
 80080e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080e2:	9f03      	ldr	r7, [sp, #12]
 80080e4:	ea6f 0b03 	mvn.w	fp, r3
 80080e8:	f04f 0800 	mov.w	r8, #0
 80080ec:	4621      	mov	r1, r4
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 fa76 	bl	80085e0 <_Bfree>
 80080f4:	2e00      	cmp	r6, #0
 80080f6:	f43f aead 	beq.w	8007e54 <_dtoa_r+0x6b4>
 80080fa:	f1b8 0f00 	cmp.w	r8, #0
 80080fe:	d005      	beq.n	800810c <_dtoa_r+0x96c>
 8008100:	45b0      	cmp	r8, r6
 8008102:	d003      	beq.n	800810c <_dtoa_r+0x96c>
 8008104:	4641      	mov	r1, r8
 8008106:	4628      	mov	r0, r5
 8008108:	f000 fa6a 	bl	80085e0 <_Bfree>
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	f000 fa66 	bl	80085e0 <_Bfree>
 8008114:	e69e      	b.n	8007e54 <_dtoa_r+0x6b4>
 8008116:	2400      	movs	r4, #0
 8008118:	4626      	mov	r6, r4
 800811a:	e7e1      	b.n	80080e0 <_dtoa_r+0x940>
 800811c:	46c3      	mov	fp, r8
 800811e:	4626      	mov	r6, r4
 8008120:	e59d      	b.n	8007c5e <_dtoa_r+0x4be>
 8008122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80c8 	beq.w	80082ba <_dtoa_r+0xb1a>
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	9306      	str	r3, [sp, #24]
 800812e:	2f00      	cmp	r7, #0
 8008130:	dd05      	ble.n	800813e <_dtoa_r+0x99e>
 8008132:	4631      	mov	r1, r6
 8008134:	463a      	mov	r2, r7
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fc20 	bl	800897c <__lshift>
 800813c:	4606      	mov	r6, r0
 800813e:	f1b8 0f00 	cmp.w	r8, #0
 8008142:	d05b      	beq.n	80081fc <_dtoa_r+0xa5c>
 8008144:	4628      	mov	r0, r5
 8008146:	6871      	ldr	r1, [r6, #4]
 8008148:	f000 fa0a 	bl	8008560 <_Balloc>
 800814c:	4607      	mov	r7, r0
 800814e:	b928      	cbnz	r0, 800815c <_dtoa_r+0x9bc>
 8008150:	4602      	mov	r2, r0
 8008152:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008156:	4b81      	ldr	r3, [pc, #516]	; (800835c <_dtoa_r+0xbbc>)
 8008158:	f7ff bb36 	b.w	80077c8 <_dtoa_r+0x28>
 800815c:	6932      	ldr	r2, [r6, #16]
 800815e:	f106 010c 	add.w	r1, r6, #12
 8008162:	3202      	adds	r2, #2
 8008164:	0092      	lsls	r2, r2, #2
 8008166:	300c      	adds	r0, #12
 8008168:	f7ff fa81 	bl	800766e <memcpy>
 800816c:	2201      	movs	r2, #1
 800816e:	4639      	mov	r1, r7
 8008170:	4628      	mov	r0, r5
 8008172:	f000 fc03 	bl	800897c <__lshift>
 8008176:	46b0      	mov	r8, r6
 8008178:	4606      	mov	r6, r0
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	9a03      	ldr	r2, [sp, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	9308      	str	r3, [sp, #32]
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	4413      	add	r3, r2
 8008186:	930b      	str	r3, [sp, #44]	; 0x2c
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	4621      	mov	r1, r4
 8008194:	3b01      	subs	r3, #1
 8008196:	4650      	mov	r0, sl
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	f7ff fa76 	bl	800768a <quorem>
 800819e:	4641      	mov	r1, r8
 80081a0:	9006      	str	r0, [sp, #24]
 80081a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081a6:	4650      	mov	r0, sl
 80081a8:	f000 fc54 	bl	8008a54 <__mcmp>
 80081ac:	4632      	mov	r2, r6
 80081ae:	9009      	str	r0, [sp, #36]	; 0x24
 80081b0:	4621      	mov	r1, r4
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 fc6a 	bl	8008a8c <__mdiff>
 80081b8:	68c2      	ldr	r2, [r0, #12]
 80081ba:	4607      	mov	r7, r0
 80081bc:	bb02      	cbnz	r2, 8008200 <_dtoa_r+0xa60>
 80081be:	4601      	mov	r1, r0
 80081c0:	4650      	mov	r0, sl
 80081c2:	f000 fc47 	bl	8008a54 <__mcmp>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4639      	mov	r1, r7
 80081ca:	4628      	mov	r0, r5
 80081cc:	920c      	str	r2, [sp, #48]	; 0x30
 80081ce:	f000 fa07 	bl	80085e0 <_Bfree>
 80081d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d6:	9f08      	ldr	r7, [sp, #32]
 80081d8:	ea43 0102 	orr.w	r1, r3, r2
 80081dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081de:	4319      	orrs	r1, r3
 80081e0:	d110      	bne.n	8008204 <_dtoa_r+0xa64>
 80081e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081e6:	d029      	beq.n	800823c <_dtoa_r+0xa9c>
 80081e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dd02      	ble.n	80081f4 <_dtoa_r+0xa54>
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	f883 9000 	strb.w	r9, [r3]
 80081fa:	e777      	b.n	80080ec <_dtoa_r+0x94c>
 80081fc:	4630      	mov	r0, r6
 80081fe:	e7ba      	b.n	8008176 <_dtoa_r+0x9d6>
 8008200:	2201      	movs	r2, #1
 8008202:	e7e1      	b.n	80081c8 <_dtoa_r+0xa28>
 8008204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	db04      	blt.n	8008214 <_dtoa_r+0xa74>
 800820a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800820c:	430b      	orrs	r3, r1
 800820e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008210:	430b      	orrs	r3, r1
 8008212:	d120      	bne.n	8008256 <_dtoa_r+0xab6>
 8008214:	2a00      	cmp	r2, #0
 8008216:	dded      	ble.n	80081f4 <_dtoa_r+0xa54>
 8008218:	4651      	mov	r1, sl
 800821a:	2201      	movs	r2, #1
 800821c:	4628      	mov	r0, r5
 800821e:	f000 fbad 	bl	800897c <__lshift>
 8008222:	4621      	mov	r1, r4
 8008224:	4682      	mov	sl, r0
 8008226:	f000 fc15 	bl	8008a54 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	dc03      	bgt.n	8008236 <_dtoa_r+0xa96>
 800822e:	d1e1      	bne.n	80081f4 <_dtoa_r+0xa54>
 8008230:	f019 0f01 	tst.w	r9, #1
 8008234:	d0de      	beq.n	80081f4 <_dtoa_r+0xa54>
 8008236:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800823a:	d1d8      	bne.n	80081ee <_dtoa_r+0xa4e>
 800823c:	2339      	movs	r3, #57	; 0x39
 800823e:	9a04      	ldr	r2, [sp, #16]
 8008240:	7013      	strb	r3, [r2, #0]
 8008242:	463b      	mov	r3, r7
 8008244:	461f      	mov	r7, r3
 8008246:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800824a:	3b01      	subs	r3, #1
 800824c:	2a39      	cmp	r2, #57	; 0x39
 800824e:	d06b      	beq.n	8008328 <_dtoa_r+0xb88>
 8008250:	3201      	adds	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	e74a      	b.n	80080ec <_dtoa_r+0x94c>
 8008256:	2a00      	cmp	r2, #0
 8008258:	dd07      	ble.n	800826a <_dtoa_r+0xaca>
 800825a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800825e:	d0ed      	beq.n	800823c <_dtoa_r+0xa9c>
 8008260:	9a04      	ldr	r2, [sp, #16]
 8008262:	f109 0301 	add.w	r3, r9, #1
 8008266:	7013      	strb	r3, [r2, #0]
 8008268:	e740      	b.n	80080ec <_dtoa_r+0x94c>
 800826a:	9b08      	ldr	r3, [sp, #32]
 800826c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800826e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008272:	4293      	cmp	r3, r2
 8008274:	d042      	beq.n	80082fc <_dtoa_r+0xb5c>
 8008276:	4651      	mov	r1, sl
 8008278:	2300      	movs	r3, #0
 800827a:	220a      	movs	r2, #10
 800827c:	4628      	mov	r0, r5
 800827e:	f000 f9d1 	bl	8008624 <__multadd>
 8008282:	45b0      	cmp	r8, r6
 8008284:	4682      	mov	sl, r0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	f04f 020a 	mov.w	r2, #10
 800828e:	4641      	mov	r1, r8
 8008290:	4628      	mov	r0, r5
 8008292:	d107      	bne.n	80082a4 <_dtoa_r+0xb04>
 8008294:	f000 f9c6 	bl	8008624 <__multadd>
 8008298:	4680      	mov	r8, r0
 800829a:	4606      	mov	r6, r0
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	3301      	adds	r3, #1
 80082a0:	9308      	str	r3, [sp, #32]
 80082a2:	e775      	b.n	8008190 <_dtoa_r+0x9f0>
 80082a4:	f000 f9be 	bl	8008624 <__multadd>
 80082a8:	4631      	mov	r1, r6
 80082aa:	4680      	mov	r8, r0
 80082ac:	2300      	movs	r3, #0
 80082ae:	220a      	movs	r2, #10
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f9b7 	bl	8008624 <__multadd>
 80082b6:	4606      	mov	r6, r0
 80082b8:	e7f0      	b.n	800829c <_dtoa_r+0xafc>
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	9306      	str	r3, [sp, #24]
 80082be:	9f03      	ldr	r7, [sp, #12]
 80082c0:	4621      	mov	r1, r4
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7ff f9e1 	bl	800768a <quorem>
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082ce:	f807 9b01 	strb.w	r9, [r7], #1
 80082d2:	1afa      	subs	r2, r7, r3
 80082d4:	9b06      	ldr	r3, [sp, #24]
 80082d6:	4293      	cmp	r3, r2
 80082d8:	dd07      	ble.n	80082ea <_dtoa_r+0xb4a>
 80082da:	4651      	mov	r1, sl
 80082dc:	2300      	movs	r3, #0
 80082de:	220a      	movs	r2, #10
 80082e0:	4628      	mov	r0, r5
 80082e2:	f000 f99f 	bl	8008624 <__multadd>
 80082e6:	4682      	mov	sl, r0
 80082e8:	e7ea      	b.n	80082c0 <_dtoa_r+0xb20>
 80082ea:	9b06      	ldr	r3, [sp, #24]
 80082ec:	f04f 0800 	mov.w	r8, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfcc      	ite	gt
 80082f4:	461f      	movgt	r7, r3
 80082f6:	2701      	movle	r7, #1
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	441f      	add	r7, r3
 80082fc:	4651      	mov	r1, sl
 80082fe:	2201      	movs	r2, #1
 8008300:	4628      	mov	r0, r5
 8008302:	f000 fb3b 	bl	800897c <__lshift>
 8008306:	4621      	mov	r1, r4
 8008308:	4682      	mov	sl, r0
 800830a:	f000 fba3 	bl	8008a54 <__mcmp>
 800830e:	2800      	cmp	r0, #0
 8008310:	dc97      	bgt.n	8008242 <_dtoa_r+0xaa2>
 8008312:	d102      	bne.n	800831a <_dtoa_r+0xb7a>
 8008314:	f019 0f01 	tst.w	r9, #1
 8008318:	d193      	bne.n	8008242 <_dtoa_r+0xaa2>
 800831a:	463b      	mov	r3, r7
 800831c:	461f      	mov	r7, r3
 800831e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008322:	2a30      	cmp	r2, #48	; 0x30
 8008324:	d0fa      	beq.n	800831c <_dtoa_r+0xb7c>
 8008326:	e6e1      	b.n	80080ec <_dtoa_r+0x94c>
 8008328:	9a03      	ldr	r2, [sp, #12]
 800832a:	429a      	cmp	r2, r3
 800832c:	d18a      	bne.n	8008244 <_dtoa_r+0xaa4>
 800832e:	2331      	movs	r3, #49	; 0x31
 8008330:	f10b 0b01 	add.w	fp, fp, #1
 8008334:	e797      	b.n	8008266 <_dtoa_r+0xac6>
 8008336:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <_dtoa_r+0xbc0>)
 8008338:	f7ff ba9f 	b.w	800787a <_dtoa_r+0xda>
 800833c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800833e:	2b00      	cmp	r3, #0
 8008340:	f47f aa77 	bne.w	8007832 <_dtoa_r+0x92>
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <_dtoa_r+0xbc4>)
 8008346:	f7ff ba98 	b.w	800787a <_dtoa_r+0xda>
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	dcb6      	bgt.n	80082be <_dtoa_r+0xb1e>
 8008350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008352:	2b02      	cmp	r3, #2
 8008354:	f73f aeb5 	bgt.w	80080c2 <_dtoa_r+0x922>
 8008358:	e7b1      	b.n	80082be <_dtoa_r+0xb1e>
 800835a:	bf00      	nop
 800835c:	0800b676 	.word	0x0800b676
 8008360:	0800b5d6 	.word	0x0800b5d6
 8008364:	0800b5fa 	.word	0x0800b5fa

08008368 <_free_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4605      	mov	r5, r0
 800836c:	2900      	cmp	r1, #0
 800836e:	d040      	beq.n	80083f2 <_free_r+0x8a>
 8008370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008374:	1f0c      	subs	r4, r1, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfb8      	it	lt
 800837a:	18e4      	addlt	r4, r4, r3
 800837c:	f000 f8e4 	bl	8008548 <__malloc_lock>
 8008380:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <_free_r+0x8c>)
 8008382:	6813      	ldr	r3, [r2, #0]
 8008384:	b933      	cbnz	r3, 8008394 <_free_r+0x2c>
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	6014      	str	r4, [r2, #0]
 800838a:	4628      	mov	r0, r5
 800838c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008390:	f000 b8e0 	b.w	8008554 <__malloc_unlock>
 8008394:	42a3      	cmp	r3, r4
 8008396:	d908      	bls.n	80083aa <_free_r+0x42>
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	1821      	adds	r1, r4, r0
 800839c:	428b      	cmp	r3, r1
 800839e:	bf01      	itttt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	1809      	addeq	r1, r1, r0
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	e7ed      	b.n	8008386 <_free_r+0x1e>
 80083aa:	461a      	mov	r2, r3
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b10b      	cbz	r3, 80083b4 <_free_r+0x4c>
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x42>
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	1850      	adds	r0, r2, r1
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x6c>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	4401      	add	r1, r0
 80083c0:	1850      	adds	r0, r2, r1
 80083c2:	4283      	cmp	r3, r0
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	d1e0      	bne.n	800838a <_free_r+0x22>
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	4408      	add	r0, r1
 80083ce:	6010      	str	r0, [r2, #0]
 80083d0:	6053      	str	r3, [r2, #4]
 80083d2:	e7da      	b.n	800838a <_free_r+0x22>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x74>
 80083d6:	230c      	movs	r3, #12
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	e7d6      	b.n	800838a <_free_r+0x22>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	1821      	adds	r1, r4, r0
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf01      	itttt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	1809      	addeq	r1, r1, r0
 80083ea:	6021      	streq	r1, [r4, #0]
 80083ec:	6063      	str	r3, [r4, #4]
 80083ee:	6054      	str	r4, [r2, #4]
 80083f0:	e7cb      	b.n	800838a <_free_r+0x22>
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	20001084 	.word	0x20001084

080083f8 <malloc>:
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <malloc+0xc>)
 80083fa:	4601      	mov	r1, r0
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f000 b823 	b.w	8008448 <_malloc_r>
 8008402:	bf00      	nop
 8008404:	20000090 	.word	0x20000090

08008408 <sbrk_aligned>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4e0e      	ldr	r6, [pc, #56]	; (8008444 <sbrk_aligned+0x3c>)
 800840c:	460c      	mov	r4, r1
 800840e:	6831      	ldr	r1, [r6, #0]
 8008410:	4605      	mov	r5, r0
 8008412:	b911      	cbnz	r1, 800841a <sbrk_aligned+0x12>
 8008414:	f000 fe1e 	bl	8009054 <_sbrk_r>
 8008418:	6030      	str	r0, [r6, #0]
 800841a:	4621      	mov	r1, r4
 800841c:	4628      	mov	r0, r5
 800841e:	f000 fe19 	bl	8009054 <_sbrk_r>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	d00a      	beq.n	800843c <sbrk_aligned+0x34>
 8008426:	1cc4      	adds	r4, r0, #3
 8008428:	f024 0403 	bic.w	r4, r4, #3
 800842c:	42a0      	cmp	r0, r4
 800842e:	d007      	beq.n	8008440 <sbrk_aligned+0x38>
 8008430:	1a21      	subs	r1, r4, r0
 8008432:	4628      	mov	r0, r5
 8008434:	f000 fe0e 	bl	8009054 <_sbrk_r>
 8008438:	3001      	adds	r0, #1
 800843a:	d101      	bne.n	8008440 <sbrk_aligned+0x38>
 800843c:	f04f 34ff 	mov.w	r4, #4294967295
 8008440:	4620      	mov	r0, r4
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	20001088 	.word	0x20001088

08008448 <_malloc_r>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	1ccd      	adds	r5, r1, #3
 800844e:	f025 0503 	bic.w	r5, r5, #3
 8008452:	3508      	adds	r5, #8
 8008454:	2d0c      	cmp	r5, #12
 8008456:	bf38      	it	cc
 8008458:	250c      	movcc	r5, #12
 800845a:	2d00      	cmp	r5, #0
 800845c:	4607      	mov	r7, r0
 800845e:	db01      	blt.n	8008464 <_malloc_r+0x1c>
 8008460:	42a9      	cmp	r1, r5
 8008462:	d905      	bls.n	8008470 <_malloc_r+0x28>
 8008464:	230c      	movs	r3, #12
 8008466:	2600      	movs	r6, #0
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	4630      	mov	r0, r6
 800846c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008544 <_malloc_r+0xfc>
 8008474:	f000 f868 	bl	8008548 <__malloc_lock>
 8008478:	f8d8 3000 	ldr.w	r3, [r8]
 800847c:	461c      	mov	r4, r3
 800847e:	bb5c      	cbnz	r4, 80084d8 <_malloc_r+0x90>
 8008480:	4629      	mov	r1, r5
 8008482:	4638      	mov	r0, r7
 8008484:	f7ff ffc0 	bl	8008408 <sbrk_aligned>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	4604      	mov	r4, r0
 800848c:	d155      	bne.n	800853a <_malloc_r+0xf2>
 800848e:	f8d8 4000 	ldr.w	r4, [r8]
 8008492:	4626      	mov	r6, r4
 8008494:	2e00      	cmp	r6, #0
 8008496:	d145      	bne.n	8008524 <_malloc_r+0xdc>
 8008498:	2c00      	cmp	r4, #0
 800849a:	d048      	beq.n	800852e <_malloc_r+0xe6>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	4631      	mov	r1, r6
 80084a0:	4638      	mov	r0, r7
 80084a2:	eb04 0903 	add.w	r9, r4, r3
 80084a6:	f000 fdd5 	bl	8009054 <_sbrk_r>
 80084aa:	4581      	cmp	r9, r0
 80084ac:	d13f      	bne.n	800852e <_malloc_r+0xe6>
 80084ae:	6821      	ldr	r1, [r4, #0]
 80084b0:	4638      	mov	r0, r7
 80084b2:	1a6d      	subs	r5, r5, r1
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7ff ffa7 	bl	8008408 <sbrk_aligned>
 80084ba:	3001      	adds	r0, #1
 80084bc:	d037      	beq.n	800852e <_malloc_r+0xe6>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	442b      	add	r3, r5
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	f8d8 3000 	ldr.w	r3, [r8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d038      	beq.n	800853e <_malloc_r+0xf6>
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	42a2      	cmp	r2, r4
 80084d0:	d12b      	bne.n	800852a <_malloc_r+0xe2>
 80084d2:	2200      	movs	r2, #0
 80084d4:	605a      	str	r2, [r3, #4]
 80084d6:	e00f      	b.n	80084f8 <_malloc_r+0xb0>
 80084d8:	6822      	ldr	r2, [r4, #0]
 80084da:	1b52      	subs	r2, r2, r5
 80084dc:	d41f      	bmi.n	800851e <_malloc_r+0xd6>
 80084de:	2a0b      	cmp	r2, #11
 80084e0:	d917      	bls.n	8008512 <_malloc_r+0xca>
 80084e2:	1961      	adds	r1, r4, r5
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	6025      	str	r5, [r4, #0]
 80084e8:	bf18      	it	ne
 80084ea:	6059      	strne	r1, [r3, #4]
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	bf08      	it	eq
 80084f0:	f8c8 1000 	streq.w	r1, [r8]
 80084f4:	5162      	str	r2, [r4, r5]
 80084f6:	604b      	str	r3, [r1, #4]
 80084f8:	4638      	mov	r0, r7
 80084fa:	f104 060b 	add.w	r6, r4, #11
 80084fe:	f000 f829 	bl	8008554 <__malloc_unlock>
 8008502:	f026 0607 	bic.w	r6, r6, #7
 8008506:	1d23      	adds	r3, r4, #4
 8008508:	1af2      	subs	r2, r6, r3
 800850a:	d0ae      	beq.n	800846a <_malloc_r+0x22>
 800850c:	1b9b      	subs	r3, r3, r6
 800850e:	50a3      	str	r3, [r4, r2]
 8008510:	e7ab      	b.n	800846a <_malloc_r+0x22>
 8008512:	42a3      	cmp	r3, r4
 8008514:	6862      	ldr	r2, [r4, #4]
 8008516:	d1dd      	bne.n	80084d4 <_malloc_r+0x8c>
 8008518:	f8c8 2000 	str.w	r2, [r8]
 800851c:	e7ec      	b.n	80084f8 <_malloc_r+0xb0>
 800851e:	4623      	mov	r3, r4
 8008520:	6864      	ldr	r4, [r4, #4]
 8008522:	e7ac      	b.n	800847e <_malloc_r+0x36>
 8008524:	4634      	mov	r4, r6
 8008526:	6876      	ldr	r6, [r6, #4]
 8008528:	e7b4      	b.n	8008494 <_malloc_r+0x4c>
 800852a:	4613      	mov	r3, r2
 800852c:	e7cc      	b.n	80084c8 <_malloc_r+0x80>
 800852e:	230c      	movs	r3, #12
 8008530:	4638      	mov	r0, r7
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	f000 f80e 	bl	8008554 <__malloc_unlock>
 8008538:	e797      	b.n	800846a <_malloc_r+0x22>
 800853a:	6025      	str	r5, [r4, #0]
 800853c:	e7dc      	b.n	80084f8 <_malloc_r+0xb0>
 800853e:	605b      	str	r3, [r3, #4]
 8008540:	deff      	udf	#255	; 0xff
 8008542:	bf00      	nop
 8008544:	20001084 	.word	0x20001084

08008548 <__malloc_lock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_lock+0x8>)
 800854a:	f7ff b880 	b.w	800764e <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	20001080 	.word	0x20001080

08008554 <__malloc_unlock>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__malloc_unlock+0x8>)
 8008556:	f7ff b87b 	b.w	8007650 <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	20001080 	.word	0x20001080

08008560 <_Balloc>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	69c6      	ldr	r6, [r0, #28]
 8008564:	4604      	mov	r4, r0
 8008566:	460d      	mov	r5, r1
 8008568:	b976      	cbnz	r6, 8008588 <_Balloc+0x28>
 800856a:	2010      	movs	r0, #16
 800856c:	f7ff ff44 	bl	80083f8 <malloc>
 8008570:	4602      	mov	r2, r0
 8008572:	61e0      	str	r0, [r4, #28]
 8008574:	b920      	cbnz	r0, 8008580 <_Balloc+0x20>
 8008576:	216b      	movs	r1, #107	; 0x6b
 8008578:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <_Balloc+0x78>)
 800857a:	4818      	ldr	r0, [pc, #96]	; (80085dc <_Balloc+0x7c>)
 800857c:	f000 fd7a 	bl	8009074 <__assert_func>
 8008580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008584:	6006      	str	r6, [r0, #0]
 8008586:	60c6      	str	r6, [r0, #12]
 8008588:	69e6      	ldr	r6, [r4, #28]
 800858a:	68f3      	ldr	r3, [r6, #12]
 800858c:	b183      	cbz	r3, 80085b0 <_Balloc+0x50>
 800858e:	69e3      	ldr	r3, [r4, #28]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008596:	b9b8      	cbnz	r0, 80085c8 <_Balloc+0x68>
 8008598:	2101      	movs	r1, #1
 800859a:	fa01 f605 	lsl.w	r6, r1, r5
 800859e:	1d72      	adds	r2, r6, #5
 80085a0:	4620      	mov	r0, r4
 80085a2:	0092      	lsls	r2, r2, #2
 80085a4:	f000 fd84 	bl	80090b0 <_calloc_r>
 80085a8:	b160      	cbz	r0, 80085c4 <_Balloc+0x64>
 80085aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ae:	e00e      	b.n	80085ce <_Balloc+0x6e>
 80085b0:	2221      	movs	r2, #33	; 0x21
 80085b2:	2104      	movs	r1, #4
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fd7b 	bl	80090b0 <_calloc_r>
 80085ba:	69e3      	ldr	r3, [r4, #28]
 80085bc:	60f0      	str	r0, [r6, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e4      	bne.n	800858e <_Balloc+0x2e>
 80085c4:	2000      	movs	r0, #0
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	6802      	ldr	r2, [r0, #0]
 80085ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ce:	2300      	movs	r3, #0
 80085d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d4:	e7f7      	b.n	80085c6 <_Balloc+0x66>
 80085d6:	bf00      	nop
 80085d8:	0800b607 	.word	0x0800b607
 80085dc:	0800b687 	.word	0x0800b687

080085e0 <_Bfree>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	69c6      	ldr	r6, [r0, #28]
 80085e4:	4605      	mov	r5, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b976      	cbnz	r6, 8008608 <_Bfree+0x28>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f7ff ff04 	bl	80083f8 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	61e8      	str	r0, [r5, #28]
 80085f4:	b920      	cbnz	r0, 8008600 <_Bfree+0x20>
 80085f6:	218f      	movs	r1, #143	; 0x8f
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <_Bfree+0x3c>)
 80085fa:	4809      	ldr	r0, [pc, #36]	; (8008620 <_Bfree+0x40>)
 80085fc:	f000 fd3a 	bl	8009074 <__assert_func>
 8008600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008604:	6006      	str	r6, [r0, #0]
 8008606:	60c6      	str	r6, [r0, #12]
 8008608:	b13c      	cbz	r4, 800861a <_Bfree+0x3a>
 800860a:	69eb      	ldr	r3, [r5, #28]
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008614:	6021      	str	r1, [r4, #0]
 8008616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	0800b607 	.word	0x0800b607
 8008620:	0800b687 	.word	0x0800b687

08008624 <__multadd>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	4607      	mov	r7, r0
 800862a:	460c      	mov	r4, r1
 800862c:	461e      	mov	r6, r3
 800862e:	2000      	movs	r0, #0
 8008630:	690d      	ldr	r5, [r1, #16]
 8008632:	f101 0c14 	add.w	ip, r1, #20
 8008636:	f8dc 3000 	ldr.w	r3, [ip]
 800863a:	3001      	adds	r0, #1
 800863c:	b299      	uxth	r1, r3
 800863e:	fb02 6101 	mla	r1, r2, r1, r6
 8008642:	0c1e      	lsrs	r6, r3, #16
 8008644:	0c0b      	lsrs	r3, r1, #16
 8008646:	fb02 3306 	mla	r3, r2, r6, r3
 800864a:	b289      	uxth	r1, r1
 800864c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008650:	4285      	cmp	r5, r0
 8008652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008656:	f84c 1b04 	str.w	r1, [ip], #4
 800865a:	dcec      	bgt.n	8008636 <__multadd+0x12>
 800865c:	b30e      	cbz	r6, 80086a2 <__multadd+0x7e>
 800865e:	68a3      	ldr	r3, [r4, #8]
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc19      	bgt.n	8008698 <__multadd+0x74>
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	4638      	mov	r0, r7
 8008668:	3101      	adds	r1, #1
 800866a:	f7ff ff79 	bl	8008560 <_Balloc>
 800866e:	4680      	mov	r8, r0
 8008670:	b928      	cbnz	r0, 800867e <__multadd+0x5a>
 8008672:	4602      	mov	r2, r0
 8008674:	21ba      	movs	r1, #186	; 0xba
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <__multadd+0x84>)
 8008678:	480c      	ldr	r0, [pc, #48]	; (80086ac <__multadd+0x88>)
 800867a:	f000 fcfb 	bl	8009074 <__assert_func>
 800867e:	6922      	ldr	r2, [r4, #16]
 8008680:	f104 010c 	add.w	r1, r4, #12
 8008684:	3202      	adds	r2, #2
 8008686:	0092      	lsls	r2, r2, #2
 8008688:	300c      	adds	r0, #12
 800868a:	f7fe fff0 	bl	800766e <memcpy>
 800868e:	4621      	mov	r1, r4
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ffa5 	bl	80085e0 <_Bfree>
 8008696:	4644      	mov	r4, r8
 8008698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800869c:	3501      	adds	r5, #1
 800869e:	615e      	str	r6, [r3, #20]
 80086a0:	6125      	str	r5, [r4, #16]
 80086a2:	4620      	mov	r0, r4
 80086a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a8:	0800b676 	.word	0x0800b676
 80086ac:	0800b687 	.word	0x0800b687

080086b0 <__hi0bits>:
 80086b0:	0c02      	lsrs	r2, r0, #16
 80086b2:	0412      	lsls	r2, r2, #16
 80086b4:	4603      	mov	r3, r0
 80086b6:	b9ca      	cbnz	r2, 80086ec <__hi0bits+0x3c>
 80086b8:	0403      	lsls	r3, r0, #16
 80086ba:	2010      	movs	r0, #16
 80086bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80086c0:	bf04      	itt	eq
 80086c2:	021b      	lsleq	r3, r3, #8
 80086c4:	3008      	addeq	r0, #8
 80086c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80086ca:	bf04      	itt	eq
 80086cc:	011b      	lsleq	r3, r3, #4
 80086ce:	3004      	addeq	r0, #4
 80086d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086d4:	bf04      	itt	eq
 80086d6:	009b      	lsleq	r3, r3, #2
 80086d8:	3002      	addeq	r0, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	db05      	blt.n	80086ea <__hi0bits+0x3a>
 80086de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80086e2:	f100 0001 	add.w	r0, r0, #1
 80086e6:	bf08      	it	eq
 80086e8:	2020      	moveq	r0, #32
 80086ea:	4770      	bx	lr
 80086ec:	2000      	movs	r0, #0
 80086ee:	e7e5      	b.n	80086bc <__hi0bits+0xc>

080086f0 <__lo0bits>:
 80086f0:	6803      	ldr	r3, [r0, #0]
 80086f2:	4602      	mov	r2, r0
 80086f4:	f013 0007 	ands.w	r0, r3, #7
 80086f8:	d00b      	beq.n	8008712 <__lo0bits+0x22>
 80086fa:	07d9      	lsls	r1, r3, #31
 80086fc:	d421      	bmi.n	8008742 <__lo0bits+0x52>
 80086fe:	0798      	lsls	r0, r3, #30
 8008700:	bf49      	itett	mi
 8008702:	085b      	lsrmi	r3, r3, #1
 8008704:	089b      	lsrpl	r3, r3, #2
 8008706:	2001      	movmi	r0, #1
 8008708:	6013      	strmi	r3, [r2, #0]
 800870a:	bf5c      	itt	pl
 800870c:	2002      	movpl	r0, #2
 800870e:	6013      	strpl	r3, [r2, #0]
 8008710:	4770      	bx	lr
 8008712:	b299      	uxth	r1, r3
 8008714:	b909      	cbnz	r1, 800871a <__lo0bits+0x2a>
 8008716:	2010      	movs	r0, #16
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	b2d9      	uxtb	r1, r3
 800871c:	b909      	cbnz	r1, 8008722 <__lo0bits+0x32>
 800871e:	3008      	adds	r0, #8
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	0719      	lsls	r1, r3, #28
 8008724:	bf04      	itt	eq
 8008726:	091b      	lsreq	r3, r3, #4
 8008728:	3004      	addeq	r0, #4
 800872a:	0799      	lsls	r1, r3, #30
 800872c:	bf04      	itt	eq
 800872e:	089b      	lsreq	r3, r3, #2
 8008730:	3002      	addeq	r0, #2
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d403      	bmi.n	800873e <__lo0bits+0x4e>
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	f100 0001 	add.w	r0, r0, #1
 800873c:	d003      	beq.n	8008746 <__lo0bits+0x56>
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	4770      	bx	lr
 8008742:	2000      	movs	r0, #0
 8008744:	4770      	bx	lr
 8008746:	2020      	movs	r0, #32
 8008748:	4770      	bx	lr
	...

0800874c <__i2b>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	2101      	movs	r1, #1
 8008752:	f7ff ff05 	bl	8008560 <_Balloc>
 8008756:	4602      	mov	r2, r0
 8008758:	b928      	cbnz	r0, 8008766 <__i2b+0x1a>
 800875a:	f240 1145 	movw	r1, #325	; 0x145
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <__i2b+0x24>)
 8008760:	4804      	ldr	r0, [pc, #16]	; (8008774 <__i2b+0x28>)
 8008762:	f000 fc87 	bl	8009074 <__assert_func>
 8008766:	2301      	movs	r3, #1
 8008768:	6144      	str	r4, [r0, #20]
 800876a:	6103      	str	r3, [r0, #16]
 800876c:	bd10      	pop	{r4, pc}
 800876e:	bf00      	nop
 8008770:	0800b676 	.word	0x0800b676
 8008774:	0800b687 	.word	0x0800b687

08008778 <__multiply>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	4691      	mov	r9, r2
 800877e:	690a      	ldr	r2, [r1, #16]
 8008780:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008784:	460c      	mov	r4, r1
 8008786:	429a      	cmp	r2, r3
 8008788:	bfbe      	ittt	lt
 800878a:	460b      	movlt	r3, r1
 800878c:	464c      	movlt	r4, r9
 800878e:	4699      	movlt	r9, r3
 8008790:	6927      	ldr	r7, [r4, #16]
 8008792:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008796:	68a3      	ldr	r3, [r4, #8]
 8008798:	6861      	ldr	r1, [r4, #4]
 800879a:	eb07 060a 	add.w	r6, r7, sl
 800879e:	42b3      	cmp	r3, r6
 80087a0:	b085      	sub	sp, #20
 80087a2:	bfb8      	it	lt
 80087a4:	3101      	addlt	r1, #1
 80087a6:	f7ff fedb 	bl	8008560 <_Balloc>
 80087aa:	b930      	cbnz	r0, 80087ba <__multiply+0x42>
 80087ac:	4602      	mov	r2, r0
 80087ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80087b2:	4b43      	ldr	r3, [pc, #268]	; (80088c0 <__multiply+0x148>)
 80087b4:	4843      	ldr	r0, [pc, #268]	; (80088c4 <__multiply+0x14c>)
 80087b6:	f000 fc5d 	bl	8009074 <__assert_func>
 80087ba:	f100 0514 	add.w	r5, r0, #20
 80087be:	462b      	mov	r3, r5
 80087c0:	2200      	movs	r2, #0
 80087c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087c6:	4543      	cmp	r3, r8
 80087c8:	d321      	bcc.n	800880e <__multiply+0x96>
 80087ca:	f104 0314 	add.w	r3, r4, #20
 80087ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087d2:	f109 0314 	add.w	r3, r9, #20
 80087d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087da:	9202      	str	r2, [sp, #8]
 80087dc:	1b3a      	subs	r2, r7, r4
 80087de:	3a15      	subs	r2, #21
 80087e0:	f022 0203 	bic.w	r2, r2, #3
 80087e4:	3204      	adds	r2, #4
 80087e6:	f104 0115 	add.w	r1, r4, #21
 80087ea:	428f      	cmp	r7, r1
 80087ec:	bf38      	it	cc
 80087ee:	2204      	movcc	r2, #4
 80087f0:	9201      	str	r2, [sp, #4]
 80087f2:	9a02      	ldr	r2, [sp, #8]
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d80c      	bhi.n	8008814 <__multiply+0x9c>
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	dd03      	ble.n	8008806 <__multiply+0x8e>
 80087fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008802:	2b00      	cmp	r3, #0
 8008804:	d05a      	beq.n	80088bc <__multiply+0x144>
 8008806:	6106      	str	r6, [r0, #16]
 8008808:	b005      	add	sp, #20
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880e:	f843 2b04 	str.w	r2, [r3], #4
 8008812:	e7d8      	b.n	80087c6 <__multiply+0x4e>
 8008814:	f8b3 a000 	ldrh.w	sl, [r3]
 8008818:	f1ba 0f00 	cmp.w	sl, #0
 800881c:	d023      	beq.n	8008866 <__multiply+0xee>
 800881e:	46a9      	mov	r9, r5
 8008820:	f04f 0c00 	mov.w	ip, #0
 8008824:	f104 0e14 	add.w	lr, r4, #20
 8008828:	f85e 2b04 	ldr.w	r2, [lr], #4
 800882c:	f8d9 1000 	ldr.w	r1, [r9]
 8008830:	fa1f fb82 	uxth.w	fp, r2
 8008834:	b289      	uxth	r1, r1
 8008836:	fb0a 110b 	mla	r1, sl, fp, r1
 800883a:	4461      	add	r1, ip
 800883c:	f8d9 c000 	ldr.w	ip, [r9]
 8008840:	0c12      	lsrs	r2, r2, #16
 8008842:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008846:	fb0a c202 	mla	r2, sl, r2, ip
 800884a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800884e:	b289      	uxth	r1, r1
 8008850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008854:	4577      	cmp	r7, lr
 8008856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800885a:	f849 1b04 	str.w	r1, [r9], #4
 800885e:	d8e3      	bhi.n	8008828 <__multiply+0xb0>
 8008860:	9a01      	ldr	r2, [sp, #4]
 8008862:	f845 c002 	str.w	ip, [r5, r2]
 8008866:	9a03      	ldr	r2, [sp, #12]
 8008868:	3304      	adds	r3, #4
 800886a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800886e:	f1b9 0f00 	cmp.w	r9, #0
 8008872:	d021      	beq.n	80088b8 <__multiply+0x140>
 8008874:	46ae      	mov	lr, r5
 8008876:	f04f 0a00 	mov.w	sl, #0
 800887a:	6829      	ldr	r1, [r5, #0]
 800887c:	f104 0c14 	add.w	ip, r4, #20
 8008880:	f8bc b000 	ldrh.w	fp, [ip]
 8008884:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008888:	b289      	uxth	r1, r1
 800888a:	fb09 220b 	mla	r2, r9, fp, r2
 800888e:	4452      	add	r2, sl
 8008890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008894:	f84e 1b04 	str.w	r1, [lr], #4
 8008898:	f85c 1b04 	ldr.w	r1, [ip], #4
 800889c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088a0:	f8be 1000 	ldrh.w	r1, [lr]
 80088a4:	4567      	cmp	r7, ip
 80088a6:	fb09 110a 	mla	r1, r9, sl, r1
 80088aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80088ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088b2:	d8e5      	bhi.n	8008880 <__multiply+0x108>
 80088b4:	9a01      	ldr	r2, [sp, #4]
 80088b6:	50a9      	str	r1, [r5, r2]
 80088b8:	3504      	adds	r5, #4
 80088ba:	e79a      	b.n	80087f2 <__multiply+0x7a>
 80088bc:	3e01      	subs	r6, #1
 80088be:	e79c      	b.n	80087fa <__multiply+0x82>
 80088c0:	0800b676 	.word	0x0800b676
 80088c4:	0800b687 	.word	0x0800b687

080088c8 <__pow5mult>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4615      	mov	r5, r2
 80088ce:	f012 0203 	ands.w	r2, r2, #3
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	d007      	beq.n	80088e8 <__pow5mult+0x20>
 80088d8:	4c25      	ldr	r4, [pc, #148]	; (8008970 <__pow5mult+0xa8>)
 80088da:	3a01      	subs	r2, #1
 80088dc:	2300      	movs	r3, #0
 80088de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e2:	f7ff fe9f 	bl	8008624 <__multadd>
 80088e6:	4607      	mov	r7, r0
 80088e8:	10ad      	asrs	r5, r5, #2
 80088ea:	d03d      	beq.n	8008968 <__pow5mult+0xa0>
 80088ec:	69f4      	ldr	r4, [r6, #28]
 80088ee:	b97c      	cbnz	r4, 8008910 <__pow5mult+0x48>
 80088f0:	2010      	movs	r0, #16
 80088f2:	f7ff fd81 	bl	80083f8 <malloc>
 80088f6:	4602      	mov	r2, r0
 80088f8:	61f0      	str	r0, [r6, #28]
 80088fa:	b928      	cbnz	r0, 8008908 <__pow5mult+0x40>
 80088fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008900:	4b1c      	ldr	r3, [pc, #112]	; (8008974 <__pow5mult+0xac>)
 8008902:	481d      	ldr	r0, [pc, #116]	; (8008978 <__pow5mult+0xb0>)
 8008904:	f000 fbb6 	bl	8009074 <__assert_func>
 8008908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800890c:	6004      	str	r4, [r0, #0]
 800890e:	60c4      	str	r4, [r0, #12]
 8008910:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008918:	b94c      	cbnz	r4, 800892e <__pow5mult+0x66>
 800891a:	f240 2171 	movw	r1, #625	; 0x271
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff ff14 	bl	800874c <__i2b>
 8008924:	2300      	movs	r3, #0
 8008926:	4604      	mov	r4, r0
 8008928:	f8c8 0008 	str.w	r0, [r8, #8]
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 0900 	mov.w	r9, #0
 8008932:	07eb      	lsls	r3, r5, #31
 8008934:	d50a      	bpl.n	800894c <__pow5mult+0x84>
 8008936:	4639      	mov	r1, r7
 8008938:	4622      	mov	r2, r4
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ff1c 	bl	8008778 <__multiply>
 8008940:	4680      	mov	r8, r0
 8008942:	4639      	mov	r1, r7
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff fe4b 	bl	80085e0 <_Bfree>
 800894a:	4647      	mov	r7, r8
 800894c:	106d      	asrs	r5, r5, #1
 800894e:	d00b      	beq.n	8008968 <__pow5mult+0xa0>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	b938      	cbnz	r0, 8008964 <__pow5mult+0x9c>
 8008954:	4622      	mov	r2, r4
 8008956:	4621      	mov	r1, r4
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ff0d 	bl	8008778 <__multiply>
 800895e:	6020      	str	r0, [r4, #0]
 8008960:	f8c0 9000 	str.w	r9, [r0]
 8008964:	4604      	mov	r4, r0
 8008966:	e7e4      	b.n	8008932 <__pow5mult+0x6a>
 8008968:	4638      	mov	r0, r7
 800896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896e:	bf00      	nop
 8008970:	0800b7d0 	.word	0x0800b7d0
 8008974:	0800b607 	.word	0x0800b607
 8008978:	0800b687 	.word	0x0800b687

0800897c <__lshift>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	4607      	mov	r7, r0
 8008984:	4691      	mov	r9, r2
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	6849      	ldr	r1, [r1, #4]
 800898a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008994:	f108 0601 	add.w	r6, r8, #1
 8008998:	42b3      	cmp	r3, r6
 800899a:	db0b      	blt.n	80089b4 <__lshift+0x38>
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff fddf 	bl	8008560 <_Balloc>
 80089a2:	4605      	mov	r5, r0
 80089a4:	b948      	cbnz	r0, 80089ba <__lshift+0x3e>
 80089a6:	4602      	mov	r2, r0
 80089a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80089ac:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <__lshift+0xd0>)
 80089ae:	4828      	ldr	r0, [pc, #160]	; (8008a50 <__lshift+0xd4>)
 80089b0:	f000 fb60 	bl	8009074 <__assert_func>
 80089b4:	3101      	adds	r1, #1
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	e7ee      	b.n	8008998 <__lshift+0x1c>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f100 0114 	add.w	r1, r0, #20
 80089c0:	f100 0210 	add.w	r2, r0, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	4553      	cmp	r3, sl
 80089c8:	db33      	blt.n	8008a32 <__lshift+0xb6>
 80089ca:	6920      	ldr	r0, [r4, #16]
 80089cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d0:	f104 0314 	add.w	r3, r4, #20
 80089d4:	f019 091f 	ands.w	r9, r9, #31
 80089d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e0:	d02b      	beq.n	8008a3a <__lshift+0xbe>
 80089e2:	468a      	mov	sl, r1
 80089e4:	2200      	movs	r2, #0
 80089e6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	fa00 f009 	lsl.w	r0, r0, r9
 80089f0:	4310      	orrs	r0, r2
 80089f2:	f84a 0b04 	str.w	r0, [sl], #4
 80089f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fa:	459c      	cmp	ip, r3
 80089fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a00:	d8f3      	bhi.n	80089ea <__lshift+0x6e>
 8008a02:	ebac 0304 	sub.w	r3, ip, r4
 8008a06:	3b15      	subs	r3, #21
 8008a08:	f023 0303 	bic.w	r3, r3, #3
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	f104 0015 	add.w	r0, r4, #21
 8008a12:	4584      	cmp	ip, r0
 8008a14:	bf38      	it	cc
 8008a16:	2304      	movcc	r3, #4
 8008a18:	50ca      	str	r2, [r1, r3]
 8008a1a:	b10a      	cbz	r2, 8008a20 <__lshift+0xa4>
 8008a1c:	f108 0602 	add.w	r6, r8, #2
 8008a20:	3e01      	subs	r6, #1
 8008a22:	4638      	mov	r0, r7
 8008a24:	4621      	mov	r1, r4
 8008a26:	612e      	str	r6, [r5, #16]
 8008a28:	f7ff fdda 	bl	80085e0 <_Bfree>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7c5      	b.n	80089c6 <__lshift+0x4a>
 8008a3a:	3904      	subs	r1, #4
 8008a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a40:	459c      	cmp	ip, r3
 8008a42:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a46:	d8f9      	bhi.n	8008a3c <__lshift+0xc0>
 8008a48:	e7ea      	b.n	8008a20 <__lshift+0xa4>
 8008a4a:	bf00      	nop
 8008a4c:	0800b676 	.word	0x0800b676
 8008a50:	0800b687 	.word	0x0800b687

08008a54 <__mcmp>:
 8008a54:	4603      	mov	r3, r0
 8008a56:	690a      	ldr	r2, [r1, #16]
 8008a58:	6900      	ldr	r0, [r0, #16]
 8008a5a:	b530      	push	{r4, r5, lr}
 8008a5c:	1a80      	subs	r0, r0, r2
 8008a5e:	d10d      	bne.n	8008a7c <__mcmp+0x28>
 8008a60:	3314      	adds	r3, #20
 8008a62:	3114      	adds	r1, #20
 8008a64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a74:	4295      	cmp	r5, r2
 8008a76:	d002      	beq.n	8008a7e <__mcmp+0x2a>
 8008a78:	d304      	bcc.n	8008a84 <__mcmp+0x30>
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	bd30      	pop	{r4, r5, pc}
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	d3f4      	bcc.n	8008a6c <__mcmp+0x18>
 8008a82:	e7fb      	b.n	8008a7c <__mcmp+0x28>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	e7f8      	b.n	8008a7c <__mcmp+0x28>
	...

08008a8c <__mdiff>:
 8008a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	460d      	mov	r5, r1
 8008a92:	4607      	mov	r7, r0
 8008a94:	4611      	mov	r1, r2
 8008a96:	4628      	mov	r0, r5
 8008a98:	4614      	mov	r4, r2
 8008a9a:	f7ff ffdb 	bl	8008a54 <__mcmp>
 8008a9e:	1e06      	subs	r6, r0, #0
 8008aa0:	d111      	bne.n	8008ac6 <__mdiff+0x3a>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff fd5b 	bl	8008560 <_Balloc>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	b928      	cbnz	r0, 8008aba <__mdiff+0x2e>
 8008aae:	f240 2137 	movw	r1, #567	; 0x237
 8008ab2:	4b3a      	ldr	r3, [pc, #232]	; (8008b9c <__mdiff+0x110>)
 8008ab4:	483a      	ldr	r0, [pc, #232]	; (8008ba0 <__mdiff+0x114>)
 8008ab6:	f000 fadd 	bl	8009074 <__assert_func>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac6:	bfa4      	itt	ge
 8008ac8:	4623      	movge	r3, r4
 8008aca:	462c      	movge	r4, r5
 8008acc:	4638      	mov	r0, r7
 8008ace:	6861      	ldr	r1, [r4, #4]
 8008ad0:	bfa6      	itte	ge
 8008ad2:	461d      	movge	r5, r3
 8008ad4:	2600      	movge	r6, #0
 8008ad6:	2601      	movlt	r6, #1
 8008ad8:	f7ff fd42 	bl	8008560 <_Balloc>
 8008adc:	4602      	mov	r2, r0
 8008ade:	b918      	cbnz	r0, 8008ae8 <__mdiff+0x5c>
 8008ae0:	f240 2145 	movw	r1, #581	; 0x245
 8008ae4:	4b2d      	ldr	r3, [pc, #180]	; (8008b9c <__mdiff+0x110>)
 8008ae6:	e7e5      	b.n	8008ab4 <__mdiff+0x28>
 8008ae8:	f102 0814 	add.w	r8, r2, #20
 8008aec:	46c2      	mov	sl, r8
 8008aee:	f04f 0c00 	mov.w	ip, #0
 8008af2:	6927      	ldr	r7, [r4, #16]
 8008af4:	60c6      	str	r6, [r0, #12]
 8008af6:	692e      	ldr	r6, [r5, #16]
 8008af8:	f104 0014 	add.w	r0, r4, #20
 8008afc:	f105 0914 	add.w	r9, r5, #20
 8008b00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008b04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b08:	3410      	adds	r4, #16
 8008b0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008b0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b12:	fa1f f18b 	uxth.w	r1, fp
 8008b16:	4461      	add	r1, ip
 8008b18:	fa1f fc83 	uxth.w	ip, r3
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	eba1 010c 	sub.w	r1, r1, ip
 8008b22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b2a:	b289      	uxth	r1, r1
 8008b2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008b30:	454e      	cmp	r6, r9
 8008b32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008b36:	f84a 1b04 	str.w	r1, [sl], #4
 8008b3a:	d8e6      	bhi.n	8008b0a <__mdiff+0x7e>
 8008b3c:	1b73      	subs	r3, r6, r5
 8008b3e:	3b15      	subs	r3, #21
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	3515      	adds	r5, #21
 8008b46:	3304      	adds	r3, #4
 8008b48:	42ae      	cmp	r6, r5
 8008b4a:	bf38      	it	cc
 8008b4c:	2304      	movcc	r3, #4
 8008b4e:	4418      	add	r0, r3
 8008b50:	4443      	add	r3, r8
 8008b52:	461e      	mov	r6, r3
 8008b54:	4605      	mov	r5, r0
 8008b56:	4575      	cmp	r5, lr
 8008b58:	d30e      	bcc.n	8008b78 <__mdiff+0xec>
 8008b5a:	f10e 0103 	add.w	r1, lr, #3
 8008b5e:	1a09      	subs	r1, r1, r0
 8008b60:	f021 0103 	bic.w	r1, r1, #3
 8008b64:	3803      	subs	r0, #3
 8008b66:	4586      	cmp	lr, r0
 8008b68:	bf38      	it	cc
 8008b6a:	2100      	movcc	r1, #0
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b72:	b189      	cbz	r1, 8008b98 <__mdiff+0x10c>
 8008b74:	6117      	str	r7, [r2, #16]
 8008b76:	e7a3      	b.n	8008ac0 <__mdiff+0x34>
 8008b78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b7c:	fa1f f188 	uxth.w	r1, r8
 8008b80:	4461      	add	r1, ip
 8008b82:	140c      	asrs	r4, r1, #16
 8008b84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b88:	b289      	uxth	r1, r1
 8008b8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b8e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008b92:	f846 1b04 	str.w	r1, [r6], #4
 8008b96:	e7de      	b.n	8008b56 <__mdiff+0xca>
 8008b98:	3f01      	subs	r7, #1
 8008b9a:	e7e8      	b.n	8008b6e <__mdiff+0xe2>
 8008b9c:	0800b676 	.word	0x0800b676
 8008ba0:	0800b687 	.word	0x0800b687

08008ba4 <__d2b>:
 8008ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4617      	mov	r7, r2
 8008baa:	461c      	mov	r4, r3
 8008bac:	9e08      	ldr	r6, [sp, #32]
 8008bae:	f7ff fcd7 	bl	8008560 <_Balloc>
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	b930      	cbnz	r0, 8008bc4 <__d2b+0x20>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	f240 310f 	movw	r1, #783	; 0x30f
 8008bbc:	4b22      	ldr	r3, [pc, #136]	; (8008c48 <__d2b+0xa4>)
 8008bbe:	4823      	ldr	r0, [pc, #140]	; (8008c4c <__d2b+0xa8>)
 8008bc0:	f000 fa58 	bl	8009074 <__assert_func>
 8008bc4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008bc8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008bcc:	bb24      	cbnz	r4, 8008c18 <__d2b+0x74>
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	d026      	beq.n	8008c22 <__d2b+0x7e>
 8008bd4:	4668      	mov	r0, sp
 8008bd6:	9700      	str	r7, [sp, #0]
 8008bd8:	f7ff fd8a 	bl	80086f0 <__lo0bits>
 8008bdc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008be0:	b1e8      	cbz	r0, 8008c1e <__d2b+0x7a>
 8008be2:	f1c0 0320 	rsb	r3, r0, #32
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	430b      	orrs	r3, r1
 8008bec:	40c2      	lsrs	r2, r0
 8008bee:	616b      	str	r3, [r5, #20]
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bf14      	ite	ne
 8008bf8:	2102      	movne	r1, #2
 8008bfa:	2101      	moveq	r1, #1
 8008bfc:	61ab      	str	r3, [r5, #24]
 8008bfe:	6129      	str	r1, [r5, #16]
 8008c00:	b1bc      	cbz	r4, 8008c32 <__d2b+0x8e>
 8008c02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c06:	4404      	add	r4, r0
 8008c08:	6034      	str	r4, [r6, #0]
 8008c0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c10:	6018      	str	r0, [r3, #0]
 8008c12:	4628      	mov	r0, r5
 8008c14:	b003      	add	sp, #12
 8008c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1c:	e7d7      	b.n	8008bce <__d2b+0x2a>
 8008c1e:	6169      	str	r1, [r5, #20]
 8008c20:	e7e7      	b.n	8008bf2 <__d2b+0x4e>
 8008c22:	a801      	add	r0, sp, #4
 8008c24:	f7ff fd64 	bl	80086f0 <__lo0bits>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	616b      	str	r3, [r5, #20]
 8008c2e:	3020      	adds	r0, #32
 8008c30:	e7e5      	b.n	8008bfe <__d2b+0x5a>
 8008c32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c36:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008c3a:	6030      	str	r0, [r6, #0]
 8008c3c:	6918      	ldr	r0, [r3, #16]
 8008c3e:	f7ff fd37 	bl	80086b0 <__hi0bits>
 8008c42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c46:	e7e2      	b.n	8008c0e <__d2b+0x6a>
 8008c48:	0800b676 	.word	0x0800b676
 8008c4c:	0800b687 	.word	0x0800b687

08008c50 <__ssputs_r>:
 8008c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	461f      	mov	r7, r3
 8008c56:	688e      	ldr	r6, [r1, #8]
 8008c58:	4682      	mov	sl, r0
 8008c5a:	42be      	cmp	r6, r7
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4690      	mov	r8, r2
 8008c60:	680b      	ldr	r3, [r1, #0]
 8008c62:	d82c      	bhi.n	8008cbe <__ssputs_r+0x6e>
 8008c64:	898a      	ldrh	r2, [r1, #12]
 8008c66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c6a:	d026      	beq.n	8008cba <__ssputs_r+0x6a>
 8008c6c:	6965      	ldr	r5, [r4, #20]
 8008c6e:	6909      	ldr	r1, [r1, #16]
 8008c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c74:	eba3 0901 	sub.w	r9, r3, r1
 8008c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c7c:	1c7b      	adds	r3, r7, #1
 8008c7e:	444b      	add	r3, r9
 8008c80:	106d      	asrs	r5, r5, #1
 8008c82:	429d      	cmp	r5, r3
 8008c84:	bf38      	it	cc
 8008c86:	461d      	movcc	r5, r3
 8008c88:	0553      	lsls	r3, r2, #21
 8008c8a:	d527      	bpl.n	8008cdc <__ssputs_r+0x8c>
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7ff fbdb 	bl	8008448 <_malloc_r>
 8008c92:	4606      	mov	r6, r0
 8008c94:	b360      	cbz	r0, 8008cf0 <__ssputs_r+0xa0>
 8008c96:	464a      	mov	r2, r9
 8008c98:	6921      	ldr	r1, [r4, #16]
 8008c9a:	f7fe fce8 	bl	800766e <memcpy>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	6126      	str	r6, [r4, #16]
 8008cac:	444e      	add	r6, r9
 8008cae:	6026      	str	r6, [r4, #0]
 8008cb0:	463e      	mov	r6, r7
 8008cb2:	6165      	str	r5, [r4, #20]
 8008cb4:	eba5 0509 	sub.w	r5, r5, r9
 8008cb8:	60a5      	str	r5, [r4, #8]
 8008cba:	42be      	cmp	r6, r7
 8008cbc:	d900      	bls.n	8008cc0 <__ssputs_r+0x70>
 8008cbe:	463e      	mov	r6, r7
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	f7fe fc2a 	bl	800751e <memmove>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	1b9b      	subs	r3, r3, r6
 8008cd0:	60a3      	str	r3, [r4, #8]
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	4433      	add	r3, r6
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	462a      	mov	r2, r5
 8008cde:	f000 fa0d 	bl	80090fc <_realloc_r>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1e0      	bne.n	8008caa <__ssputs_r+0x5a>
 8008ce8:	4650      	mov	r0, sl
 8008cea:	6921      	ldr	r1, [r4, #16]
 8008cec:	f7ff fb3c 	bl	8008368 <_free_r>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	f8ca 3000 	str.w	r3, [sl]
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	e7e9      	b.n	8008cd8 <__ssputs_r+0x88>

08008d04 <_svfiprintf_r>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	4698      	mov	r8, r3
 8008d0a:	898b      	ldrh	r3, [r1, #12]
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	061b      	lsls	r3, r3, #24
 8008d10:	460d      	mov	r5, r1
 8008d12:	4614      	mov	r4, r2
 8008d14:	b09d      	sub	sp, #116	; 0x74
 8008d16:	d50e      	bpl.n	8008d36 <_svfiprintf_r+0x32>
 8008d18:	690b      	ldr	r3, [r1, #16]
 8008d1a:	b963      	cbnz	r3, 8008d36 <_svfiprintf_r+0x32>
 8008d1c:	2140      	movs	r1, #64	; 0x40
 8008d1e:	f7ff fb93 	bl	8008448 <_malloc_r>
 8008d22:	6028      	str	r0, [r5, #0]
 8008d24:	6128      	str	r0, [r5, #16]
 8008d26:	b920      	cbnz	r0, 8008d32 <_svfiprintf_r+0x2e>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e0d0      	b.n	8008ed4 <_svfiprintf_r+0x1d0>
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	616b      	str	r3, [r5, #20]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3a:	2320      	movs	r3, #32
 8008d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d40:	2330      	movs	r3, #48	; 0x30
 8008d42:	f04f 0901 	mov.w	r9, #1
 8008d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008eec <_svfiprintf_r+0x1e8>
 8008d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d52:	4623      	mov	r3, r4
 8008d54:	469a      	mov	sl, r3
 8008d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d5a:	b10a      	cbz	r2, 8008d60 <_svfiprintf_r+0x5c>
 8008d5c:	2a25      	cmp	r2, #37	; 0x25
 8008d5e:	d1f9      	bne.n	8008d54 <_svfiprintf_r+0x50>
 8008d60:	ebba 0b04 	subs.w	fp, sl, r4
 8008d64:	d00b      	beq.n	8008d7e <_svfiprintf_r+0x7a>
 8008d66:	465b      	mov	r3, fp
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ff6f 	bl	8008c50 <__ssputs_r>
 8008d72:	3001      	adds	r0, #1
 8008d74:	f000 80a9 	beq.w	8008eca <_svfiprintf_r+0x1c6>
 8008d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d7a:	445a      	add	r2, fp
 8008d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a1 	beq.w	8008eca <_svfiprintf_r+0x1c6>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d92:	f10a 0a01 	add.w	sl, sl, #1
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008da0:	4654      	mov	r4, sl
 8008da2:	2205      	movs	r2, #5
 8008da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da8:	4850      	ldr	r0, [pc, #320]	; (8008eec <_svfiprintf_r+0x1e8>)
 8008daa:	f7fe fc52 	bl	8007652 <memchr>
 8008dae:	9a04      	ldr	r2, [sp, #16]
 8008db0:	b9d8      	cbnz	r0, 8008dea <_svfiprintf_r+0xe6>
 8008db2:	06d0      	lsls	r0, r2, #27
 8008db4:	bf44      	itt	mi
 8008db6:	2320      	movmi	r3, #32
 8008db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dbc:	0711      	lsls	r1, r2, #28
 8008dbe:	bf44      	itt	mi
 8008dc0:	232b      	movmi	r3, #43	; 0x2b
 8008dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dca:	2b2a      	cmp	r3, #42	; 0x2a
 8008dcc:	d015      	beq.n	8008dfa <_svfiprintf_r+0xf6>
 8008dce:	4654      	mov	r4, sl
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	f04f 0c0a 	mov.w	ip, #10
 8008dd6:	9a07      	ldr	r2, [sp, #28]
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dde:	3b30      	subs	r3, #48	; 0x30
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d94d      	bls.n	8008e80 <_svfiprintf_r+0x17c>
 8008de4:	b1b0      	cbz	r0, 8008e14 <_svfiprintf_r+0x110>
 8008de6:	9207      	str	r2, [sp, #28]
 8008de8:	e014      	b.n	8008e14 <_svfiprintf_r+0x110>
 8008dea:	eba0 0308 	sub.w	r3, r0, r8
 8008dee:	fa09 f303 	lsl.w	r3, r9, r3
 8008df2:	4313      	orrs	r3, r2
 8008df4:	46a2      	mov	sl, r4
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	e7d2      	b.n	8008da0 <_svfiprintf_r+0x9c>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	1d19      	adds	r1, r3, #4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	9103      	str	r1, [sp, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfbb      	ittet	lt
 8008e06:	425b      	neglt	r3, r3
 8008e08:	f042 0202 	orrlt.w	r2, r2, #2
 8008e0c:	9307      	strge	r3, [sp, #28]
 8008e0e:	9307      	strlt	r3, [sp, #28]
 8008e10:	bfb8      	it	lt
 8008e12:	9204      	strlt	r2, [sp, #16]
 8008e14:	7823      	ldrb	r3, [r4, #0]
 8008e16:	2b2e      	cmp	r3, #46	; 0x2e
 8008e18:	d10c      	bne.n	8008e34 <_svfiprintf_r+0x130>
 8008e1a:	7863      	ldrb	r3, [r4, #1]
 8008e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1e:	d134      	bne.n	8008e8a <_svfiprintf_r+0x186>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	3402      	adds	r4, #2
 8008e24:	1d1a      	adds	r2, r3, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	9203      	str	r2, [sp, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bfb8      	it	lt
 8008e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e32:	9305      	str	r3, [sp, #20]
 8008e34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008ef0 <_svfiprintf_r+0x1ec>
 8008e38:	2203      	movs	r2, #3
 8008e3a:	4650      	mov	r0, sl
 8008e3c:	7821      	ldrb	r1, [r4, #0]
 8008e3e:	f7fe fc08 	bl	8007652 <memchr>
 8008e42:	b138      	cbz	r0, 8008e54 <_svfiprintf_r+0x150>
 8008e44:	2240      	movs	r2, #64	; 0x40
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	eba0 000a 	sub.w	r0, r0, sl
 8008e4c:	4082      	lsls	r2, r0
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	3401      	adds	r4, #1
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e58:	2206      	movs	r2, #6
 8008e5a:	4826      	ldr	r0, [pc, #152]	; (8008ef4 <_svfiprintf_r+0x1f0>)
 8008e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e60:	f7fe fbf7 	bl	8007652 <memchr>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d038      	beq.n	8008eda <_svfiprintf_r+0x1d6>
 8008e68:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <_svfiprintf_r+0x1f4>)
 8008e6a:	bb1b      	cbnz	r3, 8008eb4 <_svfiprintf_r+0x1b0>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	3307      	adds	r3, #7
 8008e70:	f023 0307 	bic.w	r3, r3, #7
 8008e74:	3308      	adds	r3, #8
 8008e76:	9303      	str	r3, [sp, #12]
 8008e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7a:	4433      	add	r3, r6
 8008e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7e:	e768      	b.n	8008d52 <_svfiprintf_r+0x4e>
 8008e80:	460c      	mov	r4, r1
 8008e82:	2001      	movs	r0, #1
 8008e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e88:	e7a6      	b.n	8008dd8 <_svfiprintf_r+0xd4>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f04f 0c0a 	mov.w	ip, #10
 8008e90:	4619      	mov	r1, r3
 8008e92:	3401      	adds	r4, #1
 8008e94:	9305      	str	r3, [sp, #20]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9c:	3a30      	subs	r2, #48	; 0x30
 8008e9e:	2a09      	cmp	r2, #9
 8008ea0:	d903      	bls.n	8008eaa <_svfiprintf_r+0x1a6>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0c6      	beq.n	8008e34 <_svfiprintf_r+0x130>
 8008ea6:	9105      	str	r1, [sp, #20]
 8008ea8:	e7c4      	b.n	8008e34 <_svfiprintf_r+0x130>
 8008eaa:	4604      	mov	r4, r0
 8008eac:	2301      	movs	r3, #1
 8008eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb2:	e7f0      	b.n	8008e96 <_svfiprintf_r+0x192>
 8008eb4:	ab03      	add	r3, sp, #12
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	462a      	mov	r2, r5
 8008eba:	4638      	mov	r0, r7
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <_svfiprintf_r+0x1f8>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	f7fd fe46 	bl	8006b50 <_printf_float>
 8008ec4:	1c42      	adds	r2, r0, #1
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	d1d6      	bne.n	8008e78 <_svfiprintf_r+0x174>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	065b      	lsls	r3, r3, #25
 8008ece:	f53f af2d 	bmi.w	8008d2c <_svfiprintf_r+0x28>
 8008ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed4:	b01d      	add	sp, #116	; 0x74
 8008ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <_svfiprintf_r+0x1f8>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	f7fe f8d3 	bl	8007090 <_printf_i>
 8008eea:	e7eb      	b.n	8008ec4 <_svfiprintf_r+0x1c0>
 8008eec:	0800b7dc 	.word	0x0800b7dc
 8008ef0:	0800b7e2 	.word	0x0800b7e2
 8008ef4:	0800b7e6 	.word	0x0800b7e6
 8008ef8:	08006b51 	.word	0x08006b51
 8008efc:	08008c51 	.word	0x08008c51

08008f00 <__sflush_r>:
 8008f00:	898a      	ldrh	r2, [r1, #12]
 8008f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f04:	4605      	mov	r5, r0
 8008f06:	0710      	lsls	r0, r2, #28
 8008f08:	460c      	mov	r4, r1
 8008f0a:	d457      	bmi.n	8008fbc <__sflush_r+0xbc>
 8008f0c:	684b      	ldr	r3, [r1, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dc04      	bgt.n	8008f1c <__sflush_r+0x1c>
 8008f12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc01      	bgt.n	8008f1c <__sflush_r+0x1c>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	d0fa      	beq.n	8008f18 <__sflush_r+0x18>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f28:	682f      	ldr	r7, [r5, #0]
 8008f2a:	6a21      	ldr	r1, [r4, #32]
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	d032      	beq.n	8008f96 <__sflush_r+0x96>
 8008f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	075a      	lsls	r2, r3, #29
 8008f36:	d505      	bpl.n	8008f44 <__sflush_r+0x44>
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	1ac0      	subs	r0, r0, r3
 8008f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f3e:	b10b      	cbz	r3, 8008f44 <__sflush_r+0x44>
 8008f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f42:	1ac0      	subs	r0, r0, r3
 8008f44:	2300      	movs	r3, #0
 8008f46:	4602      	mov	r2, r0
 8008f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	47b0      	blx	r6
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	d106      	bne.n	8008f64 <__sflush_r+0x64>
 8008f56:	6829      	ldr	r1, [r5, #0]
 8008f58:	291d      	cmp	r1, #29
 8008f5a:	d82b      	bhi.n	8008fb4 <__sflush_r+0xb4>
 8008f5c:	4a28      	ldr	r2, [pc, #160]	; (8009000 <__sflush_r+0x100>)
 8008f5e:	410a      	asrs	r2, r1
 8008f60:	07d6      	lsls	r6, r2, #31
 8008f62:	d427      	bmi.n	8008fb4 <__sflush_r+0xb4>
 8008f64:	2200      	movs	r2, #0
 8008f66:	6062      	str	r2, [r4, #4]
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	04d9      	lsls	r1, r3, #19
 8008f6c:	6022      	str	r2, [r4, #0]
 8008f6e:	d504      	bpl.n	8008f7a <__sflush_r+0x7a>
 8008f70:	1c42      	adds	r2, r0, #1
 8008f72:	d101      	bne.n	8008f78 <__sflush_r+0x78>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b903      	cbnz	r3, 8008f7a <__sflush_r+0x7a>
 8008f78:	6560      	str	r0, [r4, #84]	; 0x54
 8008f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7c:	602f      	str	r7, [r5, #0]
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d0ca      	beq.n	8008f18 <__sflush_r+0x18>
 8008f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d002      	beq.n	8008f90 <__sflush_r+0x90>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7ff f9ec 	bl	8008368 <_free_r>
 8008f90:	2000      	movs	r0, #0
 8008f92:	6360      	str	r0, [r4, #52]	; 0x34
 8008f94:	e7c1      	b.n	8008f1a <__sflush_r+0x1a>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b0      	blx	r6
 8008f9c:	1c41      	adds	r1, r0, #1
 8008f9e:	d1c8      	bne.n	8008f32 <__sflush_r+0x32>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0c5      	beq.n	8008f32 <__sflush_r+0x32>
 8008fa6:	2b1d      	cmp	r3, #29
 8008fa8:	d001      	beq.n	8008fae <__sflush_r+0xae>
 8008faa:	2b16      	cmp	r3, #22
 8008fac:	d101      	bne.n	8008fb2 <__sflush_r+0xb2>
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	e7b2      	b.n	8008f18 <__sflush_r+0x18>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7ae      	b.n	8008f1a <__sflush_r+0x1a>
 8008fbc:	690f      	ldr	r7, [r1, #16]
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	d0aa      	beq.n	8008f18 <__sflush_r+0x18>
 8008fc2:	0793      	lsls	r3, r2, #30
 8008fc4:	bf18      	it	ne
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	bf08      	it	eq
 8008fcc:	694b      	ldreq	r3, [r1, #20]
 8008fce:	1bf6      	subs	r6, r6, r7
 8008fd0:	600f      	str	r7, [r1, #0]
 8008fd2:	608b      	str	r3, [r1, #8]
 8008fd4:	2e00      	cmp	r6, #0
 8008fd6:	dd9f      	ble.n	8008f18 <__sflush_r+0x18>
 8008fd8:	4633      	mov	r3, r6
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4628      	mov	r0, r5
 8008fde:	6a21      	ldr	r1, [r4, #32]
 8008fe0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008fe4:	47e0      	blx	ip
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	dc06      	bgt.n	8008ff8 <__sflush_r+0xf8>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	e790      	b.n	8008f1a <__sflush_r+0x1a>
 8008ff8:	4407      	add	r7, r0
 8008ffa:	1a36      	subs	r6, r6, r0
 8008ffc:	e7ea      	b.n	8008fd4 <__sflush_r+0xd4>
 8008ffe:	bf00      	nop
 8009000:	dfbffffe 	.word	0xdfbffffe

08009004 <_fflush_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	690b      	ldr	r3, [r1, #16]
 8009008:	4605      	mov	r5, r0
 800900a:	460c      	mov	r4, r1
 800900c:	b913      	cbnz	r3, 8009014 <_fflush_r+0x10>
 800900e:	2500      	movs	r5, #0
 8009010:	4628      	mov	r0, r5
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	b118      	cbz	r0, 800901e <_fflush_r+0x1a>
 8009016:	6a03      	ldr	r3, [r0, #32]
 8009018:	b90b      	cbnz	r3, 800901e <_fflush_r+0x1a>
 800901a:	f7fe f9e7 	bl	80073ec <__sinit>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f3      	beq.n	800900e <_fflush_r+0xa>
 8009026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009028:	07d0      	lsls	r0, r2, #31
 800902a:	d404      	bmi.n	8009036 <_fflush_r+0x32>
 800902c:	0599      	lsls	r1, r3, #22
 800902e:	d402      	bmi.n	8009036 <_fflush_r+0x32>
 8009030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009032:	f7fe fb0c 	bl	800764e <__retarget_lock_acquire_recursive>
 8009036:	4628      	mov	r0, r5
 8009038:	4621      	mov	r1, r4
 800903a:	f7ff ff61 	bl	8008f00 <__sflush_r>
 800903e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009040:	4605      	mov	r5, r0
 8009042:	07da      	lsls	r2, r3, #31
 8009044:	d4e4      	bmi.n	8009010 <_fflush_r+0xc>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	059b      	lsls	r3, r3, #22
 800904a:	d4e1      	bmi.n	8009010 <_fflush_r+0xc>
 800904c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800904e:	f7fe faff 	bl	8007650 <__retarget_lock_release_recursive>
 8009052:	e7dd      	b.n	8009010 <_fflush_r+0xc>

08009054 <_sbrk_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	2300      	movs	r3, #0
 8009058:	4d05      	ldr	r5, [pc, #20]	; (8009070 <_sbrk_r+0x1c>)
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7fa fda2 	bl	8003ba8 <_sbrk>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_sbrk_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_sbrk_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	2000107c 	.word	0x2000107c

08009074 <__assert_func>:
 8009074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009076:	4614      	mov	r4, r2
 8009078:	461a      	mov	r2, r3
 800907a:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <__assert_func+0x2c>)
 800907c:	4605      	mov	r5, r0
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68d8      	ldr	r0, [r3, #12]
 8009082:	b14c      	cbz	r4, 8009098 <__assert_func+0x24>
 8009084:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <__assert_func+0x30>)
 8009086:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800908a:	9100      	str	r1, [sp, #0]
 800908c:	462b      	mov	r3, r5
 800908e:	4906      	ldr	r1, [pc, #24]	; (80090a8 <__assert_func+0x34>)
 8009090:	f000 f870 	bl	8009174 <fiprintf>
 8009094:	f000 f880 	bl	8009198 <abort>
 8009098:	4b04      	ldr	r3, [pc, #16]	; (80090ac <__assert_func+0x38>)
 800909a:	461c      	mov	r4, r3
 800909c:	e7f3      	b.n	8009086 <__assert_func+0x12>
 800909e:	bf00      	nop
 80090a0:	20000090 	.word	0x20000090
 80090a4:	0800b7f7 	.word	0x0800b7f7
 80090a8:	0800b804 	.word	0x0800b804
 80090ac:	0800b832 	.word	0x0800b832

080090b0 <_calloc_r>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	fba1 5402 	umull	r5, r4, r1, r2
 80090b6:	b934      	cbnz	r4, 80090c6 <_calloc_r+0x16>
 80090b8:	4629      	mov	r1, r5
 80090ba:	f7ff f9c5 	bl	8008448 <_malloc_r>
 80090be:	4606      	mov	r6, r0
 80090c0:	b928      	cbnz	r0, 80090ce <_calloc_r+0x1e>
 80090c2:	4630      	mov	r0, r6
 80090c4:	bd70      	pop	{r4, r5, r6, pc}
 80090c6:	220c      	movs	r2, #12
 80090c8:	2600      	movs	r6, #0
 80090ca:	6002      	str	r2, [r0, #0]
 80090cc:	e7f9      	b.n	80090c2 <_calloc_r+0x12>
 80090ce:	462a      	mov	r2, r5
 80090d0:	4621      	mov	r1, r4
 80090d2:	f7fe fa3e 	bl	8007552 <memset>
 80090d6:	e7f4      	b.n	80090c2 <_calloc_r+0x12>

080090d8 <__ascii_mbtowc>:
 80090d8:	b082      	sub	sp, #8
 80090da:	b901      	cbnz	r1, 80090de <__ascii_mbtowc+0x6>
 80090dc:	a901      	add	r1, sp, #4
 80090de:	b142      	cbz	r2, 80090f2 <__ascii_mbtowc+0x1a>
 80090e0:	b14b      	cbz	r3, 80090f6 <__ascii_mbtowc+0x1e>
 80090e2:	7813      	ldrb	r3, [r2, #0]
 80090e4:	600b      	str	r3, [r1, #0]
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	1e10      	subs	r0, r2, #0
 80090ea:	bf18      	it	ne
 80090ec:	2001      	movne	r0, #1
 80090ee:	b002      	add	sp, #8
 80090f0:	4770      	bx	lr
 80090f2:	4610      	mov	r0, r2
 80090f4:	e7fb      	b.n	80090ee <__ascii_mbtowc+0x16>
 80090f6:	f06f 0001 	mvn.w	r0, #1
 80090fa:	e7f8      	b.n	80090ee <__ascii_mbtowc+0x16>

080090fc <_realloc_r>:
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	4680      	mov	r8, r0
 8009102:	4614      	mov	r4, r2
 8009104:	460e      	mov	r6, r1
 8009106:	b921      	cbnz	r1, 8009112 <_realloc_r+0x16>
 8009108:	4611      	mov	r1, r2
 800910a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910e:	f7ff b99b 	b.w	8008448 <_malloc_r>
 8009112:	b92a      	cbnz	r2, 8009120 <_realloc_r+0x24>
 8009114:	f7ff f928 	bl	8008368 <_free_r>
 8009118:	4625      	mov	r5, r4
 800911a:	4628      	mov	r0, r5
 800911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009120:	f000 f841 	bl	80091a6 <_malloc_usable_size_r>
 8009124:	4284      	cmp	r4, r0
 8009126:	4607      	mov	r7, r0
 8009128:	d802      	bhi.n	8009130 <_realloc_r+0x34>
 800912a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800912e:	d812      	bhi.n	8009156 <_realloc_r+0x5a>
 8009130:	4621      	mov	r1, r4
 8009132:	4640      	mov	r0, r8
 8009134:	f7ff f988 	bl	8008448 <_malloc_r>
 8009138:	4605      	mov	r5, r0
 800913a:	2800      	cmp	r0, #0
 800913c:	d0ed      	beq.n	800911a <_realloc_r+0x1e>
 800913e:	42bc      	cmp	r4, r7
 8009140:	4622      	mov	r2, r4
 8009142:	4631      	mov	r1, r6
 8009144:	bf28      	it	cs
 8009146:	463a      	movcs	r2, r7
 8009148:	f7fe fa91 	bl	800766e <memcpy>
 800914c:	4631      	mov	r1, r6
 800914e:	4640      	mov	r0, r8
 8009150:	f7ff f90a 	bl	8008368 <_free_r>
 8009154:	e7e1      	b.n	800911a <_realloc_r+0x1e>
 8009156:	4635      	mov	r5, r6
 8009158:	e7df      	b.n	800911a <_realloc_r+0x1e>

0800915a <__ascii_wctomb>:
 800915a:	4603      	mov	r3, r0
 800915c:	4608      	mov	r0, r1
 800915e:	b141      	cbz	r1, 8009172 <__ascii_wctomb+0x18>
 8009160:	2aff      	cmp	r2, #255	; 0xff
 8009162:	d904      	bls.n	800916e <__ascii_wctomb+0x14>
 8009164:	228a      	movs	r2, #138	; 0x8a
 8009166:	f04f 30ff 	mov.w	r0, #4294967295
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	4770      	bx	lr
 800916e:	2001      	movs	r0, #1
 8009170:	700a      	strb	r2, [r1, #0]
 8009172:	4770      	bx	lr

08009174 <fiprintf>:
 8009174:	b40e      	push	{r1, r2, r3}
 8009176:	b503      	push	{r0, r1, lr}
 8009178:	4601      	mov	r1, r0
 800917a:	ab03      	add	r3, sp, #12
 800917c:	4805      	ldr	r0, [pc, #20]	; (8009194 <fiprintf+0x20>)
 800917e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009182:	6800      	ldr	r0, [r0, #0]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	f000 f83d 	bl	8009204 <_vfiprintf_r>
 800918a:	b002      	add	sp, #8
 800918c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009190:	b003      	add	sp, #12
 8009192:	4770      	bx	lr
 8009194:	20000090 	.word	0x20000090

08009198 <abort>:
 8009198:	2006      	movs	r0, #6
 800919a:	b508      	push	{r3, lr}
 800919c:	f000 fa0a 	bl	80095b4 <raise>
 80091a0:	2001      	movs	r0, #1
 80091a2:	f7fa fc8e 	bl	8003ac2 <_exit>

080091a6 <_malloc_usable_size_r>:
 80091a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091aa:	1f18      	subs	r0, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfbc      	itt	lt
 80091b0:	580b      	ldrlt	r3, [r1, r0]
 80091b2:	18c0      	addlt	r0, r0, r3
 80091b4:	4770      	bx	lr

080091b6 <__sfputc_r>:
 80091b6:	6893      	ldr	r3, [r2, #8]
 80091b8:	b410      	push	{r4}
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	6093      	str	r3, [r2, #8]
 80091c0:	da07      	bge.n	80091d2 <__sfputc_r+0x1c>
 80091c2:	6994      	ldr	r4, [r2, #24]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	db01      	blt.n	80091cc <__sfputc_r+0x16>
 80091c8:	290a      	cmp	r1, #10
 80091ca:	d102      	bne.n	80091d2 <__sfputc_r+0x1c>
 80091cc:	bc10      	pop	{r4}
 80091ce:	f000 b933 	b.w	8009438 <__swbuf_r>
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	1c58      	adds	r0, r3, #1
 80091d6:	6010      	str	r0, [r2, #0]
 80091d8:	7019      	strb	r1, [r3, #0]
 80091da:	4608      	mov	r0, r1
 80091dc:	bc10      	pop	{r4}
 80091de:	4770      	bx	lr

080091e0 <__sfputs_r>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	4614      	mov	r4, r2
 80091e8:	18d5      	adds	r5, r2, r3
 80091ea:	42ac      	cmp	r4, r5
 80091ec:	d101      	bne.n	80091f2 <__sfputs_r+0x12>
 80091ee:	2000      	movs	r0, #0
 80091f0:	e007      	b.n	8009202 <__sfputs_r+0x22>
 80091f2:	463a      	mov	r2, r7
 80091f4:	4630      	mov	r0, r6
 80091f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fa:	f7ff ffdc 	bl	80091b6 <__sfputc_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d1f3      	bne.n	80091ea <__sfputs_r+0xa>
 8009202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009204 <_vfiprintf_r>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	460d      	mov	r5, r1
 800920a:	4614      	mov	r4, r2
 800920c:	4698      	mov	r8, r3
 800920e:	4606      	mov	r6, r0
 8009210:	b09d      	sub	sp, #116	; 0x74
 8009212:	b118      	cbz	r0, 800921c <_vfiprintf_r+0x18>
 8009214:	6a03      	ldr	r3, [r0, #32]
 8009216:	b90b      	cbnz	r3, 800921c <_vfiprintf_r+0x18>
 8009218:	f7fe f8e8 	bl	80073ec <__sinit>
 800921c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800921e:	07d9      	lsls	r1, r3, #31
 8009220:	d405      	bmi.n	800922e <_vfiprintf_r+0x2a>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	059a      	lsls	r2, r3, #22
 8009226:	d402      	bmi.n	800922e <_vfiprintf_r+0x2a>
 8009228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800922a:	f7fe fa10 	bl	800764e <__retarget_lock_acquire_recursive>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	071b      	lsls	r3, r3, #28
 8009232:	d501      	bpl.n	8009238 <_vfiprintf_r+0x34>
 8009234:	692b      	ldr	r3, [r5, #16]
 8009236:	b99b      	cbnz	r3, 8009260 <_vfiprintf_r+0x5c>
 8009238:	4629      	mov	r1, r5
 800923a:	4630      	mov	r0, r6
 800923c:	f000 f93a 	bl	80094b4 <__swsetup_r>
 8009240:	b170      	cbz	r0, 8009260 <_vfiprintf_r+0x5c>
 8009242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009244:	07dc      	lsls	r4, r3, #31
 8009246:	d504      	bpl.n	8009252 <_vfiprintf_r+0x4e>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	b01d      	add	sp, #116	; 0x74
 800924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	0598      	lsls	r0, r3, #22
 8009256:	d4f7      	bmi.n	8009248 <_vfiprintf_r+0x44>
 8009258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800925a:	f7fe f9f9 	bl	8007650 <__retarget_lock_release_recursive>
 800925e:	e7f3      	b.n	8009248 <_vfiprintf_r+0x44>
 8009260:	2300      	movs	r3, #0
 8009262:	9309      	str	r3, [sp, #36]	; 0x24
 8009264:	2320      	movs	r3, #32
 8009266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800926a:	2330      	movs	r3, #48	; 0x30
 800926c:	f04f 0901 	mov.w	r9, #1
 8009270:	f8cd 800c 	str.w	r8, [sp, #12]
 8009274:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009424 <_vfiprintf_r+0x220>
 8009278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800927c:	4623      	mov	r3, r4
 800927e:	469a      	mov	sl, r3
 8009280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009284:	b10a      	cbz	r2, 800928a <_vfiprintf_r+0x86>
 8009286:	2a25      	cmp	r2, #37	; 0x25
 8009288:	d1f9      	bne.n	800927e <_vfiprintf_r+0x7a>
 800928a:	ebba 0b04 	subs.w	fp, sl, r4
 800928e:	d00b      	beq.n	80092a8 <_vfiprintf_r+0xa4>
 8009290:	465b      	mov	r3, fp
 8009292:	4622      	mov	r2, r4
 8009294:	4629      	mov	r1, r5
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ffa2 	bl	80091e0 <__sfputs_r>
 800929c:	3001      	adds	r0, #1
 800929e:	f000 80a9 	beq.w	80093f4 <_vfiprintf_r+0x1f0>
 80092a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a4:	445a      	add	r2, fp
 80092a6:	9209      	str	r2, [sp, #36]	; 0x24
 80092a8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a1 	beq.w	80093f4 <_vfiprintf_r+0x1f0>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092bc:	f10a 0a01 	add.w	sl, sl, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	9307      	str	r3, [sp, #28]
 80092c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c8:	931a      	str	r3, [sp, #104]	; 0x68
 80092ca:	4654      	mov	r4, sl
 80092cc:	2205      	movs	r2, #5
 80092ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d2:	4854      	ldr	r0, [pc, #336]	; (8009424 <_vfiprintf_r+0x220>)
 80092d4:	f7fe f9bd 	bl	8007652 <memchr>
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	b9d8      	cbnz	r0, 8009314 <_vfiprintf_r+0x110>
 80092dc:	06d1      	lsls	r1, r2, #27
 80092de:	bf44      	itt	mi
 80092e0:	2320      	movmi	r3, #32
 80092e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e6:	0713      	lsls	r3, r2, #28
 80092e8:	bf44      	itt	mi
 80092ea:	232b      	movmi	r3, #43	; 0x2b
 80092ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f0:	f89a 3000 	ldrb.w	r3, [sl]
 80092f4:	2b2a      	cmp	r3, #42	; 0x2a
 80092f6:	d015      	beq.n	8009324 <_vfiprintf_r+0x120>
 80092f8:	4654      	mov	r4, sl
 80092fa:	2000      	movs	r0, #0
 80092fc:	f04f 0c0a 	mov.w	ip, #10
 8009300:	9a07      	ldr	r2, [sp, #28]
 8009302:	4621      	mov	r1, r4
 8009304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009308:	3b30      	subs	r3, #48	; 0x30
 800930a:	2b09      	cmp	r3, #9
 800930c:	d94d      	bls.n	80093aa <_vfiprintf_r+0x1a6>
 800930e:	b1b0      	cbz	r0, 800933e <_vfiprintf_r+0x13a>
 8009310:	9207      	str	r2, [sp, #28]
 8009312:	e014      	b.n	800933e <_vfiprintf_r+0x13a>
 8009314:	eba0 0308 	sub.w	r3, r0, r8
 8009318:	fa09 f303 	lsl.w	r3, r9, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	46a2      	mov	sl, r4
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	e7d2      	b.n	80092ca <_vfiprintf_r+0xc6>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	1d19      	adds	r1, r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	9103      	str	r1, [sp, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfbb      	ittet	lt
 8009330:	425b      	neglt	r3, r3
 8009332:	f042 0202 	orrlt.w	r2, r2, #2
 8009336:	9307      	strge	r3, [sp, #28]
 8009338:	9307      	strlt	r3, [sp, #28]
 800933a:	bfb8      	it	lt
 800933c:	9204      	strlt	r2, [sp, #16]
 800933e:	7823      	ldrb	r3, [r4, #0]
 8009340:	2b2e      	cmp	r3, #46	; 0x2e
 8009342:	d10c      	bne.n	800935e <_vfiprintf_r+0x15a>
 8009344:	7863      	ldrb	r3, [r4, #1]
 8009346:	2b2a      	cmp	r3, #42	; 0x2a
 8009348:	d134      	bne.n	80093b4 <_vfiprintf_r+0x1b0>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	3402      	adds	r4, #2
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9203      	str	r2, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfb8      	it	lt
 8009358:	f04f 33ff 	movlt.w	r3, #4294967295
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009428 <_vfiprintf_r+0x224>
 8009362:	2203      	movs	r2, #3
 8009364:	4650      	mov	r0, sl
 8009366:	7821      	ldrb	r1, [r4, #0]
 8009368:	f7fe f973 	bl	8007652 <memchr>
 800936c:	b138      	cbz	r0, 800937e <_vfiprintf_r+0x17a>
 800936e:	2240      	movs	r2, #64	; 0x40
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	eba0 000a 	sub.w	r0, r0, sl
 8009376:	4082      	lsls	r2, r0
 8009378:	4313      	orrs	r3, r2
 800937a:	3401      	adds	r4, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009382:	2206      	movs	r2, #6
 8009384:	4829      	ldr	r0, [pc, #164]	; (800942c <_vfiprintf_r+0x228>)
 8009386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800938a:	f7fe f962 	bl	8007652 <memchr>
 800938e:	2800      	cmp	r0, #0
 8009390:	d03f      	beq.n	8009412 <_vfiprintf_r+0x20e>
 8009392:	4b27      	ldr	r3, [pc, #156]	; (8009430 <_vfiprintf_r+0x22c>)
 8009394:	bb1b      	cbnz	r3, 80093de <_vfiprintf_r+0x1da>
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	3307      	adds	r3, #7
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	3308      	adds	r3, #8
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a4:	443b      	add	r3, r7
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	e768      	b.n	800927c <_vfiprintf_r+0x78>
 80093aa:	460c      	mov	r4, r1
 80093ac:	2001      	movs	r0, #1
 80093ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b2:	e7a6      	b.n	8009302 <_vfiprintf_r+0xfe>
 80093b4:	2300      	movs	r3, #0
 80093b6:	f04f 0c0a 	mov.w	ip, #10
 80093ba:	4619      	mov	r1, r3
 80093bc:	3401      	adds	r4, #1
 80093be:	9305      	str	r3, [sp, #20]
 80093c0:	4620      	mov	r0, r4
 80093c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c6:	3a30      	subs	r2, #48	; 0x30
 80093c8:	2a09      	cmp	r2, #9
 80093ca:	d903      	bls.n	80093d4 <_vfiprintf_r+0x1d0>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0c6      	beq.n	800935e <_vfiprintf_r+0x15a>
 80093d0:	9105      	str	r1, [sp, #20]
 80093d2:	e7c4      	b.n	800935e <_vfiprintf_r+0x15a>
 80093d4:	4604      	mov	r4, r0
 80093d6:	2301      	movs	r3, #1
 80093d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093dc:	e7f0      	b.n	80093c0 <_vfiprintf_r+0x1bc>
 80093de:	ab03      	add	r3, sp, #12
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462a      	mov	r2, r5
 80093e4:	4630      	mov	r0, r6
 80093e6:	4b13      	ldr	r3, [pc, #76]	; (8009434 <_vfiprintf_r+0x230>)
 80093e8:	a904      	add	r1, sp, #16
 80093ea:	f7fd fbb1 	bl	8006b50 <_printf_float>
 80093ee:	4607      	mov	r7, r0
 80093f0:	1c78      	adds	r0, r7, #1
 80093f2:	d1d6      	bne.n	80093a2 <_vfiprintf_r+0x19e>
 80093f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f6:	07d9      	lsls	r1, r3, #31
 80093f8:	d405      	bmi.n	8009406 <_vfiprintf_r+0x202>
 80093fa:	89ab      	ldrh	r3, [r5, #12]
 80093fc:	059a      	lsls	r2, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_vfiprintf_r+0x202>
 8009400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009402:	f7fe f925 	bl	8007650 <__retarget_lock_release_recursive>
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	065b      	lsls	r3, r3, #25
 800940a:	f53f af1d 	bmi.w	8009248 <_vfiprintf_r+0x44>
 800940e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009410:	e71c      	b.n	800924c <_vfiprintf_r+0x48>
 8009412:	ab03      	add	r3, sp, #12
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	462a      	mov	r2, r5
 8009418:	4630      	mov	r0, r6
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <_vfiprintf_r+0x230>)
 800941c:	a904      	add	r1, sp, #16
 800941e:	f7fd fe37 	bl	8007090 <_printf_i>
 8009422:	e7e4      	b.n	80093ee <_vfiprintf_r+0x1ea>
 8009424:	0800b7dc 	.word	0x0800b7dc
 8009428:	0800b7e2 	.word	0x0800b7e2
 800942c:	0800b7e6 	.word	0x0800b7e6
 8009430:	08006b51 	.word	0x08006b51
 8009434:	080091e1 	.word	0x080091e1

08009438 <__swbuf_r>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	460e      	mov	r6, r1
 800943c:	4614      	mov	r4, r2
 800943e:	4605      	mov	r5, r0
 8009440:	b118      	cbz	r0, 800944a <__swbuf_r+0x12>
 8009442:	6a03      	ldr	r3, [r0, #32]
 8009444:	b90b      	cbnz	r3, 800944a <__swbuf_r+0x12>
 8009446:	f7fd ffd1 	bl	80073ec <__sinit>
 800944a:	69a3      	ldr	r3, [r4, #24]
 800944c:	60a3      	str	r3, [r4, #8]
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	071a      	lsls	r2, r3, #28
 8009452:	d525      	bpl.n	80094a0 <__swbuf_r+0x68>
 8009454:	6923      	ldr	r3, [r4, #16]
 8009456:	b31b      	cbz	r3, 80094a0 <__swbuf_r+0x68>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	6922      	ldr	r2, [r4, #16]
 800945c:	b2f6      	uxtb	r6, r6
 800945e:	1a98      	subs	r0, r3, r2
 8009460:	6963      	ldr	r3, [r4, #20]
 8009462:	4637      	mov	r7, r6
 8009464:	4283      	cmp	r3, r0
 8009466:	dc04      	bgt.n	8009472 <__swbuf_r+0x3a>
 8009468:	4621      	mov	r1, r4
 800946a:	4628      	mov	r0, r5
 800946c:	f7ff fdca 	bl	8009004 <_fflush_r>
 8009470:	b9e0      	cbnz	r0, 80094ac <__swbuf_r+0x74>
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	3b01      	subs	r3, #1
 8009476:	60a3      	str	r3, [r4, #8]
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	701e      	strb	r6, [r3, #0]
 8009480:	6962      	ldr	r2, [r4, #20]
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	429a      	cmp	r2, r3
 8009486:	d004      	beq.n	8009492 <__swbuf_r+0x5a>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	07db      	lsls	r3, r3, #31
 800948c:	d506      	bpl.n	800949c <__swbuf_r+0x64>
 800948e:	2e0a      	cmp	r6, #10
 8009490:	d104      	bne.n	800949c <__swbuf_r+0x64>
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f7ff fdb5 	bl	8009004 <_fflush_r>
 800949a:	b938      	cbnz	r0, 80094ac <__swbuf_r+0x74>
 800949c:	4638      	mov	r0, r7
 800949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a0:	4621      	mov	r1, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	f000 f806 	bl	80094b4 <__swsetup_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0d5      	beq.n	8009458 <__swbuf_r+0x20>
 80094ac:	f04f 37ff 	mov.w	r7, #4294967295
 80094b0:	e7f4      	b.n	800949c <__swbuf_r+0x64>
	...

080094b4 <__swsetup_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4b2a      	ldr	r3, [pc, #168]	; (8009560 <__swsetup_r+0xac>)
 80094b8:	4605      	mov	r5, r0
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	460c      	mov	r4, r1
 80094be:	b118      	cbz	r0, 80094c8 <__swsetup_r+0x14>
 80094c0:	6a03      	ldr	r3, [r0, #32]
 80094c2:	b90b      	cbnz	r3, 80094c8 <__swsetup_r+0x14>
 80094c4:	f7fd ff92 	bl	80073ec <__sinit>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ce:	0718      	lsls	r0, r3, #28
 80094d0:	d422      	bmi.n	8009518 <__swsetup_r+0x64>
 80094d2:	06d9      	lsls	r1, r3, #27
 80094d4:	d407      	bmi.n	80094e6 <__swsetup_r+0x32>
 80094d6:	2309      	movs	r3, #9
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094de:	f04f 30ff 	mov.w	r0, #4294967295
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	e034      	b.n	8009550 <__swsetup_r+0x9c>
 80094e6:	0758      	lsls	r0, r3, #29
 80094e8:	d512      	bpl.n	8009510 <__swsetup_r+0x5c>
 80094ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ec:	b141      	cbz	r1, 8009500 <__swsetup_r+0x4c>
 80094ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094f2:	4299      	cmp	r1, r3
 80094f4:	d002      	beq.n	80094fc <__swsetup_r+0x48>
 80094f6:	4628      	mov	r0, r5
 80094f8:	f7fe ff36 	bl	8008368 <_free_r>
 80094fc:	2300      	movs	r3, #0
 80094fe:	6363      	str	r3, [r4, #52]	; 0x34
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	2300      	movs	r3, #0
 800950a:	6063      	str	r3, [r4, #4]
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f043 0308 	orr.w	r3, r3, #8
 8009516:	81a3      	strh	r3, [r4, #12]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	b94b      	cbnz	r3, 8009530 <__swsetup_r+0x7c>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009526:	d003      	beq.n	8009530 <__swsetup_r+0x7c>
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f883 	bl	8009636 <__smakebuf_r>
 8009530:	89a0      	ldrh	r0, [r4, #12]
 8009532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009536:	f010 0301 	ands.w	r3, r0, #1
 800953a:	d00a      	beq.n	8009552 <__swsetup_r+0x9e>
 800953c:	2300      	movs	r3, #0
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	6963      	ldr	r3, [r4, #20]
 8009542:	425b      	negs	r3, r3
 8009544:	61a3      	str	r3, [r4, #24]
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	b943      	cbnz	r3, 800955c <__swsetup_r+0xa8>
 800954a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800954e:	d1c4      	bne.n	80094da <__swsetup_r+0x26>
 8009550:	bd38      	pop	{r3, r4, r5, pc}
 8009552:	0781      	lsls	r1, r0, #30
 8009554:	bf58      	it	pl
 8009556:	6963      	ldrpl	r3, [r4, #20]
 8009558:	60a3      	str	r3, [r4, #8]
 800955a:	e7f4      	b.n	8009546 <__swsetup_r+0x92>
 800955c:	2000      	movs	r0, #0
 800955e:	e7f7      	b.n	8009550 <__swsetup_r+0x9c>
 8009560:	20000090 	.word	0x20000090

08009564 <_raise_r>:
 8009564:	291f      	cmp	r1, #31
 8009566:	b538      	push	{r3, r4, r5, lr}
 8009568:	4604      	mov	r4, r0
 800956a:	460d      	mov	r5, r1
 800956c:	d904      	bls.n	8009578 <_raise_r+0x14>
 800956e:	2316      	movs	r3, #22
 8009570:	6003      	str	r3, [r0, #0]
 8009572:	f04f 30ff 	mov.w	r0, #4294967295
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800957a:	b112      	cbz	r2, 8009582 <_raise_r+0x1e>
 800957c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009580:	b94b      	cbnz	r3, 8009596 <_raise_r+0x32>
 8009582:	4620      	mov	r0, r4
 8009584:	f000 f830 	bl	80095e8 <_getpid_r>
 8009588:	462a      	mov	r2, r5
 800958a:	4601      	mov	r1, r0
 800958c:	4620      	mov	r0, r4
 800958e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009592:	f000 b817 	b.w	80095c4 <_kill_r>
 8009596:	2b01      	cmp	r3, #1
 8009598:	d00a      	beq.n	80095b0 <_raise_r+0x4c>
 800959a:	1c59      	adds	r1, r3, #1
 800959c:	d103      	bne.n	80095a6 <_raise_r+0x42>
 800959e:	2316      	movs	r3, #22
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	2001      	movs	r0, #1
 80095a4:	e7e7      	b.n	8009576 <_raise_r+0x12>
 80095a6:	2400      	movs	r4, #0
 80095a8:	4628      	mov	r0, r5
 80095aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095ae:	4798      	blx	r3
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7e0      	b.n	8009576 <_raise_r+0x12>

080095b4 <raise>:
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <raise+0xc>)
 80095b6:	4601      	mov	r1, r0
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	f7ff bfd3 	b.w	8009564 <_raise_r>
 80095be:	bf00      	nop
 80095c0:	20000090 	.word	0x20000090

080095c4 <_kill_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	2300      	movs	r3, #0
 80095c8:	4d06      	ldr	r5, [pc, #24]	; (80095e4 <_kill_r+0x20>)
 80095ca:	4604      	mov	r4, r0
 80095cc:	4608      	mov	r0, r1
 80095ce:	4611      	mov	r1, r2
 80095d0:	602b      	str	r3, [r5, #0]
 80095d2:	f7fa fa66 	bl	8003aa2 <_kill>
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	d102      	bne.n	80095e0 <_kill_r+0x1c>
 80095da:	682b      	ldr	r3, [r5, #0]
 80095dc:	b103      	cbz	r3, 80095e0 <_kill_r+0x1c>
 80095de:	6023      	str	r3, [r4, #0]
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	bf00      	nop
 80095e4:	2000107c 	.word	0x2000107c

080095e8 <_getpid_r>:
 80095e8:	f7fa ba54 	b.w	8003a94 <_getpid>

080095ec <__swhatbuf_r>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	460c      	mov	r4, r1
 80095f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f4:	4615      	mov	r5, r2
 80095f6:	2900      	cmp	r1, #0
 80095f8:	461e      	mov	r6, r3
 80095fa:	b096      	sub	sp, #88	; 0x58
 80095fc:	da0c      	bge.n	8009618 <__swhatbuf_r+0x2c>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	2100      	movs	r1, #0
 8009602:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009606:	bf0c      	ite	eq
 8009608:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800960c:	2340      	movne	r3, #64	; 0x40
 800960e:	2000      	movs	r0, #0
 8009610:	6031      	str	r1, [r6, #0]
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	b016      	add	sp, #88	; 0x58
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	466a      	mov	r2, sp
 800961a:	f000 f849 	bl	80096b0 <_fstat_r>
 800961e:	2800      	cmp	r0, #0
 8009620:	dbed      	blt.n	80095fe <__swhatbuf_r+0x12>
 8009622:	9901      	ldr	r1, [sp, #4]
 8009624:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009628:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800962c:	4259      	negs	r1, r3
 800962e:	4159      	adcs	r1, r3
 8009630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009634:	e7eb      	b.n	800960e <__swhatbuf_r+0x22>

08009636 <__smakebuf_r>:
 8009636:	898b      	ldrh	r3, [r1, #12]
 8009638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800963a:	079d      	lsls	r5, r3, #30
 800963c:	4606      	mov	r6, r0
 800963e:	460c      	mov	r4, r1
 8009640:	d507      	bpl.n	8009652 <__smakebuf_r+0x1c>
 8009642:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	6123      	str	r3, [r4, #16]
 800964a:	2301      	movs	r3, #1
 800964c:	6163      	str	r3, [r4, #20]
 800964e:	b002      	add	sp, #8
 8009650:	bd70      	pop	{r4, r5, r6, pc}
 8009652:	466a      	mov	r2, sp
 8009654:	ab01      	add	r3, sp, #4
 8009656:	f7ff ffc9 	bl	80095ec <__swhatbuf_r>
 800965a:	9900      	ldr	r1, [sp, #0]
 800965c:	4605      	mov	r5, r0
 800965e:	4630      	mov	r0, r6
 8009660:	f7fe fef2 	bl	8008448 <_malloc_r>
 8009664:	b948      	cbnz	r0, 800967a <__smakebuf_r+0x44>
 8009666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966a:	059a      	lsls	r2, r3, #22
 800966c:	d4ef      	bmi.n	800964e <__smakebuf_r+0x18>
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	f043 0302 	orr.w	r3, r3, #2
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	e7e3      	b.n	8009642 <__smakebuf_r+0xc>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	6020      	str	r0, [r4, #0]
 800967e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	9b00      	ldr	r3, [sp, #0]
 8009686:	6120      	str	r0, [r4, #16]
 8009688:	6163      	str	r3, [r4, #20]
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	b15b      	cbz	r3, 80096a6 <__smakebuf_r+0x70>
 800968e:	4630      	mov	r0, r6
 8009690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009694:	f000 f81e 	bl	80096d4 <_isatty_r>
 8009698:	b128      	cbz	r0, 80096a6 <__smakebuf_r+0x70>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	f023 0303 	bic.w	r3, r3, #3
 80096a0:	f043 0301 	orr.w	r3, r3, #1
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	431d      	orrs	r5, r3
 80096aa:	81a5      	strh	r5, [r4, #12]
 80096ac:	e7cf      	b.n	800964e <__smakebuf_r+0x18>
	...

080096b0 <_fstat_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	2300      	movs	r3, #0
 80096b4:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_fstat_r+0x20>)
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	4611      	mov	r1, r2
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	f7fa fa4e 	bl	8003b5e <_fstat>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d102      	bne.n	80096cc <_fstat_r+0x1c>
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	b103      	cbz	r3, 80096cc <_fstat_r+0x1c>
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	bf00      	nop
 80096d0:	2000107c 	.word	0x2000107c

080096d4 <_isatty_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	2300      	movs	r3, #0
 80096d8:	4d05      	ldr	r5, [pc, #20]	; (80096f0 <_isatty_r+0x1c>)
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7fa fa4c 	bl	8003b7c <_isatty>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_isatty_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_isatty_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	2000107c 	.word	0x2000107c

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
