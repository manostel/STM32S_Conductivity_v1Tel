
FirstTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d4  080080d8  080080d8  000180d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099ac  080099ac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080099ac  080099ac  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099ac  080099ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080099b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  200001e4  08009b98  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  08009b98  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e28d  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244d  00000000  00000000  0002e4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c05  00000000  00000000  000318a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019554  00000000  00000000  000324ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ba5  00000000  00000000  0004ba01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000921de  00000000  00000000  0005d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052dc  00000000  00000000  000ef784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f4a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080080bc 	.word	0x080080bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080080bc 	.word	0x080080bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10b      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x2a>
    counter++;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ffe:	6013      	str	r3, [r2, #0]

    if (counter>50)
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b32      	cmp	r3, #50	; 0x32
 8001006:	d902      	bls.n	800100e <HAL_TIM_PeriodElapsedCallback+0x2a>
    {
    	counterflagPWM=1;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]

    }

  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40000400 	.word	0x40000400
 800101c:	200003a8 	.word	0x200003a8
 8001020:	20000708 	.word	0x20000708

08001024 <PWM_COND>:


void PWM_COND(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0


	for(PWM_loop=0;PWM_loop<20;PWM_loop++){
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <PWM_COND+0x78>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e02d      	b.n	800108c <PWM_COND+0x68>
	      HAL_Delay(DELAY_COND);
 8001030:	2006      	movs	r0, #6
 8001032:	f001 fb63 	bl	80026fc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <PWM_COND+0x7c>)
 800103c:	f002 fa83 	bl	8003546 <HAL_GPIO_WritePin>
		  HAL_Delay(DELAY_COND);
 8001040:	2006      	movs	r0, #6
 8001042:	f001 fb5b 	bl	80026fc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <PWM_COND+0x7c>)
 800104c:	f002 fa7b 	bl	8003546 <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f001 fb53 	bl	80026fc <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	2140      	movs	r1, #64	; 0x40
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <PWM_COND+0x7c>)
 800105c:	f002 fa73 	bl	8003546 <HAL_GPIO_WritePin>
		  HAL_Delay(DELAY_COND);
 8001060:	2006      	movs	r0, #6
 8001062:	f001 fb4b 	bl	80026fc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <PWM_COND+0x7c>)
 800106c:	f002 fa6b 	bl	8003546 <HAL_GPIO_WritePin>
		  HAL_Delay(DELAY_COND);
 8001070:	2006      	movs	r0, #6
 8001072:	f001 fb43 	bl	80026fc <HAL_Delay>

		  counterflagPWM=0;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <PWM_COND+0x80>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
		  counter=0;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <PWM_COND+0x84>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	for(PWM_loop=0;PWM_loop<20;PWM_loop++){
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <PWM_COND+0x78>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <PWM_COND+0x78>)
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <PWM_COND+0x78>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b13      	cmp	r3, #19
 8001092:	ddcd      	ble.n	8001030 <PWM_COND+0xc>
	}

}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200003ac 	.word	0x200003ac
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	20000708 	.word	0x20000708
 80010a8:	200003a8 	.word	0x200003a8

080010ac <PWM_MOIST>:
void PWM_MOIST(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0


	for(PWM_loop=0;PWM_loop<2500000;PWM_loop++){
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <PWM_MOIST+0x38>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e00b      	b.n	80010d0 <PWM_MOIST+0x24>
		  __NOP();
 80010b8:	bf00      	nop
		  GPIOB->ODR ^= GPIO_ODR_ODR3;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <PWM_MOIST+0x3c>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <PWM_MOIST+0x3c>)
 80010c0:	f083 0308 	eor.w	r3, r3, #8
 80010c4:	60d3      	str	r3, [r2, #12]
	for(PWM_loop=0;PWM_loop<2500000;PWM_loop++){
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <PWM_MOIST+0x38>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <PWM_MOIST+0x38>)
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <PWM_MOIST+0x38>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <PWM_MOIST+0x40>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	dbee      	blt.n	80010b8 <PWM_MOIST+0xc>
	}

}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	200003ac 	.word	0x200003ac
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	002625a0 	.word	0x002625a0

080010f0 <SSD1306_INITS>:


void SSD1306_INITS()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	  ssd1306_Init();
 80010f4:	f000 fe70 	bl	8001dd8 <ssd1306_Init>
	  ssd1306_UpdateScreen();
 80010f8:	f000 fef0 	bl	8001edc <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 80010fc:	2032      	movs	r0, #50	; 0x32
 80010fe:	f001 fafd 	bl	80026fc <HAL_Delay>
	  ssd1306_Fill(0);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 fed2 	bl	8001eac <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 8001108:	f000 fee8 	bl	8001edc <ssd1306_UpdateScreen>
	  ssd1306_WriteString("Telectronio",Font_11x18,1);
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <SSD1306_INITS+0x9c>)
 800110e:	2301      	movs	r3, #1
 8001110:	ca06      	ldmia	r2, {r1, r2}
 8001112:	481f      	ldr	r0, [pc, #124]	; (8001190 <SSD1306_INITS+0xa0>)
 8001114:	f000 ffe4 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001118:	f000 fee0 	bl	8001edc <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f001 faec 	bl	80026fc <HAL_Delay>
	  ssd1306_Fill(0);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 fec1 	bl	8001eac <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 800112a:	f000 fed7 	bl	8001edc <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 800112e:	2032      	movs	r0, #50	; 0x32
 8001130:	f001 fae4 	bl	80026fc <HAL_Delay>
	  ssd1306_SetCursor(0, 0);
 8001134:	2100      	movs	r1, #0
 8001136:	2000      	movs	r0, #0
 8001138:	f000 fff8 	bl	800212c <ssd1306_SetCursor>
	  ssd1306_WriteString("Soil", Font_11x18,1);
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <SSD1306_INITS+0x9c>)
 800113e:	2301      	movs	r3, #1
 8001140:	ca06      	ldmia	r2, {r1, r2}
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <SSD1306_INITS+0xa4>)
 8001144:	f000 ffcc 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 19);
 8001148:	2113      	movs	r1, #19
 800114a:	2000      	movs	r0, #0
 800114c:	f000 ffee 	bl	800212c <ssd1306_SetCursor>
	  ssd1306_WriteString("Meaurement", Font_11x18,1);
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <SSD1306_INITS+0x9c>)
 8001152:	2301      	movs	r3, #1
 8001154:	ca06      	ldmia	r2, {r1, r2}
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <SSD1306_INITS+0xa8>)
 8001158:	f000 ffc2 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 38);
 800115c:	2126      	movs	r1, #38	; 0x26
 800115e:	2000      	movs	r0, #0
 8001160:	f000 ffe4 	bl	800212c <ssd1306_SetCursor>
	  ssd1306_WriteString("Version1", Font_11x18,1);
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <SSD1306_INITS+0x9c>)
 8001166:	2301      	movs	r3, #1
 8001168:	ca06      	ldmia	r2, {r1, r2}
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <SSD1306_INITS+0xac>)
 800116c:	f000 ffb8 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001170:	f000 feb4 	bl	8001edc <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f001 fac0 	bl	80026fc <HAL_Delay>
	  ssd1306_Fill(0);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 fe95 	bl	8001eac <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 8001182:	f000 feab 	bl	8001edc <ssd1306_UpdateScreen>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	080080d8 	.word	0x080080d8
 8001194:	080080e4 	.word	0x080080e4
 8001198:	080080ec 	.word	0x080080ec
 800119c:	080080f8 	.word	0x080080f8

080011a0 <delay>:

void delay(uint16_t delay){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <delay+0x2c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 80011b2:	bf00      	nop
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <delay+0x2c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3f9      	bcc.n	80011b4 <delay+0x14>
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000284 	.word	0x20000284

080011d0 <Set_Pin_Output>:


void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f002 f807 	bl	8003210 <HAL_GPIO_Init>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct={0};
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin=GPIO_Pin;
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f001 ffea 	bl	8003210 <HAL_GPIO_Init>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <DS18B20_Start>:
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull=GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
}
uint8_t DS18B20_Start (void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	uint8_t Response=0;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 800124e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001252:	4815      	ldr	r0, [pc, #84]	; (80012a8 <DS18B20_Start+0x64>)
 8001254:	f7ff ffbc 	bl	80011d0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125e:	4812      	ldr	r0, [pc, #72]	; (80012a8 <DS18B20_Start+0x64>)
 8001260:	f002 f971 	bl	8003546 <HAL_GPIO_WritePin>
	delay(480);
 8001264:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001268:	f7ff ff9a 	bl	80011a0 <delay>
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800126c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <DS18B20_Start+0x64>)
 8001272:	f7ff ffca 	bl	800120a <Set_Pin_Input>
	delay(60);
 8001276:	203c      	movs	r0, #60	; 0x3c
 8001278:	f7ff ff92 	bl	80011a0 <delay>

	if(!(HAL_GPIO_ReadPin (DS18B20_PORT,DS18B20_PIN))) Response =1;
 800127c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <DS18B20_Start+0x64>)
 8001282:	f002 f949 	bl	8003518 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <DS18B20_Start+0x4e>
 800128c:	2301      	movs	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	e001      	b.n	8001296 <DS18B20_Start+0x52>
	else Response = -1;
 8001292:	23ff      	movs	r3, #255	; 0xff
 8001294:	71fb      	strb	r3, [r7, #7]
	delay(480);
 8001296:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800129a:	f7ff ff81 	bl	80011a0 <delay>
	return Response;
 800129e:	79fb      	ldrb	r3, [r7, #7]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010c00 	.word	0x40010c00

080012ac <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80012b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <DS18B20_Write+0x94>)
 80012bc:	f7ff ff88 	bl	80011d0 <Set_Pin_Output>

	for(int i=0; i<8; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e034      	b.n	8001330 <DS18B20_Write+0x84>
	{
		if((data&(1<<i))!=0)
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	fa42 f303 	asr.w	r3, r2, r3
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d016      	beq.n	8001304 <DS18B20_Write+0x58>
		{
			//write 1
			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80012d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DS18B20_Write+0x94>)
 80012dc:	f7ff ff78 	bl	80011d0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e6:	4816      	ldr	r0, [pc, #88]	; (8001340 <DS18B20_Write+0x94>)
 80012e8:	f002 f92d 	bl	8003546 <HAL_GPIO_WritePin>
			delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff ff57 	bl	80011a0 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 80012f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <DS18B20_Write+0x94>)
 80012f8:	f7ff ff87 	bl	800120a <Set_Pin_Input>
			delay(60);
 80012fc:	203c      	movs	r0, #60	; 0x3c
 80012fe:	f7ff ff4f 	bl	80011a0 <delay>
 8001302:	e012      	b.n	800132a <DS18B20_Write+0x7e>
		}
		else
		{
			//write 0

			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DS18B20_Write+0x94>)
 800130a:	f7ff ff61 	bl	80011d0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <DS18B20_Write+0x94>)
 8001316:	f002 f916 	bl	8003546 <HAL_GPIO_WritePin>
			delay(60);
 800131a:	203c      	movs	r0, #60	; 0x3c
 800131c:	f7ff ff40 	bl	80011a0 <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <DS18B20_Write+0x94>)
 8001326:	f7ff ff70 	bl	800120a <Set_Pin_Input>
	for(int i=0; i<8; i++)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b07      	cmp	r3, #7
 8001334:	ddc7      	ble.n	80012c6 <DS18B20_Write+0x1a>

		}
	}
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010c00 	.word	0x40010c00

08001344 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	481c      	ldr	r0, [pc, #112]	; (80013c4 <DS18B20_Read+0x80>)
 8001354:	f7ff ff59 	bl	800120a <Set_Pin_Input>

	for(int i=0;i<8;i++)
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	e02a      	b.n	80013b4 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 800135e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <DS18B20_Read+0x80>)
 8001364:	f7ff ff34 	bl	80011d0 <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <DS18B20_Read+0x80>)
 8001370:	f002 f8e9 	bl	8003546 <HAL_GPIO_WritePin>
		delay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff ff13 	bl	80011a0 <delay>
		Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800137a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <DS18B20_Read+0x80>)
 8001380:	f7ff ff43 	bl	800120a <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT,DS18B20_PIN))
 8001384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <DS18B20_Read+0x80>)
 800138a:	f002 f8c5 	bl	8003518 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <DS18B20_Read+0x64>
		{
			value |= 1<<i; //read=1
 8001394:	2201      	movs	r2, #1
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b25a      	sxtb	r2, r3
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 80013a8:	203c      	movs	r0, #60	; 0x3c
 80013aa:	f7ff fef9 	bl	80011a0 <delay>
	for(int i=0;i<8;i++)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	ddd1      	ble.n	800135e <DS18B20_Read+0x1a>
	}
	return value;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40010c00 	.word	0x40010c00

080013c8 <DS18B20_GetTemp>:

float DS18B20_GetTemp(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    Presence = DS18B20_Start();
 80013cc:	f7ff ff3a 	bl	8001244 <DS18B20_Start>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <DS18B20_GetTemp+0xa4>)
 80013d6:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 f98f 	bl	80026fc <HAL_Delay>

    DS18B20_Write(0xCC); // SKIP ROM
 80013de:	20cc      	movs	r0, #204	; 0xcc
 80013e0:	f7ff ff64 	bl	80012ac <DS18B20_Write>
    DS18B20_Write(0x44); // Convert T
 80013e4:	2044      	movs	r0, #68	; 0x44
 80013e6:	f7ff ff61 	bl	80012ac <DS18B20_Write>

    HAL_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f001 f986 	bl	80026fc <HAL_Delay>

    Presence = DS18B20_Start();
 80013f0:	f7ff ff28 	bl	8001244 <DS18B20_Start>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <DS18B20_GetTemp+0xa4>)
 80013fa:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f001 f97d 	bl	80026fc <HAL_Delay>

    DS18B20_Write(0xCC);
 8001402:	20cc      	movs	r0, #204	; 0xcc
 8001404:	f7ff ff52 	bl	80012ac <DS18B20_Write>
    DS18B20_Write(0xBE); // Read scratch pad
 8001408:	20be      	movs	r0, #190	; 0xbe
 800140a:	f7ff ff4f 	bl	80012ac <DS18B20_Write>

    Temp_byte1 = DS18B20_Read();
 800140e:	f7ff ff99 	bl	8001344 <DS18B20_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <DS18B20_GetTemp+0xa8>)
 8001418:	701a      	strb	r2, [r3, #0]
    Temp_byte2 = DS18B20_Read();
 800141a:	f7ff ff93 	bl	8001344 <DS18B20_Read>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <DS18B20_GetTemp+0xac>)
 8001424:	701a      	strb	r2, [r3, #0]
    TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <DS18B20_GetTemp+0xac>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <DS18B20_GetTemp+0xa8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <DS18B20_GetTemp+0xb0>)
 800143c:	801a      	strh	r2, [r3, #0]
    Temperature = (float)TEMP / 16;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <DS18B20_GetTemp+0xb0>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc26 	bl	8000c94 <__aeabi_ui2f>
 8001448:	4603      	mov	r3, r0
 800144a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd2c 	bl	8000eac <__aeabi_fdiv>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <DS18B20_GetTemp+0xb4>)
 800145a:	601a      	str	r2, [r3, #0]



    HAL_Delay(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f001 f94d 	bl	80026fc <HAL_Delay>

    return Temperature;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <DS18B20_GetTemp+0xb4>)
 8001464:	681b      	ldr	r3, [r3, #0]
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003c0 	.word	0x200003c0
 8001470:	200003c1 	.word	0x200003c1
 8001474:	200003c2 	.word	0x200003c2
 8001478:	200003c4 	.word	0x200003c4
 800147c:	200003bc 	.word	0x200003bc

08001480 <ADC_CH1>:

void ADC_CH1(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001498:	2304      	movs	r3, #4
 800149a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <ADC_CH1+0x38>)
 80014a2:	f001 fc13 	bl	8002ccc <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <ADC_CH1+0x30>
	{
	Error_Handler();
 80014ac:	f000 fc56 	bl	8001d5c <Error_Handler>
	}
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000200 	.word	0x20000200

080014bc <ADC_CH2>:
void ADC_CH2(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80014d4:	2304      	movs	r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <ADC_CH2+0x38>)
 80014de:	f001 fbf5 	bl	8002ccc <HAL_ADC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <ADC_CH2+0x30>
	{
	Error_Handler();
 80014e8:	f000 fc38 	bl	8001d5c <Error_Handler>
	}
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000200 	.word	0x20000200

080014f8 <ADC_CH3>:
void ADC_CH3(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8001508:	2303      	movs	r3, #3
 800150a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800150c:	2301      	movs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001510:	2304      	movs	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <ADC_CH3+0x38>)
 800151a:	f001 fbd7 	bl	8002ccc <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <ADC_CH3+0x30>
	{
	Error_Handler();
 8001524:	f000 fc1a 	bl	8001d5c <Error_Handler>
	}
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000200 	.word	0x20000200
 8001534:	00000000 	.word	0x00000000

08001538 <adc_value_to_voltage>:
float adc_value_to_voltage(uint16_t adc_value) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
    return (adc_value / 4095.0) * VREF; // 4095 for 12-bit resolution
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ff5d 	bl	8000404 <__aeabi_i2d>
 800154a:	a30d      	add	r3, pc, #52	; (adr r3, 8001580 <adc_value_to_voltage+0x48>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f8ec 	bl	800072c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	a30a      	add	r3, pc, #40	; (adr r3, 8001588 <adc_value_to_voltage+0x50>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe ffb9 	bl	80004d8 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fa8b 	bl	8000a88 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	40affe00 	.word	0x40affe00
 8001588:	00000000 	.word	0x00000000
 800158c:	40a9dc00 	.word	0x40a9dc00

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f001 f850 	bl	8002638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f970 	bl	800187c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 fb6c 	bl	8001c78 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015a0:	f000 f9f8 	bl	8001994 <MX_I2C1_Init>
  MX_ADC2_Init();
 80015a4:	f000 f9c6 	bl	8001934 <MX_ADC2_Init>
  MX_TIM1_Init();
 80015a8:	f000 fa22 	bl	80019f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80015ac:	f000 fb0c 	bl	8001bc8 <MX_TIM4_Init>
  MX_TIM3_Init();
 80015b0:	f000 fabc 	bl	8001b2c <MX_TIM3_Init>
  MX_TIM2_Init();
 80015b4:	f000 fa6c 	bl	8001a90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_INITS();
 80015b8:	f7ff fd9a 	bl	80010f0 <SSD1306_INITS>
  HAL_ADC_Init(&hadc2);
 80015bc:	4898      	ldr	r0, [pc, #608]	; (8001820 <main+0x290>)
 80015be:	f001 f8c1 	bl	8002744 <HAL_ADC_Init>
  HAL_TIM_Base_Start(&htim1);
 80015c2:	4898      	ldr	r0, [pc, #608]	; (8001824 <main+0x294>)
 80015c4:	f003 fa50 	bl	8004a68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80015c8:	4897      	ldr	r0, [pc, #604]	; (8001828 <main+0x298>)
 80015ca:	f003 fa4d 	bl	8004a68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80015ce:	4897      	ldr	r0, [pc, #604]	; (800182c <main+0x29c>)
 80015d0:	f003 fa4a 	bl	8004a68 <HAL_TIM_Base_Start>
//  PWM_BEGIN_MOIST();
  HAL_TIM_Base_Start_IT(&htim3);
 80015d4:	4896      	ldr	r0, [pc, #600]	; (8001830 <main+0x2a0>)
 80015d6:	f003 fa91 	bl	8004afc <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);  // Set priority and subpriority as needed
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201d      	movs	r0, #29
 80015e0:	f001 fddf 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015e4:	201d      	movs	r0, #29
 80015e6:	f001 fdf8 	bl	80031da <HAL_NVIC_EnableIRQ>
  GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 80015ea:	4b92      	ldr	r3, [pc, #584]	; (8001834 <main+0x2a4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a91      	ldr	r2, [pc, #580]	; (8001834 <main+0x2a4>)
 80015f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80015f4:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= GPIO_CRL_MODE3;  // Output mode, max speed 50 MHz
 80015f6:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <main+0x2a4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a8e      	ldr	r2, [pc, #568]	; (8001834 <main+0x2a4>)
 80015fc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001600:	6013      	str	r3, [r2, #0]
  while (1)
  {


	  //MEASURE SEQUENTIAL
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)
 8001602:	2108      	movs	r1, #8
 8001604:	488c      	ldr	r0, [pc, #560]	; (8001838 <main+0x2a8>)
 8001606:	f001 ff87 	bl	8003518 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	2b01      	cmp	r3, #1
 800160e:	f040 8089 	bne.w	8001724 <main+0x194>
	  {	  av_cond=0;
 8001612:	4b8a      	ldr	r3, [pc, #552]	; (800183c <main+0x2ac>)
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	  	  av_moist=0;
 800161a:	4b89      	ldr	r3, [pc, #548]	; (8001840 <main+0x2b0>)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
		  PWM_COND();
 8001622:	f7ff fcff 	bl	8001024 <PWM_COND>

		  ADC_CH1();
 8001626:	f7ff ff2b 	bl	8001480 <ADC_CH1>
		  HAL_ADC_Start(&hadc2);
 800162a:	487d      	ldr	r0, [pc, #500]	; (8001820 <main+0x290>)
 800162c:	f001 f962 	bl	80028f4 <HAL_ADC_Start>
		  for(i=0;i<50;i++)
 8001630:	4b84      	ldr	r3, [pc, #528]	; (8001844 <main+0x2b4>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e02a      	b.n	800168e <main+0xfe>
		  {
		  HAL_ADC_PollForConversion(&hadc2, 1);
 8001638:	2101      	movs	r1, #1
 800163a:	4879      	ldr	r0, [pc, #484]	; (8001820 <main+0x290>)
 800163c:	f001 fa34 	bl	8002aa8 <HAL_ADC_PollForConversion>
		  adc_buffer[0]=HAL_ADC_GetValue(&hadc2);
 8001640:	4877      	ldr	r0, [pc, #476]	; (8001820 <main+0x290>)
 8001642:	f001 fb37 	bl	8002cb4 <HAL_ADC_GetValue>
 8001646:	4603      	mov	r3, r0
 8001648:	4a7f      	ldr	r2, [pc, #508]	; (8001848 <main+0x2b8>)
 800164a:	6013      	str	r3, [r2, #0]
		  voltage_buffer[0]=adc_value_to_voltage(adc_buffer[0]);
 800164c:	4b7e      	ldr	r3, [pc, #504]	; (8001848 <main+0x2b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff70 	bl	8001538 <adc_value_to_voltage>
 8001658:	4603      	mov	r3, r0
 800165a:	4a7c      	ldr	r2, [pc, #496]	; (800184c <main+0x2bc>)
 800165c:	6013      	str	r3, [r2, #0]
		  av_cond+=voltage_buffer[0]/50;
 800165e:	4b7b      	ldr	r3, [pc, #492]	; (800184c <main+0x2bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	497b      	ldr	r1, [pc, #492]	; (8001850 <main+0x2c0>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc21 	bl	8000eac <__aeabi_fdiv>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <main+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	4610      	mov	r0, r2
 8001676:	f7ff fa5d 	bl	8000b34 <__addsf3>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b6f      	ldr	r3, [pc, #444]	; (800183c <main+0x2ac>)
 8001680:	601a      	str	r2, [r3, #0]
		  for(i=0;i<50;i++)
 8001682:	4b70      	ldr	r3, [pc, #448]	; (8001844 <main+0x2b4>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b6e      	ldr	r3, [pc, #440]	; (8001844 <main+0x2b4>)
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <main+0x2b4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b31      	cmp	r3, #49	; 0x31
 8001694:	d9d0      	bls.n	8001638 <main+0xa8>
		  }
		  HAL_ADC_Stop(&hadc2);
 8001696:	4862      	ldr	r0, [pc, #392]	; (8001820 <main+0x290>)
 8001698:	f001 f9da 	bl	8002a50 <HAL_ADC_Stop>

		  HAL_Delay(1000);
 800169c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a0:	f001 f82c 	bl	80026fc <HAL_Delay>

		  PWM_MOIST();
 80016a4:	f7ff fd02 	bl	80010ac <PWM_MOIST>

		  ADC_CH2();
 80016a8:	f7ff ff08 	bl	80014bc <ADC_CH2>
		  HAL_ADC_Start(&hadc2);
 80016ac:	485c      	ldr	r0, [pc, #368]	; (8001820 <main+0x290>)
 80016ae:	f001 f921 	bl	80028f4 <HAL_ADC_Start>
		  for(i=0;i<50;i++)
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <main+0x2b4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e02a      	b.n	8001710 <main+0x180>
		  {
		  HAL_ADC_PollForConversion(&hadc2, 1);
 80016ba:	2101      	movs	r1, #1
 80016bc:	4858      	ldr	r0, [pc, #352]	; (8001820 <main+0x290>)
 80016be:	f001 f9f3 	bl	8002aa8 <HAL_ADC_PollForConversion>
		  adc_buffer[1]=HAL_ADC_GetValue(&hadc2);
 80016c2:	4857      	ldr	r0, [pc, #348]	; (8001820 <main+0x290>)
 80016c4:	f001 faf6 	bl	8002cb4 <HAL_ADC_GetValue>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a5f      	ldr	r2, [pc, #380]	; (8001848 <main+0x2b8>)
 80016cc:	6053      	str	r3, [r2, #4]
		  voltage_buffer[1]=adc_value_to_voltage(adc_buffer[1]);
 80016ce:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <main+0x2b8>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff2f 	bl	8001538 <adc_value_to_voltage>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a5b      	ldr	r2, [pc, #364]	; (800184c <main+0x2bc>)
 80016de:	6053      	str	r3, [r2, #4]
		  av_moist+=voltage_buffer[1]/50;
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <main+0x2bc>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	495a      	ldr	r1, [pc, #360]	; (8001850 <main+0x2c0>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fbe0 	bl	8000eac <__aeabi_fdiv>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <main+0x2b0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f7ff fa1c 	bl	8000b34 <__addsf3>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <main+0x2b0>)
 8001702:	601a      	str	r2, [r3, #0]
		  for(i=0;i<50;i++)
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <main+0x2b4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <main+0x2b4>)
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <main+0x2b4>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b31      	cmp	r3, #49	; 0x31
 8001716:	d9d0      	bls.n	80016ba <main+0x12a>
		  }
		  HAL_ADC_Stop(&hadc2);
 8001718:	4841      	ldr	r0, [pc, #260]	; (8001820 <main+0x290>)
 800171a:	f001 f999 	bl	8002a50 <HAL_ADC_Stop>
		  HAL_Delay(2);
 800171e:	2002      	movs	r0, #2
 8001720:	f000 ffec 	bl	80026fc <HAL_Delay>
	  }




	  Temp=DS18B20_GetTemp();
 8001724:	f7ff fe50 	bl	80013c8 <DS18B20_GetTemp>
 8001728:	4603      	mov	r3, r0
 800172a:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <main+0x2c4>)
 800172c:	6013      	str	r3, [r2, #0]
//	  voltage_buffer[1]=adc_value_to_voltage(adc_buffer[1]);
//	  HAL_ADC_Stop(&hadc2);
//	  HAL_Delay(2);

	  //NTC BOARD TEMP
	  ADC_CH3();
 800172e:	f7ff fee3 	bl	80014f8 <ADC_CH3>
	  HAL_ADC_Start(&hadc2);
 8001732:	483b      	ldr	r0, [pc, #236]	; (8001820 <main+0x290>)
 8001734:	f001 f8de 	bl	80028f4 <HAL_ADC_Start>
	  HAL_Delay(2);
 8001738:	2002      	movs	r0, #2
 800173a:	f000 ffdf 	bl	80026fc <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 800173e:	2164      	movs	r1, #100	; 0x64
 8001740:	4837      	ldr	r0, [pc, #220]	; (8001820 <main+0x290>)
 8001742:	f001 f9b1 	bl	8002aa8 <HAL_ADC_PollForConversion>
	  adc_buffer[2]=HAL_ADC_GetValue(&hadc2);
 8001746:	4836      	ldr	r0, [pc, #216]	; (8001820 <main+0x290>)
 8001748:	f001 fab4 	bl	8002cb4 <HAL_ADC_GetValue>
 800174c:	4603      	mov	r3, r0
 800174e:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <main+0x2b8>)
 8001750:	6093      	str	r3, [r2, #8]
	  voltage_buffer[2]=adc_value_to_voltage(adc_buffer[2]);
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <main+0x2b8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff feed 	bl	8001538 <adc_value_to_voltage>
 800175e:	4603      	mov	r3, r0
 8001760:	4a3a      	ldr	r2, [pc, #232]	; (800184c <main+0x2bc>)
 8001762:	6093      	str	r3, [r2, #8]
	  HAL_ADC_Stop(&hadc2);
 8001764:	482e      	ldr	r0, [pc, #184]	; (8001820 <main+0x290>)
 8001766:	f001 f973 	bl	8002a50 <HAL_ADC_Stop>
	  HAL_Delay(2);
 800176a:	2002      	movs	r0, #2
 800176c:	f000 ffc6 	bl	80026fc <HAL_Delay>

	  ssd1306_SetCursor(0, 0);
 8001770:	2100      	movs	r1, #0
 8001772:	2000      	movs	r0, #0
 8001774:	f000 fcda 	bl	800212c <ssd1306_SetCursor>
	  sprintf(bufferConduct,"Cond %.2fV",av_cond);
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <main+0x2ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe53 	bl	8000428 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4934      	ldr	r1, [pc, #208]	; (8001858 <main+0x2c8>)
 8001788:	4834      	ldr	r0, [pc, #208]	; (800185c <main+0x2cc>)
 800178a:	f004 fb4b 	bl	8005e24 <siprintf>
	  ssd1306_WriteString(bufferConduct,Font_7x10,1);
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <main+0x2d0>)
 8001790:	2301      	movs	r3, #1
 8001792:	ca06      	ldmia	r2, {r1, r2}
 8001794:	4831      	ldr	r0, [pc, #196]	; (800185c <main+0x2cc>)
 8001796:	f000 fca3 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 11);
 800179a:	210b      	movs	r1, #11
 800179c:	2000      	movs	r0, #0
 800179e:	f000 fcc5 	bl	800212c <ssd1306_SetCursor>
	  sprintf(bufferMoist,"Moist %.2fV",av_moist);
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <main+0x2b0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe3e 	bl	8000428 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	492c      	ldr	r1, [pc, #176]	; (8001864 <main+0x2d4>)
 80017b2:	482d      	ldr	r0, [pc, #180]	; (8001868 <main+0x2d8>)
 80017b4:	f004 fb36 	bl	8005e24 <siprintf>
	  ssd1306_WriteString(bufferMoist,Font_7x10,1);
 80017b8:	4a29      	ldr	r2, [pc, #164]	; (8001860 <main+0x2d0>)
 80017ba:	2301      	movs	r3, #1
 80017bc:	ca06      	ldmia	r2, {r1, r2}
 80017be:	482a      	ldr	r0, [pc, #168]	; (8001868 <main+0x2d8>)
 80017c0:	f000 fc8e 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 21);
 80017c4:	2115      	movs	r1, #21
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 fcb0 	bl	800212c <ssd1306_SetCursor>
	  sprintf(bufferTemp,"Temp %.2fV",voltage_buffer[2]);
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <main+0x2bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe29 	bl	8000428 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4924      	ldr	r1, [pc, #144]	; (800186c <main+0x2dc>)
 80017dc:	4824      	ldr	r0, [pc, #144]	; (8001870 <main+0x2e0>)
 80017de:	f004 fb21 	bl	8005e24 <siprintf>
	  ssd1306_WriteString(bufferTemp,Font_7x10,1);
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <main+0x2d0>)
 80017e4:	2301      	movs	r3, #1
 80017e6:	ca06      	ldmia	r2, {r1, r2}
 80017e8:	4821      	ldr	r0, [pc, #132]	; (8001870 <main+0x2e0>)
 80017ea:	f000 fc79 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 31);
 80017ee:	211f      	movs	r1, #31
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fc9b 	bl	800212c <ssd1306_SetCursor>
	  sprintf(bufferDs18b20,"ds18b20 %.2fV",Temp);
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <main+0x2c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe14 	bl	8000428 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	491b      	ldr	r1, [pc, #108]	; (8001874 <main+0x2e4>)
 8001806:	481c      	ldr	r0, [pc, #112]	; (8001878 <main+0x2e8>)
 8001808:	f004 fb0c 	bl	8005e24 <siprintf>
	  ssd1306_WriteString(bufferDs18b20,Font_7x10,1);
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <main+0x2d0>)
 800180e:	2301      	movs	r3, #1
 8001810:	ca06      	ldmia	r2, {r1, r2}
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <main+0x2e8>)
 8001814:	f000 fc64 	bl	80020e0 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001818:	f000 fb60 	bl	8001edc <ssd1306_UpdateScreen>
  {
 800181c:	e6f1      	b.n	8001602 <main+0x72>
 800181e:	bf00      	nop
 8001820:	20000200 	.word	0x20000200
 8001824:	20000284 	.word	0x20000284
 8001828:	200002cc 	.word	0x200002cc
 800182c:	2000035c 	.word	0x2000035c
 8001830:	20000314 	.word	0x20000314
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40011000 	.word	0x40011000
 800183c:	200003b0 	.word	0x200003b0
 8001840:	200003b4 	.word	0x200003b4
 8001844:	200003a4 	.word	0x200003a4
 8001848:	200006e8 	.word	0x200006e8
 800184c:	200006f8 	.word	0x200006f8
 8001850:	42480000 	.word	0x42480000
 8001854:	200003b8 	.word	0x200003b8
 8001858:	08008104 	.word	0x08008104
 800185c:	200003c8 	.word	0x200003c8
 8001860:	20000000 	.word	0x20000000
 8001864:	08008110 	.word	0x08008110
 8001868:	20000490 	.word	0x20000490
 800186c:	0800811c 	.word	0x0800811c
 8001870:	20000558 	.word	0x20000558
 8001874:	08008128 	.word	0x08008128
 8001878:	20000620 	.word	0x20000620

0800187c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	; 0x50
 8001880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001886:	2228      	movs	r2, #40	; 0x28
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 fb47 	bl	8005f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ba:	2301      	movs	r3, #1
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fafc 	bl	8003ed0 <HAL_RCC_OscConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018de:	f000 fa3d 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e2:	230f      	movs	r3, #15
 80018e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fd68 	bl	80043d4 <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800190a:	f000 fa27 	bl	8001d5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800190e:	2302      	movs	r3, #2
 8001910:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fee8 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001926:	f000 fa19 	bl	8001d5c <Error_Handler>
  }
}
 800192a:	bf00      	nop
 800192c:	3750      	adds	r7, #80	; 0x50
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_ADC2_Init+0x58>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <MX_ADC2_Init+0x5c>)
 8001948:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_ADC2_Init+0x58>)
 800194c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001950:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_ADC2_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_ADC2_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_ADC2_Init+0x58>)
 8001960:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001964:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_ADC2_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <MX_ADC2_Init+0x58>)
 800196e:	2201      	movs	r2, #1
 8001970:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <MX_ADC2_Init+0x58>)
 8001974:	f000 fee6 	bl	8002744 <HAL_ADC_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 800197e:	f000 f9ed 	bl	8001d5c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000200 	.word	0x20000200
 8001990:	40012800 	.word	0x40012800

08001994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C1_Init+0x50>)
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <MX_I2C1_Init+0x54>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_I2C1_Init+0x58>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019d2:	f001 fdd1 	bl	8003578 <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019dc:	f000 f9be 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000230 	.word	0x20000230
 80019e8:	40005400 	.word	0x40005400
 80019ec:	000186a0 	.word	0x000186a0

080019f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <MX_TIM1_Init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a14:	2247      	movs	r2, #71	; 0x47
 8001a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a3a:	f002 ffc5 	bl	80049c8 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a44:	f000 f98a 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a56:	f003 fa4d 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a60:	f000 f97c 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a72:	f003 fc47 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a7c:	f000 f96e 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000284 	.word	0x20000284
 8001a8c:	40012c00 	.word	0x40012c00

08001a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 287;
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001ab6:	f240 121f 	movw	r2, #287	; 0x11f
 8001aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001ac4:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ac8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad6:	4814      	ldr	r0, [pc, #80]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001ad8:	f002 ff76 	bl	80049c8 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ae2:	f000 f93b 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4619      	mov	r1, r3
 8001af2:	480d      	ldr	r0, [pc, #52]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001af4:	f003 f9fe 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001afe:	f000 f92d 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <MX_TIM2_Init+0x98>)
 8001b10:	f003 fbf8 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b1a:	f000 f91f 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002cc 	.word	0x200002cc

08001b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b50:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b5e:	220a      	movs	r2, #10
 8001b60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b70:	f002 ff2a 	bl	80049c8 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b7a:	f000 f8ef 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b8c:	f003 f9b2 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b96:	f000 f8e1 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001ba8:	f003 fbac 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bb2:	f000 f8d3 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000314 	.word	0x20000314
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001be6:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001bec:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001bf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001bfa:	22ff      	movs	r2, #255	; 0xff
 8001bfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c0c:	f002 fedc 	bl	80049c8 <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c16:	f000 f8a1 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	4812      	ldr	r0, [pc, #72]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c28:	f003 f964 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 f893 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4619      	mov	r1, r3
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c44:	f003 fb5e 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001c4e:	f000 f885 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c52:	2100      	movs	r1, #0
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c56:	f002 ffa3 	bl	8004ba0 <HAL_TIM_PWM_Start>
  HAL_Delay(100); // Introduce a delay (adjust as needed)
 8001c5a:	2064      	movs	r0, #100	; 0x64
 8001c5c:	f000 fd4e 	bl	80026fc <HAL_Delay>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c60:	2104      	movs	r1, #4
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <MX_TIM4_Init+0xa8>)
 8001c64:	f002 ff9c 	bl	8004ba0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000035c 	.word	0x2000035c
 8001c74:	40000800 	.word	0x40000800

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_GPIO_Init+0xd8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	21c8      	movs	r1, #200	; 0xc8
 8001cf0:	4818      	ldr	r0, [pc, #96]	; (8001d54 <MX_GPIO_Init+0xdc>)
 8001cf2:	f001 fc28 	bl	8003546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4619      	mov	r1, r3
 8001d08:	4813      	ldr	r0, [pc, #76]	; (8001d58 <MX_GPIO_Init+0xe0>)
 8001d0a:	f001 fa81 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	4619      	mov	r1, r3
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <MX_GPIO_Init+0xdc>)
 8001d26:	f001 fa73 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_GPIO_Init+0xdc>)
 8001d42:	f001 fa65 	bl	8003210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	40011000 	.word	0x40011000

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>

08001d66 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
	...

08001d74 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	2301      	movs	r3, #1
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2178      	movs	r1, #120	; 0x78
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <ssd1306_WriteCommand+0x2c>)
 8001d94:	f001 fd34 	bl	8003800 <HAL_I2C_Mem_Write>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000230 	.word	0x20000230

08001da4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af04      	add	r7, sp, #16
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295
 8001db6:	9202      	str	r2, [sp, #8]
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2240      	movs	r2, #64	; 0x40
 8001dc2:	2178      	movs	r1, #120	; 0x78
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <ssd1306_WriteData+0x30>)
 8001dc6:	f001 fd1b 	bl	8003800 <HAL_I2C_Mem_Write>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000230 	.word	0x20000230

08001dd8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ddc:	f7ff ffc3 	bl	8001d66 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001de0:	2064      	movs	r0, #100	; 0x64
 8001de2:	f000 fc8b 	bl	80026fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f9cc 	bl	8002184 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001dec:	2020      	movs	r0, #32
 8001dee:	f7ff ffc1 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff ffbe 	bl	8001d74 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001df8:	20b0      	movs	r0, #176	; 0xb0
 8001dfa:	f7ff ffbb 	bl	8001d74 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001dfe:	20c8      	movs	r0, #200	; 0xc8
 8001e00:	f7ff ffb8 	bl	8001d74 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff ffb5 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e0a:	2010      	movs	r0, #16
 8001e0c:	f7ff ffb2 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e10:	2040      	movs	r0, #64	; 0x40
 8001e12:	f7ff ffaf 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e16:	20ff      	movs	r0, #255	; 0xff
 8001e18:	f000 f9a0 	bl	800215c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e1c:	20a1      	movs	r0, #161	; 0xa1
 8001e1e:	f7ff ffa9 	bl	8001d74 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e22:	20a6      	movs	r0, #166	; 0xa6
 8001e24:	f7ff ffa6 	bl	8001d74 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e28:	20a8      	movs	r0, #168	; 0xa8
 8001e2a:	f7ff ffa3 	bl	8001d74 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001e2e:	203f      	movs	r0, #63	; 0x3f
 8001e30:	f7ff ffa0 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e34:	20a4      	movs	r0, #164	; 0xa4
 8001e36:	f7ff ff9d 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001e3a:	20d3      	movs	r0, #211	; 0xd3
 8001e3c:	f7ff ff9a 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff ff97 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e46:	20d5      	movs	r0, #213	; 0xd5
 8001e48:	f7ff ff94 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001e4c:	20f0      	movs	r0, #240	; 0xf0
 8001e4e:	f7ff ff91 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001e52:	20d9      	movs	r0, #217	; 0xd9
 8001e54:	f7ff ff8e 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001e58:	2022      	movs	r0, #34	; 0x22
 8001e5a:	f7ff ff8b 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001e5e:	20da      	movs	r0, #218	; 0xda
 8001e60:	f7ff ff88 	bl	8001d74 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001e64:	2012      	movs	r0, #18
 8001e66:	f7ff ff85 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001e6a:	20db      	movs	r0, #219	; 0xdb
 8001e6c:	f7ff ff82 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e70:	2020      	movs	r0, #32
 8001e72:	f7ff ff7f 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e76:	208d      	movs	r0, #141	; 0x8d
 8001e78:	f7ff ff7c 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001e7c:	2014      	movs	r0, #20
 8001e7e:	f7ff ff79 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f97e 	bl	8002184 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 f80f 	bl	8001eac <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001e8e:	f000 f825 	bl	8001edc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <ssd1306_Init+0xd0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <ssd1306_Init+0xd0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001e9e:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <ssd1306_Init+0xd0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	711a      	strb	r2, [r3, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000b0c 	.word	0x20000b0c

08001eac <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <ssd1306_Fill+0x14>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <ssd1306_Fill+0x16>
 8001ec0:	23ff      	movs	r3, #255	; 0xff
 8001ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <ssd1306_Fill+0x2c>)
 8001eca:	f004 f828 	bl	8005f1e <memset>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000070c 	.word	0x2000070c

08001edc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	e016      	b.n	8001f16 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	3b50      	subs	r3, #80	; 0x50
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff40 	bl	8001d74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff ff3d 	bl	8001d74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001efa:	2010      	movs	r0, #16
 8001efc:	f7ff ff3a 	bl	8001d74 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	01db      	lsls	r3, r3, #7
 8001f04:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <ssd1306_UpdateScreen+0x4c>)
 8001f06:	4413      	add	r3, r2
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff4a 	bl	8001da4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	3301      	adds	r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b07      	cmp	r3, #7
 8001f1a:	d9e5      	bls.n	8001ee8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000070c 	.word	0x2000070c

08001f2c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	460b      	mov	r3, r1
 8001f38:	71bb      	strb	r3, [r7, #6]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db3d      	blt.n	8001fc2 <ssd1306_DrawPixel+0x96>
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	2b3f      	cmp	r3, #63	; 0x3f
 8001f4a:	d83a      	bhi.n	8001fc2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d11a      	bne.n	8001f88 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	08db      	lsrs	r3, r3, #3
 8001f58:	b2d8      	uxtb	r0, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	01db      	lsls	r3, r3, #7
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <ssd1306_DrawPixel+0xa0>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	b25a      	sxtb	r2, r3
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b259      	sxtb	r1, r3
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	01db      	lsls	r3, r3, #7
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2c9      	uxtb	r1, r1
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <ssd1306_DrawPixel+0xa0>)
 8001f84:	54d1      	strb	r1, [r2, r3]
 8001f86:	e01d      	b.n	8001fc4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	b2d8      	uxtb	r0, r3
 8001f90:	4603      	mov	r3, r0
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	4413      	add	r3, r2
 8001f96:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <ssd1306_DrawPixel+0xa0>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	b25a      	sxtb	r2, r3
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b259      	sxtb	r1, r3
 8001fb2:	79fa      	ldrb	r2, [r7, #7]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2c9      	uxtb	r1, r1
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <ssd1306_DrawPixel+0xa0>)
 8001fbe:	54d1      	strb	r1, [r2, r3]
 8001fc0:	e000      	b.n	8001fc4 <ssd1306_DrawPixel+0x98>
        return;
 8001fc2:	bf00      	nop
    }
}
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	2000070c 	.word	0x2000070c

08001fd0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	1d38      	adds	r0, r7, #4
 8001fda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4623      	mov	r3, r4
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	d902      	bls.n	8001ff4 <ssd1306_WriteChar+0x24>
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b7e      	cmp	r3, #126	; 0x7e
 8001ff2:	d901      	bls.n	8001ff8 <ssd1306_WriteChar+0x28>
        return 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e06d      	b.n	80020d4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <ssd1306_WriteChar+0x10c>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	793b      	ldrb	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	dc06      	bgt.n	8002014 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <ssd1306_WriteChar+0x10c>)
 8002008:	885b      	ldrh	r3, [r3, #2]
 800200a:	461a      	mov	r2, r3
 800200c:	797b      	ldrb	r3, [r7, #5]
 800200e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	dd01      	ble.n	8002018 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002014:	2300      	movs	r3, #0
 8002016:	e05d      	b.n	80020d4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	e04c      	b.n	80020b8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	3b20      	subs	r3, #32
 8002024:	7979      	ldrb	r1, [r7, #5]
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4619      	mov	r1, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	440b      	add	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e034      	b.n	80020a8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <ssd1306_WriteChar+0x10c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4413      	add	r3, r2
 800205a:	b2d8      	uxtb	r0, r3
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <ssd1306_WriteChar+0x10c>)
 800205e:	885b      	ldrh	r3, [r3, #2]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	7bba      	ldrb	r2, [r7, #14]
 800206c:	4619      	mov	r1, r3
 800206e:	f7ff ff5d 	bl	8001f2c <ssd1306_DrawPixel>
 8002072:	e016      	b.n	80020a2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <ssd1306_WriteChar+0x10c>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <ssd1306_WriteChar+0x10c>)
 8002084:	885b      	ldrh	r3, [r3, #2]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4413      	add	r3, r2
 800208e:	b2d9      	uxtb	r1, r3
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	f7ff ff45 	bl	8001f2c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	793b      	ldrb	r3, [r7, #4]
 80020aa:	461a      	mov	r2, r3
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d3c5      	bcc.n	800203e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	461a      	mov	r2, r3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4293      	cmp	r3, r2
 80020c0:	d3ad      	bcc.n	800201e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <ssd1306_WriteChar+0x10c>)
 80020c4:	881a      	ldrh	r2, [r3, #0]
 80020c6:	793b      	ldrb	r3, [r7, #4]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b03      	ldr	r3, [pc, #12]	; (80020dc <ssd1306_WriteChar+0x10c>)
 80020d0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3724      	adds	r7, #36	; 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	20000b0c 	.word	0x20000b0c

080020e0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	1d38      	adds	r0, r7, #4
 80020ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80020ee:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80020f0:	e012      	b.n	8002118 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	7818      	ldrb	r0, [r3, #0]
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	1d3a      	adds	r2, r7, #4
 80020fa:	ca06      	ldmia	r2, {r1, r2}
 80020fc:	f7ff ff68 	bl	8001fd0 <ssd1306_WriteChar>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d002      	beq.n	8002112 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	e008      	b.n	8002124 <ssd1306_WriteString+0x44>
        }
        str++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e8      	bne.n	80020f2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	781b      	ldrb	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	460a      	mov	r2, r1
 8002136:	71fb      	strb	r3, [r7, #7]
 8002138:	4613      	mov	r3, r2
 800213a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <ssd1306_SetCursor+0x2c>)
 8002142:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <ssd1306_SetCursor+0x2c>)
 800214a:	805a      	strh	r2, [r3, #2]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000b0c 	.word	0x20000b0c

0800215c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002166:	2381      	movs	r3, #129	; 0x81
 8002168:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe01 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fdfd 	bl	8001d74 <ssd1306_WriteCommand>
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002194:	23af      	movs	r3, #175	; 0xaf
 8002196:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <ssd1306_SetDisplayOn+0x38>)
 800219a:	2201      	movs	r2, #1
 800219c:	715a      	strb	r2, [r3, #5]
 800219e:	e004      	b.n	80021aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80021a0:	23ae      	movs	r3, #174	; 0xae
 80021a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <ssd1306_SetDisplayOn+0x38>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fde1 	bl	8001d74 <ssd1306_WriteCommand>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000b0c 	.word	0x20000b0c

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_MspInit+0x5c>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <HAL_MspInit+0x5c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_MspInit+0x5c>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_MspInit+0x5c>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_MspInit+0x5c>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_MspInit+0x5c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_MspInit+0x60>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_MspInit+0x60>)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000

08002224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_ADC_MspInit+0x6c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d121      	bne.n	8002288 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_ADC_MspInit+0x70>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_ADC_MspInit+0x70>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_ADC_MspInit+0x70>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_ADC_MspInit+0x70>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <HAL_ADC_MspInit+0x70>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_ADC_MspInit+0x70>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002274:	230e      	movs	r3, #14
 8002276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002278:	2303      	movs	r3, #3
 800227a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4619      	mov	r1, r3
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <HAL_ADC_MspInit+0x74>)
 8002284:	f000 ffc4 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40012800 	.word	0x40012800
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800

0800229c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_I2C_MspInit+0x90>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d132      	bne.n	8002322 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_I2C_MspInit+0x94>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_I2C_MspInit+0x94>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_I2C_MspInit+0x94>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022da:	2312      	movs	r3, #18
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4812      	ldr	r0, [pc, #72]	; (8002334 <HAL_I2C_MspInit+0x98>)
 80022ea:	f000 ff91 	bl	8003210 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_I2C_MspInit+0x9c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_I2C_MspInit+0x9c>)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_I2C_MspInit+0x94>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_I2C_MspInit+0x94>)
 8002310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_I2C_MspInit+0x94>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40005400 	.word	0x40005400
 8002330:	40021000 	.word	0x40021000
 8002334:	40010c00 	.word	0x40010c00
 8002338:	40010000 	.word	0x40010000

0800233c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a28      	ldr	r2, [pc, #160]	; (80023ec <HAL_TIM_Base_MspInit+0xb0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10c      	bne.n	8002368 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 8002354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002358:	6193      	str	r3, [r2, #24]
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002366:	e03c      	b.n	80023e2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d10c      	bne.n	800238c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
}
 800238a:	e02a      	b.n	80023e2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d114      	bne.n	80023c0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	201d      	movs	r0, #29
 80023b4:	f000 fef5 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b8:	201d      	movs	r0, #29
 80023ba:	f000 ff0e 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 80023be:	e010      	b.n	80023e2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_TIM_Base_MspInit+0xbc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10b      	bne.n	80023e2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_TIM_Base_MspInit+0xb4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40000800 	.word	0x40000800

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002400:	e7fe      	b.n	8002400 <NMI_Handler+0x4>

08002402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <HardFault_Handler+0x4>

08002408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <MemManage_Handler+0x4>

0800240e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <UsageFault_Handler+0x4>

0800241a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002442:	f000 f93f 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM3_IRQHandler+0x10>)
 8002452:	f002 fc47 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000314 	.word	0x20000314

08002460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <_kill>:

int _kill(int pid, int sig)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002478:	f003 fda4 	bl	8005fc4 <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	2216      	movs	r2, #22
 8002480:	601a      	str	r2, [r3, #0]
  return -1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_exit>:

void _exit (int status)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002496:	f04f 31ff 	mov.w	r1, #4294967295
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffe7 	bl	800246e <_kill>
  while (1) {}    /* Make sure we hang here */
 80024a0:	e7fe      	b.n	80024a0 <_exit+0x12>

080024a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e00a      	b.n	80024ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b4:	f3af 8000 	nop.w
 80024b8:	4601      	mov	r1, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	60ba      	str	r2, [r7, #8]
 80024c0:	b2ca      	uxtb	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbf0      	blt.n	80024b4 <_read+0x12>
  }

  return len;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e009      	b.n	8002502 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	60ba      	str	r2, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	dbf1      	blt.n	80024ee <_write+0x12>
  }
  return len;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_close>:

int _close(int file)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253a:	605a      	str	r2, [r3, #4]
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <_isatty>:

int _isatty(int file)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <_sbrk+0x5c>)
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <_sbrk+0x60>)
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <_sbrk+0x64>)
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <_sbrk+0x68>)
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d207      	bcs.n	80025b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a4:	f003 fd0e 	bl	8005fc4 <__errno>
 80025a8:	4603      	mov	r3, r0
 80025aa:	220c      	movs	r2, #12
 80025ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	e009      	b.n	80025c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <_sbrk+0x64>)
 80025c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20005000 	.word	0x20005000
 80025d4:	00000400 	.word	0x00000400
 80025d8:	20000b14 	.word	0x20000b14
 80025dc:	20000c68 	.word	0x20000c68

080025e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff fff8 	bl	80025e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025f2:	490c      	ldr	r1, [pc, #48]	; (8002624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002608:	4c09      	ldr	r4, [pc, #36]	; (8002630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f003 fcdb 	bl	8005fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261a:	f7fe ffb9 	bl	8001590 <main>
  bx lr
 800261e:	4770      	bx	lr
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002628:	080099b4 	.word	0x080099b4
  ldr r2, =_sbss
 800262c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002630:	20000c68 	.word	0x20000c68

08002634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_2_IRQHandler>
	...

08002638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_Init+0x28>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_Init+0x28>)
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 fd9f 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264e:	200f      	movs	r0, #15
 8002650:	f000 f808 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002654:	f7ff fdb4 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fdb7 	bl	80031f6 <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f000 fd7f 	bl	80031a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <HAL_InitTick+0x5c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000010 	.word	0x20000010
 80026bc:	20000018 	.word	0x20000018
 80026c0:	20000014 	.word	0x20000014

080026c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_IncTick+0x1c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_IncTick+0x20>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <HAL_IncTick+0x20>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000018 	.word	0x20000018
 80026e4:	20000b18 	.word	0x20000b18

080026e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b02      	ldr	r3, [pc, #8]	; (80026f8 <HAL_GetTick+0x10>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000b18 	.word	0x20000b18

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff fff0 	bl	80026e8 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffe0 	bl	80026e8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000018 	.word	0x20000018

08002744 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0be      	b.n	80028e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fd4e 	bl	8002224 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fbf1 	bl	8002f70 <ADC_ConversionStop_Disable>
 800278e:	4603      	mov	r3, r0
 8002790:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 8099 	bne.w	80028d2 <HAL_ADC_Init+0x18e>
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 8095 	bne.w	80028d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027b0:	f023 0302 	bic.w	r3, r3, #2
 80027b4:	f043 0202 	orr.w	r2, r3, #2
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7b1b      	ldrb	r3, [r3, #12]
 80027ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027dc:	d003      	beq.n	80027e6 <HAL_ADC_Init+0xa2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_ADC_Init+0xa8>
 80027e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ea:	e000      	b.n	80027ee <HAL_ADC_Init+0xaa>
 80027ec:	2300      	movs	r3, #0
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7d1b      	ldrb	r3, [r3, #20]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d119      	bne.n	8002830 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7b1b      	ldrb	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	3b01      	subs	r3, #1
 800280a:	035a      	lsls	r2, r3, #13
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	e00b      	b.n	8002830 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	4b28      	ldr	r3, [pc, #160]	; (80028ec <HAL_ADC_Init+0x1a8>)
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	430b      	orrs	r3, r1
 8002856:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d003      	beq.n	800286a <HAL_ADC_Init+0x126>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d104      	bne.n	8002874 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	3b01      	subs	r3, #1
 8002870:	051b      	lsls	r3, r3, #20
 8002872:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	430a      	orrs	r2, r1
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_ADC_Init+0x1ac>)
 8002890:	4013      	ands	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	429a      	cmp	r2, r3
 8002896:	d10b      	bne.n	80028b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ae:	e018      	b.n	80028e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	f023 0312 	bic.w	r3, r3, #18
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028d0:	e007      	b.n	80028e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	ffe1f7fd 	.word	0xffe1f7fd
 80028f0:	ff1f0efe 	.word	0xff1f0efe

080028f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Start+0x1a>
 800290a:	2302      	movs	r3, #2
 800290c:	e098      	b.n	8002a40 <HAL_ADC_Start+0x14c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fad0 	bl	8002ebc <ADC_Enable>
 800291c:	4603      	mov	r3, r0
 800291e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8087 	bne.w	8002a36 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a41      	ldr	r2, [pc, #260]	; (8002a48 <HAL_ADC_Start+0x154>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d105      	bne.n	8002952 <HAL_ADC_Start+0x5e>
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_ADC_Start+0x158>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d026      	beq.n	80029ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800297c:	e01d      	b.n	80029ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <HAL_ADC_Start+0x158>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_ADC_Start+0xaa>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_ADC_Start+0x154>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10d      	bne.n	80029ba <HAL_ADC_Start+0xc6>
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_ADC_Start+0x158>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	f023 0206 	bic.w	r2, r3, #6
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029d2:	e002      	b.n	80029da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0202 	mvn.w	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029fa:	d113      	bne.n	8002a24 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_ADC_Start+0x154>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_ADC_Start+0x158>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d108      	bne.n	8002a24 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	e00c      	b.n	8002a3e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40012800 	.word	0x40012800
 8002a4c:	40012400 	.word	0x40012400

08002a50 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Stop+0x1a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e01a      	b.n	8002aa0 <HAL_ADC_Stop+0x50>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fa7c 	bl	8002f70 <ADC_ConversionStop_Disable>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002abe:	f7ff fe13 	bl	80026e8 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0d3      	b.n	8002c92 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d131      	bne.n	8002b5c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d12a      	bne.n	8002b5c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b06:	e021      	b.n	8002b4c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d01d      	beq.n	8002b4c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_ADC_PollForConversion+0x7e>
 8002b16:	f7ff fde7 	bl	80026e8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d212      	bcs.n	8002b4c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0a2      	b.n	8002c92 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0d6      	beq.n	8002b08 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b5a:	e070      	b.n	8002c3e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <HAL_ADC_PollForConversion+0x1f4>)
 8002b5e:	681c      	ldr	r4, [r3, #0]
 8002b60:	2002      	movs	r0, #2
 8002b62:	f001 fe7b 	bl	800485c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b66:	4603      	mov	r3, r0
 8002b68:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_ADC_PollForConversion+0x1f8>)
 8002b74:	400b      	ands	r3, r1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_ADC_PollForConversion+0x104>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68d9      	ldr	r1, [r3, #12]
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_ADC_PollForConversion+0x1fc>)
 8002b82:	400b      	ands	r3, r1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <HAL_ADC_PollForConversion+0x104>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_ADC_PollForConversion+0x200>)
 8002b90:	400b      	ands	r3, r1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <HAL_ADC_PollForConversion+0x100>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68d9      	ldr	r1, [r3, #12]
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_ADC_PollForConversion+0x204>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_PollForConversion+0x100>
 8002ba4:	2314      	movs	r3, #20
 8002ba6:	e020      	b.n	8002bea <HAL_ADC_PollForConversion+0x142>
 8002ba8:	2329      	movs	r3, #41	; 0x29
 8002baa:	e01e      	b.n	8002bea <HAL_ADC_PollForConversion+0x142>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <HAL_ADC_PollForConversion+0x200>)
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_ADC_PollForConversion+0x120>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68d9      	ldr	r1, [r3, #12]
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <HAL_ADC_PollForConversion+0x204>)
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_ADC_PollForConversion+0x13c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_ADC_PollForConversion+0x208>)
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d108      	bne.n	8002be8 <HAL_ADC_PollForConversion+0x140>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_ADC_PollForConversion+0x208>)
 8002bde:	400b      	ands	r3, r1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_PollForConversion+0x140>
 8002be4:	2354      	movs	r3, #84	; 0x54
 8002be6:	e000      	b.n	8002bea <HAL_ADC_PollForConversion+0x142>
 8002be8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bf0:	e021      	b.n	8002c36 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d01a      	beq.n	8002c30 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_ADC_PollForConversion+0x168>
 8002c00:	f7ff fd72 	bl	80026e8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d20f      	bcs.n	8002c30 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d90b      	bls.n	8002c30 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e030      	b.n	8002c92 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d8d9      	bhi.n	8002bf2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0212 	mvn.w	r2, #18
 8002c46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c62:	d115      	bne.n	8002c90 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	24924924 	.word	0x24924924
 8002ca4:	00924924 	.word	0x00924924
 8002ca8:	12492492 	.word	0x12492492
 8002cac:	00492492 	.word	0x00492492
 8002cb0:	00249249 	.word	0x00249249

08002cb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x20>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0dc      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x1da>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d81c      	bhi.n	8002d36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b05      	subs	r3, #5
 8002d0e:	221f      	movs	r2, #31
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4019      	ands	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b05      	subs	r3, #5
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34
 8002d34:	e03c      	b.n	8002db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d81c      	bhi.n	8002d78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b23      	subs	r3, #35	; 0x23
 8002d50:	221f      	movs	r2, #31
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4019      	ands	r1, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	3b23      	subs	r3, #35	; 0x23
 8002d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
 8002d76:	e01b      	b.n	8002db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b41      	subs	r3, #65	; 0x41
 8002d8a:	221f      	movs	r2, #31
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4019      	ands	r1, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b41      	subs	r3, #65	; 0x41
 8002da4:	fa00 f203 	lsl.w	r2, r0, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d91c      	bls.n	8002df2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68d9      	ldr	r1, [r3, #12]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b1e      	subs	r3, #30
 8002dca:	2207      	movs	r2, #7
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4019      	ands	r1, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6898      	ldr	r0, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	3b1e      	subs	r3, #30
 8002de4:	fa00 f203 	lsl.w	r2, r0, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e019      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	2207      	movs	r2, #7
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4019      	ands	r1, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d003      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d132      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d125      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d126      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d11a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9a      	lsrs	r2, r3, #18
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e7c:	e002      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x1b2>
 8002e8a:	e007      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40012400 	.word	0x40012400
 8002eb4:	20000010 	.word	0x20000010
 8002eb8:	431bde83 	.word	0x431bde83

08002ebc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d040      	beq.n	8002f5c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <ADC_Enable+0xac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <ADC_Enable+0xb0>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0c9b      	lsrs	r3, r3, #18
 8002ef6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ef8:	e002      	b.n	8002f00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f9      	bne.n	8002efa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f06:	f7ff fbef 	bl	80026e8 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f0c:	e01f      	b.n	8002f4e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0e:	f7ff fbeb 	bl	80026e8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d918      	bls.n	8002f4e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d011      	beq.n	8002f4e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d1d8      	bne.n	8002f0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000010 	.word	0x20000010
 8002f6c:	431bde83 	.word	0x431bde83

08002f70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d12e      	bne.n	8002fe8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f9a:	f7ff fba5 	bl	80026e8 <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fa0:	e01b      	b.n	8002fda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fa2:	f7ff fba1 	bl	80026e8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d914      	bls.n	8002fda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10d      	bne.n	8002fda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	f043 0210 	orr.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d0dc      	beq.n	8002fa2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4906      	ldr	r1, [pc, #24]	; (800308c <__NVIC_EnableIRQ+0x34>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f7ff ff90 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff2d 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff42 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff90 	bl	80030e4 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff5f 	bl	8003090 <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff35 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ffa2 	bl	8003148 <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b480      	push	{r7}
 8003212:	b08b      	sub	sp, #44	; 0x2c
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003222:	e169      	b.n	80034f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003224:	2201      	movs	r2, #1
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	429a      	cmp	r2, r3
 800323e:	f040 8158 	bne.w	80034f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a9a      	ldr	r2, [pc, #616]	; (80034b0 <HAL_GPIO_Init+0x2a0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d05e      	beq.n	800330a <HAL_GPIO_Init+0xfa>
 800324c:	4a98      	ldr	r2, [pc, #608]	; (80034b0 <HAL_GPIO_Init+0x2a0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d875      	bhi.n	800333e <HAL_GPIO_Init+0x12e>
 8003252:	4a98      	ldr	r2, [pc, #608]	; (80034b4 <HAL_GPIO_Init+0x2a4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d058      	beq.n	800330a <HAL_GPIO_Init+0xfa>
 8003258:	4a96      	ldr	r2, [pc, #600]	; (80034b4 <HAL_GPIO_Init+0x2a4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d86f      	bhi.n	800333e <HAL_GPIO_Init+0x12e>
 800325e:	4a96      	ldr	r2, [pc, #600]	; (80034b8 <HAL_GPIO_Init+0x2a8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d052      	beq.n	800330a <HAL_GPIO_Init+0xfa>
 8003264:	4a94      	ldr	r2, [pc, #592]	; (80034b8 <HAL_GPIO_Init+0x2a8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d869      	bhi.n	800333e <HAL_GPIO_Init+0x12e>
 800326a:	4a94      	ldr	r2, [pc, #592]	; (80034bc <HAL_GPIO_Init+0x2ac>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d04c      	beq.n	800330a <HAL_GPIO_Init+0xfa>
 8003270:	4a92      	ldr	r2, [pc, #584]	; (80034bc <HAL_GPIO_Init+0x2ac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d863      	bhi.n	800333e <HAL_GPIO_Init+0x12e>
 8003276:	4a92      	ldr	r2, [pc, #584]	; (80034c0 <HAL_GPIO_Init+0x2b0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d046      	beq.n	800330a <HAL_GPIO_Init+0xfa>
 800327c:	4a90      	ldr	r2, [pc, #576]	; (80034c0 <HAL_GPIO_Init+0x2b0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d85d      	bhi.n	800333e <HAL_GPIO_Init+0x12e>
 8003282:	2b12      	cmp	r3, #18
 8003284:	d82a      	bhi.n	80032dc <HAL_GPIO_Init+0xcc>
 8003286:	2b12      	cmp	r3, #18
 8003288:	d859      	bhi.n	800333e <HAL_GPIO_Init+0x12e>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_GPIO_Init+0x80>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	0800330b 	.word	0x0800330b
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032f7 	.word	0x080032f7
 800329c:	08003339 	.word	0x08003339
 80032a0:	0800333f 	.word	0x0800333f
 80032a4:	0800333f 	.word	0x0800333f
 80032a8:	0800333f 	.word	0x0800333f
 80032ac:	0800333f 	.word	0x0800333f
 80032b0:	0800333f 	.word	0x0800333f
 80032b4:	0800333f 	.word	0x0800333f
 80032b8:	0800333f 	.word	0x0800333f
 80032bc:	0800333f 	.word	0x0800333f
 80032c0:	0800333f 	.word	0x0800333f
 80032c4:	0800333f 	.word	0x0800333f
 80032c8:	0800333f 	.word	0x0800333f
 80032cc:	0800333f 	.word	0x0800333f
 80032d0:	0800333f 	.word	0x0800333f
 80032d4:	080032ed 	.word	0x080032ed
 80032d8:	08003301 	.word	0x08003301
 80032dc:	4a79      	ldr	r2, [pc, #484]	; (80034c4 <HAL_GPIO_Init+0x2b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032e2:	e02c      	b.n	800333e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	623b      	str	r3, [r7, #32]
          break;
 80032ea:	e029      	b.n	8003340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	3304      	adds	r3, #4
 80032f2:	623b      	str	r3, [r7, #32]
          break;
 80032f4:	e024      	b.n	8003340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	3308      	adds	r3, #8
 80032fc:	623b      	str	r3, [r7, #32]
          break;
 80032fe:	e01f      	b.n	8003340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	330c      	adds	r3, #12
 8003306:	623b      	str	r3, [r7, #32]
          break;
 8003308:	e01a      	b.n	8003340 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003312:	2304      	movs	r3, #4
 8003314:	623b      	str	r3, [r7, #32]
          break;
 8003316:	e013      	b.n	8003340 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003320:	2308      	movs	r3, #8
 8003322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	611a      	str	r2, [r3, #16]
          break;
 800332a:	e009      	b.n	8003340 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800332c:	2308      	movs	r3, #8
 800332e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	615a      	str	r2, [r3, #20]
          break;
 8003336:	e003      	b.n	8003340 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
          break;
 800333c:	e000      	b.n	8003340 <HAL_GPIO_Init+0x130>
          break;
 800333e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2bff      	cmp	r3, #255	; 0xff
 8003344:	d801      	bhi.n	800334a <HAL_GPIO_Init+0x13a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	e001      	b.n	800334e <HAL_GPIO_Init+0x13e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2bff      	cmp	r3, #255	; 0xff
 8003354:	d802      	bhi.n	800335c <HAL_GPIO_Init+0x14c>
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	e002      	b.n	8003362 <HAL_GPIO_Init+0x152>
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	3b08      	subs	r3, #8
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	210f      	movs	r1, #15
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	401a      	ands	r2, r3
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	431a      	orrs	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80b1 	beq.w	80034f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_GPIO_Init+0x2b8>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <HAL_GPIO_Init+0x2b8>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6193      	str	r3, [r2, #24]
 800339c:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_GPIO_Init+0x2b8>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a8:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_GPIO_Init+0x2bc>)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	220f      	movs	r2, #15
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <HAL_GPIO_Init+0x2c0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_GPIO_Init+0x1ec>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3f      	ldr	r2, [pc, #252]	; (80034d4 <HAL_GPIO_Init+0x2c4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00d      	beq.n	80033f8 <HAL_GPIO_Init+0x1e8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3e      	ldr	r2, [pc, #248]	; (80034d8 <HAL_GPIO_Init+0x2c8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <HAL_GPIO_Init+0x1e4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3d      	ldr	r2, [pc, #244]	; (80034dc <HAL_GPIO_Init+0x2cc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_GPIO_Init+0x1e0>
 80033ec:	2303      	movs	r3, #3
 80033ee:	e006      	b.n	80033fe <HAL_GPIO_Init+0x1ee>
 80033f0:	2304      	movs	r3, #4
 80033f2:	e004      	b.n	80033fe <HAL_GPIO_Init+0x1ee>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e002      	b.n	80033fe <HAL_GPIO_Init+0x1ee>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_GPIO_Init+0x1ee>
 80033fc:	2300      	movs	r3, #0
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	f002 0203 	and.w	r2, r2, #3
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	4093      	lsls	r3, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800340e:	492f      	ldr	r1, [pc, #188]	; (80034cc <HAL_GPIO_Init+0x2bc>)
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	492c      	ldr	r1, [pc, #176]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	43db      	mvns	r3, r3
 800343e:	4928      	ldr	r1, [pc, #160]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003440:	4013      	ands	r3, r2
 8003442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d006      	beq.n	800345e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4922      	ldr	r1, [pc, #136]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	60cb      	str	r3, [r1, #12]
 800345c:	e006      	b.n	800346c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	43db      	mvns	r3, r3
 8003466:	491e      	ldr	r1, [pc, #120]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003468:	4013      	ands	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4918      	ldr	r1, [pc, #96]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
 8003484:	e006      	b.n	8003494 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	43db      	mvns	r3, r3
 800348e:	4914      	ldr	r1, [pc, #80]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 8003490:	4013      	ands	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d021      	beq.n	80034e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_GPIO_Init+0x2d0>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e021      	b.n	80034f2 <HAL_GPIO_Init+0x2e2>
 80034ae:	bf00      	nop
 80034b0:	10320000 	.word	0x10320000
 80034b4:	10310000 	.word	0x10310000
 80034b8:	10220000 	.word	0x10220000
 80034bc:	10210000 	.word	0x10210000
 80034c0:	10120000 	.word	0x10120000
 80034c4:	10110000 	.word	0x10110000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40010800 	.word	0x40010800
 80034d4:	40010c00 	.word	0x40010c00
 80034d8:	40011000 	.word	0x40011000
 80034dc:	40011400 	.word	0x40011400
 80034e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_GPIO_Init+0x304>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4909      	ldr	r1, [pc, #36]	; (8003514 <HAL_GPIO_Init+0x304>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	3301      	adds	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	f47f ae8e 	bne.w	8003224 <HAL_GPIO_Init+0x14>
  }
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	372c      	adds	r7, #44	; 0x2c
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40010400 	.word	0x40010400

08003518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e001      	b.n	800353a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr

08003546 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
 8003552:	4613      	mov	r3, r2
 8003554:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003556:	787b      	ldrb	r3, [r7, #1]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003562:	e003      	b.n	800356c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003564:	887b      	ldrh	r3, [r7, #2]
 8003566:	041a      	lsls	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e12b      	b.n	80037e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe fe7c 	bl	800229c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2224      	movs	r2, #36	; 0x24
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035dc:	f001 f842 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 80035e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a81      	ldr	r2, [pc, #516]	; (80037ec <HAL_I2C_Init+0x274>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d807      	bhi.n	80035fc <HAL_I2C_Init+0x84>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a80      	ldr	r2, [pc, #512]	; (80037f0 <HAL_I2C_Init+0x278>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e006      	b.n	800360a <HAL_I2C_Init+0x92>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a7d      	ldr	r2, [pc, #500]	; (80037f4 <HAL_I2C_Init+0x27c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0e7      	b.n	80037e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a78      	ldr	r2, [pc, #480]	; (80037f8 <HAL_I2C_Init+0x280>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0c9b      	lsrs	r3, r3, #18
 800361c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a6a      	ldr	r2, [pc, #424]	; (80037ec <HAL_I2C_Init+0x274>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d802      	bhi.n	800364c <HAL_I2C_Init+0xd4>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	e009      	b.n	8003660 <HAL_I2C_Init+0xe8>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4a69      	ldr	r2, [pc, #420]	; (80037fc <HAL_I2C_Init+0x284>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	3301      	adds	r3, #1
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	495c      	ldr	r1, [pc, #368]	; (80037ec <HAL_I2C_Init+0x274>)
 800367c:	428b      	cmp	r3, r1
 800367e:	d819      	bhi.n	80036b4 <HAL_I2C_Init+0x13c>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e59      	subs	r1, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fbb1 f3f3 	udiv	r3, r1, r3
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003694:	400b      	ands	r3, r1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_I2C_Init+0x138>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e59      	subs	r1, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ae:	e051      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 80036b0:	2304      	movs	r3, #4
 80036b2:	e04f      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d111      	bne.n	80036e0 <HAL_I2C_Init+0x168>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e58      	subs	r0, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	440b      	add	r3, r1
 80036ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e012      	b.n	8003706 <HAL_I2C_Init+0x18e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	0099      	lsls	r1, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Init+0x196>
 800370a:	2301      	movs	r3, #1
 800370c:	e022      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10e      	bne.n	8003734 <HAL_I2C_Init+0x1bc>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1e58      	subs	r0, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	440b      	add	r3, r1
 8003724:	fbb0 f3f3 	udiv	r3, r0, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	e00f      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	0099      	lsls	r1, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	fbb0 f3f3 	udiv	r3, r0, r3
 800374a:	3301      	adds	r3, #1
 800374c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	6809      	ldr	r1, [r1, #0]
 8003758:	4313      	orrs	r3, r2
 800375a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6911      	ldr	r1, [r2, #16]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68d2      	ldr	r2, [r2, #12]
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	430b      	orrs	r3, r1
 8003796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	000186a0 	.word	0x000186a0
 80037f0:	001e847f 	.word	0x001e847f
 80037f4:	003d08ff 	.word	0x003d08ff
 80037f8:	431bde83 	.word	0x431bde83
 80037fc:	10624dd3 	.word	0x10624dd3

08003800 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800381a:	f7fe ff65 	bl	80026e8 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b20      	cmp	r3, #32
 800382a:	f040 80d9 	bne.w	80039e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2319      	movs	r3, #25
 8003834:	2201      	movs	r2, #1
 8003836:	496d      	ldr	r1, [pc, #436]	; (80039ec <HAL_I2C_Mem_Write+0x1ec>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f971 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
 8003846:	e0cc      	b.n	80039e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Mem_Write+0x56>
 8003852:	2302      	movs	r3, #2
 8003854:	e0c5      	b.n	80039e2 <HAL_I2C_Mem_Write+0x1e2>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d007      	beq.n	800387c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2221      	movs	r2, #33	; 0x21
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2240      	movs	r2, #64	; 0x40
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_I2C_Mem_Write+0x1f0>)
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038be:	88f8      	ldrh	r0, [r7, #6]
 80038c0:	893a      	ldrh	r2, [r7, #8]
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	4603      	mov	r3, r0
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f890 	bl	80039f4 <I2C_RequestMemoryWrite>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d052      	beq.n	8003980 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e081      	b.n	80039e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa36 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e06b      	b.n	80039e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	781a      	ldrb	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d11b      	bne.n	8003980 <HAL_I2C_Mem_Write+0x180>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d017      	beq.n	8003980 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1aa      	bne.n	80038de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fa29 	bl	8003de4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b04      	cmp	r3, #4
 800399e:	d107      	bne.n	80039b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e016      	b.n	80039e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	00100002 	.word	0x00100002
 80039f0:	ffff0000 	.word	0xffff0000

080039f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	460b      	mov	r3, r1
 8003a08:	813b      	strh	r3, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f878 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a44:	d103      	bne.n	8003a4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e05f      	b.n	8003b12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a52:	897b      	ldrh	r3, [r7, #10]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	492d      	ldr	r1, [pc, #180]	; (8003b1c <I2C_RequestMemoryWrite+0x128>)
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f8d3 	bl	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e04c      	b.n	8003b12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a90:	6a39      	ldr	r1, [r7, #32]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f95e 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00d      	beq.n	8003aba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d107      	bne.n	8003ab6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e02b      	b.n	8003b12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	e021      	b.n	8003b10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	6a39      	ldr	r1, [r7, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f938 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d107      	bne.n	8003b02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e005      	b.n	8003b12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b06:	893b      	ldrh	r3, [r7, #8]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00010002 	.word	0x00010002

08003b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	e048      	b.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d044      	beq.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fdd5 	bl	80026e8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d139      	bne.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10d      	bne.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	e00c      	b.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d116      	bne.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e023      	b.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10d      	bne.n	8003bea <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	e00c      	b.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d093      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c22:	e071      	b.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c32:	d123      	bne.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0204 	orr.w	r2, r3, #4
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e067      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d041      	beq.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fe fd30 	bl	80026e8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d136      	bne.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10c      	bne.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e00b      	b.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	43da      	mvns	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e021      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10c      	bne.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e00b      	b.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f af6d 	bne.w	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d60:	e034      	b.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f886 	bl	8003e74 <I2C_IsAcknowledgeFailed>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e034      	b.n	8003ddc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d028      	beq.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fcb5 	bl	80026e8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11d      	bne.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d016      	beq.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d1c3      	bne.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df0:	e034      	b.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f83e 	bl	8003e74 <I2C_IsAcknowledgeFailed>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e034      	b.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d028      	beq.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fe fc6d 	bl	80026e8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11d      	bne.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d016      	beq.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e007      	b.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d1c3      	bne.n	8003df2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8a:	d11b      	bne.n	8003ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e272      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8087 	beq.w	8003ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef0:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003efc:	4b8f      	ldr	r3, [pc, #572]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d112      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5e>
 8003f08:	4b8c      	ldr	r3, [pc, #560]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f16:	4b89      	ldr	r3, [pc, #548]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d06c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x12c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d168      	bne.n	8003ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e24c      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x76>
 8003f38:	4b80      	ldr	r3, [pc, #512]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a7f      	ldr	r2, [pc, #508]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x98>
 8003f4e:	4b7b      	ldr	r3, [pc, #492]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7a      	ldr	r2, [pc, #488]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b78      	ldr	r3, [pc, #480]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a77      	ldr	r2, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0xbc>
 8003f72:	4b72      	ldr	r3, [pc, #456]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a71      	ldr	r2, [pc, #452]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a67      	ldr	r2, [pc, #412]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fb9c 	bl	80026e8 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fe fb98 	bl	80026e8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e200      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe4>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fb88 	bl	80026e8 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fb84 	bl	80026e8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1ec      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x10c>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d063      	beq.n	80040d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400a:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004016:	4b49      	ldr	r3, [pc, #292]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x18c>
 8004022:	4b46      	ldr	r3, [pc, #280]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b43      	ldr	r3, [pc, #268]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x176>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1c0      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4939      	ldr	r1, [pc, #228]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e03a      	b.n	80040d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b36      	ldr	r3, [pc, #216]	; (8004140 <HAL_RCC_OscConfig+0x270>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fe fb3d 	bl	80026e8 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7fe fb39 	bl	80026e8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1a1      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4927      	ldr	r1, [pc, #156]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <HAL_RCC_OscConfig+0x270>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fb1c 	bl	80026e8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fe fb18 	bl	80026e8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e180      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03a      	beq.n	8004154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b17      	ldr	r3, [pc, #92]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7fe fafc 	bl	80026e8 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fe faf8 	bl	80026e8 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e160      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004112:	2001      	movs	r0, #1
 8004114:	f000 face 	bl	80046b4 <RCC_Delay>
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004120:	f7fe fae2 	bl	80026e8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004126:	e00f      	b.n	8004148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe fade 	bl	80026e8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d908      	bls.n	8004148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e146      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	42420000 	.word	0x42420000
 8004144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b92      	ldr	r3, [pc, #584]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e9      	bne.n	8004128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a6 	beq.w	80042ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b8b      	ldr	r3, [pc, #556]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4a87      	ldr	r2, [pc, #540]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	61d3      	str	r3, [r2, #28]
 800417e:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_RCC_OscConfig+0x4c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d118      	bne.n	80041cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419a:	4b7f      	ldr	r3, [pc, #508]	; (8004398 <HAL_RCC_OscConfig+0x4c8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7e      	ldr	r2, [pc, #504]	; (8004398 <HAL_RCC_OscConfig+0x4c8>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fa9f 	bl	80026e8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe fa9b 	bl	80026e8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	; 0x64
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e103      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	4b75      	ldr	r3, [pc, #468]	; (8004398 <HAL_RCC_OscConfig+0x4c8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x312>
 80041d4:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	e02d      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x334>
 80041ea:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4a69      	ldr	r2, [pc, #420]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6213      	str	r3, [r2, #32]
 80041f6:	4b67      	ldr	r3, [pc, #412]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a66      	ldr	r2, [pc, #408]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	e01c      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x356>
 800420c:	4b61      	ldr	r3, [pc, #388]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a60      	ldr	r2, [pc, #384]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a5d      	ldr	r2, [pc, #372]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 8004226:	4b5b      	ldr	r3, [pc, #364]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4a5a      	ldr	r2, [pc, #360]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6213      	str	r3, [r2, #32]
 8004232:	4b58      	ldr	r3, [pc, #352]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4a57      	ldr	r2, [pc, #348]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fe fa4f 	bl	80026e8 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe fa4b 	bl	80026e8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0b1      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ee      	beq.n	800424e <HAL_RCC_OscConfig+0x37e>
 8004270:	e014      	b.n	800429c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe fa39 	bl	80026e8 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fa35 	bl	80026e8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e09b      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	4b40      	ldr	r3, [pc, #256]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ee      	bne.n	800427a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b3c      	ldr	r3, [pc, #240]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8087 	beq.w	80043c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b8:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d061      	beq.n	8004388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d146      	bne.n	800435a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_RCC_OscConfig+0x4cc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fa09 	bl	80026e8 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fa05 	bl	80026e8 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e06d      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d108      	bne.n	8004314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	4921      	ldr	r1, [pc, #132]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004314:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a19      	ldr	r1, [r3, #32]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	430b      	orrs	r3, r1
 8004326:	491b      	ldr	r1, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x4cc>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fe f9d9 	bl	80026e8 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe f9d5 	bl	80026e8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e03d      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x46a>
 8004358:	e035      	b.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <HAL_RCC_OscConfig+0x4cc>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe f9c2 	bl	80026e8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe f9be 	bl	80026e8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e026      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x498>
 8004386:	e01e      	b.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e019      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
 800439c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_OscConfig+0x500>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0d0      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d910      	bls.n	8004418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b67      	ldr	r3, [pc, #412]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	4965      	ldr	r1, [pc, #404]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b63      	ldr	r3, [pc, #396]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b8      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a58      	ldr	r2, [pc, #352]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800443a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a52      	ldr	r2, [pc, #328]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800444e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b50      	ldr	r3, [pc, #320]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	494d      	ldr	r1, [pc, #308]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d040      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d115      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07f      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e073      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a2:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06b      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044b2:	4b39      	ldr	r3, [pc, #228]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4936      	ldr	r1, [pc, #216]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c4:	f7fe f910 	bl	80026e8 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe f90c 	bl	80026e8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e053      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 020c 	and.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1eb      	bne.n	80044cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d210      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 0207 	bic.w	r2, r3, #7
 800450a:	4922      	ldr	r1, [pc, #136]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e032      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004530:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4916      	ldr	r1, [pc, #88]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004562:	f000 f821 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 8004566:	4602      	mov	r2, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	490a      	ldr	r1, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	5ccb      	ldrb	r3, [r1, r3]
 8004576:	fa22 f303 	lsr.w	r3, r2, r3
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1cc>)
 800457c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe f86e 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40022000 	.word	0x40022000
 8004598:	40021000 	.word	0x40021000
 800459c:	08009600 	.word	0x08009600
 80045a0:	20000010 	.word	0x20000010
 80045a4:	20000014 	.word	0x20000014

080045a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCC_GetSysClockFreq+0x94>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d002      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x30>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d003      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x36>
 80045d6:	e027      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d8:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_RCC_GetSysClockFreq+0x98>)
 80045da:	613b      	str	r3, [r7, #16]
      break;
 80045dc:	e027      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	0c9b      	lsrs	r3, r3, #18
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045e8:	5cd3      	ldrb	r3, [r2, r3]
 80045ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_GetSysClockFreq+0x94>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	0c5b      	lsrs	r3, r3, #17
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <HAL_RCC_GetSysClockFreq+0x98>)
 800460a:	fb03 f202 	mul.w	r2, r3, r2
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e004      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <HAL_RCC_GetSysClockFreq+0xa4>)
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	613b      	str	r3, [r7, #16]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetSysClockFreq+0x98>)
 800462a:	613b      	str	r3, [r7, #16]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	693b      	ldr	r3, [r7, #16]
}
 8004630:	4618      	mov	r0, r3
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	007a1200 	.word	0x007a1200
 8004644:	08009618 	.word	0x08009618
 8004648:	08009628 	.word	0x08009628
 800464c:	003d0900 	.word	0x003d0900

08004650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004654:	4b02      	ldr	r3, [pc, #8]	; (8004660 <HAL_RCC_GetHCLKFreq+0x10>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	20000010 	.word	0x20000010

08004664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004668:	f7ff fff2 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	4903      	ldr	r1, [pc, #12]	; (8004688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	08009610 	.word	0x08009610

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004690:	f7ff ffde 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0adb      	lsrs	r3, r3, #11
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4903      	ldr	r1, [pc, #12]	; (80046b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	08009610 	.word	0x08009610

080046b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <RCC_Delay+0x34>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <RCC_Delay+0x38>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	0a5b      	lsrs	r3, r3, #9
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046d0:	bf00      	nop
  }
  while (Delay --);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e5a      	subs	r2, r3, #1
 80046d6:	60fa      	str	r2, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f9      	bne.n	80046d0 <RCC_Delay+0x1c>
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	20000010 	.word	0x20000010
 80046ec:	10624dd3 	.word	0x10624dd3

080046f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d07d      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800470c:	2300      	movs	r3, #0
 800470e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	4b4c      	ldr	r3, [pc, #304]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4a4b      	ldr	r2, [pc, #300]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004726:	61d3      	str	r3, [r2, #28]
 8004728:	4b49      	ldr	r3, [pc, #292]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b46      	ldr	r3, [pc, #280]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d118      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004744:	4b43      	ldr	r3, [pc, #268]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a42      	ldr	r2, [pc, #264]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004750:	f7fd ffca 	bl	80026e8 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	e008      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004758:	f7fd ffc6 	bl	80026e8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e06d      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004776:	4b36      	ldr	r3, [pc, #216]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d027      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004794:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800479e:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a4:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047aa:	4a29      	ldr	r2, [pc, #164]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d014      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fd ff95 	bl	80026e8 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd ff91 	bl	80026e8 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e036      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ee      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4917      	ldr	r1, [pc, #92]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004806:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	490b      	ldr	r1, [pc, #44]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4904      	ldr	r1, [pc, #16]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	40007000 	.word	0x40007000
 8004858:	42420440 	.word	0x42420440

0800485c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b10      	cmp	r3, #16
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b10      	cmp	r3, #16
 8004882:	f200 808a 	bhi.w	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d045      	beq.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d075      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004892:	e082      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004894:	4b46      	ldr	r3, [pc, #280]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d07b      	beq.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	0c9b      	lsrs	r3, r3, #18
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80048b0:	5cd3      	ldrb	r3, [r2, r3]
 80048b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d015      	beq.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048be:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	0c5b      	lsrs	r3, r3, #17
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	4a3b      	ldr	r2, [pc, #236]	; (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048d8:	4a38      	ldr	r2, [pc, #224]	; (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e004      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4a34      	ldr	r2, [pc, #208]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80048f4:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004900:	d102      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	61bb      	str	r3, [r7, #24]
      break;
 8004906:	e04a      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4a2d      	ldr	r2, [pc, #180]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
      break;
 8004916:	e042      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004928:	d108      	bne.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e01f      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004946:	d109      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004954:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e00f      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004966:	d11c      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d016      	beq.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004974:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004978:	61bb      	str	r3, [r7, #24]
      break;
 800497a:	e012      	b.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800497c:	e011      	b.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800497e:	f7ff fe85 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0b9b      	lsrs	r3, r3, #14
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	3301      	adds	r3, #1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	fbb2 f3f3 	udiv	r3, r2, r3
 8004996:	61bb      	str	r3, [r7, #24]
      break;
 8004998:	e004      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049a2:	bf00      	nop
    }
  }
  return (frequency);
 80049a4:	69bb      	ldr	r3, [r7, #24]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	0800962c 	.word	0x0800962c
 80049b8:	0800963c 	.word	0x0800963c
 80049bc:	007a1200 	.word	0x007a1200
 80049c0:	003d0900 	.word	0x003d0900
 80049c4:	aaaaaaab 	.word	0xaaaaaaab

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e041      	b.n	8004a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fca4 	bl	800233c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 fb60 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e032      	b.n	8004ae6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <HAL_TIM_Base_Start+0x88>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x48>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9a:	d009      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x48>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <HAL_TIM_Base_Start+0x8c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x48>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <HAL_TIM_Base_Start+0x90>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d010      	beq.n	8004ae4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad2:	e007      	b.n	8004ae4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800

08004afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d001      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e03a      	b.n	8004b8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <HAL_TIM_Base_Start_IT+0x98>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x58>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d009      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x58>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x58>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <HAL_TIM_Base_Start_IT+0xa0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d010      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	e007      	b.n	8004b88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x24>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e022      	b.n	8004c0a <HAL_TIM_PWM_Start+0x6a>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d109      	bne.n	8004bde <HAL_TIM_PWM_Start+0x3e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	e015      	b.n	8004c0a <HAL_TIM_PWM_Start+0x6a>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d109      	bne.n	8004bf8 <HAL_TIM_PWM_Start+0x58>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_PWM_Start+0x6a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e05e      	b.n	8004cd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x82>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	e013      	b.n	8004c4a <HAL_TIM_PWM_Start+0xaa>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x92>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	e00b      	b.n	8004c4a <HAL_TIM_PWM_Start+0xaa>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	e003      	b.n	8004c4a <HAL_TIM_PWM_Start+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb32 	bl	80052bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <HAL_TIM_PWM_Start+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_TIM_PWM_Start+0x138>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xfa>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d009      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xfa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <HAL_TIM_PWM_Start+0x13c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xfa>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_TIM_PWM_Start+0x140>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b06      	cmp	r3, #6
 8004caa:	d010      	beq.n	8004cce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e007      	b.n	8004cce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800

08004ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0202 	mvn.w	r2, #2
 8004d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9b4 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9a7 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9b6 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0204 	mvn.w	r2, #4
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f98a 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f97d 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f98c 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0208 	mvn.w	r2, #8
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f960 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f953 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f962 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0210 	mvn.w	r2, #16
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2208      	movs	r2, #8
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f936 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f929 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f938 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10e      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0201 	mvn.w	r2, #1
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc f8be 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa9f 	bl	80053d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8fc 	bl	80050b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0220 	mvn.w	r2, #32
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa6a 	bl	80053c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0b4      	b.n	800507a <HAL_TIM_ConfigClockSource+0x186>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d03e      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	f200 8087 	bhi.w	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	f000 8086 	beq.w	8005066 <HAL_TIM_ConfigClockSource+0x172>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d87f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d01a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xa6>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d87b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d050      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x11a>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d877      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d03c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xfa>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d873      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d058      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x13a>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d86f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d064      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d86b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d060      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d867      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05c      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d05a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	e062      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004faa:	f000 f968 	bl	800527e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
      break;
 8004fc6:	e04f      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	f000 f951 	bl	800527e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fea:	609a      	str	r2, [r3, #8]
      break;
 8004fec:	e03c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 f8c8 	bl	8005190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2150      	movs	r1, #80	; 0x50
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f91f 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 800500c:	e02c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800501a:	461a      	mov	r2, r3
 800501c:	f000 f8e6 	bl	80051ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2160      	movs	r1, #96	; 0x60
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f90f 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 800502c:	e01c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800503a:	461a      	mov	r2, r3
 800503c:	f000 f8a8 	bl	8005190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f8ff 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 800504c:	e00c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 f8f6 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 800505e:	e003      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e000      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
	...

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a29      	ldr	r2, [pc, #164]	; (8005184 <TIM_Base_SetConfig+0xb8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <TIM_Base_SetConfig+0xbc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a25      	ldr	r2, [pc, #148]	; (800518c <TIM_Base_SetConfig+0xc0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <TIM_Base_SetConfig+0xb8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <TIM_Base_SetConfig+0xbc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <TIM_Base_SetConfig+0xc0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a07      	ldr	r2, [pc, #28]	; (8005184 <TIM_Base_SetConfig+0xb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800

08005190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 030a 	bic.w	r3, r3, #10
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0210 	bic.w	r2, r3, #16
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	031b      	lsls	r3, r3, #12
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	f043 0307 	orr.w	r3, r3, #7
 800526c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800527e:	b480      	push	{r7}
 8005280:	b087      	sub	sp, #28
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005298:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	021a      	lsls	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	609a      	str	r2, [r3, #8]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2201      	movs	r2, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	43db      	mvns	r3, r3
 80052de:	401a      	ands	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005318:	2302      	movs	r3, #2
 800531a:	e046      	b.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d009      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a10      	ldr	r2, [pc, #64]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10c      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800

080053c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <__cvt>:
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ea:	461f      	mov	r7, r3
 80053ec:	bfbb      	ittet	lt
 80053ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80053f2:	461f      	movlt	r7, r3
 80053f4:	2300      	movge	r3, #0
 80053f6:	232d      	movlt	r3, #45	; 0x2d
 80053f8:	b088      	sub	sp, #32
 80053fa:	4614      	mov	r4, r2
 80053fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005400:	7013      	strb	r3, [r2, #0]
 8005402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005404:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005408:	f023 0820 	bic.w	r8, r3, #32
 800540c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005410:	d005      	beq.n	800541e <__cvt+0x3a>
 8005412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005416:	d100      	bne.n	800541a <__cvt+0x36>
 8005418:	3501      	adds	r5, #1
 800541a:	2302      	movs	r3, #2
 800541c:	e000      	b.n	8005420 <__cvt+0x3c>
 800541e:	2303      	movs	r3, #3
 8005420:	aa07      	add	r2, sp, #28
 8005422:	9204      	str	r2, [sp, #16]
 8005424:	aa06      	add	r2, sp, #24
 8005426:	e9cd a202 	strd	sl, r2, [sp, #8]
 800542a:	e9cd 3500 	strd	r3, r5, [sp]
 800542e:	4622      	mov	r2, r4
 8005430:	463b      	mov	r3, r7
 8005432:	f000 fe99 	bl	8006168 <_dtoa_r>
 8005436:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800543a:	4606      	mov	r6, r0
 800543c:	d102      	bne.n	8005444 <__cvt+0x60>
 800543e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005440:	07db      	lsls	r3, r3, #31
 8005442:	d522      	bpl.n	800548a <__cvt+0xa6>
 8005444:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005448:	eb06 0905 	add.w	r9, r6, r5
 800544c:	d110      	bne.n	8005470 <__cvt+0x8c>
 800544e:	7833      	ldrb	r3, [r6, #0]
 8005450:	2b30      	cmp	r3, #48	; 0x30
 8005452:	d10a      	bne.n	800546a <__cvt+0x86>
 8005454:	2200      	movs	r2, #0
 8005456:	2300      	movs	r3, #0
 8005458:	4620      	mov	r0, r4
 800545a:	4639      	mov	r1, r7
 800545c:	f7fb faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8005460:	b918      	cbnz	r0, 800546a <__cvt+0x86>
 8005462:	f1c5 0501 	rsb	r5, r5, #1
 8005466:	f8ca 5000 	str.w	r5, [sl]
 800546a:	f8da 3000 	ldr.w	r3, [sl]
 800546e:	4499      	add	r9, r3
 8005470:	2200      	movs	r2, #0
 8005472:	2300      	movs	r3, #0
 8005474:	4620      	mov	r0, r4
 8005476:	4639      	mov	r1, r7
 8005478:	f7fb fa96 	bl	80009a8 <__aeabi_dcmpeq>
 800547c:	b108      	cbz	r0, 8005482 <__cvt+0x9e>
 800547e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005482:	2230      	movs	r2, #48	; 0x30
 8005484:	9b07      	ldr	r3, [sp, #28]
 8005486:	454b      	cmp	r3, r9
 8005488:	d307      	bcc.n	800549a <__cvt+0xb6>
 800548a:	4630      	mov	r0, r6
 800548c:	9b07      	ldr	r3, [sp, #28]
 800548e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005490:	1b9b      	subs	r3, r3, r6
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	b008      	add	sp, #32
 8005496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	9107      	str	r1, [sp, #28]
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e7f0      	b.n	8005484 <__cvt+0xa0>

080054a2 <__exponent>:
 80054a2:	4603      	mov	r3, r0
 80054a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054a6:	2900      	cmp	r1, #0
 80054a8:	f803 2b02 	strb.w	r2, [r3], #2
 80054ac:	bfb6      	itet	lt
 80054ae:	222d      	movlt	r2, #45	; 0x2d
 80054b0:	222b      	movge	r2, #43	; 0x2b
 80054b2:	4249      	neglt	r1, r1
 80054b4:	2909      	cmp	r1, #9
 80054b6:	7042      	strb	r2, [r0, #1]
 80054b8:	dd2a      	ble.n	8005510 <__exponent+0x6e>
 80054ba:	f10d 0207 	add.w	r2, sp, #7
 80054be:	4617      	mov	r7, r2
 80054c0:	260a      	movs	r6, #10
 80054c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80054c6:	4694      	mov	ip, r2
 80054c8:	fb06 1415 	mls	r4, r6, r5, r1
 80054cc:	3430      	adds	r4, #48	; 0x30
 80054ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80054d2:	460c      	mov	r4, r1
 80054d4:	2c63      	cmp	r4, #99	; 0x63
 80054d6:	4629      	mov	r1, r5
 80054d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80054dc:	dcf1      	bgt.n	80054c2 <__exponent+0x20>
 80054de:	3130      	adds	r1, #48	; 0x30
 80054e0:	f1ac 0402 	sub.w	r4, ip, #2
 80054e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80054e8:	4622      	mov	r2, r4
 80054ea:	1c41      	adds	r1, r0, #1
 80054ec:	42ba      	cmp	r2, r7
 80054ee:	d30a      	bcc.n	8005506 <__exponent+0x64>
 80054f0:	f10d 0209 	add.w	r2, sp, #9
 80054f4:	eba2 020c 	sub.w	r2, r2, ip
 80054f8:	42bc      	cmp	r4, r7
 80054fa:	bf88      	it	hi
 80054fc:	2200      	movhi	r2, #0
 80054fe:	4413      	add	r3, r2
 8005500:	1a18      	subs	r0, r3, r0
 8005502:	b003      	add	sp, #12
 8005504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005506:	f812 5b01 	ldrb.w	r5, [r2], #1
 800550a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800550e:	e7ed      	b.n	80054ec <__exponent+0x4a>
 8005510:	2330      	movs	r3, #48	; 0x30
 8005512:	3130      	adds	r1, #48	; 0x30
 8005514:	7083      	strb	r3, [r0, #2]
 8005516:	70c1      	strb	r1, [r0, #3]
 8005518:	1d03      	adds	r3, r0, #4
 800551a:	e7f1      	b.n	8005500 <__exponent+0x5e>

0800551c <_printf_float>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	b091      	sub	sp, #68	; 0x44
 8005522:	460c      	mov	r4, r1
 8005524:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005528:	4616      	mov	r6, r2
 800552a:	461f      	mov	r7, r3
 800552c:	4605      	mov	r5, r0
 800552e:	f000 fcff 	bl	8005f30 <_localeconv_r>
 8005532:	6803      	ldr	r3, [r0, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	9309      	str	r3, [sp, #36]	; 0x24
 8005538:	f7fa fe0a 	bl	8000150 <strlen>
 800553c:	2300      	movs	r3, #0
 800553e:	930e      	str	r3, [sp, #56]	; 0x38
 8005540:	f8d8 3000 	ldr.w	r3, [r8]
 8005544:	900a      	str	r0, [sp, #40]	; 0x28
 8005546:	3307      	adds	r3, #7
 8005548:	f023 0307 	bic.w	r3, r3, #7
 800554c:	f103 0208 	add.w	r2, r3, #8
 8005550:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005554:	f8d4 b000 	ldr.w	fp, [r4]
 8005558:	f8c8 2000 	str.w	r2, [r8]
 800555c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005560:	4652      	mov	r2, sl
 8005562:	4643      	mov	r3, r8
 8005564:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005568:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800556c:	930b      	str	r3, [sp, #44]	; 0x2c
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	4650      	mov	r0, sl
 8005574:	4b9c      	ldr	r3, [pc, #624]	; (80057e8 <_printf_float+0x2cc>)
 8005576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005578:	f7fb fa48 	bl	8000a0c <__aeabi_dcmpun>
 800557c:	bb70      	cbnz	r0, 80055dc <_printf_float+0xc0>
 800557e:	f04f 32ff 	mov.w	r2, #4294967295
 8005582:	4650      	mov	r0, sl
 8005584:	4b98      	ldr	r3, [pc, #608]	; (80057e8 <_printf_float+0x2cc>)
 8005586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005588:	f7fb fa22 	bl	80009d0 <__aeabi_dcmple>
 800558c:	bb30      	cbnz	r0, 80055dc <_printf_float+0xc0>
 800558e:	2200      	movs	r2, #0
 8005590:	2300      	movs	r3, #0
 8005592:	4650      	mov	r0, sl
 8005594:	4641      	mov	r1, r8
 8005596:	f7fb fa11 	bl	80009bc <__aeabi_dcmplt>
 800559a:	b110      	cbz	r0, 80055a2 <_printf_float+0x86>
 800559c:	232d      	movs	r3, #45	; 0x2d
 800559e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a2:	4a92      	ldr	r2, [pc, #584]	; (80057ec <_printf_float+0x2d0>)
 80055a4:	4b92      	ldr	r3, [pc, #584]	; (80057f0 <_printf_float+0x2d4>)
 80055a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80055aa:	bf94      	ite	ls
 80055ac:	4690      	movls	r8, r2
 80055ae:	4698      	movhi	r8, r3
 80055b0:	2303      	movs	r3, #3
 80055b2:	f04f 0a00 	mov.w	sl, #0
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	f02b 0304 	bic.w	r3, fp, #4
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	4633      	mov	r3, r6
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	9700      	str	r7, [sp, #0]
 80055c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80055c8:	f000 f9d6 	bl	8005978 <_printf_common>
 80055cc:	3001      	adds	r0, #1
 80055ce:	f040 8090 	bne.w	80056f2 <_printf_float+0x1d6>
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	b011      	add	sp, #68	; 0x44
 80055d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055dc:	4652      	mov	r2, sl
 80055de:	4643      	mov	r3, r8
 80055e0:	4650      	mov	r0, sl
 80055e2:	4641      	mov	r1, r8
 80055e4:	f7fb fa12 	bl	8000a0c <__aeabi_dcmpun>
 80055e8:	b148      	cbz	r0, 80055fe <_printf_float+0xe2>
 80055ea:	f1b8 0f00 	cmp.w	r8, #0
 80055ee:	bfb8      	it	lt
 80055f0:	232d      	movlt	r3, #45	; 0x2d
 80055f2:	4a80      	ldr	r2, [pc, #512]	; (80057f4 <_printf_float+0x2d8>)
 80055f4:	bfb8      	it	lt
 80055f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055fa:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <_printf_float+0x2dc>)
 80055fc:	e7d3      	b.n	80055a6 <_printf_float+0x8a>
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	d142      	bne.n	800568e <_printf_float+0x172>
 8005608:	2306      	movs	r3, #6
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	9206      	str	r2, [sp, #24]
 8005610:	aa0e      	add	r2, sp, #56	; 0x38
 8005612:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005616:	aa0d      	add	r2, sp, #52	; 0x34
 8005618:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800561c:	9203      	str	r2, [sp, #12]
 800561e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005622:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	4652      	mov	r2, sl
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4628      	mov	r0, r5
 8005630:	4643      	mov	r3, r8
 8005632:	910b      	str	r1, [sp, #44]	; 0x2c
 8005634:	f7ff fed6 	bl	80053e4 <__cvt>
 8005638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800563a:	4680      	mov	r8, r0
 800563c:	2947      	cmp	r1, #71	; 0x47
 800563e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005640:	d108      	bne.n	8005654 <_printf_float+0x138>
 8005642:	1cc8      	adds	r0, r1, #3
 8005644:	db02      	blt.n	800564c <_printf_float+0x130>
 8005646:	6863      	ldr	r3, [r4, #4]
 8005648:	4299      	cmp	r1, r3
 800564a:	dd40      	ble.n	80056ce <_printf_float+0x1b2>
 800564c:	f1a9 0902 	sub.w	r9, r9, #2
 8005650:	fa5f f989 	uxtb.w	r9, r9
 8005654:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005658:	d81f      	bhi.n	800569a <_printf_float+0x17e>
 800565a:	464a      	mov	r2, r9
 800565c:	3901      	subs	r1, #1
 800565e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005662:	910d      	str	r1, [sp, #52]	; 0x34
 8005664:	f7ff ff1d 	bl	80054a2 <__exponent>
 8005668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800566a:	4682      	mov	sl, r0
 800566c:	1813      	adds	r3, r2, r0
 800566e:	2a01      	cmp	r2, #1
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	dc02      	bgt.n	800567a <_printf_float+0x15e>
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	07d2      	lsls	r2, r2, #31
 8005678:	d501      	bpl.n	800567e <_printf_float+0x162>
 800567a:	3301      	adds	r3, #1
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005682:	2b00      	cmp	r3, #0
 8005684:	d09b      	beq.n	80055be <_printf_float+0xa2>
 8005686:	232d      	movs	r3, #45	; 0x2d
 8005688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568c:	e797      	b.n	80055be <_printf_float+0xa2>
 800568e:	2947      	cmp	r1, #71	; 0x47
 8005690:	d1bc      	bne.n	800560c <_printf_float+0xf0>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1ba      	bne.n	800560c <_printf_float+0xf0>
 8005696:	2301      	movs	r3, #1
 8005698:	e7b7      	b.n	800560a <_printf_float+0xee>
 800569a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800569e:	d118      	bne.n	80056d2 <_printf_float+0x1b6>
 80056a0:	2900      	cmp	r1, #0
 80056a2:	6863      	ldr	r3, [r4, #4]
 80056a4:	dd0b      	ble.n	80056be <_printf_float+0x1a2>
 80056a6:	6121      	str	r1, [r4, #16]
 80056a8:	b913      	cbnz	r3, 80056b0 <_printf_float+0x194>
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	07d0      	lsls	r0, r2, #31
 80056ae:	d502      	bpl.n	80056b6 <_printf_float+0x19a>
 80056b0:	3301      	adds	r3, #1
 80056b2:	440b      	add	r3, r1
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	f04f 0a00 	mov.w	sl, #0
 80056ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80056bc:	e7df      	b.n	800567e <_printf_float+0x162>
 80056be:	b913      	cbnz	r3, 80056c6 <_printf_float+0x1aa>
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	07d2      	lsls	r2, r2, #31
 80056c4:	d501      	bpl.n	80056ca <_printf_float+0x1ae>
 80056c6:	3302      	adds	r3, #2
 80056c8:	e7f4      	b.n	80056b4 <_printf_float+0x198>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e7f2      	b.n	80056b4 <_printf_float+0x198>
 80056ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 80056d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056d4:	4299      	cmp	r1, r3
 80056d6:	db05      	blt.n	80056e4 <_printf_float+0x1c8>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	6121      	str	r1, [r4, #16]
 80056dc:	07d8      	lsls	r0, r3, #31
 80056de:	d5ea      	bpl.n	80056b6 <_printf_float+0x19a>
 80056e0:	1c4b      	adds	r3, r1, #1
 80056e2:	e7e7      	b.n	80056b4 <_printf_float+0x198>
 80056e4:	2900      	cmp	r1, #0
 80056e6:	bfcc      	ite	gt
 80056e8:	2201      	movgt	r2, #1
 80056ea:	f1c1 0202 	rsble	r2, r1, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	e7e0      	b.n	80056b4 <_printf_float+0x198>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	055a      	lsls	r2, r3, #21
 80056f6:	d407      	bmi.n	8005708 <_printf_float+0x1ec>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	4642      	mov	r2, r8
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	d12b      	bne.n	800575e <_printf_float+0x242>
 8005706:	e764      	b.n	80055d2 <_printf_float+0xb6>
 8005708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800570c:	f240 80dd 	bls.w	80058ca <_printf_float+0x3ae>
 8005710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005714:	2200      	movs	r2, #0
 8005716:	2300      	movs	r3, #0
 8005718:	f7fb f946 	bl	80009a8 <__aeabi_dcmpeq>
 800571c:	2800      	cmp	r0, #0
 800571e:	d033      	beq.n	8005788 <_printf_float+0x26c>
 8005720:	2301      	movs	r3, #1
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	4a35      	ldr	r2, [pc, #212]	; (80057fc <_printf_float+0x2e0>)
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	f43f af51 	beq.w	80055d2 <_printf_float+0xb6>
 8005730:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005734:	429a      	cmp	r2, r3
 8005736:	db02      	blt.n	800573e <_printf_float+0x222>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	07d8      	lsls	r0, r3, #31
 800573c:	d50f      	bpl.n	800575e <_printf_float+0x242>
 800573e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f af42 	beq.w	80055d2 <_printf_float+0xb6>
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	f104 091a 	add.w	r9, r4, #26
 8005756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005758:	3b01      	subs	r3, #1
 800575a:	4543      	cmp	r3, r8
 800575c:	dc09      	bgt.n	8005772 <_printf_float+0x256>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	079b      	lsls	r3, r3, #30
 8005762:	f100 8104 	bmi.w	800596e <_printf_float+0x452>
 8005766:	68e0      	ldr	r0, [r4, #12]
 8005768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800576a:	4298      	cmp	r0, r3
 800576c:	bfb8      	it	lt
 800576e:	4618      	movlt	r0, r3
 8005770:	e731      	b.n	80055d6 <_printf_float+0xba>
 8005772:	2301      	movs	r3, #1
 8005774:	464a      	mov	r2, r9
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	f43f af28 	beq.w	80055d2 <_printf_float+0xb6>
 8005782:	f108 0801 	add.w	r8, r8, #1
 8005786:	e7e6      	b.n	8005756 <_printf_float+0x23a>
 8005788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800578a:	2b00      	cmp	r3, #0
 800578c:	dc38      	bgt.n	8005800 <_printf_float+0x2e4>
 800578e:	2301      	movs	r3, #1
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	4a19      	ldr	r2, [pc, #100]	; (80057fc <_printf_float+0x2e0>)
 8005796:	47b8      	blx	r7
 8005798:	3001      	adds	r0, #1
 800579a:	f43f af1a 	beq.w	80055d2 <_printf_float+0xb6>
 800579e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d102      	bne.n	80057ac <_printf_float+0x290>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	07d9      	lsls	r1, r3, #31
 80057aa:	d5d8      	bpl.n	800575e <_printf_float+0x242>
 80057ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af0b 	beq.w	80055d2 <_printf_float+0xb6>
 80057bc:	f04f 0900 	mov.w	r9, #0
 80057c0:	f104 0a1a 	add.w	sl, r4, #26
 80057c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c6:	425b      	negs	r3, r3
 80057c8:	454b      	cmp	r3, r9
 80057ca:	dc01      	bgt.n	80057d0 <_printf_float+0x2b4>
 80057cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ce:	e794      	b.n	80056fa <_printf_float+0x1de>
 80057d0:	2301      	movs	r3, #1
 80057d2:	4652      	mov	r2, sl
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f aef9 	beq.w	80055d2 <_printf_float+0xb6>
 80057e0:	f109 0901 	add.w	r9, r9, #1
 80057e4:	e7ee      	b.n	80057c4 <_printf_float+0x2a8>
 80057e6:	bf00      	nop
 80057e8:	7fefffff 	.word	0x7fefffff
 80057ec:	0800963e 	.word	0x0800963e
 80057f0:	08009642 	.word	0x08009642
 80057f4:	08009646 	.word	0x08009646
 80057f8:	0800964a 	.word	0x0800964a
 80057fc:	0800964e 	.word	0x0800964e
 8005800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005804:	429a      	cmp	r2, r3
 8005806:	bfa8      	it	ge
 8005808:	461a      	movge	r2, r3
 800580a:	2a00      	cmp	r2, #0
 800580c:	4691      	mov	r9, r2
 800580e:	dc37      	bgt.n	8005880 <_printf_float+0x364>
 8005810:	f04f 0b00 	mov.w	fp, #0
 8005814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005818:	f104 021a 	add.w	r2, r4, #26
 800581c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005820:	ebaa 0309 	sub.w	r3, sl, r9
 8005824:	455b      	cmp	r3, fp
 8005826:	dc33      	bgt.n	8005890 <_printf_float+0x374>
 8005828:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800582c:	429a      	cmp	r2, r3
 800582e:	db3b      	blt.n	80058a8 <_printf_float+0x38c>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07da      	lsls	r2, r3, #31
 8005834:	d438      	bmi.n	80058a8 <_printf_float+0x38c>
 8005836:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800583a:	eba2 0903 	sub.w	r9, r2, r3
 800583e:	eba2 020a 	sub.w	r2, r2, sl
 8005842:	4591      	cmp	r9, r2
 8005844:	bfa8      	it	ge
 8005846:	4691      	movge	r9, r2
 8005848:	f1b9 0f00 	cmp.w	r9, #0
 800584c:	dc34      	bgt.n	80058b8 <_printf_float+0x39c>
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005856:	f104 0a1a 	add.w	sl, r4, #26
 800585a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	eba3 0309 	sub.w	r3, r3, r9
 8005864:	4543      	cmp	r3, r8
 8005866:	f77f af7a 	ble.w	800575e <_printf_float+0x242>
 800586a:	2301      	movs	r3, #1
 800586c:	4652      	mov	r2, sl
 800586e:	4631      	mov	r1, r6
 8005870:	4628      	mov	r0, r5
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f aeac 	beq.w	80055d2 <_printf_float+0xb6>
 800587a:	f108 0801 	add.w	r8, r8, #1
 800587e:	e7ec      	b.n	800585a <_printf_float+0x33e>
 8005880:	4613      	mov	r3, r2
 8005882:	4631      	mov	r1, r6
 8005884:	4642      	mov	r2, r8
 8005886:	4628      	mov	r0, r5
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	d1c0      	bne.n	8005810 <_printf_float+0x2f4>
 800588e:	e6a0      	b.n	80055d2 <_printf_float+0xb6>
 8005890:	2301      	movs	r3, #1
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	920b      	str	r2, [sp, #44]	; 0x2c
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f ae99 	beq.w	80055d2 <_printf_float+0xb6>
 80058a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058a2:	f10b 0b01 	add.w	fp, fp, #1
 80058a6:	e7b9      	b.n	800581c <_printf_float+0x300>
 80058a8:	4631      	mov	r1, r6
 80058aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	d1bf      	bne.n	8005836 <_printf_float+0x31a>
 80058b6:	e68c      	b.n	80055d2 <_printf_float+0xb6>
 80058b8:	464b      	mov	r3, r9
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	eb08 020a 	add.w	r2, r8, sl
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	d1c2      	bne.n	800584e <_printf_float+0x332>
 80058c8:	e683      	b.n	80055d2 <_printf_float+0xb6>
 80058ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058cc:	2a01      	cmp	r2, #1
 80058ce:	dc01      	bgt.n	80058d4 <_printf_float+0x3b8>
 80058d0:	07db      	lsls	r3, r3, #31
 80058d2:	d539      	bpl.n	8005948 <_printf_float+0x42c>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4642      	mov	r2, r8
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f ae77 	beq.w	80055d2 <_printf_float+0xb6>
 80058e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f ae6f 	beq.w	80055d2 <_printf_float+0xb6>
 80058f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005900:	f7fb f852 	bl	80009a8 <__aeabi_dcmpeq>
 8005904:	b9d8      	cbnz	r0, 800593e <_printf_float+0x422>
 8005906:	f109 33ff 	add.w	r3, r9, #4294967295
 800590a:	f108 0201 	add.w	r2, r8, #1
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	d10e      	bne.n	8005936 <_printf_float+0x41a>
 8005918:	e65b      	b.n	80055d2 <_printf_float+0xb6>
 800591a:	2301      	movs	r3, #1
 800591c:	464a      	mov	r2, r9
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f ae54 	beq.w	80055d2 <_printf_float+0xb6>
 800592a:	f108 0801 	add.w	r8, r8, #1
 800592e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005930:	3b01      	subs	r3, #1
 8005932:	4543      	cmp	r3, r8
 8005934:	dcf1      	bgt.n	800591a <_printf_float+0x3fe>
 8005936:	4653      	mov	r3, sl
 8005938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800593c:	e6de      	b.n	80056fc <_printf_float+0x1e0>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	f104 091a 	add.w	r9, r4, #26
 8005946:	e7f2      	b.n	800592e <_printf_float+0x412>
 8005948:	2301      	movs	r3, #1
 800594a:	4642      	mov	r2, r8
 800594c:	e7df      	b.n	800590e <_printf_float+0x3f2>
 800594e:	2301      	movs	r3, #1
 8005950:	464a      	mov	r2, r9
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f ae3a 	beq.w	80055d2 <_printf_float+0xb6>
 800595e:	f108 0801 	add.w	r8, r8, #1
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005966:	1a5b      	subs	r3, r3, r1
 8005968:	4543      	cmp	r3, r8
 800596a:	dcf0      	bgt.n	800594e <_printf_float+0x432>
 800596c:	e6fb      	b.n	8005766 <_printf_float+0x24a>
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	f104 0919 	add.w	r9, r4, #25
 8005976:	e7f4      	b.n	8005962 <_printf_float+0x446>

08005978 <_printf_common>:
 8005978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	4616      	mov	r6, r2
 800597e:	4699      	mov	r9, r3
 8005980:	688a      	ldr	r2, [r1, #8]
 8005982:	690b      	ldr	r3, [r1, #16]
 8005984:	4607      	mov	r7, r0
 8005986:	4293      	cmp	r3, r2
 8005988:	bfb8      	it	lt
 800598a:	4613      	movlt	r3, r2
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005992:	460c      	mov	r4, r1
 8005994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005998:	b10a      	cbz	r2, 800599e <_printf_common+0x26>
 800599a:	3301      	adds	r3, #1
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	0699      	lsls	r1, r3, #26
 80059a2:	bf42      	ittt	mi
 80059a4:	6833      	ldrmi	r3, [r6, #0]
 80059a6:	3302      	addmi	r3, #2
 80059a8:	6033      	strmi	r3, [r6, #0]
 80059aa:	6825      	ldr	r5, [r4, #0]
 80059ac:	f015 0506 	ands.w	r5, r5, #6
 80059b0:	d106      	bne.n	80059c0 <_printf_common+0x48>
 80059b2:	f104 0a19 	add.w	sl, r4, #25
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	6832      	ldr	r2, [r6, #0]
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	42ab      	cmp	r3, r5
 80059be:	dc2b      	bgt.n	8005a18 <_printf_common+0xa0>
 80059c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059c4:	1e13      	subs	r3, r2, #0
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	bf18      	it	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	0692      	lsls	r2, r2, #26
 80059ce:	d430      	bmi.n	8005a32 <_printf_common+0xba>
 80059d0:	4649      	mov	r1, r9
 80059d2:	4638      	mov	r0, r7
 80059d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059d8:	47c0      	blx	r8
 80059da:	3001      	adds	r0, #1
 80059dc:	d023      	beq.n	8005a26 <_printf_common+0xae>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	f003 0306 	and.w	r3, r3, #6
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	bf14      	ite	ne
 80059ea:	2500      	movne	r5, #0
 80059ec:	6833      	ldreq	r3, [r6, #0]
 80059ee:	f04f 0600 	mov.w	r6, #0
 80059f2:	bf08      	it	eq
 80059f4:	68e5      	ldreq	r5, [r4, #12]
 80059f6:	f104 041a 	add.w	r4, r4, #26
 80059fa:	bf08      	it	eq
 80059fc:	1aed      	subeq	r5, r5, r3
 80059fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a02:	bf08      	it	eq
 8005a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bfc4      	itt	gt
 8005a0c:	1a9b      	subgt	r3, r3, r2
 8005a0e:	18ed      	addgt	r5, r5, r3
 8005a10:	42b5      	cmp	r5, r6
 8005a12:	d11a      	bne.n	8005a4a <_printf_common+0xd2>
 8005a14:	2000      	movs	r0, #0
 8005a16:	e008      	b.n	8005a2a <_printf_common+0xb2>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4652      	mov	r2, sl
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	4638      	mov	r0, r7
 8005a20:	47c0      	blx	r8
 8005a22:	3001      	adds	r0, #1
 8005a24:	d103      	bne.n	8005a2e <_printf_common+0xb6>
 8005a26:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2e:	3501      	adds	r5, #1
 8005a30:	e7c1      	b.n	80059b6 <_printf_common+0x3e>
 8005a32:	2030      	movs	r0, #48	; 0x30
 8005a34:	18e1      	adds	r1, r4, r3
 8005a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a40:	4422      	add	r2, r4
 8005a42:	3302      	adds	r3, #2
 8005a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a48:	e7c2      	b.n	80059d0 <_printf_common+0x58>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4638      	mov	r0, r7
 8005a52:	47c0      	blx	r8
 8005a54:	3001      	adds	r0, #1
 8005a56:	d0e6      	beq.n	8005a26 <_printf_common+0xae>
 8005a58:	3601      	adds	r6, #1
 8005a5a:	e7d9      	b.n	8005a10 <_printf_common+0x98>

08005a5c <_printf_i>:
 8005a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	7e0f      	ldrb	r7, [r1, #24]
 8005a62:	4691      	mov	r9, r2
 8005a64:	2f78      	cmp	r7, #120	; 0x78
 8005a66:	4680      	mov	r8, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	469a      	mov	sl, r3
 8005a6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a72:	d807      	bhi.n	8005a84 <_printf_i+0x28>
 8005a74:	2f62      	cmp	r7, #98	; 0x62
 8005a76:	d80a      	bhi.n	8005a8e <_printf_i+0x32>
 8005a78:	2f00      	cmp	r7, #0
 8005a7a:	f000 80d5 	beq.w	8005c28 <_printf_i+0x1cc>
 8005a7e:	2f58      	cmp	r7, #88	; 0x58
 8005a80:	f000 80c1 	beq.w	8005c06 <_printf_i+0x1aa>
 8005a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a8c:	e03a      	b.n	8005b04 <_printf_i+0xa8>
 8005a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a92:	2b15      	cmp	r3, #21
 8005a94:	d8f6      	bhi.n	8005a84 <_printf_i+0x28>
 8005a96:	a101      	add	r1, pc, #4	; (adr r1, 8005a9c <_printf_i+0x40>)
 8005a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005a85 	.word	0x08005a85
 8005aa8:	08005a85 	.word	0x08005a85
 8005aac:	08005a85 	.word	0x08005a85
 8005ab0:	08005a85 	.word	0x08005a85
 8005ab4:	08005b09 	.word	0x08005b09
 8005ab8:	08005a85 	.word	0x08005a85
 8005abc:	08005a85 	.word	0x08005a85
 8005ac0:	08005a85 	.word	0x08005a85
 8005ac4:	08005a85 	.word	0x08005a85
 8005ac8:	08005c0f 	.word	0x08005c0f
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005bc9 	.word	0x08005bc9
 8005ad4:	08005a85 	.word	0x08005a85
 8005ad8:	08005a85 	.word	0x08005a85
 8005adc:	08005c31 	.word	0x08005c31
 8005ae0:	08005a85 	.word	0x08005a85
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005a85 	.word	0x08005a85
 8005aec:	08005a85 	.word	0x08005a85
 8005af0:	08005bd1 	.word	0x08005bd1
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0a0      	b.n	8005c4a <_printf_i+0x1ee>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	0607      	lsls	r7, r0, #24
 8005b0e:	f103 0104 	add.w	r1, r3, #4
 8005b12:	6029      	str	r1, [r5, #0]
 8005b14:	d501      	bpl.n	8005b1a <_printf_i+0xbe>
 8005b16:	681e      	ldr	r6, [r3, #0]
 8005b18:	e003      	b.n	8005b22 <_printf_i+0xc6>
 8005b1a:	0646      	lsls	r6, r0, #25
 8005b1c:	d5fb      	bpl.n	8005b16 <_printf_i+0xba>
 8005b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	da03      	bge.n	8005b2e <_printf_i+0xd2>
 8005b26:	232d      	movs	r3, #45	; 0x2d
 8005b28:	4276      	negs	r6, r6
 8005b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2e:	230a      	movs	r3, #10
 8005b30:	4859      	ldr	r0, [pc, #356]	; (8005c98 <_printf_i+0x23c>)
 8005b32:	e012      	b.n	8005b5a <_printf_i+0xfe>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	6820      	ldr	r0, [r4, #0]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	6029      	str	r1, [r5, #0]
 8005b3c:	0605      	lsls	r5, r0, #24
 8005b3e:	d501      	bpl.n	8005b44 <_printf_i+0xe8>
 8005b40:	681e      	ldr	r6, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <_printf_i+0xee>
 8005b44:	0641      	lsls	r1, r0, #25
 8005b46:	d5fb      	bpl.n	8005b40 <_printf_i+0xe4>
 8005b48:	881e      	ldrh	r6, [r3, #0]
 8005b4a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2308      	moveq	r3, #8
 8005b50:	230a      	movne	r3, #10
 8005b52:	4851      	ldr	r0, [pc, #324]	; (8005c98 <_printf_i+0x23c>)
 8005b54:	2100      	movs	r1, #0
 8005b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b5a:	6865      	ldr	r5, [r4, #4]
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	bfa8      	it	ge
 8005b60:	6821      	ldrge	r1, [r4, #0]
 8005b62:	60a5      	str	r5, [r4, #8]
 8005b64:	bfa4      	itt	ge
 8005b66:	f021 0104 	bicge.w	r1, r1, #4
 8005b6a:	6021      	strge	r1, [r4, #0]
 8005b6c:	b90e      	cbnz	r6, 8005b72 <_printf_i+0x116>
 8005b6e:	2d00      	cmp	r5, #0
 8005b70:	d04b      	beq.n	8005c0a <_printf_i+0x1ae>
 8005b72:	4615      	mov	r5, r2
 8005b74:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b78:	fb03 6711 	mls	r7, r3, r1, r6
 8005b7c:	5dc7      	ldrb	r7, [r0, r7]
 8005b7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b82:	4637      	mov	r7, r6
 8005b84:	42bb      	cmp	r3, r7
 8005b86:	460e      	mov	r6, r1
 8005b88:	d9f4      	bls.n	8005b74 <_printf_i+0x118>
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d10b      	bne.n	8005ba6 <_printf_i+0x14a>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	07de      	lsls	r6, r3, #31
 8005b92:	d508      	bpl.n	8005ba6 <_printf_i+0x14a>
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	6861      	ldr	r1, [r4, #4]
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	bfde      	ittt	le
 8005b9c:	2330      	movle	r3, #48	; 0x30
 8005b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ba6:	1b52      	subs	r2, r2, r5
 8005ba8:	6122      	str	r2, [r4, #16]
 8005baa:	464b      	mov	r3, r9
 8005bac:	4621      	mov	r1, r4
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f8cd a000 	str.w	sl, [sp]
 8005bb4:	aa03      	add	r2, sp, #12
 8005bb6:	f7ff fedf 	bl	8005978 <_printf_common>
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d14a      	bne.n	8005c54 <_printf_i+0x1f8>
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc2:	b004      	add	sp, #16
 8005bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	f043 0320 	orr.w	r3, r3, #32
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	2778      	movs	r7, #120	; 0x78
 8005bd2:	4832      	ldr	r0, [pc, #200]	; (8005c9c <_printf_i+0x240>)
 8005bd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	6829      	ldr	r1, [r5, #0]
 8005bdc:	061f      	lsls	r7, r3, #24
 8005bde:	f851 6b04 	ldr.w	r6, [r1], #4
 8005be2:	d402      	bmi.n	8005bea <_printf_i+0x18e>
 8005be4:	065f      	lsls	r7, r3, #25
 8005be6:	bf48      	it	mi
 8005be8:	b2b6      	uxthmi	r6, r6
 8005bea:	07df      	lsls	r7, r3, #31
 8005bec:	bf48      	it	mi
 8005bee:	f043 0320 	orrmi.w	r3, r3, #32
 8005bf2:	6029      	str	r1, [r5, #0]
 8005bf4:	bf48      	it	mi
 8005bf6:	6023      	strmi	r3, [r4, #0]
 8005bf8:	b91e      	cbnz	r6, 8005c02 <_printf_i+0x1a6>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f023 0320 	bic.w	r3, r3, #32
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	2310      	movs	r3, #16
 8005c04:	e7a6      	b.n	8005b54 <_printf_i+0xf8>
 8005c06:	4824      	ldr	r0, [pc, #144]	; (8005c98 <_printf_i+0x23c>)
 8005c08:	e7e4      	b.n	8005bd4 <_printf_i+0x178>
 8005c0a:	4615      	mov	r5, r2
 8005c0c:	e7bd      	b.n	8005b8a <_printf_i+0x12e>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	6826      	ldr	r6, [r4, #0]
 8005c12:	1d18      	adds	r0, r3, #4
 8005c14:	6961      	ldr	r1, [r4, #20]
 8005c16:	6028      	str	r0, [r5, #0]
 8005c18:	0635      	lsls	r5, r6, #24
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	d501      	bpl.n	8005c22 <_printf_i+0x1c6>
 8005c1e:	6019      	str	r1, [r3, #0]
 8005c20:	e002      	b.n	8005c28 <_printf_i+0x1cc>
 8005c22:	0670      	lsls	r0, r6, #25
 8005c24:	d5fb      	bpl.n	8005c1e <_printf_i+0x1c2>
 8005c26:	8019      	strh	r1, [r3, #0]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4615      	mov	r5, r2
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	e7bc      	b.n	8005baa <_printf_i+0x14e>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	2100      	movs	r1, #0
 8005c34:	1d1a      	adds	r2, r3, #4
 8005c36:	602a      	str	r2, [r5, #0]
 8005c38:	681d      	ldr	r5, [r3, #0]
 8005c3a:	6862      	ldr	r2, [r4, #4]
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f9ee 	bl	800601e <memchr>
 8005c42:	b108      	cbz	r0, 8005c48 <_printf_i+0x1ec>
 8005c44:	1b40      	subs	r0, r0, r5
 8005c46:	6060      	str	r0, [r4, #4]
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	6123      	str	r3, [r4, #16]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c52:	e7aa      	b.n	8005baa <_printf_i+0x14e>
 8005c54:	462a      	mov	r2, r5
 8005c56:	4649      	mov	r1, r9
 8005c58:	4640      	mov	r0, r8
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	47d0      	blx	sl
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d0ad      	beq.n	8005bbe <_printf_i+0x162>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	079b      	lsls	r3, r3, #30
 8005c66:	d413      	bmi.n	8005c90 <_printf_i+0x234>
 8005c68:	68e0      	ldr	r0, [r4, #12]
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	4298      	cmp	r0, r3
 8005c6e:	bfb8      	it	lt
 8005c70:	4618      	movlt	r0, r3
 8005c72:	e7a6      	b.n	8005bc2 <_printf_i+0x166>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4632      	mov	r2, r6
 8005c78:	4649      	mov	r1, r9
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	47d0      	blx	sl
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d09d      	beq.n	8005bbe <_printf_i+0x162>
 8005c82:	3501      	adds	r5, #1
 8005c84:	68e3      	ldr	r3, [r4, #12]
 8005c86:	9903      	ldr	r1, [sp, #12]
 8005c88:	1a5b      	subs	r3, r3, r1
 8005c8a:	42ab      	cmp	r3, r5
 8005c8c:	dcf2      	bgt.n	8005c74 <_printf_i+0x218>
 8005c8e:	e7eb      	b.n	8005c68 <_printf_i+0x20c>
 8005c90:	2500      	movs	r5, #0
 8005c92:	f104 0619 	add.w	r6, r4, #25
 8005c96:	e7f5      	b.n	8005c84 <_printf_i+0x228>
 8005c98:	08009650 	.word	0x08009650
 8005c9c:	08009661 	.word	0x08009661

08005ca0 <std>:
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8005caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cae:	6083      	str	r3, [r0, #8]
 8005cb0:	8181      	strh	r1, [r0, #12]
 8005cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8005cb4:	81c2      	strh	r2, [r0, #14]
 8005cb6:	6183      	str	r3, [r0, #24]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	2208      	movs	r2, #8
 8005cbc:	305c      	adds	r0, #92	; 0x5c
 8005cbe:	f000 f92e 	bl	8005f1e <memset>
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <std+0x58>)
 8005cc4:	6224      	str	r4, [r4, #32]
 8005cc6:	6263      	str	r3, [r4, #36]	; 0x24
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <std+0x5c>)
 8005cca:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <std+0x60>)
 8005cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <std+0x64>)
 8005cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <std+0x68>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d006      	beq.n	8005ce8 <std+0x48>
 8005cda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005cde:	4294      	cmp	r4, r2
 8005ce0:	d002      	beq.n	8005ce8 <std+0x48>
 8005ce2:	33d0      	adds	r3, #208	; 0xd0
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d105      	bne.n	8005cf4 <std+0x54>
 8005ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f000 b992 	b.w	8006018 <__retarget_lock_init_recursive>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	bf00      	nop
 8005cf8:	08005e65 	.word	0x08005e65
 8005cfc:	08005e87 	.word	0x08005e87
 8005d00:	08005ebf 	.word	0x08005ebf
 8005d04:	08005ee3 	.word	0x08005ee3
 8005d08:	20000b1c 	.word	0x20000b1c

08005d0c <stdio_exit_handler>:
 8005d0c:	4a02      	ldr	r2, [pc, #8]	; (8005d18 <stdio_exit_handler+0xc>)
 8005d0e:	4903      	ldr	r1, [pc, #12]	; (8005d1c <stdio_exit_handler+0x10>)
 8005d10:	4803      	ldr	r0, [pc, #12]	; (8005d20 <stdio_exit_handler+0x14>)
 8005d12:	f000 b869 	b.w	8005de8 <_fwalk_sglue>
 8005d16:	bf00      	nop
 8005d18:	2000001c 	.word	0x2000001c
 8005d1c:	080079cd 	.word	0x080079cd
 8005d20:	20000028 	.word	0x20000028

08005d24 <cleanup_stdio>:
 8005d24:	6841      	ldr	r1, [r0, #4]
 8005d26:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <cleanup_stdio+0x34>)
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	d001      	beq.n	8005d34 <cleanup_stdio+0x10>
 8005d30:	f001 fe4c 	bl	80079cc <_fflush_r>
 8005d34:	68a1      	ldr	r1, [r4, #8]
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <cleanup_stdio+0x38>)
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d002      	beq.n	8005d42 <cleanup_stdio+0x1e>
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f001 fe45 	bl	80079cc <_fflush_r>
 8005d42:	68e1      	ldr	r1, [r4, #12]
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <cleanup_stdio+0x3c>)
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d004      	beq.n	8005d54 <cleanup_stdio+0x30>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d50:	f001 be3c 	b.w	80079cc <_fflush_r>
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	bf00      	nop
 8005d58:	20000b1c 	.word	0x20000b1c
 8005d5c:	20000b84 	.word	0x20000b84
 8005d60:	20000bec 	.word	0x20000bec

08005d64 <global_stdio_init.part.0>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <global_stdio_init.part.0+0x30>)
 8005d68:	4c0b      	ldr	r4, [pc, #44]	; (8005d98 <global_stdio_init.part.0+0x34>)
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <global_stdio_init.part.0+0x38>)
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	2104      	movs	r1, #4
 8005d72:	2200      	movs	r2, #0
 8005d74:	f7ff ff94 	bl	8005ca0 <std>
 8005d78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	2109      	movs	r1, #9
 8005d80:	f7ff ff8e 	bl	8005ca0 <std>
 8005d84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d88:	2202      	movs	r2, #2
 8005d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d8e:	2112      	movs	r1, #18
 8005d90:	f7ff bf86 	b.w	8005ca0 <std>
 8005d94:	20000c54 	.word	0x20000c54
 8005d98:	20000b1c 	.word	0x20000b1c
 8005d9c:	08005d0d 	.word	0x08005d0d

08005da0 <__sfp_lock_acquire>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__sfp_lock_acquire+0x8>)
 8005da2:	f000 b93a 	b.w	800601a <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	20000c5d 	.word	0x20000c5d

08005dac <__sfp_lock_release>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__sfp_lock_release+0x8>)
 8005dae:	f000 b935 	b.w	800601c <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	20000c5d 	.word	0x20000c5d

08005db8 <__sinit>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	f7ff fff0 	bl	8005da0 <__sfp_lock_acquire>
 8005dc0:	6a23      	ldr	r3, [r4, #32]
 8005dc2:	b11b      	cbz	r3, 8005dcc <__sinit+0x14>
 8005dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc8:	f7ff bff0 	b.w	8005dac <__sfp_lock_release>
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <__sinit+0x28>)
 8005dce:	6223      	str	r3, [r4, #32]
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <__sinit+0x2c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f5      	bne.n	8005dc4 <__sinit+0xc>
 8005dd8:	f7ff ffc4 	bl	8005d64 <global_stdio_init.part.0>
 8005ddc:	e7f2      	b.n	8005dc4 <__sinit+0xc>
 8005dde:	bf00      	nop
 8005de0:	08005d25 	.word	0x08005d25
 8005de4:	20000c54 	.word	0x20000c54

08005de8 <_fwalk_sglue>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4607      	mov	r7, r0
 8005dee:	4688      	mov	r8, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	2600      	movs	r6, #0
 8005df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005df8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dfc:	d505      	bpl.n	8005e0a <_fwalk_sglue+0x22>
 8005dfe:	6824      	ldr	r4, [r4, #0]
 8005e00:	2c00      	cmp	r4, #0
 8005e02:	d1f7      	bne.n	8005df4 <_fwalk_sglue+0xc>
 8005e04:	4630      	mov	r0, r6
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d907      	bls.n	8005e20 <_fwalk_sglue+0x38>
 8005e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e14:	3301      	adds	r3, #1
 8005e16:	d003      	beq.n	8005e20 <_fwalk_sglue+0x38>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c0      	blx	r8
 8005e1e:	4306      	orrs	r6, r0
 8005e20:	3568      	adds	r5, #104	; 0x68
 8005e22:	e7e9      	b.n	8005df8 <_fwalk_sglue+0x10>

08005e24 <siprintf>:
 8005e24:	b40e      	push	{r1, r2, r3}
 8005e26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e2a:	b500      	push	{lr}
 8005e2c:	b09c      	sub	sp, #112	; 0x70
 8005e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e30:	9002      	str	r0, [sp, #8]
 8005e32:	9006      	str	r0, [sp, #24]
 8005e34:	9107      	str	r1, [sp, #28]
 8005e36:	9104      	str	r1, [sp, #16]
 8005e38:	4808      	ldr	r0, [pc, #32]	; (8005e5c <siprintf+0x38>)
 8005e3a:	4909      	ldr	r1, [pc, #36]	; (8005e60 <siprintf+0x3c>)
 8005e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e40:	9105      	str	r1, [sp, #20]
 8005e42:	6800      	ldr	r0, [r0, #0]
 8005e44:	a902      	add	r1, sp, #8
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	f001 fc40 	bl	80076cc <_svfiprintf_r>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	9b02      	ldr	r3, [sp, #8]
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	b01c      	add	sp, #112	; 0x70
 8005e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e58:	b003      	add	sp, #12
 8005e5a:	4770      	bx	lr
 8005e5c:	20000074 	.word	0x20000074
 8005e60:	ffff0208 	.word	0xffff0208

08005e64 <__sread>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	460c      	mov	r4, r1
 8005e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6c:	f000 f886 	bl	8005f7c <_read_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	bfab      	itete	ge
 8005e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e76:	89a3      	ldrhlt	r3, [r4, #12]
 8005e78:	181b      	addge	r3, r3, r0
 8005e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e7e:	bfac      	ite	ge
 8005e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e82:	81a3      	strhlt	r3, [r4, #12]
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <__swrite>:
 8005e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	898b      	ldrh	r3, [r1, #12]
 8005e8e:	4605      	mov	r5, r0
 8005e90:	05db      	lsls	r3, r3, #23
 8005e92:	460c      	mov	r4, r1
 8005e94:	4616      	mov	r6, r2
 8005e96:	d505      	bpl.n	8005ea4 <__swrite+0x1e>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	f000 f85a 	bl	8005f58 <_lseek_r>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	4628      	mov	r0, r5
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	f000 b871 	b.w	8005fa0 <_write_r>

08005ebe <__sseek>:
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec6:	f000 f847 	bl	8005f58 <_lseek_r>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	bf15      	itete	ne
 8005ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eda:	81a3      	strheq	r3, [r4, #12]
 8005edc:	bf18      	it	ne
 8005ede:	81a3      	strhne	r3, [r4, #12]
 8005ee0:	bd10      	pop	{r4, pc}

08005ee2 <__sclose>:
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 b827 	b.w	8005f38 <_close_r>

08005eea <memmove>:
 8005eea:	4288      	cmp	r0, r1
 8005eec:	b510      	push	{r4, lr}
 8005eee:	eb01 0402 	add.w	r4, r1, r2
 8005ef2:	d902      	bls.n	8005efa <memmove+0x10>
 8005ef4:	4284      	cmp	r4, r0
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	d807      	bhi.n	8005f0a <memmove+0x20>
 8005efa:	1e43      	subs	r3, r0, #1
 8005efc:	42a1      	cmp	r1, r4
 8005efe:	d008      	beq.n	8005f12 <memmove+0x28>
 8005f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f08:	e7f8      	b.n	8005efc <memmove+0x12>
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	4402      	add	r2, r0
 8005f0e:	428a      	cmp	r2, r1
 8005f10:	d100      	bne.n	8005f14 <memmove+0x2a>
 8005f12:	bd10      	pop	{r4, pc}
 8005f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f1c:	e7f7      	b.n	8005f0e <memmove+0x24>

08005f1e <memset>:
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4402      	add	r2, r0
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d100      	bne.n	8005f28 <memset+0xa>
 8005f26:	4770      	bx	lr
 8005f28:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2c:	e7f9      	b.n	8005f22 <memset+0x4>
	...

08005f30 <_localeconv_r>:
 8005f30:	4800      	ldr	r0, [pc, #0]	; (8005f34 <_localeconv_r+0x4>)
 8005f32:	4770      	bx	lr
 8005f34:	20000168 	.word	0x20000168

08005f38 <_close_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4d05      	ldr	r5, [pc, #20]	; (8005f54 <_close_r+0x1c>)
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	602b      	str	r3, [r5, #0]
 8005f44:	f7fc fae6 	bl	8002514 <_close>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_close_r+0x1a>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_close_r+0x1a>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20000c58 	.word	0x20000c58

08005f58 <_lseek_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	2200      	movs	r2, #0
 8005f62:	4d05      	ldr	r5, [pc, #20]	; (8005f78 <_lseek_r+0x20>)
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fc faf8 	bl	800255c <_lseek>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_lseek_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_lseek_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	20000c58 	.word	0x20000c58

08005f7c <_read_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	2200      	movs	r2, #0
 8005f86:	4d05      	ldr	r5, [pc, #20]	; (8005f9c <_read_r+0x20>)
 8005f88:	602a      	str	r2, [r5, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7fc fa89 	bl	80024a2 <_read>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_read_r+0x1e>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_read_r+0x1e>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	20000c58 	.word	0x20000c58

08005fa0 <_write_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4d05      	ldr	r5, [pc, #20]	; (8005fc0 <_write_r+0x20>)
 8005fac:	602a      	str	r2, [r5, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f7fc fa94 	bl	80024dc <_write>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_write_r+0x1e>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_write_r+0x1e>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20000c58 	.word	0x20000c58

08005fc4 <__errno>:
 8005fc4:	4b01      	ldr	r3, [pc, #4]	; (8005fcc <__errno+0x8>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	20000074 	.word	0x20000074

08005fd0 <__libc_init_array>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	4d0c      	ldr	r5, [pc, #48]	; (8006008 <__libc_init_array+0x38>)
 8005fd6:	4c0d      	ldr	r4, [pc, #52]	; (800600c <__libc_init_array+0x3c>)
 8005fd8:	1b64      	subs	r4, r4, r5
 8005fda:	10a4      	asrs	r4, r4, #2
 8005fdc:	42a6      	cmp	r6, r4
 8005fde:	d109      	bne.n	8005ff4 <__libc_init_array+0x24>
 8005fe0:	f002 f86c 	bl	80080bc <_init>
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	4d0a      	ldr	r5, [pc, #40]	; (8006010 <__libc_init_array+0x40>)
 8005fe8:	4c0a      	ldr	r4, [pc, #40]	; (8006014 <__libc_init_array+0x44>)
 8005fea:	1b64      	subs	r4, r4, r5
 8005fec:	10a4      	asrs	r4, r4, #2
 8005fee:	42a6      	cmp	r6, r4
 8005ff0:	d105      	bne.n	8005ffe <__libc_init_array+0x2e>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff8:	4798      	blx	r3
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7ee      	b.n	8005fdc <__libc_init_array+0xc>
 8005ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006002:	4798      	blx	r3
 8006004:	3601      	adds	r6, #1
 8006006:	e7f2      	b.n	8005fee <__libc_init_array+0x1e>
 8006008:	080099ac 	.word	0x080099ac
 800600c:	080099ac 	.word	0x080099ac
 8006010:	080099ac 	.word	0x080099ac
 8006014:	080099b0 	.word	0x080099b0

08006018 <__retarget_lock_init_recursive>:
 8006018:	4770      	bx	lr

0800601a <__retarget_lock_acquire_recursive>:
 800601a:	4770      	bx	lr

0800601c <__retarget_lock_release_recursive>:
 800601c:	4770      	bx	lr

0800601e <memchr>:
 800601e:	4603      	mov	r3, r0
 8006020:	b510      	push	{r4, lr}
 8006022:	b2c9      	uxtb	r1, r1
 8006024:	4402      	add	r2, r0
 8006026:	4293      	cmp	r3, r2
 8006028:	4618      	mov	r0, r3
 800602a:	d101      	bne.n	8006030 <memchr+0x12>
 800602c:	2000      	movs	r0, #0
 800602e:	e003      	b.n	8006038 <memchr+0x1a>
 8006030:	7804      	ldrb	r4, [r0, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	428c      	cmp	r4, r1
 8006036:	d1f6      	bne.n	8006026 <memchr+0x8>
 8006038:	bd10      	pop	{r4, pc}

0800603a <memcpy>:
 800603a:	440a      	add	r2, r1
 800603c:	4291      	cmp	r1, r2
 800603e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006042:	d100      	bne.n	8006046 <memcpy+0xc>
 8006044:	4770      	bx	lr
 8006046:	b510      	push	{r4, lr}
 8006048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604c:	4291      	cmp	r1, r2
 800604e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006052:	d1f9      	bne.n	8006048 <memcpy+0xe>
 8006054:	bd10      	pop	{r4, pc}

08006056 <quorem>:
 8006056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	6903      	ldr	r3, [r0, #16]
 800605c:	690c      	ldr	r4, [r1, #16]
 800605e:	4607      	mov	r7, r0
 8006060:	42a3      	cmp	r3, r4
 8006062:	db7f      	blt.n	8006164 <quorem+0x10e>
 8006064:	3c01      	subs	r4, #1
 8006066:	f100 0514 	add.w	r5, r0, #20
 800606a:	f101 0814 	add.w	r8, r1, #20
 800606e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800607c:	3301      	adds	r3, #1
 800607e:	429a      	cmp	r2, r3
 8006080:	fbb2 f6f3 	udiv	r6, r2, r3
 8006084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800608c:	d331      	bcc.n	80060f2 <quorem+0x9c>
 800608e:	f04f 0e00 	mov.w	lr, #0
 8006092:	4640      	mov	r0, r8
 8006094:	46ac      	mov	ip, r5
 8006096:	46f2      	mov	sl, lr
 8006098:	f850 2b04 	ldr.w	r2, [r0], #4
 800609c:	b293      	uxth	r3, r2
 800609e:	fb06 e303 	mla	r3, r6, r3, lr
 80060a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060a6:	0c1a      	lsrs	r2, r3, #16
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	fb06 220e 	mla	r2, r6, lr, r2
 80060ae:	ebaa 0303 	sub.w	r3, sl, r3
 80060b2:	f8dc a000 	ldr.w	sl, [ip]
 80060b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060ba:	fa1f fa8a 	uxth.w	sl, sl
 80060be:	4453      	add	r3, sl
 80060c0:	f8dc a000 	ldr.w	sl, [ip]
 80060c4:	b292      	uxth	r2, r2
 80060c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d4:	4581      	cmp	r9, r0
 80060d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060da:	f84c 3b04 	str.w	r3, [ip], #4
 80060de:	d2db      	bcs.n	8006098 <quorem+0x42>
 80060e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80060e4:	b92b      	cbnz	r3, 80060f2 <quorem+0x9c>
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	429d      	cmp	r5, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	d32d      	bcc.n	800614c <quorem+0xf6>
 80060f0:	613c      	str	r4, [r7, #16]
 80060f2:	4638      	mov	r0, r7
 80060f4:	f001 f992 	bl	800741c <__mcmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	db23      	blt.n	8006144 <quorem+0xee>
 80060fc:	4629      	mov	r1, r5
 80060fe:	2000      	movs	r0, #0
 8006100:	3601      	adds	r6, #1
 8006102:	f858 2b04 	ldr.w	r2, [r8], #4
 8006106:	f8d1 c000 	ldr.w	ip, [r1]
 800610a:	b293      	uxth	r3, r2
 800610c:	1ac3      	subs	r3, r0, r3
 800610e:	0c12      	lsrs	r2, r2, #16
 8006110:	fa1f f08c 	uxth.w	r0, ip
 8006114:	4403      	add	r3, r0
 8006116:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800611a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800611e:	b29b      	uxth	r3, r3
 8006120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006124:	45c1      	cmp	r9, r8
 8006126:	ea4f 4022 	mov.w	r0, r2, asr #16
 800612a:	f841 3b04 	str.w	r3, [r1], #4
 800612e:	d2e8      	bcs.n	8006102 <quorem+0xac>
 8006130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006138:	b922      	cbnz	r2, 8006144 <quorem+0xee>
 800613a:	3b04      	subs	r3, #4
 800613c:	429d      	cmp	r5, r3
 800613e:	461a      	mov	r2, r3
 8006140:	d30a      	bcc.n	8006158 <quorem+0x102>
 8006142:	613c      	str	r4, [r7, #16]
 8006144:	4630      	mov	r0, r6
 8006146:	b003      	add	sp, #12
 8006148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	3b04      	subs	r3, #4
 8006150:	2a00      	cmp	r2, #0
 8006152:	d1cd      	bne.n	80060f0 <quorem+0x9a>
 8006154:	3c01      	subs	r4, #1
 8006156:	e7c8      	b.n	80060ea <quorem+0x94>
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	3b04      	subs	r3, #4
 800615c:	2a00      	cmp	r2, #0
 800615e:	d1f0      	bne.n	8006142 <quorem+0xec>
 8006160:	3c01      	subs	r4, #1
 8006162:	e7eb      	b.n	800613c <quorem+0xe6>
 8006164:	2000      	movs	r0, #0
 8006166:	e7ee      	b.n	8006146 <quorem+0xf0>

08006168 <_dtoa_r>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	4616      	mov	r6, r2
 800616e:	461f      	mov	r7, r3
 8006170:	69c4      	ldr	r4, [r0, #28]
 8006172:	b099      	sub	sp, #100	; 0x64
 8006174:	4605      	mov	r5, r0
 8006176:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800617a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800617e:	b974      	cbnz	r4, 800619e <_dtoa_r+0x36>
 8006180:	2010      	movs	r0, #16
 8006182:	f000 fe1d 	bl	8006dc0 <malloc>
 8006186:	4602      	mov	r2, r0
 8006188:	61e8      	str	r0, [r5, #28]
 800618a:	b920      	cbnz	r0, 8006196 <_dtoa_r+0x2e>
 800618c:	21ef      	movs	r1, #239	; 0xef
 800618e:	4bac      	ldr	r3, [pc, #688]	; (8006440 <_dtoa_r+0x2d8>)
 8006190:	48ac      	ldr	r0, [pc, #688]	; (8006444 <_dtoa_r+0x2dc>)
 8006192:	f001 fc53 	bl	8007a3c <__assert_func>
 8006196:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800619a:	6004      	str	r4, [r0, #0]
 800619c:	60c4      	str	r4, [r0, #12]
 800619e:	69eb      	ldr	r3, [r5, #28]
 80061a0:	6819      	ldr	r1, [r3, #0]
 80061a2:	b151      	cbz	r1, 80061ba <_dtoa_r+0x52>
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	2301      	movs	r3, #1
 80061a8:	4093      	lsls	r3, r2
 80061aa:	604a      	str	r2, [r1, #4]
 80061ac:	608b      	str	r3, [r1, #8]
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 fefa 	bl	8006fa8 <_Bfree>
 80061b4:	2200      	movs	r2, #0
 80061b6:	69eb      	ldr	r3, [r5, #28]
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	1e3b      	subs	r3, r7, #0
 80061bc:	bfaf      	iteee	ge
 80061be:	2300      	movge	r3, #0
 80061c0:	2201      	movlt	r2, #1
 80061c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061c6:	9305      	strlt	r3, [sp, #20]
 80061c8:	bfa8      	it	ge
 80061ca:	f8c8 3000 	strge.w	r3, [r8]
 80061ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80061d2:	4b9d      	ldr	r3, [pc, #628]	; (8006448 <_dtoa_r+0x2e0>)
 80061d4:	bfb8      	it	lt
 80061d6:	f8c8 2000 	strlt.w	r2, [r8]
 80061da:	ea33 0309 	bics.w	r3, r3, r9
 80061de:	d119      	bne.n	8006214 <_dtoa_r+0xac>
 80061e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80061e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061ec:	4333      	orrs	r3, r6
 80061ee:	f000 8589 	beq.w	8006d04 <_dtoa_r+0xb9c>
 80061f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061f4:	b953      	cbnz	r3, 800620c <_dtoa_r+0xa4>
 80061f6:	4b95      	ldr	r3, [pc, #596]	; (800644c <_dtoa_r+0x2e4>)
 80061f8:	e023      	b.n	8006242 <_dtoa_r+0xda>
 80061fa:	4b95      	ldr	r3, [pc, #596]	; (8006450 <_dtoa_r+0x2e8>)
 80061fc:	9303      	str	r3, [sp, #12]
 80061fe:	3308      	adds	r3, #8
 8006200:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	9803      	ldr	r0, [sp, #12]
 8006206:	b019      	add	sp, #100	; 0x64
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	4b8f      	ldr	r3, [pc, #572]	; (800644c <_dtoa_r+0x2e4>)
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	3303      	adds	r3, #3
 8006212:	e7f5      	b.n	8006200 <_dtoa_r+0x98>
 8006214:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006218:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800621c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	f7fa fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006228:	4680      	mov	r8, r0
 800622a:	b160      	cbz	r0, 8006246 <_dtoa_r+0xde>
 800622c:	2301      	movs	r3, #1
 800622e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8562 	beq.w	8006cfe <_dtoa_r+0xb96>
 800623a:	4b86      	ldr	r3, [pc, #536]	; (8006454 <_dtoa_r+0x2ec>)
 800623c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	e7de      	b.n	8006204 <_dtoa_r+0x9c>
 8006246:	ab16      	add	r3, sp, #88	; 0x58
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	ab17      	add	r3, sp, #92	; 0x5c
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4628      	mov	r0, r5
 8006250:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006254:	f001 f98a 	bl	800756c <__d2b>
 8006258:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800625c:	4682      	mov	sl, r0
 800625e:	2c00      	cmp	r4, #0
 8006260:	d07e      	beq.n	8006360 <_dtoa_r+0x1f8>
 8006262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006268:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800626c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006270:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006274:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006278:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800627c:	4619      	mov	r1, r3
 800627e:	2200      	movs	r2, #0
 8006280:	4b75      	ldr	r3, [pc, #468]	; (8006458 <_dtoa_r+0x2f0>)
 8006282:	f7f9 ff71 	bl	8000168 <__aeabi_dsub>
 8006286:	a368      	add	r3, pc, #416	; (adr r3, 8006428 <_dtoa_r+0x2c0>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f7fa f924 	bl	80004d8 <__aeabi_dmul>
 8006290:	a367      	add	r3, pc, #412	; (adr r3, 8006430 <_dtoa_r+0x2c8>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f7f9 ff69 	bl	800016c <__adddf3>
 800629a:	4606      	mov	r6, r0
 800629c:	4620      	mov	r0, r4
 800629e:	460f      	mov	r7, r1
 80062a0:	f7fa f8b0 	bl	8000404 <__aeabi_i2d>
 80062a4:	a364      	add	r3, pc, #400	; (adr r3, 8006438 <_dtoa_r+0x2d0>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f7fa f915 	bl	80004d8 <__aeabi_dmul>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4630      	mov	r0, r6
 80062b4:	4639      	mov	r1, r7
 80062b6:	f7f9 ff59 	bl	800016c <__adddf3>
 80062ba:	4606      	mov	r6, r0
 80062bc:	460f      	mov	r7, r1
 80062be:	f7fa fbbb 	bl	8000a38 <__aeabi_d2iz>
 80062c2:	2200      	movs	r2, #0
 80062c4:	4683      	mov	fp, r0
 80062c6:	2300      	movs	r3, #0
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7fa fb76 	bl	80009bc <__aeabi_dcmplt>
 80062d0:	b148      	cbz	r0, 80062e6 <_dtoa_r+0x17e>
 80062d2:	4658      	mov	r0, fp
 80062d4:	f7fa f896 	bl	8000404 <__aeabi_i2d>
 80062d8:	4632      	mov	r2, r6
 80062da:	463b      	mov	r3, r7
 80062dc:	f7fa fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80062e0:	b908      	cbnz	r0, 80062e6 <_dtoa_r+0x17e>
 80062e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062e6:	f1bb 0f16 	cmp.w	fp, #22
 80062ea:	d857      	bhi.n	800639c <_dtoa_r+0x234>
 80062ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062f0:	4b5a      	ldr	r3, [pc, #360]	; (800645c <_dtoa_r+0x2f4>)
 80062f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f7fa fb5f 	bl	80009bc <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d04e      	beq.n	80063a0 <_dtoa_r+0x238>
 8006302:	2300      	movs	r3, #0
 8006304:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006308:	930f      	str	r3, [sp, #60]	; 0x3c
 800630a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800630c:	1b1b      	subs	r3, r3, r4
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	bf46      	itte	mi
 8006312:	f1c3 0901 	rsbmi	r9, r3, #1
 8006316:	2300      	movmi	r3, #0
 8006318:	f04f 0900 	movpl.w	r9, #0
 800631c:	9209      	str	r2, [sp, #36]	; 0x24
 800631e:	bf48      	it	mi
 8006320:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006322:	f1bb 0f00 	cmp.w	fp, #0
 8006326:	db3d      	blt.n	80063a4 <_dtoa_r+0x23c>
 8006328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800632e:	445b      	add	r3, fp
 8006330:	9309      	str	r3, [sp, #36]	; 0x24
 8006332:	2300      	movs	r3, #0
 8006334:	930a      	str	r3, [sp, #40]	; 0x28
 8006336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006338:	2b09      	cmp	r3, #9
 800633a:	d867      	bhi.n	800640c <_dtoa_r+0x2a4>
 800633c:	2b05      	cmp	r3, #5
 800633e:	bfc4      	itt	gt
 8006340:	3b04      	subgt	r3, #4
 8006342:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006346:	bfc8      	it	gt
 8006348:	2400      	movgt	r4, #0
 800634a:	f1a3 0302 	sub.w	r3, r3, #2
 800634e:	bfd8      	it	le
 8006350:	2401      	movle	r4, #1
 8006352:	2b03      	cmp	r3, #3
 8006354:	f200 8086 	bhi.w	8006464 <_dtoa_r+0x2fc>
 8006358:	e8df f003 	tbb	[pc, r3]
 800635c:	5637392c 	.word	0x5637392c
 8006360:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006364:	441c      	add	r4, r3
 8006366:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800636a:	2b20      	cmp	r3, #32
 800636c:	bfc1      	itttt	gt
 800636e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006372:	fa09 f903 	lslgt.w	r9, r9, r3
 8006376:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800637a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800637e:	bfd6      	itet	le
 8006380:	f1c3 0320 	rsble	r3, r3, #32
 8006384:	ea49 0003 	orrgt.w	r0, r9, r3
 8006388:	fa06 f003 	lslle.w	r0, r6, r3
 800638c:	f7fa f82a 	bl	80003e4 <__aeabi_ui2d>
 8006390:	2201      	movs	r2, #1
 8006392:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006396:	3c01      	subs	r4, #1
 8006398:	9213      	str	r2, [sp, #76]	; 0x4c
 800639a:	e76f      	b.n	800627c <_dtoa_r+0x114>
 800639c:	2301      	movs	r3, #1
 800639e:	e7b3      	b.n	8006308 <_dtoa_r+0x1a0>
 80063a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80063a2:	e7b2      	b.n	800630a <_dtoa_r+0x1a2>
 80063a4:	f1cb 0300 	rsb	r3, fp, #0
 80063a8:	930a      	str	r3, [sp, #40]	; 0x28
 80063aa:	2300      	movs	r3, #0
 80063ac:	eba9 090b 	sub.w	r9, r9, fp
 80063b0:	930e      	str	r3, [sp, #56]	; 0x38
 80063b2:	e7c0      	b.n	8006336 <_dtoa_r+0x1ce>
 80063b4:	2300      	movs	r3, #0
 80063b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dc55      	bgt.n	800646a <_dtoa_r+0x302>
 80063be:	2301      	movs	r3, #1
 80063c0:	461a      	mov	r2, r3
 80063c2:	9306      	str	r3, [sp, #24]
 80063c4:	9308      	str	r3, [sp, #32]
 80063c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80063c8:	e00b      	b.n	80063e2 <_dtoa_r+0x27a>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e7f3      	b.n	80063b6 <_dtoa_r+0x24e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063d4:	445b      	add	r3, fp
 80063d6:	9306      	str	r3, [sp, #24]
 80063d8:	3301      	adds	r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	9308      	str	r3, [sp, #32]
 80063de:	bfb8      	it	lt
 80063e0:	2301      	movlt	r3, #1
 80063e2:	2100      	movs	r1, #0
 80063e4:	2204      	movs	r2, #4
 80063e6:	69e8      	ldr	r0, [r5, #28]
 80063e8:	f102 0614 	add.w	r6, r2, #20
 80063ec:	429e      	cmp	r6, r3
 80063ee:	d940      	bls.n	8006472 <_dtoa_r+0x30a>
 80063f0:	6041      	str	r1, [r0, #4]
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 fd98 	bl	8006f28 <_Balloc>
 80063f8:	9003      	str	r0, [sp, #12]
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d13c      	bne.n	8006478 <_dtoa_r+0x310>
 80063fe:	4602      	mov	r2, r0
 8006400:	f240 11af 	movw	r1, #431	; 0x1af
 8006404:	4b16      	ldr	r3, [pc, #88]	; (8006460 <_dtoa_r+0x2f8>)
 8006406:	e6c3      	b.n	8006190 <_dtoa_r+0x28>
 8006408:	2301      	movs	r3, #1
 800640a:	e7e1      	b.n	80063d0 <_dtoa_r+0x268>
 800640c:	2401      	movs	r4, #1
 800640e:	2300      	movs	r3, #0
 8006410:	940b      	str	r4, [sp, #44]	; 0x2c
 8006412:	9322      	str	r3, [sp, #136]	; 0x88
 8006414:	f04f 33ff 	mov.w	r3, #4294967295
 8006418:	2200      	movs	r2, #0
 800641a:	9306      	str	r3, [sp, #24]
 800641c:	9308      	str	r3, [sp, #32]
 800641e:	2312      	movs	r3, #18
 8006420:	e7d1      	b.n	80063c6 <_dtoa_r+0x25e>
 8006422:	bf00      	nop
 8006424:	f3af 8000 	nop.w
 8006428:	636f4361 	.word	0x636f4361
 800642c:	3fd287a7 	.word	0x3fd287a7
 8006430:	8b60c8b3 	.word	0x8b60c8b3
 8006434:	3fc68a28 	.word	0x3fc68a28
 8006438:	509f79fb 	.word	0x509f79fb
 800643c:	3fd34413 	.word	0x3fd34413
 8006440:	0800967f 	.word	0x0800967f
 8006444:	08009696 	.word	0x08009696
 8006448:	7ff00000 	.word	0x7ff00000
 800644c:	0800967b 	.word	0x0800967b
 8006450:	08009672 	.word	0x08009672
 8006454:	0800964f 	.word	0x0800964f
 8006458:	3ff80000 	.word	0x3ff80000
 800645c:	08009780 	.word	0x08009780
 8006460:	080096ee 	.word	0x080096ee
 8006464:	2301      	movs	r3, #1
 8006466:	930b      	str	r3, [sp, #44]	; 0x2c
 8006468:	e7d4      	b.n	8006414 <_dtoa_r+0x2ac>
 800646a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800646c:	9306      	str	r3, [sp, #24]
 800646e:	9308      	str	r3, [sp, #32]
 8006470:	e7b7      	b.n	80063e2 <_dtoa_r+0x27a>
 8006472:	3101      	adds	r1, #1
 8006474:	0052      	lsls	r2, r2, #1
 8006476:	e7b7      	b.n	80063e8 <_dtoa_r+0x280>
 8006478:	69eb      	ldr	r3, [r5, #28]
 800647a:	9a03      	ldr	r2, [sp, #12]
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	2b0e      	cmp	r3, #14
 8006482:	f200 80a8 	bhi.w	80065d6 <_dtoa_r+0x46e>
 8006486:	2c00      	cmp	r4, #0
 8006488:	f000 80a5 	beq.w	80065d6 <_dtoa_r+0x46e>
 800648c:	f1bb 0f00 	cmp.w	fp, #0
 8006490:	dd34      	ble.n	80064fc <_dtoa_r+0x394>
 8006492:	4b9a      	ldr	r3, [pc, #616]	; (80066fc <_dtoa_r+0x594>)
 8006494:	f00b 020f 	and.w	r2, fp, #15
 8006498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800649c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80064ac:	d016      	beq.n	80064dc <_dtoa_r+0x374>
 80064ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064b2:	4b93      	ldr	r3, [pc, #588]	; (8006700 <_dtoa_r+0x598>)
 80064b4:	2703      	movs	r7, #3
 80064b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064ba:	f7fa f937 	bl	800072c <__aeabi_ddiv>
 80064be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c2:	f004 040f 	and.w	r4, r4, #15
 80064c6:	4e8e      	ldr	r6, [pc, #568]	; (8006700 <_dtoa_r+0x598>)
 80064c8:	b954      	cbnz	r4, 80064e0 <_dtoa_r+0x378>
 80064ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d2:	f7fa f92b 	bl	800072c <__aeabi_ddiv>
 80064d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064da:	e029      	b.n	8006530 <_dtoa_r+0x3c8>
 80064dc:	2702      	movs	r7, #2
 80064de:	e7f2      	b.n	80064c6 <_dtoa_r+0x35e>
 80064e0:	07e1      	lsls	r1, r4, #31
 80064e2:	d508      	bpl.n	80064f6 <_dtoa_r+0x38e>
 80064e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064ec:	f7f9 fff4 	bl	80004d8 <__aeabi_dmul>
 80064f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064f4:	3701      	adds	r7, #1
 80064f6:	1064      	asrs	r4, r4, #1
 80064f8:	3608      	adds	r6, #8
 80064fa:	e7e5      	b.n	80064c8 <_dtoa_r+0x360>
 80064fc:	f000 80a5 	beq.w	800664a <_dtoa_r+0x4e2>
 8006500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006504:	f1cb 0400 	rsb	r4, fp, #0
 8006508:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <_dtoa_r+0x594>)
 800650a:	f004 020f 	and.w	r2, r4, #15
 800650e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7f9 ffdf 	bl	80004d8 <__aeabi_dmul>
 800651a:	2702      	movs	r7, #2
 800651c:	2300      	movs	r3, #0
 800651e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006522:	4e77      	ldr	r6, [pc, #476]	; (8006700 <_dtoa_r+0x598>)
 8006524:	1124      	asrs	r4, r4, #4
 8006526:	2c00      	cmp	r4, #0
 8006528:	f040 8084 	bne.w	8006634 <_dtoa_r+0x4cc>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1d2      	bne.n	80064d6 <_dtoa_r+0x36e>
 8006530:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006534:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8087 	beq.w	800664e <_dtoa_r+0x4e6>
 8006540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006544:	2200      	movs	r2, #0
 8006546:	4b6f      	ldr	r3, [pc, #444]	; (8006704 <_dtoa_r+0x59c>)
 8006548:	f7fa fa38 	bl	80009bc <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	d07e      	beq.n	800664e <_dtoa_r+0x4e6>
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d07b      	beq.n	800664e <_dtoa_r+0x4e6>
 8006556:	9b06      	ldr	r3, [sp, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dd38      	ble.n	80065ce <_dtoa_r+0x466>
 800655c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006560:	2200      	movs	r2, #0
 8006562:	4b69      	ldr	r3, [pc, #420]	; (8006708 <_dtoa_r+0x5a0>)
 8006564:	f7f9 ffb8 	bl	80004d8 <__aeabi_dmul>
 8006568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800656c:	9c06      	ldr	r4, [sp, #24]
 800656e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006572:	3701      	adds	r7, #1
 8006574:	4638      	mov	r0, r7
 8006576:	f7f9 ff45 	bl	8000404 <__aeabi_i2d>
 800657a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800657e:	f7f9 ffab 	bl	80004d8 <__aeabi_dmul>
 8006582:	2200      	movs	r2, #0
 8006584:	4b61      	ldr	r3, [pc, #388]	; (800670c <_dtoa_r+0x5a4>)
 8006586:	f7f9 fdf1 	bl	800016c <__adddf3>
 800658a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800658e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006592:	9611      	str	r6, [sp, #68]	; 0x44
 8006594:	2c00      	cmp	r4, #0
 8006596:	d15d      	bne.n	8006654 <_dtoa_r+0x4ec>
 8006598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800659c:	2200      	movs	r2, #0
 800659e:	4b5c      	ldr	r3, [pc, #368]	; (8006710 <_dtoa_r+0x5a8>)
 80065a0:	f7f9 fde2 	bl	8000168 <__aeabi_dsub>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065ac:	4633      	mov	r3, r6
 80065ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065b0:	f7fa fa22 	bl	80009f8 <__aeabi_dcmpgt>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f040 8295 	bne.w	8006ae4 <_dtoa_r+0x97c>
 80065ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065c4:	f7fa f9fa 	bl	80009bc <__aeabi_dcmplt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f040 8289 	bne.w	8006ae0 <_dtoa_r+0x978>
 80065ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80065d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f2c0 8151 	blt.w	8006880 <_dtoa_r+0x718>
 80065de:	f1bb 0f0e 	cmp.w	fp, #14
 80065e2:	f300 814d 	bgt.w	8006880 <_dtoa_r+0x718>
 80065e6:	4b45      	ldr	r3, [pc, #276]	; (80066fc <_dtoa_r+0x594>)
 80065e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f280 80da 	bge.w	80067b0 <_dtoa_r+0x648>
 80065fc:	9b08      	ldr	r3, [sp, #32]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f300 80d6 	bgt.w	80067b0 <_dtoa_r+0x648>
 8006604:	f040 826b 	bne.w	8006ade <_dtoa_r+0x976>
 8006608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800660c:	2200      	movs	r2, #0
 800660e:	4b40      	ldr	r3, [pc, #256]	; (8006710 <_dtoa_r+0x5a8>)
 8006610:	f7f9 ff62 	bl	80004d8 <__aeabi_dmul>
 8006614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006618:	f7fa f9e4 	bl	80009e4 <__aeabi_dcmpge>
 800661c:	9c08      	ldr	r4, [sp, #32]
 800661e:	4626      	mov	r6, r4
 8006620:	2800      	cmp	r0, #0
 8006622:	f040 8241 	bne.w	8006aa8 <_dtoa_r+0x940>
 8006626:	2331      	movs	r3, #49	; 0x31
 8006628:	9f03      	ldr	r7, [sp, #12]
 800662a:	f10b 0b01 	add.w	fp, fp, #1
 800662e:	f807 3b01 	strb.w	r3, [r7], #1
 8006632:	e23d      	b.n	8006ab0 <_dtoa_r+0x948>
 8006634:	07e2      	lsls	r2, r4, #31
 8006636:	d505      	bpl.n	8006644 <_dtoa_r+0x4dc>
 8006638:	e9d6 2300 	ldrd	r2, r3, [r6]
 800663c:	f7f9 ff4c 	bl	80004d8 <__aeabi_dmul>
 8006640:	2301      	movs	r3, #1
 8006642:	3701      	adds	r7, #1
 8006644:	1064      	asrs	r4, r4, #1
 8006646:	3608      	adds	r6, #8
 8006648:	e76d      	b.n	8006526 <_dtoa_r+0x3be>
 800664a:	2702      	movs	r7, #2
 800664c:	e770      	b.n	8006530 <_dtoa_r+0x3c8>
 800664e:	46d8      	mov	r8, fp
 8006650:	9c08      	ldr	r4, [sp, #32]
 8006652:	e78f      	b.n	8006574 <_dtoa_r+0x40c>
 8006654:	9903      	ldr	r1, [sp, #12]
 8006656:	4b29      	ldr	r3, [pc, #164]	; (80066fc <_dtoa_r+0x594>)
 8006658:	4421      	add	r1, r4
 800665a:	9112      	str	r1, [sp, #72]	; 0x48
 800665c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800665e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006662:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006666:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800666a:	2900      	cmp	r1, #0
 800666c:	d054      	beq.n	8006718 <_dtoa_r+0x5b0>
 800666e:	2000      	movs	r0, #0
 8006670:	4928      	ldr	r1, [pc, #160]	; (8006714 <_dtoa_r+0x5ac>)
 8006672:	f7fa f85b 	bl	800072c <__aeabi_ddiv>
 8006676:	463b      	mov	r3, r7
 8006678:	4632      	mov	r2, r6
 800667a:	f7f9 fd75 	bl	8000168 <__aeabi_dsub>
 800667e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006682:	9f03      	ldr	r7, [sp, #12]
 8006684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006688:	f7fa f9d6 	bl	8000a38 <__aeabi_d2iz>
 800668c:	4604      	mov	r4, r0
 800668e:	f7f9 feb9 	bl	8000404 <__aeabi_i2d>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800669a:	f7f9 fd65 	bl	8000168 <__aeabi_dsub>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	3430      	adds	r4, #48	; 0x30
 80066a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ac:	f807 4b01 	strb.w	r4, [r7], #1
 80066b0:	f7fa f984 	bl	80009bc <__aeabi_dcmplt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d173      	bne.n	80067a0 <_dtoa_r+0x638>
 80066b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066bc:	2000      	movs	r0, #0
 80066be:	4911      	ldr	r1, [pc, #68]	; (8006704 <_dtoa_r+0x59c>)
 80066c0:	f7f9 fd52 	bl	8000168 <__aeabi_dsub>
 80066c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066c8:	f7fa f978 	bl	80009bc <__aeabi_dcmplt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f040 80b6 	bne.w	800683e <_dtoa_r+0x6d6>
 80066d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d4:	429f      	cmp	r7, r3
 80066d6:	f43f af7a 	beq.w	80065ce <_dtoa_r+0x466>
 80066da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066de:	2200      	movs	r2, #0
 80066e0:	4b09      	ldr	r3, [pc, #36]	; (8006708 <_dtoa_r+0x5a0>)
 80066e2:	f7f9 fef9 	bl	80004d8 <__aeabi_dmul>
 80066e6:	2200      	movs	r2, #0
 80066e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <_dtoa_r+0x5a0>)
 80066f2:	f7f9 fef1 	bl	80004d8 <__aeabi_dmul>
 80066f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066fa:	e7c3      	b.n	8006684 <_dtoa_r+0x51c>
 80066fc:	08009780 	.word	0x08009780
 8006700:	08009758 	.word	0x08009758
 8006704:	3ff00000 	.word	0x3ff00000
 8006708:	40240000 	.word	0x40240000
 800670c:	401c0000 	.word	0x401c0000
 8006710:	40140000 	.word	0x40140000
 8006714:	3fe00000 	.word	0x3fe00000
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 fedc 	bl	80004d8 <__aeabi_dmul>
 8006720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006722:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006726:	9c03      	ldr	r4, [sp, #12]
 8006728:	9314      	str	r3, [sp, #80]	; 0x50
 800672a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800672e:	f7fa f983 	bl	8000a38 <__aeabi_d2iz>
 8006732:	9015      	str	r0, [sp, #84]	; 0x54
 8006734:	f7f9 fe66 	bl	8000404 <__aeabi_i2d>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006740:	f7f9 fd12 	bl	8000168 <__aeabi_dsub>
 8006744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006746:	4606      	mov	r6, r0
 8006748:	3330      	adds	r3, #48	; 0x30
 800674a:	f804 3b01 	strb.w	r3, [r4], #1
 800674e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006750:	460f      	mov	r7, r1
 8006752:	429c      	cmp	r4, r3
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	d124      	bne.n	80067a4 <_dtoa_r+0x63c>
 800675a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800675e:	4baf      	ldr	r3, [pc, #700]	; (8006a1c <_dtoa_r+0x8b4>)
 8006760:	f7f9 fd04 	bl	800016c <__adddf3>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7fa f944 	bl	80009f8 <__aeabi_dcmpgt>
 8006770:	2800      	cmp	r0, #0
 8006772:	d163      	bne.n	800683c <_dtoa_r+0x6d4>
 8006774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006778:	2000      	movs	r0, #0
 800677a:	49a8      	ldr	r1, [pc, #672]	; (8006a1c <_dtoa_r+0x8b4>)
 800677c:	f7f9 fcf4 	bl	8000168 <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f7fa f918 	bl	80009bc <__aeabi_dcmplt>
 800678c:	2800      	cmp	r0, #0
 800678e:	f43f af1e 	beq.w	80065ce <_dtoa_r+0x466>
 8006792:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006794:	1e7b      	subs	r3, r7, #1
 8006796:	9314      	str	r3, [sp, #80]	; 0x50
 8006798:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800679c:	2b30      	cmp	r3, #48	; 0x30
 800679e:	d0f8      	beq.n	8006792 <_dtoa_r+0x62a>
 80067a0:	46c3      	mov	fp, r8
 80067a2:	e03b      	b.n	800681c <_dtoa_r+0x6b4>
 80067a4:	4b9e      	ldr	r3, [pc, #632]	; (8006a20 <_dtoa_r+0x8b8>)
 80067a6:	f7f9 fe97 	bl	80004d8 <__aeabi_dmul>
 80067aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ae:	e7bc      	b.n	800672a <_dtoa_r+0x5c2>
 80067b0:	9f03      	ldr	r7, [sp, #12]
 80067b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80067b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	f7f9 ffb5 	bl	800072c <__aeabi_ddiv>
 80067c2:	f7fa f939 	bl	8000a38 <__aeabi_d2iz>
 80067c6:	4604      	mov	r4, r0
 80067c8:	f7f9 fe1c 	bl	8000404 <__aeabi_i2d>
 80067cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067d0:	f7f9 fe82 	bl	80004d8 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7f9 fcc4 	bl	8000168 <__aeabi_dsub>
 80067e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80067e4:	f807 6b01 	strb.w	r6, [r7], #1
 80067e8:	9e03      	ldr	r6, [sp, #12]
 80067ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80067ee:	1bbe      	subs	r6, r7, r6
 80067f0:	45b4      	cmp	ip, r6
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	d136      	bne.n	8006866 <_dtoa_r+0x6fe>
 80067f8:	f7f9 fcb8 	bl	800016c <__adddf3>
 80067fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006800:	4680      	mov	r8, r0
 8006802:	4689      	mov	r9, r1
 8006804:	f7fa f8f8 	bl	80009f8 <__aeabi_dcmpgt>
 8006808:	bb58      	cbnz	r0, 8006862 <_dtoa_r+0x6fa>
 800680a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7fa f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 8006816:	b108      	cbz	r0, 800681c <_dtoa_r+0x6b4>
 8006818:	07e3      	lsls	r3, r4, #31
 800681a:	d422      	bmi.n	8006862 <_dtoa_r+0x6fa>
 800681c:	4651      	mov	r1, sl
 800681e:	4628      	mov	r0, r5
 8006820:	f000 fbc2 	bl	8006fa8 <_Bfree>
 8006824:	2300      	movs	r3, #0
 8006826:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006828:	703b      	strb	r3, [r7, #0]
 800682a:	f10b 0301 	add.w	r3, fp, #1
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006832:	2b00      	cmp	r3, #0
 8006834:	f43f ace6 	beq.w	8006204 <_dtoa_r+0x9c>
 8006838:	601f      	str	r7, [r3, #0]
 800683a:	e4e3      	b.n	8006204 <_dtoa_r+0x9c>
 800683c:	4627      	mov	r7, r4
 800683e:	463b      	mov	r3, r7
 8006840:	461f      	mov	r7, r3
 8006842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006846:	2a39      	cmp	r2, #57	; 0x39
 8006848:	d107      	bne.n	800685a <_dtoa_r+0x6f2>
 800684a:	9a03      	ldr	r2, [sp, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d1f7      	bne.n	8006840 <_dtoa_r+0x6d8>
 8006850:	2230      	movs	r2, #48	; 0x30
 8006852:	9903      	ldr	r1, [sp, #12]
 8006854:	f108 0801 	add.w	r8, r8, #1
 8006858:	700a      	strb	r2, [r1, #0]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	3201      	adds	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e79e      	b.n	80067a0 <_dtoa_r+0x638>
 8006862:	46d8      	mov	r8, fp
 8006864:	e7eb      	b.n	800683e <_dtoa_r+0x6d6>
 8006866:	2200      	movs	r2, #0
 8006868:	4b6d      	ldr	r3, [pc, #436]	; (8006a20 <_dtoa_r+0x8b8>)
 800686a:	f7f9 fe35 	bl	80004d8 <__aeabi_dmul>
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	f7fa f897 	bl	80009a8 <__aeabi_dcmpeq>
 800687a:	2800      	cmp	r0, #0
 800687c:	d09b      	beq.n	80067b6 <_dtoa_r+0x64e>
 800687e:	e7cd      	b.n	800681c <_dtoa_r+0x6b4>
 8006880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006882:	2a00      	cmp	r2, #0
 8006884:	f000 80c4 	beq.w	8006a10 <_dtoa_r+0x8a8>
 8006888:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800688a:	2a01      	cmp	r2, #1
 800688c:	f300 80a8 	bgt.w	80069e0 <_dtoa_r+0x878>
 8006890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006892:	2a00      	cmp	r2, #0
 8006894:	f000 80a0 	beq.w	80069d8 <_dtoa_r+0x870>
 8006898:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800689c:	464f      	mov	r7, r9
 800689e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068a2:	2101      	movs	r1, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	4628      	mov	r0, r5
 80068a8:	4499      	add	r9, r3
 80068aa:	9209      	str	r2, [sp, #36]	; 0x24
 80068ac:	f000 fc32 	bl	8007114 <__i2b>
 80068b0:	4606      	mov	r6, r0
 80068b2:	b15f      	cbz	r7, 80068cc <_dtoa_r+0x764>
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd08      	ble.n	80068cc <_dtoa_r+0x764>
 80068ba:	42bb      	cmp	r3, r7
 80068bc:	bfa8      	it	ge
 80068be:	463b      	movge	r3, r7
 80068c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c2:	eba9 0903 	sub.w	r9, r9, r3
 80068c6:	1aff      	subs	r7, r7, r3
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	9309      	str	r3, [sp, #36]	; 0x24
 80068cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ce:	b1f3      	cbz	r3, 800690e <_dtoa_r+0x7a6>
 80068d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a0 	beq.w	8006a18 <_dtoa_r+0x8b0>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	dd10      	ble.n	80068fe <_dtoa_r+0x796>
 80068dc:	4631      	mov	r1, r6
 80068de:	4622      	mov	r2, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 fcd5 	bl	8007290 <__pow5mult>
 80068e6:	4652      	mov	r2, sl
 80068e8:	4601      	mov	r1, r0
 80068ea:	4606      	mov	r6, r0
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 fc27 	bl	8007140 <__multiply>
 80068f2:	4680      	mov	r8, r0
 80068f4:	4651      	mov	r1, sl
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 fb56 	bl	8006fa8 <_Bfree>
 80068fc:	46c2      	mov	sl, r8
 80068fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006900:	1b1a      	subs	r2, r3, r4
 8006902:	d004      	beq.n	800690e <_dtoa_r+0x7a6>
 8006904:	4651      	mov	r1, sl
 8006906:	4628      	mov	r0, r5
 8006908:	f000 fcc2 	bl	8007290 <__pow5mult>
 800690c:	4682      	mov	sl, r0
 800690e:	2101      	movs	r1, #1
 8006910:	4628      	mov	r0, r5
 8006912:	f000 fbff 	bl	8007114 <__i2b>
 8006916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006918:	4604      	mov	r4, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	f340 8082 	ble.w	8006a24 <_dtoa_r+0x8bc>
 8006920:	461a      	mov	r2, r3
 8006922:	4601      	mov	r1, r0
 8006924:	4628      	mov	r0, r5
 8006926:	f000 fcb3 	bl	8007290 <__pow5mult>
 800692a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800692c:	4604      	mov	r4, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	dd7b      	ble.n	8006a2a <_dtoa_r+0x8c2>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800693c:	6918      	ldr	r0, [r3, #16]
 800693e:	f000 fb9b 	bl	8007078 <__hi0bits>
 8006942:	f1c0 0020 	rsb	r0, r0, #32
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	4418      	add	r0, r3
 800694a:	f010 001f 	ands.w	r0, r0, #31
 800694e:	f000 8092 	beq.w	8006a76 <_dtoa_r+0x90e>
 8006952:	f1c0 0320 	rsb	r3, r0, #32
 8006956:	2b04      	cmp	r3, #4
 8006958:	f340 8085 	ble.w	8006a66 <_dtoa_r+0x8fe>
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	f1c0 001c 	rsb	r0, r0, #28
 8006962:	4403      	add	r3, r0
 8006964:	4481      	add	r9, r0
 8006966:	4407      	add	r7, r0
 8006968:	9309      	str	r3, [sp, #36]	; 0x24
 800696a:	f1b9 0f00 	cmp.w	r9, #0
 800696e:	dd05      	ble.n	800697c <_dtoa_r+0x814>
 8006970:	4651      	mov	r1, sl
 8006972:	464a      	mov	r2, r9
 8006974:	4628      	mov	r0, r5
 8006976:	f000 fce5 	bl	8007344 <__lshift>
 800697a:	4682      	mov	sl, r0
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	dd05      	ble.n	800698e <_dtoa_r+0x826>
 8006982:	4621      	mov	r1, r4
 8006984:	461a      	mov	r2, r3
 8006986:	4628      	mov	r0, r5
 8006988:	f000 fcdc 	bl	8007344 <__lshift>
 800698c:	4604      	mov	r4, r0
 800698e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d072      	beq.n	8006a7a <_dtoa_r+0x912>
 8006994:	4621      	mov	r1, r4
 8006996:	4650      	mov	r0, sl
 8006998:	f000 fd40 	bl	800741c <__mcmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	da6c      	bge.n	8006a7a <_dtoa_r+0x912>
 80069a0:	2300      	movs	r3, #0
 80069a2:	4651      	mov	r1, sl
 80069a4:	220a      	movs	r2, #10
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 fb20 	bl	8006fec <__multadd>
 80069ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ae:	4682      	mov	sl, r0
 80069b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 81ac 	beq.w	8006d12 <_dtoa_r+0xbaa>
 80069ba:	2300      	movs	r3, #0
 80069bc:	4631      	mov	r1, r6
 80069be:	220a      	movs	r2, #10
 80069c0:	4628      	mov	r0, r5
 80069c2:	f000 fb13 	bl	8006fec <__multadd>
 80069c6:	9b06      	ldr	r3, [sp, #24]
 80069c8:	4606      	mov	r6, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f300 8093 	bgt.w	8006af6 <_dtoa_r+0x98e>
 80069d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	dc59      	bgt.n	8006a8a <_dtoa_r+0x922>
 80069d6:	e08e      	b.n	8006af6 <_dtoa_r+0x98e>
 80069d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069de:	e75d      	b.n	800689c <_dtoa_r+0x734>
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	1e5c      	subs	r4, r3, #1
 80069e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	bfbf      	itttt	lt
 80069ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80069ee:	1ae3      	sublt	r3, r4, r3
 80069f0:	18d2      	addlt	r2, r2, r3
 80069f2:	bfa8      	it	ge
 80069f4:	1b1c      	subge	r4, r3, r4
 80069f6:	9b08      	ldr	r3, [sp, #32]
 80069f8:	bfbe      	ittt	lt
 80069fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80069fe:	2400      	movlt	r4, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfb5      	itete	lt
 8006a04:	eba9 0703 	sublt.w	r7, r9, r3
 8006a08:	464f      	movge	r7, r9
 8006a0a:	2300      	movlt	r3, #0
 8006a0c:	9b08      	ldrge	r3, [sp, #32]
 8006a0e:	e747      	b.n	80068a0 <_dtoa_r+0x738>
 8006a10:	464f      	mov	r7, r9
 8006a12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a16:	e74c      	b.n	80068b2 <_dtoa_r+0x74a>
 8006a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1a:	e773      	b.n	8006904 <_dtoa_r+0x79c>
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	40240000 	.word	0x40240000
 8006a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	dc18      	bgt.n	8006a5c <_dtoa_r+0x8f4>
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	b9b3      	cbnz	r3, 8006a5c <_dtoa_r+0x8f4>
 8006a2e:	9b05      	ldr	r3, [sp, #20]
 8006a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a34:	b993      	cbnz	r3, 8006a5c <_dtoa_r+0x8f4>
 8006a36:	9b05      	ldr	r3, [sp, #20]
 8006a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	0d1b      	lsrs	r3, r3, #20
 8006a3e:	051b      	lsls	r3, r3, #20
 8006a40:	b17b      	cbz	r3, 8006a62 <_dtoa_r+0x8fa>
 8006a42:	f04f 0801 	mov.w	r8, #1
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	f109 0901 	add.w	r9, r9, #1
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f47f af6f 	bne.w	8006936 <_dtoa_r+0x7ce>
 8006a58:	2001      	movs	r0, #1
 8006a5a:	e774      	b.n	8006946 <_dtoa_r+0x7de>
 8006a5c:	f04f 0800 	mov.w	r8, #0
 8006a60:	e7f6      	b.n	8006a50 <_dtoa_r+0x8e8>
 8006a62:	4698      	mov	r8, r3
 8006a64:	e7f4      	b.n	8006a50 <_dtoa_r+0x8e8>
 8006a66:	d080      	beq.n	800696a <_dtoa_r+0x802>
 8006a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a6a:	331c      	adds	r3, #28
 8006a6c:	441a      	add	r2, r3
 8006a6e:	4499      	add	r9, r3
 8006a70:	441f      	add	r7, r3
 8006a72:	9209      	str	r2, [sp, #36]	; 0x24
 8006a74:	e779      	b.n	800696a <_dtoa_r+0x802>
 8006a76:	4603      	mov	r3, r0
 8006a78:	e7f6      	b.n	8006a68 <_dtoa_r+0x900>
 8006a7a:	9b08      	ldr	r3, [sp, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc34      	bgt.n	8006aea <_dtoa_r+0x982>
 8006a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	dd31      	ble.n	8006aea <_dtoa_r+0x982>
 8006a86:	9b08      	ldr	r3, [sp, #32]
 8006a88:	9306      	str	r3, [sp, #24]
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	b963      	cbnz	r3, 8006aa8 <_dtoa_r+0x940>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	2205      	movs	r2, #5
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 faaa 	bl	8006fec <__multadd>
 8006a98:	4601      	mov	r1, r0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	f000 fcbd 	bl	800741c <__mcmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f73f adbf 	bgt.w	8006626 <_dtoa_r+0x4be>
 8006aa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aaa:	9f03      	ldr	r7, [sp, #12]
 8006aac:	ea6f 0b03 	mvn.w	fp, r3
 8006ab0:	f04f 0800 	mov.w	r8, #0
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 fa76 	bl	8006fa8 <_Bfree>
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	f43f aead 	beq.w	800681c <_dtoa_r+0x6b4>
 8006ac2:	f1b8 0f00 	cmp.w	r8, #0
 8006ac6:	d005      	beq.n	8006ad4 <_dtoa_r+0x96c>
 8006ac8:	45b0      	cmp	r8, r6
 8006aca:	d003      	beq.n	8006ad4 <_dtoa_r+0x96c>
 8006acc:	4641      	mov	r1, r8
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 fa6a 	bl	8006fa8 <_Bfree>
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 fa66 	bl	8006fa8 <_Bfree>
 8006adc:	e69e      	b.n	800681c <_dtoa_r+0x6b4>
 8006ade:	2400      	movs	r4, #0
 8006ae0:	4626      	mov	r6, r4
 8006ae2:	e7e1      	b.n	8006aa8 <_dtoa_r+0x940>
 8006ae4:	46c3      	mov	fp, r8
 8006ae6:	4626      	mov	r6, r4
 8006ae8:	e59d      	b.n	8006626 <_dtoa_r+0x4be>
 8006aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80c8 	beq.w	8006c82 <_dtoa_r+0xb1a>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	9306      	str	r3, [sp, #24]
 8006af6:	2f00      	cmp	r7, #0
 8006af8:	dd05      	ble.n	8006b06 <_dtoa_r+0x99e>
 8006afa:	4631      	mov	r1, r6
 8006afc:	463a      	mov	r2, r7
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fc20 	bl	8007344 <__lshift>
 8006b04:	4606      	mov	r6, r0
 8006b06:	f1b8 0f00 	cmp.w	r8, #0
 8006b0a:	d05b      	beq.n	8006bc4 <_dtoa_r+0xa5c>
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	6871      	ldr	r1, [r6, #4]
 8006b10:	f000 fa0a 	bl	8006f28 <_Balloc>
 8006b14:	4607      	mov	r7, r0
 8006b16:	b928      	cbnz	r0, 8006b24 <_dtoa_r+0x9bc>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b1e:	4b81      	ldr	r3, [pc, #516]	; (8006d24 <_dtoa_r+0xbbc>)
 8006b20:	f7ff bb36 	b.w	8006190 <_dtoa_r+0x28>
 8006b24:	6932      	ldr	r2, [r6, #16]
 8006b26:	f106 010c 	add.w	r1, r6, #12
 8006b2a:	3202      	adds	r2, #2
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	300c      	adds	r0, #12
 8006b30:	f7ff fa83 	bl	800603a <memcpy>
 8006b34:	2201      	movs	r2, #1
 8006b36:	4639      	mov	r1, r7
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 fc03 	bl	8007344 <__lshift>
 8006b3e:	46b0      	mov	r8, r6
 8006b40:	4606      	mov	r6, r0
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	9a03      	ldr	r2, [sp, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	9308      	str	r3, [sp, #32]
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b50:	9b04      	ldr	r3, [sp, #16]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	930a      	str	r3, [sp, #40]	; 0x28
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4650      	mov	r0, sl
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	f7ff fa78 	bl	8006056 <quorem>
 8006b66:	4641      	mov	r1, r8
 8006b68:	9006      	str	r0, [sp, #24]
 8006b6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b6e:	4650      	mov	r0, sl
 8006b70:	f000 fc54 	bl	800741c <__mcmp>
 8006b74:	4632      	mov	r2, r6
 8006b76:	9009      	str	r0, [sp, #36]	; 0x24
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 fc6a 	bl	8007454 <__mdiff>
 8006b80:	68c2      	ldr	r2, [r0, #12]
 8006b82:	4607      	mov	r7, r0
 8006b84:	bb02      	cbnz	r2, 8006bc8 <_dtoa_r+0xa60>
 8006b86:	4601      	mov	r1, r0
 8006b88:	4650      	mov	r0, sl
 8006b8a:	f000 fc47 	bl	800741c <__mcmp>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	4639      	mov	r1, r7
 8006b92:	4628      	mov	r0, r5
 8006b94:	920c      	str	r2, [sp, #48]	; 0x30
 8006b96:	f000 fa07 	bl	8006fa8 <_Bfree>
 8006b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b9e:	9f08      	ldr	r7, [sp, #32]
 8006ba0:	ea43 0102 	orr.w	r1, r3, r2
 8006ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba6:	4319      	orrs	r1, r3
 8006ba8:	d110      	bne.n	8006bcc <_dtoa_r+0xa64>
 8006baa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bae:	d029      	beq.n	8006c04 <_dtoa_r+0xa9c>
 8006bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dd02      	ble.n	8006bbc <_dtoa_r+0xa54>
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	f883 9000 	strb.w	r9, [r3]
 8006bc2:	e777      	b.n	8006ab4 <_dtoa_r+0x94c>
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	e7ba      	b.n	8006b3e <_dtoa_r+0x9d6>
 8006bc8:	2201      	movs	r2, #1
 8006bca:	e7e1      	b.n	8006b90 <_dtoa_r+0xa28>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	db04      	blt.n	8006bdc <_dtoa_r+0xa74>
 8006bd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	d120      	bne.n	8006c1e <_dtoa_r+0xab6>
 8006bdc:	2a00      	cmp	r2, #0
 8006bde:	dded      	ble.n	8006bbc <_dtoa_r+0xa54>
 8006be0:	4651      	mov	r1, sl
 8006be2:	2201      	movs	r2, #1
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 fbad 	bl	8007344 <__lshift>
 8006bea:	4621      	mov	r1, r4
 8006bec:	4682      	mov	sl, r0
 8006bee:	f000 fc15 	bl	800741c <__mcmp>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	dc03      	bgt.n	8006bfe <_dtoa_r+0xa96>
 8006bf6:	d1e1      	bne.n	8006bbc <_dtoa_r+0xa54>
 8006bf8:	f019 0f01 	tst.w	r9, #1
 8006bfc:	d0de      	beq.n	8006bbc <_dtoa_r+0xa54>
 8006bfe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c02:	d1d8      	bne.n	8006bb6 <_dtoa_r+0xa4e>
 8006c04:	2339      	movs	r3, #57	; 0x39
 8006c06:	9a04      	ldr	r2, [sp, #16]
 8006c08:	7013      	strb	r3, [r2, #0]
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	461f      	mov	r7, r3
 8006c0e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2a39      	cmp	r2, #57	; 0x39
 8006c16:	d06b      	beq.n	8006cf0 <_dtoa_r+0xb88>
 8006c18:	3201      	adds	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e74a      	b.n	8006ab4 <_dtoa_r+0x94c>
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	dd07      	ble.n	8006c32 <_dtoa_r+0xaca>
 8006c22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c26:	d0ed      	beq.n	8006c04 <_dtoa_r+0xa9c>
 8006c28:	9a04      	ldr	r2, [sp, #16]
 8006c2a:	f109 0301 	add.w	r3, r9, #1
 8006c2e:	7013      	strb	r3, [r2, #0]
 8006c30:	e740      	b.n	8006ab4 <_dtoa_r+0x94c>
 8006c32:	9b08      	ldr	r3, [sp, #32]
 8006c34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c36:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d042      	beq.n	8006cc4 <_dtoa_r+0xb5c>
 8006c3e:	4651      	mov	r1, sl
 8006c40:	2300      	movs	r3, #0
 8006c42:	220a      	movs	r2, #10
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 f9d1 	bl	8006fec <__multadd>
 8006c4a:	45b0      	cmp	r8, r6
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	f04f 020a 	mov.w	r2, #10
 8006c56:	4641      	mov	r1, r8
 8006c58:	4628      	mov	r0, r5
 8006c5a:	d107      	bne.n	8006c6c <_dtoa_r+0xb04>
 8006c5c:	f000 f9c6 	bl	8006fec <__multadd>
 8006c60:	4680      	mov	r8, r0
 8006c62:	4606      	mov	r6, r0
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	3301      	adds	r3, #1
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	e775      	b.n	8006b58 <_dtoa_r+0x9f0>
 8006c6c:	f000 f9be 	bl	8006fec <__multadd>
 8006c70:	4631      	mov	r1, r6
 8006c72:	4680      	mov	r8, r0
 8006c74:	2300      	movs	r3, #0
 8006c76:	220a      	movs	r2, #10
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 f9b7 	bl	8006fec <__multadd>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	e7f0      	b.n	8006c64 <_dtoa_r+0xafc>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	9306      	str	r3, [sp, #24]
 8006c86:	9f03      	ldr	r7, [sp, #12]
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	f7ff f9e3 	bl	8006056 <quorem>
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c96:	f807 9b01 	strb.w	r9, [r7], #1
 8006c9a:	1afa      	subs	r2, r7, r3
 8006c9c:	9b06      	ldr	r3, [sp, #24]
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	dd07      	ble.n	8006cb2 <_dtoa_r+0xb4a>
 8006ca2:	4651      	mov	r1, sl
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f99f 	bl	8006fec <__multadd>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	e7ea      	b.n	8006c88 <_dtoa_r+0xb20>
 8006cb2:	9b06      	ldr	r3, [sp, #24]
 8006cb4:	f04f 0800 	mov.w	r8, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	bfcc      	ite	gt
 8006cbc:	461f      	movgt	r7, r3
 8006cbe:	2701      	movle	r7, #1
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	441f      	add	r7, r3
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f000 fb3b 	bl	8007344 <__lshift>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	f000 fba3 	bl	800741c <__mcmp>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	dc97      	bgt.n	8006c0a <_dtoa_r+0xaa2>
 8006cda:	d102      	bne.n	8006ce2 <_dtoa_r+0xb7a>
 8006cdc:	f019 0f01 	tst.w	r9, #1
 8006ce0:	d193      	bne.n	8006c0a <_dtoa_r+0xaa2>
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	461f      	mov	r7, r3
 8006ce6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cea:	2a30      	cmp	r2, #48	; 0x30
 8006cec:	d0fa      	beq.n	8006ce4 <_dtoa_r+0xb7c>
 8006cee:	e6e1      	b.n	8006ab4 <_dtoa_r+0x94c>
 8006cf0:	9a03      	ldr	r2, [sp, #12]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d18a      	bne.n	8006c0c <_dtoa_r+0xaa4>
 8006cf6:	2331      	movs	r3, #49	; 0x31
 8006cf8:	f10b 0b01 	add.w	fp, fp, #1
 8006cfc:	e797      	b.n	8006c2e <_dtoa_r+0xac6>
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <_dtoa_r+0xbc0>)
 8006d00:	f7ff ba9f 	b.w	8006242 <_dtoa_r+0xda>
 8006d04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f47f aa77 	bne.w	80061fa <_dtoa_r+0x92>
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <_dtoa_r+0xbc4>)
 8006d0e:	f7ff ba98 	b.w	8006242 <_dtoa_r+0xda>
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dcb6      	bgt.n	8006c86 <_dtoa_r+0xb1e>
 8006d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	f73f aeb5 	bgt.w	8006a8a <_dtoa_r+0x922>
 8006d20:	e7b1      	b.n	8006c86 <_dtoa_r+0xb1e>
 8006d22:	bf00      	nop
 8006d24:	080096ee 	.word	0x080096ee
 8006d28:	0800964e 	.word	0x0800964e
 8006d2c:	08009672 	.word	0x08009672

08006d30 <_free_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4605      	mov	r5, r0
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d040      	beq.n	8006dba <_free_r+0x8a>
 8006d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3c:	1f0c      	subs	r4, r1, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bfb8      	it	lt
 8006d42:	18e4      	addlt	r4, r4, r3
 8006d44:	f000 f8e4 	bl	8006f10 <__malloc_lock>
 8006d48:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <_free_r+0x8c>)
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	b933      	cbnz	r3, 8006d5c <_free_r+0x2c>
 8006d4e:	6063      	str	r3, [r4, #4]
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	4628      	mov	r0, r5
 8006d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d58:	f000 b8e0 	b.w	8006f1c <__malloc_unlock>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d908      	bls.n	8006d72 <_free_r+0x42>
 8006d60:	6820      	ldr	r0, [r4, #0]
 8006d62:	1821      	adds	r1, r4, r0
 8006d64:	428b      	cmp	r3, r1
 8006d66:	bf01      	itttt	eq
 8006d68:	6819      	ldreq	r1, [r3, #0]
 8006d6a:	685b      	ldreq	r3, [r3, #4]
 8006d6c:	1809      	addeq	r1, r1, r0
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	e7ed      	b.n	8006d4e <_free_r+0x1e>
 8006d72:	461a      	mov	r2, r3
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b10b      	cbz	r3, 8006d7c <_free_r+0x4c>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d9fa      	bls.n	8006d72 <_free_r+0x42>
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	1850      	adds	r0, r2, r1
 8006d80:	42a0      	cmp	r0, r4
 8006d82:	d10b      	bne.n	8006d9c <_free_r+0x6c>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	4401      	add	r1, r0
 8006d88:	1850      	adds	r0, r2, r1
 8006d8a:	4283      	cmp	r3, r0
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	d1e0      	bne.n	8006d52 <_free_r+0x22>
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4408      	add	r0, r1
 8006d96:	6010      	str	r0, [r2, #0]
 8006d98:	6053      	str	r3, [r2, #4]
 8006d9a:	e7da      	b.n	8006d52 <_free_r+0x22>
 8006d9c:	d902      	bls.n	8006da4 <_free_r+0x74>
 8006d9e:	230c      	movs	r3, #12
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	e7d6      	b.n	8006d52 <_free_r+0x22>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	1821      	adds	r1, r4, r0
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1809      	addeq	r1, r1, r0
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	6054      	str	r4, [r2, #4]
 8006db8:	e7cb      	b.n	8006d52 <_free_r+0x22>
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20000c60 	.word	0x20000c60

08006dc0 <malloc>:
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <malloc+0xc>)
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	f000 b823 	b.w	8006e10 <_malloc_r>
 8006dca:	bf00      	nop
 8006dcc:	20000074 	.word	0x20000074

08006dd0 <sbrk_aligned>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	4e0e      	ldr	r6, [pc, #56]	; (8006e0c <sbrk_aligned+0x3c>)
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6831      	ldr	r1, [r6, #0]
 8006dd8:	4605      	mov	r5, r0
 8006dda:	b911      	cbnz	r1, 8006de2 <sbrk_aligned+0x12>
 8006ddc:	f000 fe1e 	bl	8007a1c <_sbrk_r>
 8006de0:	6030      	str	r0, [r6, #0]
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 fe19 	bl	8007a1c <_sbrk_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d00a      	beq.n	8006e04 <sbrk_aligned+0x34>
 8006dee:	1cc4      	adds	r4, r0, #3
 8006df0:	f024 0403 	bic.w	r4, r4, #3
 8006df4:	42a0      	cmp	r0, r4
 8006df6:	d007      	beq.n	8006e08 <sbrk_aligned+0x38>
 8006df8:	1a21      	subs	r1, r4, r0
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 fe0e 	bl	8007a1c <_sbrk_r>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d101      	bne.n	8006e08 <sbrk_aligned+0x38>
 8006e04:	f04f 34ff 	mov.w	r4, #4294967295
 8006e08:	4620      	mov	r0, r4
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	20000c64 	.word	0x20000c64

08006e10 <_malloc_r>:
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	1ccd      	adds	r5, r1, #3
 8006e16:	f025 0503 	bic.w	r5, r5, #3
 8006e1a:	3508      	adds	r5, #8
 8006e1c:	2d0c      	cmp	r5, #12
 8006e1e:	bf38      	it	cc
 8006e20:	250c      	movcc	r5, #12
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	4607      	mov	r7, r0
 8006e26:	db01      	blt.n	8006e2c <_malloc_r+0x1c>
 8006e28:	42a9      	cmp	r1, r5
 8006e2a:	d905      	bls.n	8006e38 <_malloc_r+0x28>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	2600      	movs	r6, #0
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4630      	mov	r0, r6
 8006e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f0c <_malloc_r+0xfc>
 8006e3c:	f000 f868 	bl	8006f10 <__malloc_lock>
 8006e40:	f8d8 3000 	ldr.w	r3, [r8]
 8006e44:	461c      	mov	r4, r3
 8006e46:	bb5c      	cbnz	r4, 8006ea0 <_malloc_r+0x90>
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f7ff ffc0 	bl	8006dd0 <sbrk_aligned>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	4604      	mov	r4, r0
 8006e54:	d155      	bne.n	8006f02 <_malloc_r+0xf2>
 8006e56:	f8d8 4000 	ldr.w	r4, [r8]
 8006e5a:	4626      	mov	r6, r4
 8006e5c:	2e00      	cmp	r6, #0
 8006e5e:	d145      	bne.n	8006eec <_malloc_r+0xdc>
 8006e60:	2c00      	cmp	r4, #0
 8006e62:	d048      	beq.n	8006ef6 <_malloc_r+0xe6>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	4631      	mov	r1, r6
 8006e68:	4638      	mov	r0, r7
 8006e6a:	eb04 0903 	add.w	r9, r4, r3
 8006e6e:	f000 fdd5 	bl	8007a1c <_sbrk_r>
 8006e72:	4581      	cmp	r9, r0
 8006e74:	d13f      	bne.n	8006ef6 <_malloc_r+0xe6>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	4638      	mov	r0, r7
 8006e7a:	1a6d      	subs	r5, r5, r1
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f7ff ffa7 	bl	8006dd0 <sbrk_aligned>
 8006e82:	3001      	adds	r0, #1
 8006e84:	d037      	beq.n	8006ef6 <_malloc_r+0xe6>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	442b      	add	r3, r5
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d038      	beq.n	8006f06 <_malloc_r+0xf6>
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	42a2      	cmp	r2, r4
 8006e98:	d12b      	bne.n	8006ef2 <_malloc_r+0xe2>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	e00f      	b.n	8006ec0 <_malloc_r+0xb0>
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	1b52      	subs	r2, r2, r5
 8006ea4:	d41f      	bmi.n	8006ee6 <_malloc_r+0xd6>
 8006ea6:	2a0b      	cmp	r2, #11
 8006ea8:	d917      	bls.n	8006eda <_malloc_r+0xca>
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	6025      	str	r5, [r4, #0]
 8006eb0:	bf18      	it	ne
 8006eb2:	6059      	strne	r1, [r3, #4]
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	bf08      	it	eq
 8006eb8:	f8c8 1000 	streq.w	r1, [r8]
 8006ebc:	5162      	str	r2, [r4, r5]
 8006ebe:	604b      	str	r3, [r1, #4]
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f104 060b 	add.w	r6, r4, #11
 8006ec6:	f000 f829 	bl	8006f1c <__malloc_unlock>
 8006eca:	f026 0607 	bic.w	r6, r6, #7
 8006ece:	1d23      	adds	r3, r4, #4
 8006ed0:	1af2      	subs	r2, r6, r3
 8006ed2:	d0ae      	beq.n	8006e32 <_malloc_r+0x22>
 8006ed4:	1b9b      	subs	r3, r3, r6
 8006ed6:	50a3      	str	r3, [r4, r2]
 8006ed8:	e7ab      	b.n	8006e32 <_malloc_r+0x22>
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	6862      	ldr	r2, [r4, #4]
 8006ede:	d1dd      	bne.n	8006e9c <_malloc_r+0x8c>
 8006ee0:	f8c8 2000 	str.w	r2, [r8]
 8006ee4:	e7ec      	b.n	8006ec0 <_malloc_r+0xb0>
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	6864      	ldr	r4, [r4, #4]
 8006eea:	e7ac      	b.n	8006e46 <_malloc_r+0x36>
 8006eec:	4634      	mov	r4, r6
 8006eee:	6876      	ldr	r6, [r6, #4]
 8006ef0:	e7b4      	b.n	8006e5c <_malloc_r+0x4c>
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	e7cc      	b.n	8006e90 <_malloc_r+0x80>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	4638      	mov	r0, r7
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	f000 f80e 	bl	8006f1c <__malloc_unlock>
 8006f00:	e797      	b.n	8006e32 <_malloc_r+0x22>
 8006f02:	6025      	str	r5, [r4, #0]
 8006f04:	e7dc      	b.n	8006ec0 <_malloc_r+0xb0>
 8006f06:	605b      	str	r3, [r3, #4]
 8006f08:	deff      	udf	#255	; 0xff
 8006f0a:	bf00      	nop
 8006f0c:	20000c60 	.word	0x20000c60

08006f10 <__malloc_lock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	; (8006f18 <__malloc_lock+0x8>)
 8006f12:	f7ff b882 	b.w	800601a <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	20000c5c 	.word	0x20000c5c

08006f1c <__malloc_unlock>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__malloc_unlock+0x8>)
 8006f1e:	f7ff b87d 	b.w	800601c <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	20000c5c 	.word	0x20000c5c

08006f28 <_Balloc>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	69c6      	ldr	r6, [r0, #28]
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	b976      	cbnz	r6, 8006f50 <_Balloc+0x28>
 8006f32:	2010      	movs	r0, #16
 8006f34:	f7ff ff44 	bl	8006dc0 <malloc>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	61e0      	str	r0, [r4, #28]
 8006f3c:	b920      	cbnz	r0, 8006f48 <_Balloc+0x20>
 8006f3e:	216b      	movs	r1, #107	; 0x6b
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <_Balloc+0x78>)
 8006f42:	4818      	ldr	r0, [pc, #96]	; (8006fa4 <_Balloc+0x7c>)
 8006f44:	f000 fd7a 	bl	8007a3c <__assert_func>
 8006f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f4c:	6006      	str	r6, [r0, #0]
 8006f4e:	60c6      	str	r6, [r0, #12]
 8006f50:	69e6      	ldr	r6, [r4, #28]
 8006f52:	68f3      	ldr	r3, [r6, #12]
 8006f54:	b183      	cbz	r3, 8006f78 <_Balloc+0x50>
 8006f56:	69e3      	ldr	r3, [r4, #28]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f5e:	b9b8      	cbnz	r0, 8006f90 <_Balloc+0x68>
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f605 	lsl.w	r6, r1, r5
 8006f66:	1d72      	adds	r2, r6, #5
 8006f68:	4620      	mov	r0, r4
 8006f6a:	0092      	lsls	r2, r2, #2
 8006f6c:	f000 fd84 	bl	8007a78 <_calloc_r>
 8006f70:	b160      	cbz	r0, 8006f8c <_Balloc+0x64>
 8006f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f76:	e00e      	b.n	8006f96 <_Balloc+0x6e>
 8006f78:	2221      	movs	r2, #33	; 0x21
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fd7b 	bl	8007a78 <_calloc_r>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	60f0      	str	r0, [r6, #12]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e4      	bne.n	8006f56 <_Balloc+0x2e>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	6802      	ldr	r2, [r0, #0]
 8006f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f96:	2300      	movs	r3, #0
 8006f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f9c:	e7f7      	b.n	8006f8e <_Balloc+0x66>
 8006f9e:	bf00      	nop
 8006fa0:	0800967f 	.word	0x0800967f
 8006fa4:	080096ff 	.word	0x080096ff

08006fa8 <_Bfree>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	69c6      	ldr	r6, [r0, #28]
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b976      	cbnz	r6, 8006fd0 <_Bfree+0x28>
 8006fb2:	2010      	movs	r0, #16
 8006fb4:	f7ff ff04 	bl	8006dc0 <malloc>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	61e8      	str	r0, [r5, #28]
 8006fbc:	b920      	cbnz	r0, 8006fc8 <_Bfree+0x20>
 8006fbe:	218f      	movs	r1, #143	; 0x8f
 8006fc0:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <_Bfree+0x3c>)
 8006fc2:	4809      	ldr	r0, [pc, #36]	; (8006fe8 <_Bfree+0x40>)
 8006fc4:	f000 fd3a 	bl	8007a3c <__assert_func>
 8006fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fcc:	6006      	str	r6, [r0, #0]
 8006fce:	60c6      	str	r6, [r0, #12]
 8006fd0:	b13c      	cbz	r4, 8006fe2 <_Bfree+0x3a>
 8006fd2:	69eb      	ldr	r3, [r5, #28]
 8006fd4:	6862      	ldr	r2, [r4, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fdc:	6021      	str	r1, [r4, #0]
 8006fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	0800967f 	.word	0x0800967f
 8006fe8:	080096ff 	.word	0x080096ff

08006fec <__multadd>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	461e      	mov	r6, r3
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	690d      	ldr	r5, [r1, #16]
 8006ffa:	f101 0c14 	add.w	ip, r1, #20
 8006ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8007002:	3001      	adds	r0, #1
 8007004:	b299      	uxth	r1, r3
 8007006:	fb02 6101 	mla	r1, r2, r1, r6
 800700a:	0c1e      	lsrs	r6, r3, #16
 800700c:	0c0b      	lsrs	r3, r1, #16
 800700e:	fb02 3306 	mla	r3, r2, r6, r3
 8007012:	b289      	uxth	r1, r1
 8007014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007018:	4285      	cmp	r5, r0
 800701a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800701e:	f84c 1b04 	str.w	r1, [ip], #4
 8007022:	dcec      	bgt.n	8006ffe <__multadd+0x12>
 8007024:	b30e      	cbz	r6, 800706a <__multadd+0x7e>
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	42ab      	cmp	r3, r5
 800702a:	dc19      	bgt.n	8007060 <__multadd+0x74>
 800702c:	6861      	ldr	r1, [r4, #4]
 800702e:	4638      	mov	r0, r7
 8007030:	3101      	adds	r1, #1
 8007032:	f7ff ff79 	bl	8006f28 <_Balloc>
 8007036:	4680      	mov	r8, r0
 8007038:	b928      	cbnz	r0, 8007046 <__multadd+0x5a>
 800703a:	4602      	mov	r2, r0
 800703c:	21ba      	movs	r1, #186	; 0xba
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <__multadd+0x84>)
 8007040:	480c      	ldr	r0, [pc, #48]	; (8007074 <__multadd+0x88>)
 8007042:	f000 fcfb 	bl	8007a3c <__assert_func>
 8007046:	6922      	ldr	r2, [r4, #16]
 8007048:	f104 010c 	add.w	r1, r4, #12
 800704c:	3202      	adds	r2, #2
 800704e:	0092      	lsls	r2, r2, #2
 8007050:	300c      	adds	r0, #12
 8007052:	f7fe fff2 	bl	800603a <memcpy>
 8007056:	4621      	mov	r1, r4
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ffa5 	bl	8006fa8 <_Bfree>
 800705e:	4644      	mov	r4, r8
 8007060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007064:	3501      	adds	r5, #1
 8007066:	615e      	str	r6, [r3, #20]
 8007068:	6125      	str	r5, [r4, #16]
 800706a:	4620      	mov	r0, r4
 800706c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007070:	080096ee 	.word	0x080096ee
 8007074:	080096ff 	.word	0x080096ff

08007078 <__hi0bits>:
 8007078:	0c02      	lsrs	r2, r0, #16
 800707a:	0412      	lsls	r2, r2, #16
 800707c:	4603      	mov	r3, r0
 800707e:	b9ca      	cbnz	r2, 80070b4 <__hi0bits+0x3c>
 8007080:	0403      	lsls	r3, r0, #16
 8007082:	2010      	movs	r0, #16
 8007084:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007088:	bf04      	itt	eq
 800708a:	021b      	lsleq	r3, r3, #8
 800708c:	3008      	addeq	r0, #8
 800708e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007092:	bf04      	itt	eq
 8007094:	011b      	lsleq	r3, r3, #4
 8007096:	3004      	addeq	r0, #4
 8007098:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800709c:	bf04      	itt	eq
 800709e:	009b      	lsleq	r3, r3, #2
 80070a0:	3002      	addeq	r0, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db05      	blt.n	80070b2 <__hi0bits+0x3a>
 80070a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80070aa:	f100 0001 	add.w	r0, r0, #1
 80070ae:	bf08      	it	eq
 80070b0:	2020      	moveq	r0, #32
 80070b2:	4770      	bx	lr
 80070b4:	2000      	movs	r0, #0
 80070b6:	e7e5      	b.n	8007084 <__hi0bits+0xc>

080070b8 <__lo0bits>:
 80070b8:	6803      	ldr	r3, [r0, #0]
 80070ba:	4602      	mov	r2, r0
 80070bc:	f013 0007 	ands.w	r0, r3, #7
 80070c0:	d00b      	beq.n	80070da <__lo0bits+0x22>
 80070c2:	07d9      	lsls	r1, r3, #31
 80070c4:	d421      	bmi.n	800710a <__lo0bits+0x52>
 80070c6:	0798      	lsls	r0, r3, #30
 80070c8:	bf49      	itett	mi
 80070ca:	085b      	lsrmi	r3, r3, #1
 80070cc:	089b      	lsrpl	r3, r3, #2
 80070ce:	2001      	movmi	r0, #1
 80070d0:	6013      	strmi	r3, [r2, #0]
 80070d2:	bf5c      	itt	pl
 80070d4:	2002      	movpl	r0, #2
 80070d6:	6013      	strpl	r3, [r2, #0]
 80070d8:	4770      	bx	lr
 80070da:	b299      	uxth	r1, r3
 80070dc:	b909      	cbnz	r1, 80070e2 <__lo0bits+0x2a>
 80070de:	2010      	movs	r0, #16
 80070e0:	0c1b      	lsrs	r3, r3, #16
 80070e2:	b2d9      	uxtb	r1, r3
 80070e4:	b909      	cbnz	r1, 80070ea <__lo0bits+0x32>
 80070e6:	3008      	adds	r0, #8
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	0719      	lsls	r1, r3, #28
 80070ec:	bf04      	itt	eq
 80070ee:	091b      	lsreq	r3, r3, #4
 80070f0:	3004      	addeq	r0, #4
 80070f2:	0799      	lsls	r1, r3, #30
 80070f4:	bf04      	itt	eq
 80070f6:	089b      	lsreq	r3, r3, #2
 80070f8:	3002      	addeq	r0, #2
 80070fa:	07d9      	lsls	r1, r3, #31
 80070fc:	d403      	bmi.n	8007106 <__lo0bits+0x4e>
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	f100 0001 	add.w	r0, r0, #1
 8007104:	d003      	beq.n	800710e <__lo0bits+0x56>
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4770      	bx	lr
 800710a:	2000      	movs	r0, #0
 800710c:	4770      	bx	lr
 800710e:	2020      	movs	r0, #32
 8007110:	4770      	bx	lr
	...

08007114 <__i2b>:
 8007114:	b510      	push	{r4, lr}
 8007116:	460c      	mov	r4, r1
 8007118:	2101      	movs	r1, #1
 800711a:	f7ff ff05 	bl	8006f28 <_Balloc>
 800711e:	4602      	mov	r2, r0
 8007120:	b928      	cbnz	r0, 800712e <__i2b+0x1a>
 8007122:	f240 1145 	movw	r1, #325	; 0x145
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <__i2b+0x24>)
 8007128:	4804      	ldr	r0, [pc, #16]	; (800713c <__i2b+0x28>)
 800712a:	f000 fc87 	bl	8007a3c <__assert_func>
 800712e:	2301      	movs	r3, #1
 8007130:	6144      	str	r4, [r0, #20]
 8007132:	6103      	str	r3, [r0, #16]
 8007134:	bd10      	pop	{r4, pc}
 8007136:	bf00      	nop
 8007138:	080096ee 	.word	0x080096ee
 800713c:	080096ff 	.word	0x080096ff

08007140 <__multiply>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	4691      	mov	r9, r2
 8007146:	690a      	ldr	r2, [r1, #16]
 8007148:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800714c:	460c      	mov	r4, r1
 800714e:	429a      	cmp	r2, r3
 8007150:	bfbe      	ittt	lt
 8007152:	460b      	movlt	r3, r1
 8007154:	464c      	movlt	r4, r9
 8007156:	4699      	movlt	r9, r3
 8007158:	6927      	ldr	r7, [r4, #16]
 800715a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	eb07 060a 	add.w	r6, r7, sl
 8007166:	42b3      	cmp	r3, r6
 8007168:	b085      	sub	sp, #20
 800716a:	bfb8      	it	lt
 800716c:	3101      	addlt	r1, #1
 800716e:	f7ff fedb 	bl	8006f28 <_Balloc>
 8007172:	b930      	cbnz	r0, 8007182 <__multiply+0x42>
 8007174:	4602      	mov	r2, r0
 8007176:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800717a:	4b43      	ldr	r3, [pc, #268]	; (8007288 <__multiply+0x148>)
 800717c:	4843      	ldr	r0, [pc, #268]	; (800728c <__multiply+0x14c>)
 800717e:	f000 fc5d 	bl	8007a3c <__assert_func>
 8007182:	f100 0514 	add.w	r5, r0, #20
 8007186:	462b      	mov	r3, r5
 8007188:	2200      	movs	r2, #0
 800718a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800718e:	4543      	cmp	r3, r8
 8007190:	d321      	bcc.n	80071d6 <__multiply+0x96>
 8007192:	f104 0314 	add.w	r3, r4, #20
 8007196:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800719a:	f109 0314 	add.w	r3, r9, #20
 800719e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071a2:	9202      	str	r2, [sp, #8]
 80071a4:	1b3a      	subs	r2, r7, r4
 80071a6:	3a15      	subs	r2, #21
 80071a8:	f022 0203 	bic.w	r2, r2, #3
 80071ac:	3204      	adds	r2, #4
 80071ae:	f104 0115 	add.w	r1, r4, #21
 80071b2:	428f      	cmp	r7, r1
 80071b4:	bf38      	it	cc
 80071b6:	2204      	movcc	r2, #4
 80071b8:	9201      	str	r2, [sp, #4]
 80071ba:	9a02      	ldr	r2, [sp, #8]
 80071bc:	9303      	str	r3, [sp, #12]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d80c      	bhi.n	80071dc <__multiply+0x9c>
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	dd03      	ble.n	80071ce <__multiply+0x8e>
 80071c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d05a      	beq.n	8007284 <__multiply+0x144>
 80071ce:	6106      	str	r6, [r0, #16]
 80071d0:	b005      	add	sp, #20
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	f843 2b04 	str.w	r2, [r3], #4
 80071da:	e7d8      	b.n	800718e <__multiply+0x4e>
 80071dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80071e0:	f1ba 0f00 	cmp.w	sl, #0
 80071e4:	d023      	beq.n	800722e <__multiply+0xee>
 80071e6:	46a9      	mov	r9, r5
 80071e8:	f04f 0c00 	mov.w	ip, #0
 80071ec:	f104 0e14 	add.w	lr, r4, #20
 80071f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071f4:	f8d9 1000 	ldr.w	r1, [r9]
 80071f8:	fa1f fb82 	uxth.w	fp, r2
 80071fc:	b289      	uxth	r1, r1
 80071fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8007202:	4461      	add	r1, ip
 8007204:	f8d9 c000 	ldr.w	ip, [r9]
 8007208:	0c12      	lsrs	r2, r2, #16
 800720a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800720e:	fb0a c202 	mla	r2, sl, r2, ip
 8007212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007216:	b289      	uxth	r1, r1
 8007218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800721c:	4577      	cmp	r7, lr
 800721e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007222:	f849 1b04 	str.w	r1, [r9], #4
 8007226:	d8e3      	bhi.n	80071f0 <__multiply+0xb0>
 8007228:	9a01      	ldr	r2, [sp, #4]
 800722a:	f845 c002 	str.w	ip, [r5, r2]
 800722e:	9a03      	ldr	r2, [sp, #12]
 8007230:	3304      	adds	r3, #4
 8007232:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007236:	f1b9 0f00 	cmp.w	r9, #0
 800723a:	d021      	beq.n	8007280 <__multiply+0x140>
 800723c:	46ae      	mov	lr, r5
 800723e:	f04f 0a00 	mov.w	sl, #0
 8007242:	6829      	ldr	r1, [r5, #0]
 8007244:	f104 0c14 	add.w	ip, r4, #20
 8007248:	f8bc b000 	ldrh.w	fp, [ip]
 800724c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007250:	b289      	uxth	r1, r1
 8007252:	fb09 220b 	mla	r2, r9, fp, r2
 8007256:	4452      	add	r2, sl
 8007258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800725c:	f84e 1b04 	str.w	r1, [lr], #4
 8007260:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007264:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007268:	f8be 1000 	ldrh.w	r1, [lr]
 800726c:	4567      	cmp	r7, ip
 800726e:	fb09 110a 	mla	r1, r9, sl, r1
 8007272:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007276:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800727a:	d8e5      	bhi.n	8007248 <__multiply+0x108>
 800727c:	9a01      	ldr	r2, [sp, #4]
 800727e:	50a9      	str	r1, [r5, r2]
 8007280:	3504      	adds	r5, #4
 8007282:	e79a      	b.n	80071ba <__multiply+0x7a>
 8007284:	3e01      	subs	r6, #1
 8007286:	e79c      	b.n	80071c2 <__multiply+0x82>
 8007288:	080096ee 	.word	0x080096ee
 800728c:	080096ff 	.word	0x080096ff

08007290 <__pow5mult>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	4615      	mov	r5, r2
 8007296:	f012 0203 	ands.w	r2, r2, #3
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	d007      	beq.n	80072b0 <__pow5mult+0x20>
 80072a0:	4c25      	ldr	r4, [pc, #148]	; (8007338 <__pow5mult+0xa8>)
 80072a2:	3a01      	subs	r2, #1
 80072a4:	2300      	movs	r3, #0
 80072a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072aa:	f7ff fe9f 	bl	8006fec <__multadd>
 80072ae:	4607      	mov	r7, r0
 80072b0:	10ad      	asrs	r5, r5, #2
 80072b2:	d03d      	beq.n	8007330 <__pow5mult+0xa0>
 80072b4:	69f4      	ldr	r4, [r6, #28]
 80072b6:	b97c      	cbnz	r4, 80072d8 <__pow5mult+0x48>
 80072b8:	2010      	movs	r0, #16
 80072ba:	f7ff fd81 	bl	8006dc0 <malloc>
 80072be:	4602      	mov	r2, r0
 80072c0:	61f0      	str	r0, [r6, #28]
 80072c2:	b928      	cbnz	r0, 80072d0 <__pow5mult+0x40>
 80072c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80072c8:	4b1c      	ldr	r3, [pc, #112]	; (800733c <__pow5mult+0xac>)
 80072ca:	481d      	ldr	r0, [pc, #116]	; (8007340 <__pow5mult+0xb0>)
 80072cc:	f000 fbb6 	bl	8007a3c <__assert_func>
 80072d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072d4:	6004      	str	r4, [r0, #0]
 80072d6:	60c4      	str	r4, [r0, #12]
 80072d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80072dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072e0:	b94c      	cbnz	r4, 80072f6 <__pow5mult+0x66>
 80072e2:	f240 2171 	movw	r1, #625	; 0x271
 80072e6:	4630      	mov	r0, r6
 80072e8:	f7ff ff14 	bl	8007114 <__i2b>
 80072ec:	2300      	movs	r3, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	f04f 0900 	mov.w	r9, #0
 80072fa:	07eb      	lsls	r3, r5, #31
 80072fc:	d50a      	bpl.n	8007314 <__pow5mult+0x84>
 80072fe:	4639      	mov	r1, r7
 8007300:	4622      	mov	r2, r4
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ff1c 	bl	8007140 <__multiply>
 8007308:	4680      	mov	r8, r0
 800730a:	4639      	mov	r1, r7
 800730c:	4630      	mov	r0, r6
 800730e:	f7ff fe4b 	bl	8006fa8 <_Bfree>
 8007312:	4647      	mov	r7, r8
 8007314:	106d      	asrs	r5, r5, #1
 8007316:	d00b      	beq.n	8007330 <__pow5mult+0xa0>
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	b938      	cbnz	r0, 800732c <__pow5mult+0x9c>
 800731c:	4622      	mov	r2, r4
 800731e:	4621      	mov	r1, r4
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff ff0d 	bl	8007140 <__multiply>
 8007326:	6020      	str	r0, [r4, #0]
 8007328:	f8c0 9000 	str.w	r9, [r0]
 800732c:	4604      	mov	r4, r0
 800732e:	e7e4      	b.n	80072fa <__pow5mult+0x6a>
 8007330:	4638      	mov	r0, r7
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	bf00      	nop
 8007338:	08009848 	.word	0x08009848
 800733c:	0800967f 	.word	0x0800967f
 8007340:	080096ff 	.word	0x080096ff

08007344 <__lshift>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	460c      	mov	r4, r1
 800734a:	4607      	mov	r7, r0
 800734c:	4691      	mov	r9, r2
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	6849      	ldr	r1, [r1, #4]
 8007352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800735c:	f108 0601 	add.w	r6, r8, #1
 8007360:	42b3      	cmp	r3, r6
 8007362:	db0b      	blt.n	800737c <__lshift+0x38>
 8007364:	4638      	mov	r0, r7
 8007366:	f7ff fddf 	bl	8006f28 <_Balloc>
 800736a:	4605      	mov	r5, r0
 800736c:	b948      	cbnz	r0, 8007382 <__lshift+0x3e>
 800736e:	4602      	mov	r2, r0
 8007370:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007374:	4b27      	ldr	r3, [pc, #156]	; (8007414 <__lshift+0xd0>)
 8007376:	4828      	ldr	r0, [pc, #160]	; (8007418 <__lshift+0xd4>)
 8007378:	f000 fb60 	bl	8007a3c <__assert_func>
 800737c:	3101      	adds	r1, #1
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	e7ee      	b.n	8007360 <__lshift+0x1c>
 8007382:	2300      	movs	r3, #0
 8007384:	f100 0114 	add.w	r1, r0, #20
 8007388:	f100 0210 	add.w	r2, r0, #16
 800738c:	4618      	mov	r0, r3
 800738e:	4553      	cmp	r3, sl
 8007390:	db33      	blt.n	80073fa <__lshift+0xb6>
 8007392:	6920      	ldr	r0, [r4, #16]
 8007394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007398:	f104 0314 	add.w	r3, r4, #20
 800739c:	f019 091f 	ands.w	r9, r9, #31
 80073a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073a8:	d02b      	beq.n	8007402 <__lshift+0xbe>
 80073aa:	468a      	mov	sl, r1
 80073ac:	2200      	movs	r2, #0
 80073ae:	f1c9 0e20 	rsb	lr, r9, #32
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	fa00 f009 	lsl.w	r0, r0, r9
 80073b8:	4310      	orrs	r0, r2
 80073ba:	f84a 0b04 	str.w	r0, [sl], #4
 80073be:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c2:	459c      	cmp	ip, r3
 80073c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073c8:	d8f3      	bhi.n	80073b2 <__lshift+0x6e>
 80073ca:	ebac 0304 	sub.w	r3, ip, r4
 80073ce:	3b15      	subs	r3, #21
 80073d0:	f023 0303 	bic.w	r3, r3, #3
 80073d4:	3304      	adds	r3, #4
 80073d6:	f104 0015 	add.w	r0, r4, #21
 80073da:	4584      	cmp	ip, r0
 80073dc:	bf38      	it	cc
 80073de:	2304      	movcc	r3, #4
 80073e0:	50ca      	str	r2, [r1, r3]
 80073e2:	b10a      	cbz	r2, 80073e8 <__lshift+0xa4>
 80073e4:	f108 0602 	add.w	r6, r8, #2
 80073e8:	3e01      	subs	r6, #1
 80073ea:	4638      	mov	r0, r7
 80073ec:	4621      	mov	r1, r4
 80073ee:	612e      	str	r6, [r5, #16]
 80073f0:	f7ff fdda 	bl	8006fa8 <_Bfree>
 80073f4:	4628      	mov	r0, r5
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80073fe:	3301      	adds	r3, #1
 8007400:	e7c5      	b.n	800738e <__lshift+0x4a>
 8007402:	3904      	subs	r1, #4
 8007404:	f853 2b04 	ldr.w	r2, [r3], #4
 8007408:	459c      	cmp	ip, r3
 800740a:	f841 2f04 	str.w	r2, [r1, #4]!
 800740e:	d8f9      	bhi.n	8007404 <__lshift+0xc0>
 8007410:	e7ea      	b.n	80073e8 <__lshift+0xa4>
 8007412:	bf00      	nop
 8007414:	080096ee 	.word	0x080096ee
 8007418:	080096ff 	.word	0x080096ff

0800741c <__mcmp>:
 800741c:	4603      	mov	r3, r0
 800741e:	690a      	ldr	r2, [r1, #16]
 8007420:	6900      	ldr	r0, [r0, #16]
 8007422:	b530      	push	{r4, r5, lr}
 8007424:	1a80      	subs	r0, r0, r2
 8007426:	d10d      	bne.n	8007444 <__mcmp+0x28>
 8007428:	3314      	adds	r3, #20
 800742a:	3114      	adds	r1, #20
 800742c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800743c:	4295      	cmp	r5, r2
 800743e:	d002      	beq.n	8007446 <__mcmp+0x2a>
 8007440:	d304      	bcc.n	800744c <__mcmp+0x30>
 8007442:	2001      	movs	r0, #1
 8007444:	bd30      	pop	{r4, r5, pc}
 8007446:	42a3      	cmp	r3, r4
 8007448:	d3f4      	bcc.n	8007434 <__mcmp+0x18>
 800744a:	e7fb      	b.n	8007444 <__mcmp+0x28>
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	e7f8      	b.n	8007444 <__mcmp+0x28>
	...

08007454 <__mdiff>:
 8007454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	460d      	mov	r5, r1
 800745a:	4607      	mov	r7, r0
 800745c:	4611      	mov	r1, r2
 800745e:	4628      	mov	r0, r5
 8007460:	4614      	mov	r4, r2
 8007462:	f7ff ffdb 	bl	800741c <__mcmp>
 8007466:	1e06      	subs	r6, r0, #0
 8007468:	d111      	bne.n	800748e <__mdiff+0x3a>
 800746a:	4631      	mov	r1, r6
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff fd5b 	bl	8006f28 <_Balloc>
 8007472:	4602      	mov	r2, r0
 8007474:	b928      	cbnz	r0, 8007482 <__mdiff+0x2e>
 8007476:	f240 2137 	movw	r1, #567	; 0x237
 800747a:	4b3a      	ldr	r3, [pc, #232]	; (8007564 <__mdiff+0x110>)
 800747c:	483a      	ldr	r0, [pc, #232]	; (8007568 <__mdiff+0x114>)
 800747e:	f000 fadd 	bl	8007a3c <__assert_func>
 8007482:	2301      	movs	r3, #1
 8007484:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007488:	4610      	mov	r0, r2
 800748a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748e:	bfa4      	itt	ge
 8007490:	4623      	movge	r3, r4
 8007492:	462c      	movge	r4, r5
 8007494:	4638      	mov	r0, r7
 8007496:	6861      	ldr	r1, [r4, #4]
 8007498:	bfa6      	itte	ge
 800749a:	461d      	movge	r5, r3
 800749c:	2600      	movge	r6, #0
 800749e:	2601      	movlt	r6, #1
 80074a0:	f7ff fd42 	bl	8006f28 <_Balloc>
 80074a4:	4602      	mov	r2, r0
 80074a6:	b918      	cbnz	r0, 80074b0 <__mdiff+0x5c>
 80074a8:	f240 2145 	movw	r1, #581	; 0x245
 80074ac:	4b2d      	ldr	r3, [pc, #180]	; (8007564 <__mdiff+0x110>)
 80074ae:	e7e5      	b.n	800747c <__mdiff+0x28>
 80074b0:	f102 0814 	add.w	r8, r2, #20
 80074b4:	46c2      	mov	sl, r8
 80074b6:	f04f 0c00 	mov.w	ip, #0
 80074ba:	6927      	ldr	r7, [r4, #16]
 80074bc:	60c6      	str	r6, [r0, #12]
 80074be:	692e      	ldr	r6, [r5, #16]
 80074c0:	f104 0014 	add.w	r0, r4, #20
 80074c4:	f105 0914 	add.w	r9, r5, #20
 80074c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80074cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074d0:	3410      	adds	r4, #16
 80074d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80074d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80074da:	fa1f f18b 	uxth.w	r1, fp
 80074de:	4461      	add	r1, ip
 80074e0:	fa1f fc83 	uxth.w	ip, r3
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	eba1 010c 	sub.w	r1, r1, ip
 80074ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074f2:	b289      	uxth	r1, r1
 80074f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80074f8:	454e      	cmp	r6, r9
 80074fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074fe:	f84a 1b04 	str.w	r1, [sl], #4
 8007502:	d8e6      	bhi.n	80074d2 <__mdiff+0x7e>
 8007504:	1b73      	subs	r3, r6, r5
 8007506:	3b15      	subs	r3, #21
 8007508:	f023 0303 	bic.w	r3, r3, #3
 800750c:	3515      	adds	r5, #21
 800750e:	3304      	adds	r3, #4
 8007510:	42ae      	cmp	r6, r5
 8007512:	bf38      	it	cc
 8007514:	2304      	movcc	r3, #4
 8007516:	4418      	add	r0, r3
 8007518:	4443      	add	r3, r8
 800751a:	461e      	mov	r6, r3
 800751c:	4605      	mov	r5, r0
 800751e:	4575      	cmp	r5, lr
 8007520:	d30e      	bcc.n	8007540 <__mdiff+0xec>
 8007522:	f10e 0103 	add.w	r1, lr, #3
 8007526:	1a09      	subs	r1, r1, r0
 8007528:	f021 0103 	bic.w	r1, r1, #3
 800752c:	3803      	subs	r0, #3
 800752e:	4586      	cmp	lr, r0
 8007530:	bf38      	it	cc
 8007532:	2100      	movcc	r1, #0
 8007534:	440b      	add	r3, r1
 8007536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800753a:	b189      	cbz	r1, 8007560 <__mdiff+0x10c>
 800753c:	6117      	str	r7, [r2, #16]
 800753e:	e7a3      	b.n	8007488 <__mdiff+0x34>
 8007540:	f855 8b04 	ldr.w	r8, [r5], #4
 8007544:	fa1f f188 	uxth.w	r1, r8
 8007548:	4461      	add	r1, ip
 800754a:	140c      	asrs	r4, r1, #16
 800754c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007550:	b289      	uxth	r1, r1
 8007552:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007556:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800755a:	f846 1b04 	str.w	r1, [r6], #4
 800755e:	e7de      	b.n	800751e <__mdiff+0xca>
 8007560:	3f01      	subs	r7, #1
 8007562:	e7e8      	b.n	8007536 <__mdiff+0xe2>
 8007564:	080096ee 	.word	0x080096ee
 8007568:	080096ff 	.word	0x080096ff

0800756c <__d2b>:
 800756c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756e:	2101      	movs	r1, #1
 8007570:	4617      	mov	r7, r2
 8007572:	461c      	mov	r4, r3
 8007574:	9e08      	ldr	r6, [sp, #32]
 8007576:	f7ff fcd7 	bl	8006f28 <_Balloc>
 800757a:	4605      	mov	r5, r0
 800757c:	b930      	cbnz	r0, 800758c <__d2b+0x20>
 800757e:	4602      	mov	r2, r0
 8007580:	f240 310f 	movw	r1, #783	; 0x30f
 8007584:	4b22      	ldr	r3, [pc, #136]	; (8007610 <__d2b+0xa4>)
 8007586:	4823      	ldr	r0, [pc, #140]	; (8007614 <__d2b+0xa8>)
 8007588:	f000 fa58 	bl	8007a3c <__assert_func>
 800758c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007590:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007594:	bb24      	cbnz	r4, 80075e0 <__d2b+0x74>
 8007596:	2f00      	cmp	r7, #0
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	d026      	beq.n	80075ea <__d2b+0x7e>
 800759c:	4668      	mov	r0, sp
 800759e:	9700      	str	r7, [sp, #0]
 80075a0:	f7ff fd8a 	bl	80070b8 <__lo0bits>
 80075a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075a8:	b1e8      	cbz	r0, 80075e6 <__d2b+0x7a>
 80075aa:	f1c0 0320 	rsb	r3, r0, #32
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	430b      	orrs	r3, r1
 80075b4:	40c2      	lsrs	r2, r0
 80075b6:	616b      	str	r3, [r5, #20]
 80075b8:	9201      	str	r2, [sp, #4]
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf14      	ite	ne
 80075c0:	2102      	movne	r1, #2
 80075c2:	2101      	moveq	r1, #1
 80075c4:	61ab      	str	r3, [r5, #24]
 80075c6:	6129      	str	r1, [r5, #16]
 80075c8:	b1bc      	cbz	r4, 80075fa <__d2b+0x8e>
 80075ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80075ce:	4404      	add	r4, r0
 80075d0:	6034      	str	r4, [r6, #0]
 80075d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d8:	6018      	str	r0, [r3, #0]
 80075da:	4628      	mov	r0, r5
 80075dc:	b003      	add	sp, #12
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075e4:	e7d7      	b.n	8007596 <__d2b+0x2a>
 80075e6:	6169      	str	r1, [r5, #20]
 80075e8:	e7e7      	b.n	80075ba <__d2b+0x4e>
 80075ea:	a801      	add	r0, sp, #4
 80075ec:	f7ff fd64 	bl	80070b8 <__lo0bits>
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	2101      	movs	r1, #1
 80075f4:	616b      	str	r3, [r5, #20]
 80075f6:	3020      	adds	r0, #32
 80075f8:	e7e5      	b.n	80075c6 <__d2b+0x5a>
 80075fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075fe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007602:	6030      	str	r0, [r6, #0]
 8007604:	6918      	ldr	r0, [r3, #16]
 8007606:	f7ff fd37 	bl	8007078 <__hi0bits>
 800760a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800760e:	e7e2      	b.n	80075d6 <__d2b+0x6a>
 8007610:	080096ee 	.word	0x080096ee
 8007614:	080096ff 	.word	0x080096ff

08007618 <__ssputs_r>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	461f      	mov	r7, r3
 800761e:	688e      	ldr	r6, [r1, #8]
 8007620:	4682      	mov	sl, r0
 8007622:	42be      	cmp	r6, r7
 8007624:	460c      	mov	r4, r1
 8007626:	4690      	mov	r8, r2
 8007628:	680b      	ldr	r3, [r1, #0]
 800762a:	d82c      	bhi.n	8007686 <__ssputs_r+0x6e>
 800762c:	898a      	ldrh	r2, [r1, #12]
 800762e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007632:	d026      	beq.n	8007682 <__ssputs_r+0x6a>
 8007634:	6965      	ldr	r5, [r4, #20]
 8007636:	6909      	ldr	r1, [r1, #16]
 8007638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800763c:	eba3 0901 	sub.w	r9, r3, r1
 8007640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007644:	1c7b      	adds	r3, r7, #1
 8007646:	444b      	add	r3, r9
 8007648:	106d      	asrs	r5, r5, #1
 800764a:	429d      	cmp	r5, r3
 800764c:	bf38      	it	cc
 800764e:	461d      	movcc	r5, r3
 8007650:	0553      	lsls	r3, r2, #21
 8007652:	d527      	bpl.n	80076a4 <__ssputs_r+0x8c>
 8007654:	4629      	mov	r1, r5
 8007656:	f7ff fbdb 	bl	8006e10 <_malloc_r>
 800765a:	4606      	mov	r6, r0
 800765c:	b360      	cbz	r0, 80076b8 <__ssputs_r+0xa0>
 800765e:	464a      	mov	r2, r9
 8007660:	6921      	ldr	r1, [r4, #16]
 8007662:	f7fe fcea 	bl	800603a <memcpy>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800766c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	6126      	str	r6, [r4, #16]
 8007674:	444e      	add	r6, r9
 8007676:	6026      	str	r6, [r4, #0]
 8007678:	463e      	mov	r6, r7
 800767a:	6165      	str	r5, [r4, #20]
 800767c:	eba5 0509 	sub.w	r5, r5, r9
 8007680:	60a5      	str	r5, [r4, #8]
 8007682:	42be      	cmp	r6, r7
 8007684:	d900      	bls.n	8007688 <__ssputs_r+0x70>
 8007686:	463e      	mov	r6, r7
 8007688:	4632      	mov	r2, r6
 800768a:	4641      	mov	r1, r8
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	f7fe fc2c 	bl	8005eea <memmove>
 8007692:	2000      	movs	r0, #0
 8007694:	68a3      	ldr	r3, [r4, #8]
 8007696:	1b9b      	subs	r3, r3, r6
 8007698:	60a3      	str	r3, [r4, #8]
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	4433      	add	r3, r6
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a4:	462a      	mov	r2, r5
 80076a6:	f000 fa0d 	bl	8007ac4 <_realloc_r>
 80076aa:	4606      	mov	r6, r0
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d1e0      	bne.n	8007672 <__ssputs_r+0x5a>
 80076b0:	4650      	mov	r0, sl
 80076b2:	6921      	ldr	r1, [r4, #16]
 80076b4:	f7ff fb3c 	bl	8006d30 <_free_r>
 80076b8:	230c      	movs	r3, #12
 80076ba:	f8ca 3000 	str.w	r3, [sl]
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	e7e9      	b.n	80076a0 <__ssputs_r+0x88>

080076cc <_svfiprintf_r>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4698      	mov	r8, r3
 80076d2:	898b      	ldrh	r3, [r1, #12]
 80076d4:	4607      	mov	r7, r0
 80076d6:	061b      	lsls	r3, r3, #24
 80076d8:	460d      	mov	r5, r1
 80076da:	4614      	mov	r4, r2
 80076dc:	b09d      	sub	sp, #116	; 0x74
 80076de:	d50e      	bpl.n	80076fe <_svfiprintf_r+0x32>
 80076e0:	690b      	ldr	r3, [r1, #16]
 80076e2:	b963      	cbnz	r3, 80076fe <_svfiprintf_r+0x32>
 80076e4:	2140      	movs	r1, #64	; 0x40
 80076e6:	f7ff fb93 	bl	8006e10 <_malloc_r>
 80076ea:	6028      	str	r0, [r5, #0]
 80076ec:	6128      	str	r0, [r5, #16]
 80076ee:	b920      	cbnz	r0, 80076fa <_svfiprintf_r+0x2e>
 80076f0:	230c      	movs	r3, #12
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e0d0      	b.n	800789c <_svfiprintf_r+0x1d0>
 80076fa:	2340      	movs	r3, #64	; 0x40
 80076fc:	616b      	str	r3, [r5, #20]
 80076fe:	2300      	movs	r3, #0
 8007700:	9309      	str	r3, [sp, #36]	; 0x24
 8007702:	2320      	movs	r3, #32
 8007704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007708:	2330      	movs	r3, #48	; 0x30
 800770a:	f04f 0901 	mov.w	r9, #1
 800770e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007712:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80078b4 <_svfiprintf_r+0x1e8>
 8007716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800771a:	4623      	mov	r3, r4
 800771c:	469a      	mov	sl, r3
 800771e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007722:	b10a      	cbz	r2, 8007728 <_svfiprintf_r+0x5c>
 8007724:	2a25      	cmp	r2, #37	; 0x25
 8007726:	d1f9      	bne.n	800771c <_svfiprintf_r+0x50>
 8007728:	ebba 0b04 	subs.w	fp, sl, r4
 800772c:	d00b      	beq.n	8007746 <_svfiprintf_r+0x7a>
 800772e:	465b      	mov	r3, fp
 8007730:	4622      	mov	r2, r4
 8007732:	4629      	mov	r1, r5
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ff6f 	bl	8007618 <__ssputs_r>
 800773a:	3001      	adds	r0, #1
 800773c:	f000 80a9 	beq.w	8007892 <_svfiprintf_r+0x1c6>
 8007740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007742:	445a      	add	r2, fp
 8007744:	9209      	str	r2, [sp, #36]	; 0x24
 8007746:	f89a 3000 	ldrb.w	r3, [sl]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80a1 	beq.w	8007892 <_svfiprintf_r+0x1c6>
 8007750:	2300      	movs	r3, #0
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800775a:	f10a 0a01 	add.w	sl, sl, #1
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007766:	931a      	str	r3, [sp, #104]	; 0x68
 8007768:	4654      	mov	r4, sl
 800776a:	2205      	movs	r2, #5
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	4850      	ldr	r0, [pc, #320]	; (80078b4 <_svfiprintf_r+0x1e8>)
 8007772:	f7fe fc54 	bl	800601e <memchr>
 8007776:	9a04      	ldr	r2, [sp, #16]
 8007778:	b9d8      	cbnz	r0, 80077b2 <_svfiprintf_r+0xe6>
 800777a:	06d0      	lsls	r0, r2, #27
 800777c:	bf44      	itt	mi
 800777e:	2320      	movmi	r3, #32
 8007780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007784:	0711      	lsls	r1, r2, #28
 8007786:	bf44      	itt	mi
 8007788:	232b      	movmi	r3, #43	; 0x2b
 800778a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778e:	f89a 3000 	ldrb.w	r3, [sl]
 8007792:	2b2a      	cmp	r3, #42	; 0x2a
 8007794:	d015      	beq.n	80077c2 <_svfiprintf_r+0xf6>
 8007796:	4654      	mov	r4, sl
 8007798:	2000      	movs	r0, #0
 800779a:	f04f 0c0a 	mov.w	ip, #10
 800779e:	9a07      	ldr	r2, [sp, #28]
 80077a0:	4621      	mov	r1, r4
 80077a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a6:	3b30      	subs	r3, #48	; 0x30
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d94d      	bls.n	8007848 <_svfiprintf_r+0x17c>
 80077ac:	b1b0      	cbz	r0, 80077dc <_svfiprintf_r+0x110>
 80077ae:	9207      	str	r2, [sp, #28]
 80077b0:	e014      	b.n	80077dc <_svfiprintf_r+0x110>
 80077b2:	eba0 0308 	sub.w	r3, r0, r8
 80077b6:	fa09 f303 	lsl.w	r3, r9, r3
 80077ba:	4313      	orrs	r3, r2
 80077bc:	46a2      	mov	sl, r4
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	e7d2      	b.n	8007768 <_svfiprintf_r+0x9c>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	1d19      	adds	r1, r3, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	9103      	str	r1, [sp, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bfbb      	ittet	lt
 80077ce:	425b      	neglt	r3, r3
 80077d0:	f042 0202 	orrlt.w	r2, r2, #2
 80077d4:	9307      	strge	r3, [sp, #28]
 80077d6:	9307      	strlt	r3, [sp, #28]
 80077d8:	bfb8      	it	lt
 80077da:	9204      	strlt	r2, [sp, #16]
 80077dc:	7823      	ldrb	r3, [r4, #0]
 80077de:	2b2e      	cmp	r3, #46	; 0x2e
 80077e0:	d10c      	bne.n	80077fc <_svfiprintf_r+0x130>
 80077e2:	7863      	ldrb	r3, [r4, #1]
 80077e4:	2b2a      	cmp	r3, #42	; 0x2a
 80077e6:	d134      	bne.n	8007852 <_svfiprintf_r+0x186>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	3402      	adds	r4, #2
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	9203      	str	r2, [sp, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfb8      	it	lt
 80077f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077fa:	9305      	str	r3, [sp, #20]
 80077fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80078b8 <_svfiprintf_r+0x1ec>
 8007800:	2203      	movs	r2, #3
 8007802:	4650      	mov	r0, sl
 8007804:	7821      	ldrb	r1, [r4, #0]
 8007806:	f7fe fc0a 	bl	800601e <memchr>
 800780a:	b138      	cbz	r0, 800781c <_svfiprintf_r+0x150>
 800780c:	2240      	movs	r2, #64	; 0x40
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	eba0 000a 	sub.w	r0, r0, sl
 8007814:	4082      	lsls	r2, r0
 8007816:	4313      	orrs	r3, r2
 8007818:	3401      	adds	r4, #1
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007820:	2206      	movs	r2, #6
 8007822:	4826      	ldr	r0, [pc, #152]	; (80078bc <_svfiprintf_r+0x1f0>)
 8007824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007828:	f7fe fbf9 	bl	800601e <memchr>
 800782c:	2800      	cmp	r0, #0
 800782e:	d038      	beq.n	80078a2 <_svfiprintf_r+0x1d6>
 8007830:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <_svfiprintf_r+0x1f4>)
 8007832:	bb1b      	cbnz	r3, 800787c <_svfiprintf_r+0x1b0>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	3307      	adds	r3, #7
 8007838:	f023 0307 	bic.w	r3, r3, #7
 800783c:	3308      	adds	r3, #8
 800783e:	9303      	str	r3, [sp, #12]
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	4433      	add	r3, r6
 8007844:	9309      	str	r3, [sp, #36]	; 0x24
 8007846:	e768      	b.n	800771a <_svfiprintf_r+0x4e>
 8007848:	460c      	mov	r4, r1
 800784a:	2001      	movs	r0, #1
 800784c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007850:	e7a6      	b.n	80077a0 <_svfiprintf_r+0xd4>
 8007852:	2300      	movs	r3, #0
 8007854:	f04f 0c0a 	mov.w	ip, #10
 8007858:	4619      	mov	r1, r3
 800785a:	3401      	adds	r4, #1
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	4620      	mov	r0, r4
 8007860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007864:	3a30      	subs	r2, #48	; 0x30
 8007866:	2a09      	cmp	r2, #9
 8007868:	d903      	bls.n	8007872 <_svfiprintf_r+0x1a6>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0c6      	beq.n	80077fc <_svfiprintf_r+0x130>
 800786e:	9105      	str	r1, [sp, #20]
 8007870:	e7c4      	b.n	80077fc <_svfiprintf_r+0x130>
 8007872:	4604      	mov	r4, r0
 8007874:	2301      	movs	r3, #1
 8007876:	fb0c 2101 	mla	r1, ip, r1, r2
 800787a:	e7f0      	b.n	800785e <_svfiprintf_r+0x192>
 800787c:	ab03      	add	r3, sp, #12
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	462a      	mov	r2, r5
 8007882:	4638      	mov	r0, r7
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <_svfiprintf_r+0x1f8>)
 8007886:	a904      	add	r1, sp, #16
 8007888:	f7fd fe48 	bl	800551c <_printf_float>
 800788c:	1c42      	adds	r2, r0, #1
 800788e:	4606      	mov	r6, r0
 8007890:	d1d6      	bne.n	8007840 <_svfiprintf_r+0x174>
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	065b      	lsls	r3, r3, #25
 8007896:	f53f af2d 	bmi.w	80076f4 <_svfiprintf_r+0x28>
 800789a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800789c:	b01d      	add	sp, #116	; 0x74
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	462a      	mov	r2, r5
 80078a8:	4638      	mov	r0, r7
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <_svfiprintf_r+0x1f8>)
 80078ac:	a904      	add	r1, sp, #16
 80078ae:	f7fe f8d5 	bl	8005a5c <_printf_i>
 80078b2:	e7eb      	b.n	800788c <_svfiprintf_r+0x1c0>
 80078b4:	08009854 	.word	0x08009854
 80078b8:	0800985a 	.word	0x0800985a
 80078bc:	0800985e 	.word	0x0800985e
 80078c0:	0800551d 	.word	0x0800551d
 80078c4:	08007619 	.word	0x08007619

080078c8 <__sflush_r>:
 80078c8:	898a      	ldrh	r2, [r1, #12]
 80078ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078cc:	4605      	mov	r5, r0
 80078ce:	0710      	lsls	r0, r2, #28
 80078d0:	460c      	mov	r4, r1
 80078d2:	d457      	bmi.n	8007984 <__sflush_r+0xbc>
 80078d4:	684b      	ldr	r3, [r1, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dc04      	bgt.n	80078e4 <__sflush_r+0x1c>
 80078da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dc01      	bgt.n	80078e4 <__sflush_r+0x1c>
 80078e0:	2000      	movs	r0, #0
 80078e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078e6:	2e00      	cmp	r6, #0
 80078e8:	d0fa      	beq.n	80078e0 <__sflush_r+0x18>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078f0:	682f      	ldr	r7, [r5, #0]
 80078f2:	6a21      	ldr	r1, [r4, #32]
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	d032      	beq.n	800795e <__sflush_r+0x96>
 80078f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	075a      	lsls	r2, r3, #29
 80078fe:	d505      	bpl.n	800790c <__sflush_r+0x44>
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	1ac0      	subs	r0, r0, r3
 8007904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007906:	b10b      	cbz	r3, 800790c <__sflush_r+0x44>
 8007908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800790a:	1ac0      	subs	r0, r0, r3
 800790c:	2300      	movs	r3, #0
 800790e:	4602      	mov	r2, r0
 8007910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007912:	4628      	mov	r0, r5
 8007914:	6a21      	ldr	r1, [r4, #32]
 8007916:	47b0      	blx	r6
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	d106      	bne.n	800792c <__sflush_r+0x64>
 800791e:	6829      	ldr	r1, [r5, #0]
 8007920:	291d      	cmp	r1, #29
 8007922:	d82b      	bhi.n	800797c <__sflush_r+0xb4>
 8007924:	4a28      	ldr	r2, [pc, #160]	; (80079c8 <__sflush_r+0x100>)
 8007926:	410a      	asrs	r2, r1
 8007928:	07d6      	lsls	r6, r2, #31
 800792a:	d427      	bmi.n	800797c <__sflush_r+0xb4>
 800792c:	2200      	movs	r2, #0
 800792e:	6062      	str	r2, [r4, #4]
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	04d9      	lsls	r1, r3, #19
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	d504      	bpl.n	8007942 <__sflush_r+0x7a>
 8007938:	1c42      	adds	r2, r0, #1
 800793a:	d101      	bne.n	8007940 <__sflush_r+0x78>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b903      	cbnz	r3, 8007942 <__sflush_r+0x7a>
 8007940:	6560      	str	r0, [r4, #84]	; 0x54
 8007942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007944:	602f      	str	r7, [r5, #0]
 8007946:	2900      	cmp	r1, #0
 8007948:	d0ca      	beq.n	80078e0 <__sflush_r+0x18>
 800794a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800794e:	4299      	cmp	r1, r3
 8007950:	d002      	beq.n	8007958 <__sflush_r+0x90>
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff f9ec 	bl	8006d30 <_free_r>
 8007958:	2000      	movs	r0, #0
 800795a:	6360      	str	r0, [r4, #52]	; 0x34
 800795c:	e7c1      	b.n	80078e2 <__sflush_r+0x1a>
 800795e:	2301      	movs	r3, #1
 8007960:	4628      	mov	r0, r5
 8007962:	47b0      	blx	r6
 8007964:	1c41      	adds	r1, r0, #1
 8007966:	d1c8      	bne.n	80078fa <__sflush_r+0x32>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c5      	beq.n	80078fa <__sflush_r+0x32>
 800796e:	2b1d      	cmp	r3, #29
 8007970:	d001      	beq.n	8007976 <__sflush_r+0xae>
 8007972:	2b16      	cmp	r3, #22
 8007974:	d101      	bne.n	800797a <__sflush_r+0xb2>
 8007976:	602f      	str	r7, [r5, #0]
 8007978:	e7b2      	b.n	80078e0 <__sflush_r+0x18>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	e7ae      	b.n	80078e2 <__sflush_r+0x1a>
 8007984:	690f      	ldr	r7, [r1, #16]
 8007986:	2f00      	cmp	r7, #0
 8007988:	d0aa      	beq.n	80078e0 <__sflush_r+0x18>
 800798a:	0793      	lsls	r3, r2, #30
 800798c:	bf18      	it	ne
 800798e:	2300      	movne	r3, #0
 8007990:	680e      	ldr	r6, [r1, #0]
 8007992:	bf08      	it	eq
 8007994:	694b      	ldreq	r3, [r1, #20]
 8007996:	1bf6      	subs	r6, r6, r7
 8007998:	600f      	str	r7, [r1, #0]
 800799a:	608b      	str	r3, [r1, #8]
 800799c:	2e00      	cmp	r6, #0
 800799e:	dd9f      	ble.n	80078e0 <__sflush_r+0x18>
 80079a0:	4633      	mov	r3, r6
 80079a2:	463a      	mov	r2, r7
 80079a4:	4628      	mov	r0, r5
 80079a6:	6a21      	ldr	r1, [r4, #32]
 80079a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80079ac:	47e0      	blx	ip
 80079ae:	2800      	cmp	r0, #0
 80079b0:	dc06      	bgt.n	80079c0 <__sflush_r+0xf8>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	e790      	b.n	80078e2 <__sflush_r+0x1a>
 80079c0:	4407      	add	r7, r0
 80079c2:	1a36      	subs	r6, r6, r0
 80079c4:	e7ea      	b.n	800799c <__sflush_r+0xd4>
 80079c6:	bf00      	nop
 80079c8:	dfbffffe 	.word	0xdfbffffe

080079cc <_fflush_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	690b      	ldr	r3, [r1, #16]
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	b913      	cbnz	r3, 80079dc <_fflush_r+0x10>
 80079d6:	2500      	movs	r5, #0
 80079d8:	4628      	mov	r0, r5
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	b118      	cbz	r0, 80079e6 <_fflush_r+0x1a>
 80079de:	6a03      	ldr	r3, [r0, #32]
 80079e0:	b90b      	cbnz	r3, 80079e6 <_fflush_r+0x1a>
 80079e2:	f7fe f9e9 	bl	8005db8 <__sinit>
 80079e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f3      	beq.n	80079d6 <_fflush_r+0xa>
 80079ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079f0:	07d0      	lsls	r0, r2, #31
 80079f2:	d404      	bmi.n	80079fe <_fflush_r+0x32>
 80079f4:	0599      	lsls	r1, r3, #22
 80079f6:	d402      	bmi.n	80079fe <_fflush_r+0x32>
 80079f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079fa:	f7fe fb0e 	bl	800601a <__retarget_lock_acquire_recursive>
 80079fe:	4628      	mov	r0, r5
 8007a00:	4621      	mov	r1, r4
 8007a02:	f7ff ff61 	bl	80078c8 <__sflush_r>
 8007a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a08:	4605      	mov	r5, r0
 8007a0a:	07da      	lsls	r2, r3, #31
 8007a0c:	d4e4      	bmi.n	80079d8 <_fflush_r+0xc>
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	059b      	lsls	r3, r3, #22
 8007a12:	d4e1      	bmi.n	80079d8 <_fflush_r+0xc>
 8007a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a16:	f7fe fb01 	bl	800601c <__retarget_lock_release_recursive>
 8007a1a:	e7dd      	b.n	80079d8 <_fflush_r+0xc>

08007a1c <_sbrk_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4d05      	ldr	r5, [pc, #20]	; (8007a38 <_sbrk_r+0x1c>)
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7fa fda4 	bl	8002574 <_sbrk>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_sbrk_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_sbrk_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20000c58 	.word	0x20000c58

08007a3c <__assert_func>:
 8007a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a3e:	4614      	mov	r4, r2
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <__assert_func+0x2c>)
 8007a44:	4605      	mov	r5, r0
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68d8      	ldr	r0, [r3, #12]
 8007a4a:	b14c      	cbz	r4, 8007a60 <__assert_func+0x24>
 8007a4c:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <__assert_func+0x30>)
 8007a4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a52:	9100      	str	r1, [sp, #0]
 8007a54:	462b      	mov	r3, r5
 8007a56:	4906      	ldr	r1, [pc, #24]	; (8007a70 <__assert_func+0x34>)
 8007a58:	f000 f870 	bl	8007b3c <fiprintf>
 8007a5c:	f000 f880 	bl	8007b60 <abort>
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <__assert_func+0x38>)
 8007a62:	461c      	mov	r4, r3
 8007a64:	e7f3      	b.n	8007a4e <__assert_func+0x12>
 8007a66:	bf00      	nop
 8007a68:	20000074 	.word	0x20000074
 8007a6c:	0800986f 	.word	0x0800986f
 8007a70:	0800987c 	.word	0x0800987c
 8007a74:	080098aa 	.word	0x080098aa

08007a78 <_calloc_r>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	fba1 5402 	umull	r5, r4, r1, r2
 8007a7e:	b934      	cbnz	r4, 8007a8e <_calloc_r+0x16>
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7ff f9c5 	bl	8006e10 <_malloc_r>
 8007a86:	4606      	mov	r6, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <_calloc_r+0x1e>
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	220c      	movs	r2, #12
 8007a90:	2600      	movs	r6, #0
 8007a92:	6002      	str	r2, [r0, #0]
 8007a94:	e7f9      	b.n	8007a8a <_calloc_r+0x12>
 8007a96:	462a      	mov	r2, r5
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f7fe fa40 	bl	8005f1e <memset>
 8007a9e:	e7f4      	b.n	8007a8a <_calloc_r+0x12>

08007aa0 <__ascii_mbtowc>:
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	b901      	cbnz	r1, 8007aa6 <__ascii_mbtowc+0x6>
 8007aa4:	a901      	add	r1, sp, #4
 8007aa6:	b142      	cbz	r2, 8007aba <__ascii_mbtowc+0x1a>
 8007aa8:	b14b      	cbz	r3, 8007abe <__ascii_mbtowc+0x1e>
 8007aaa:	7813      	ldrb	r3, [r2, #0]
 8007aac:	600b      	str	r3, [r1, #0]
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	1e10      	subs	r0, r2, #0
 8007ab2:	bf18      	it	ne
 8007ab4:	2001      	movne	r0, #1
 8007ab6:	b002      	add	sp, #8
 8007ab8:	4770      	bx	lr
 8007aba:	4610      	mov	r0, r2
 8007abc:	e7fb      	b.n	8007ab6 <__ascii_mbtowc+0x16>
 8007abe:	f06f 0001 	mvn.w	r0, #1
 8007ac2:	e7f8      	b.n	8007ab6 <__ascii_mbtowc+0x16>

08007ac4 <_realloc_r>:
 8007ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac8:	4680      	mov	r8, r0
 8007aca:	4614      	mov	r4, r2
 8007acc:	460e      	mov	r6, r1
 8007ace:	b921      	cbnz	r1, 8007ada <_realloc_r+0x16>
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad6:	f7ff b99b 	b.w	8006e10 <_malloc_r>
 8007ada:	b92a      	cbnz	r2, 8007ae8 <_realloc_r+0x24>
 8007adc:	f7ff f928 	bl	8006d30 <_free_r>
 8007ae0:	4625      	mov	r5, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae8:	f000 f841 	bl	8007b6e <_malloc_usable_size_r>
 8007aec:	4284      	cmp	r4, r0
 8007aee:	4607      	mov	r7, r0
 8007af0:	d802      	bhi.n	8007af8 <_realloc_r+0x34>
 8007af2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007af6:	d812      	bhi.n	8007b1e <_realloc_r+0x5a>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4640      	mov	r0, r8
 8007afc:	f7ff f988 	bl	8006e10 <_malloc_r>
 8007b00:	4605      	mov	r5, r0
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d0ed      	beq.n	8007ae2 <_realloc_r+0x1e>
 8007b06:	42bc      	cmp	r4, r7
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	bf28      	it	cs
 8007b0e:	463a      	movcs	r2, r7
 8007b10:	f7fe fa93 	bl	800603a <memcpy>
 8007b14:	4631      	mov	r1, r6
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7ff f90a 	bl	8006d30 <_free_r>
 8007b1c:	e7e1      	b.n	8007ae2 <_realloc_r+0x1e>
 8007b1e:	4635      	mov	r5, r6
 8007b20:	e7df      	b.n	8007ae2 <_realloc_r+0x1e>

08007b22 <__ascii_wctomb>:
 8007b22:	4603      	mov	r3, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	b141      	cbz	r1, 8007b3a <__ascii_wctomb+0x18>
 8007b28:	2aff      	cmp	r2, #255	; 0xff
 8007b2a:	d904      	bls.n	8007b36 <__ascii_wctomb+0x14>
 8007b2c:	228a      	movs	r2, #138	; 0x8a
 8007b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	4770      	bx	lr
 8007b36:	2001      	movs	r0, #1
 8007b38:	700a      	strb	r2, [r1, #0]
 8007b3a:	4770      	bx	lr

08007b3c <fiprintf>:
 8007b3c:	b40e      	push	{r1, r2, r3}
 8007b3e:	b503      	push	{r0, r1, lr}
 8007b40:	4601      	mov	r1, r0
 8007b42:	ab03      	add	r3, sp, #12
 8007b44:	4805      	ldr	r0, [pc, #20]	; (8007b5c <fiprintf+0x20>)
 8007b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	f000 f83d 	bl	8007bcc <_vfiprintf_r>
 8007b52:	b002      	add	sp, #8
 8007b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b58:	b003      	add	sp, #12
 8007b5a:	4770      	bx	lr
 8007b5c:	20000074 	.word	0x20000074

08007b60 <abort>:
 8007b60:	2006      	movs	r0, #6
 8007b62:	b508      	push	{r3, lr}
 8007b64:	f000 fa0a 	bl	8007f7c <raise>
 8007b68:	2001      	movs	r0, #1
 8007b6a:	f7fa fc90 	bl	800248e <_exit>

08007b6e <_malloc_usable_size_r>:
 8007b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b72:	1f18      	subs	r0, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bfbc      	itt	lt
 8007b78:	580b      	ldrlt	r3, [r1, r0]
 8007b7a:	18c0      	addlt	r0, r0, r3
 8007b7c:	4770      	bx	lr

08007b7e <__sfputc_r>:
 8007b7e:	6893      	ldr	r3, [r2, #8]
 8007b80:	b410      	push	{r4}
 8007b82:	3b01      	subs	r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	6093      	str	r3, [r2, #8]
 8007b88:	da07      	bge.n	8007b9a <__sfputc_r+0x1c>
 8007b8a:	6994      	ldr	r4, [r2, #24]
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	db01      	blt.n	8007b94 <__sfputc_r+0x16>
 8007b90:	290a      	cmp	r1, #10
 8007b92:	d102      	bne.n	8007b9a <__sfputc_r+0x1c>
 8007b94:	bc10      	pop	{r4}
 8007b96:	f000 b933 	b.w	8007e00 <__swbuf_r>
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	1c58      	adds	r0, r3, #1
 8007b9e:	6010      	str	r0, [r2, #0]
 8007ba0:	7019      	strb	r1, [r3, #0]
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	bc10      	pop	{r4}
 8007ba6:	4770      	bx	lr

08007ba8 <__sfputs_r>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	4606      	mov	r6, r0
 8007bac:	460f      	mov	r7, r1
 8007bae:	4614      	mov	r4, r2
 8007bb0:	18d5      	adds	r5, r2, r3
 8007bb2:	42ac      	cmp	r4, r5
 8007bb4:	d101      	bne.n	8007bba <__sfputs_r+0x12>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e007      	b.n	8007bca <__sfputs_r+0x22>
 8007bba:	463a      	mov	r2, r7
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc2:	f7ff ffdc 	bl	8007b7e <__sfputc_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d1f3      	bne.n	8007bb2 <__sfputs_r+0xa>
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bcc <_vfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	4698      	mov	r8, r3
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	b09d      	sub	sp, #116	; 0x74
 8007bda:	b118      	cbz	r0, 8007be4 <_vfiprintf_r+0x18>
 8007bdc:	6a03      	ldr	r3, [r0, #32]
 8007bde:	b90b      	cbnz	r3, 8007be4 <_vfiprintf_r+0x18>
 8007be0:	f7fe f8ea 	bl	8005db8 <__sinit>
 8007be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be6:	07d9      	lsls	r1, r3, #31
 8007be8:	d405      	bmi.n	8007bf6 <_vfiprintf_r+0x2a>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	059a      	lsls	r2, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_vfiprintf_r+0x2a>
 8007bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf2:	f7fe fa12 	bl	800601a <__retarget_lock_acquire_recursive>
 8007bf6:	89ab      	ldrh	r3, [r5, #12]
 8007bf8:	071b      	lsls	r3, r3, #28
 8007bfa:	d501      	bpl.n	8007c00 <_vfiprintf_r+0x34>
 8007bfc:	692b      	ldr	r3, [r5, #16]
 8007bfe:	b99b      	cbnz	r3, 8007c28 <_vfiprintf_r+0x5c>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4630      	mov	r0, r6
 8007c04:	f000 f93a 	bl	8007e7c <__swsetup_r>
 8007c08:	b170      	cbz	r0, 8007c28 <_vfiprintf_r+0x5c>
 8007c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c0c:	07dc      	lsls	r4, r3, #31
 8007c0e:	d504      	bpl.n	8007c1a <_vfiprintf_r+0x4e>
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	b01d      	add	sp, #116	; 0x74
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	0598      	lsls	r0, r3, #22
 8007c1e:	d4f7      	bmi.n	8007c10 <_vfiprintf_r+0x44>
 8007c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c22:	f7fe f9fb 	bl	800601c <__retarget_lock_release_recursive>
 8007c26:	e7f3      	b.n	8007c10 <_vfiprintf_r+0x44>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c32:	2330      	movs	r3, #48	; 0x30
 8007c34:	f04f 0901 	mov.w	r9, #1
 8007c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007dec <_vfiprintf_r+0x220>
 8007c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c44:	4623      	mov	r3, r4
 8007c46:	469a      	mov	sl, r3
 8007c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c4c:	b10a      	cbz	r2, 8007c52 <_vfiprintf_r+0x86>
 8007c4e:	2a25      	cmp	r2, #37	; 0x25
 8007c50:	d1f9      	bne.n	8007c46 <_vfiprintf_r+0x7a>
 8007c52:	ebba 0b04 	subs.w	fp, sl, r4
 8007c56:	d00b      	beq.n	8007c70 <_vfiprintf_r+0xa4>
 8007c58:	465b      	mov	r3, fp
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7ff ffa2 	bl	8007ba8 <__sfputs_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	f000 80a9 	beq.w	8007dbc <_vfiprintf_r+0x1f0>
 8007c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c6c:	445a      	add	r2, fp
 8007c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c70:	f89a 3000 	ldrb.w	r3, [sl]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80a1 	beq.w	8007dbc <_vfiprintf_r+0x1f0>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c84:	f10a 0a01 	add.w	sl, sl, #1
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c90:	931a      	str	r3, [sp, #104]	; 0x68
 8007c92:	4654      	mov	r4, sl
 8007c94:	2205      	movs	r2, #5
 8007c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9a:	4854      	ldr	r0, [pc, #336]	; (8007dec <_vfiprintf_r+0x220>)
 8007c9c:	f7fe f9bf 	bl	800601e <memchr>
 8007ca0:	9a04      	ldr	r2, [sp, #16]
 8007ca2:	b9d8      	cbnz	r0, 8007cdc <_vfiprintf_r+0x110>
 8007ca4:	06d1      	lsls	r1, r2, #27
 8007ca6:	bf44      	itt	mi
 8007ca8:	2320      	movmi	r3, #32
 8007caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cae:	0713      	lsls	r3, r2, #28
 8007cb0:	bf44      	itt	mi
 8007cb2:	232b      	movmi	r3, #43	; 0x2b
 8007cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007cbe:	d015      	beq.n	8007cec <_vfiprintf_r+0x120>
 8007cc0:	4654      	mov	r4, sl
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	f04f 0c0a 	mov.w	ip, #10
 8007cc8:	9a07      	ldr	r2, [sp, #28]
 8007cca:	4621      	mov	r1, r4
 8007ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd0:	3b30      	subs	r3, #48	; 0x30
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d94d      	bls.n	8007d72 <_vfiprintf_r+0x1a6>
 8007cd6:	b1b0      	cbz	r0, 8007d06 <_vfiprintf_r+0x13a>
 8007cd8:	9207      	str	r2, [sp, #28]
 8007cda:	e014      	b.n	8007d06 <_vfiprintf_r+0x13a>
 8007cdc:	eba0 0308 	sub.w	r3, r0, r8
 8007ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	46a2      	mov	sl, r4
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	e7d2      	b.n	8007c92 <_vfiprintf_r+0xc6>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	1d19      	adds	r1, r3, #4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	9103      	str	r1, [sp, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfbb      	ittet	lt
 8007cf8:	425b      	neglt	r3, r3
 8007cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8007cfe:	9307      	strge	r3, [sp, #28]
 8007d00:	9307      	strlt	r3, [sp, #28]
 8007d02:	bfb8      	it	lt
 8007d04:	9204      	strlt	r2, [sp, #16]
 8007d06:	7823      	ldrb	r3, [r4, #0]
 8007d08:	2b2e      	cmp	r3, #46	; 0x2e
 8007d0a:	d10c      	bne.n	8007d26 <_vfiprintf_r+0x15a>
 8007d0c:	7863      	ldrb	r3, [r4, #1]
 8007d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d10:	d134      	bne.n	8007d7c <_vfiprintf_r+0x1b0>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	3402      	adds	r4, #2
 8007d16:	1d1a      	adds	r2, r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	9203      	str	r2, [sp, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfb8      	it	lt
 8007d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d24:	9305      	str	r3, [sp, #20]
 8007d26:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007df0 <_vfiprintf_r+0x224>
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	7821      	ldrb	r1, [r4, #0]
 8007d30:	f7fe f975 	bl	800601e <memchr>
 8007d34:	b138      	cbz	r0, 8007d46 <_vfiprintf_r+0x17a>
 8007d36:	2240      	movs	r2, #64	; 0x40
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	eba0 000a 	sub.w	r0, r0, sl
 8007d3e:	4082      	lsls	r2, r0
 8007d40:	4313      	orrs	r3, r2
 8007d42:	3401      	adds	r4, #1
 8007d44:	9304      	str	r3, [sp, #16]
 8007d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4a:	2206      	movs	r2, #6
 8007d4c:	4829      	ldr	r0, [pc, #164]	; (8007df4 <_vfiprintf_r+0x228>)
 8007d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d52:	f7fe f964 	bl	800601e <memchr>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d03f      	beq.n	8007dda <_vfiprintf_r+0x20e>
 8007d5a:	4b27      	ldr	r3, [pc, #156]	; (8007df8 <_vfiprintf_r+0x22c>)
 8007d5c:	bb1b      	cbnz	r3, 8007da6 <_vfiprintf_r+0x1da>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	3307      	adds	r3, #7
 8007d62:	f023 0307 	bic.w	r3, r3, #7
 8007d66:	3308      	adds	r3, #8
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6c:	443b      	add	r3, r7
 8007d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d70:	e768      	b.n	8007c44 <_vfiprintf_r+0x78>
 8007d72:	460c      	mov	r4, r1
 8007d74:	2001      	movs	r0, #1
 8007d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d7a:	e7a6      	b.n	8007cca <_vfiprintf_r+0xfe>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f04f 0c0a 	mov.w	ip, #10
 8007d82:	4619      	mov	r1, r3
 8007d84:	3401      	adds	r4, #1
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d8e:	3a30      	subs	r2, #48	; 0x30
 8007d90:	2a09      	cmp	r2, #9
 8007d92:	d903      	bls.n	8007d9c <_vfiprintf_r+0x1d0>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0c6      	beq.n	8007d26 <_vfiprintf_r+0x15a>
 8007d98:	9105      	str	r1, [sp, #20]
 8007d9a:	e7c4      	b.n	8007d26 <_vfiprintf_r+0x15a>
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	2301      	movs	r3, #1
 8007da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007da4:	e7f0      	b.n	8007d88 <_vfiprintf_r+0x1bc>
 8007da6:	ab03      	add	r3, sp, #12
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	462a      	mov	r2, r5
 8007dac:	4630      	mov	r0, r6
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <_vfiprintf_r+0x230>)
 8007db0:	a904      	add	r1, sp, #16
 8007db2:	f7fd fbb3 	bl	800551c <_printf_float>
 8007db6:	4607      	mov	r7, r0
 8007db8:	1c78      	adds	r0, r7, #1
 8007dba:	d1d6      	bne.n	8007d6a <_vfiprintf_r+0x19e>
 8007dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dbe:	07d9      	lsls	r1, r3, #31
 8007dc0:	d405      	bmi.n	8007dce <_vfiprintf_r+0x202>
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	059a      	lsls	r2, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_vfiprintf_r+0x202>
 8007dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dca:	f7fe f927 	bl	800601c <__retarget_lock_release_recursive>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	065b      	lsls	r3, r3, #25
 8007dd2:	f53f af1d 	bmi.w	8007c10 <_vfiprintf_r+0x44>
 8007dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd8:	e71c      	b.n	8007c14 <_vfiprintf_r+0x48>
 8007dda:	ab03      	add	r3, sp, #12
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	462a      	mov	r2, r5
 8007de0:	4630      	mov	r0, r6
 8007de2:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <_vfiprintf_r+0x230>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	f7fd fe39 	bl	8005a5c <_printf_i>
 8007dea:	e7e4      	b.n	8007db6 <_vfiprintf_r+0x1ea>
 8007dec:	08009854 	.word	0x08009854
 8007df0:	0800985a 	.word	0x0800985a
 8007df4:	0800985e 	.word	0x0800985e
 8007df8:	0800551d 	.word	0x0800551d
 8007dfc:	08007ba9 	.word	0x08007ba9

08007e00 <__swbuf_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	460e      	mov	r6, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	4605      	mov	r5, r0
 8007e08:	b118      	cbz	r0, 8007e12 <__swbuf_r+0x12>
 8007e0a:	6a03      	ldr	r3, [r0, #32]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <__swbuf_r+0x12>
 8007e0e:	f7fd ffd3 	bl	8005db8 <__sinit>
 8007e12:	69a3      	ldr	r3, [r4, #24]
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	071a      	lsls	r2, r3, #28
 8007e1a:	d525      	bpl.n	8007e68 <__swbuf_r+0x68>
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	b31b      	cbz	r3, 8007e68 <__swbuf_r+0x68>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	6922      	ldr	r2, [r4, #16]
 8007e24:	b2f6      	uxtb	r6, r6
 8007e26:	1a98      	subs	r0, r3, r2
 8007e28:	6963      	ldr	r3, [r4, #20]
 8007e2a:	4637      	mov	r7, r6
 8007e2c:	4283      	cmp	r3, r0
 8007e2e:	dc04      	bgt.n	8007e3a <__swbuf_r+0x3a>
 8007e30:	4621      	mov	r1, r4
 8007e32:	4628      	mov	r0, r5
 8007e34:	f7ff fdca 	bl	80079cc <_fflush_r>
 8007e38:	b9e0      	cbnz	r0, 8007e74 <__swbuf_r+0x74>
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	60a3      	str	r3, [r4, #8]
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	6022      	str	r2, [r4, #0]
 8007e46:	701e      	strb	r6, [r3, #0]
 8007e48:	6962      	ldr	r2, [r4, #20]
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d004      	beq.n	8007e5a <__swbuf_r+0x5a>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d506      	bpl.n	8007e64 <__swbuf_r+0x64>
 8007e56:	2e0a      	cmp	r6, #10
 8007e58:	d104      	bne.n	8007e64 <__swbuf_r+0x64>
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7ff fdb5 	bl	80079cc <_fflush_r>
 8007e62:	b938      	cbnz	r0, 8007e74 <__swbuf_r+0x74>
 8007e64:	4638      	mov	r0, r7
 8007e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 f806 	bl	8007e7c <__swsetup_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d0d5      	beq.n	8007e20 <__swbuf_r+0x20>
 8007e74:	f04f 37ff 	mov.w	r7, #4294967295
 8007e78:	e7f4      	b.n	8007e64 <__swbuf_r+0x64>
	...

08007e7c <__swsetup_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <__swsetup_r+0xac>)
 8007e80:	4605      	mov	r5, r0
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	460c      	mov	r4, r1
 8007e86:	b118      	cbz	r0, 8007e90 <__swsetup_r+0x14>
 8007e88:	6a03      	ldr	r3, [r0, #32]
 8007e8a:	b90b      	cbnz	r3, 8007e90 <__swsetup_r+0x14>
 8007e8c:	f7fd ff94 	bl	8005db8 <__sinit>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e96:	0718      	lsls	r0, r3, #28
 8007e98:	d422      	bmi.n	8007ee0 <__swsetup_r+0x64>
 8007e9a:	06d9      	lsls	r1, r3, #27
 8007e9c:	d407      	bmi.n	8007eae <__swsetup_r+0x32>
 8007e9e:	2309      	movs	r3, #9
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	e034      	b.n	8007f18 <__swsetup_r+0x9c>
 8007eae:	0758      	lsls	r0, r3, #29
 8007eb0:	d512      	bpl.n	8007ed8 <__swsetup_r+0x5c>
 8007eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eb4:	b141      	cbz	r1, 8007ec8 <__swsetup_r+0x4c>
 8007eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eba:	4299      	cmp	r1, r3
 8007ebc:	d002      	beq.n	8007ec4 <__swsetup_r+0x48>
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f7fe ff36 	bl	8006d30 <_free_r>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6363      	str	r3, [r4, #52]	; 0x34
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ece:	81a3      	strh	r3, [r4, #12]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6063      	str	r3, [r4, #4]
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f043 0308 	orr.w	r3, r3, #8
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	b94b      	cbnz	r3, 8007ef8 <__swsetup_r+0x7c>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eee:	d003      	beq.n	8007ef8 <__swsetup_r+0x7c>
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f883 	bl	8007ffe <__smakebuf_r>
 8007ef8:	89a0      	ldrh	r0, [r4, #12]
 8007efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007efe:	f010 0301 	ands.w	r3, r0, #1
 8007f02:	d00a      	beq.n	8007f1a <__swsetup_r+0x9e>
 8007f04:	2300      	movs	r3, #0
 8007f06:	60a3      	str	r3, [r4, #8]
 8007f08:	6963      	ldr	r3, [r4, #20]
 8007f0a:	425b      	negs	r3, r3
 8007f0c:	61a3      	str	r3, [r4, #24]
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	b943      	cbnz	r3, 8007f24 <__swsetup_r+0xa8>
 8007f12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f16:	d1c4      	bne.n	8007ea2 <__swsetup_r+0x26>
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
 8007f1a:	0781      	lsls	r1, r0, #30
 8007f1c:	bf58      	it	pl
 8007f1e:	6963      	ldrpl	r3, [r4, #20]
 8007f20:	60a3      	str	r3, [r4, #8]
 8007f22:	e7f4      	b.n	8007f0e <__swsetup_r+0x92>
 8007f24:	2000      	movs	r0, #0
 8007f26:	e7f7      	b.n	8007f18 <__swsetup_r+0x9c>
 8007f28:	20000074 	.word	0x20000074

08007f2c <_raise_r>:
 8007f2c:	291f      	cmp	r1, #31
 8007f2e:	b538      	push	{r3, r4, r5, lr}
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	d904      	bls.n	8007f40 <_raise_r+0x14>
 8007f36:	2316      	movs	r3, #22
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007f42:	b112      	cbz	r2, 8007f4a <_raise_r+0x1e>
 8007f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f48:	b94b      	cbnz	r3, 8007f5e <_raise_r+0x32>
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f830 	bl	8007fb0 <_getpid_r>
 8007f50:	462a      	mov	r2, r5
 8007f52:	4601      	mov	r1, r0
 8007f54:	4620      	mov	r0, r4
 8007f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f5a:	f000 b817 	b.w	8007f8c <_kill_r>
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d00a      	beq.n	8007f78 <_raise_r+0x4c>
 8007f62:	1c59      	adds	r1, r3, #1
 8007f64:	d103      	bne.n	8007f6e <_raise_r+0x42>
 8007f66:	2316      	movs	r3, #22
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	e7e7      	b.n	8007f3e <_raise_r+0x12>
 8007f6e:	2400      	movs	r4, #0
 8007f70:	4628      	mov	r0, r5
 8007f72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f76:	4798      	blx	r3
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7e0      	b.n	8007f3e <_raise_r+0x12>

08007f7c <raise>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <raise+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f7ff bfd3 	b.w	8007f2c <_raise_r>
 8007f86:	bf00      	nop
 8007f88:	20000074 	.word	0x20000074

08007f8c <_kill_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4d06      	ldr	r5, [pc, #24]	; (8007fac <_kill_r+0x20>)
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f7fa fa68 	bl	800246e <_kill>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d102      	bne.n	8007fa8 <_kill_r+0x1c>
 8007fa2:	682b      	ldr	r3, [r5, #0]
 8007fa4:	b103      	cbz	r3, 8007fa8 <_kill_r+0x1c>
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	20000c58 	.word	0x20000c58

08007fb0 <_getpid_r>:
 8007fb0:	f7fa ba56 	b.w	8002460 <_getpid>

08007fb4 <__swhatbuf_r>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	461e      	mov	r6, r3
 8007fc2:	b096      	sub	sp, #88	; 0x58
 8007fc4:	da0c      	bge.n	8007fe0 <__swhatbuf_r+0x2c>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	2100      	movs	r1, #0
 8007fca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fce:	bf0c      	ite	eq
 8007fd0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fd4:	2340      	movne	r3, #64	; 0x40
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	6031      	str	r1, [r6, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	b016      	add	sp, #88	; 0x58
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	466a      	mov	r2, sp
 8007fe2:	f000 f849 	bl	8008078 <_fstat_r>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	dbed      	blt.n	8007fc6 <__swhatbuf_r+0x12>
 8007fea:	9901      	ldr	r1, [sp, #4]
 8007fec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ff0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ff4:	4259      	negs	r1, r3
 8007ff6:	4159      	adcs	r1, r3
 8007ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffc:	e7eb      	b.n	8007fd6 <__swhatbuf_r+0x22>

08007ffe <__smakebuf_r>:
 8007ffe:	898b      	ldrh	r3, [r1, #12]
 8008000:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008002:	079d      	lsls	r5, r3, #30
 8008004:	4606      	mov	r6, r0
 8008006:	460c      	mov	r4, r1
 8008008:	d507      	bpl.n	800801a <__smakebuf_r+0x1c>
 800800a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	2301      	movs	r3, #1
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	b002      	add	sp, #8
 8008018:	bd70      	pop	{r4, r5, r6, pc}
 800801a:	466a      	mov	r2, sp
 800801c:	ab01      	add	r3, sp, #4
 800801e:	f7ff ffc9 	bl	8007fb4 <__swhatbuf_r>
 8008022:	9900      	ldr	r1, [sp, #0]
 8008024:	4605      	mov	r5, r0
 8008026:	4630      	mov	r0, r6
 8008028:	f7fe fef2 	bl	8006e10 <_malloc_r>
 800802c:	b948      	cbnz	r0, 8008042 <__smakebuf_r+0x44>
 800802e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008032:	059a      	lsls	r2, r3, #22
 8008034:	d4ef      	bmi.n	8008016 <__smakebuf_r+0x18>
 8008036:	f023 0303 	bic.w	r3, r3, #3
 800803a:	f043 0302 	orr.w	r3, r3, #2
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	e7e3      	b.n	800800a <__smakebuf_r+0xc>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	6020      	str	r0, [r4, #0]
 8008046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	6120      	str	r0, [r4, #16]
 8008050:	6163      	str	r3, [r4, #20]
 8008052:	9b01      	ldr	r3, [sp, #4]
 8008054:	b15b      	cbz	r3, 800806e <__smakebuf_r+0x70>
 8008056:	4630      	mov	r0, r6
 8008058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800805c:	f000 f81e 	bl	800809c <_isatty_r>
 8008060:	b128      	cbz	r0, 800806e <__smakebuf_r+0x70>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	431d      	orrs	r5, r3
 8008072:	81a5      	strh	r5, [r4, #12]
 8008074:	e7cf      	b.n	8008016 <__smakebuf_r+0x18>
	...

08008078 <_fstat_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	2300      	movs	r3, #0
 800807c:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_fstat_r+0x20>)
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f7fa fa50 	bl	800252a <_fstat>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d102      	bne.n	8008094 <_fstat_r+0x1c>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	b103      	cbz	r3, 8008094 <_fstat_r+0x1c>
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	bf00      	nop
 8008098:	20000c58 	.word	0x20000c58

0800809c <_isatty_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	2300      	movs	r3, #0
 80080a0:	4d05      	ldr	r5, [pc, #20]	; (80080b8 <_isatty_r+0x1c>)
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7fa fa4e 	bl	8002548 <_isatty>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_isatty_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_isatty_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20000c58 	.word	0x20000c58

080080bc <_init>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr

080080c8 <_fini>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr
