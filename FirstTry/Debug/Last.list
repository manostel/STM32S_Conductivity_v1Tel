
Last.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021ac  0800a310  0800a310  0001a310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4bc  0800c4bc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4bc  0800c4bc  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4bc  0800c4bc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  200001fc  0800c6c0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  0800c6c0  000210e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a02  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268c  00000000  00000000  00031c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2d  00000000  00000000  00035520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a34  00000000  00000000  0003634d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e6d  00000000  00000000  0004fd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094114  00000000  00000000  00064bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fc0  00000000  00000000  000f8d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000fecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a2f4 	.word	0x0800a2f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800a2f4 	.word	0x0800a2f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <new_calculateECSET1>:
static void MX_TIM4_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
float new_calculateECSET1(float voltage,float Temp){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	const float voltagePerOhm = 20;  // Voltage increase per ohm
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <new_calculateECSET1+0xd8>)
 80010dc:	61bb      	str	r3, [r7, #24]
	float resistance = voltage / voltagePerOhm;
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fee3 	bl	8000eac <__aeabi_fdiv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	617b      	str	r3, [r7, #20]
	float resistivity = resistance * (6.0*3.14);
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff f99c 	bl	8000428 <__aeabi_f2d>
 80010f0:	a329      	add	r3, pc, #164	; (adr r3, 8001198 <new_calculateECSET1+0xc8>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff f9ef 	bl	80004d8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fcc1 	bl	8000a88 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	613b      	str	r3, [r7, #16]
	float uncompensatedConductivity  = 0;
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
	if (resistivity != 0) {
 8001110:	f04f 0100 	mov.w	r1, #0
 8001114:	6938      	ldr	r0, [r7, #16]
 8001116:	f7ff ffa9 	bl	800106c <__aeabi_fcmpeq>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10b      	bne.n	8001138 <new_calculateECSET1+0x68>
		uncompensatedConductivity  = (1 / resistivity) * 1000;  // Convert S/m to mS/cm
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001126:	f7ff fec1 	bl	8000eac <__aeabi_fdiv>
 800112a:	4603      	mov	r3, r0
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <new_calculateECSET1+0xdc>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe08 	bl	8000d44 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	61fb      	str	r3, [r7, #28]
	}
	float tempCompensationFactor = 1 + (TEMP_COMP_COEFF * (Temp - BASELINE_TEMP));
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f7ff f975 	bl	8000428 <__aeabi_f2d>
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <new_calculateECSET1+0xe0>)
 8001144:	f7ff f810 	bl	8000168 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	a313      	add	r3, pc, #76	; (adr r3, 80011a0 <new_calculateECSET1+0xd0>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9bf 	bl	80004d8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <new_calculateECSET1+0xe4>)
 8001168:	f7ff f800 	bl	800016c <__adddf3>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fc88 	bl	8000a88 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	60fb      	str	r3, [r7, #12]
	float compensatedConductivity = uncompensatedConductivity * tempCompensationFactor;
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	69f8      	ldr	r0, [r7, #28]
 8001180:	f7ff fde0 	bl	8000d44 <__aeabi_fmul>
 8001184:	4603      	mov	r3, r0
 8001186:	60bb      	str	r3, [r7, #8]
	return compensatedConductivity;
 8001188:	68bb      	ldr	r3, [r7, #8]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	3d70a3d7 	.word	0x3d70a3d7
 800119c:	4032d70a 	.word	0x4032d70a
 80011a0:	47ae147b 	.word	0x47ae147b
 80011a4:	3f947ae1 	.word	0x3f947ae1
 80011a8:	41a00000 	.word	0x41a00000
 80011ac:	447a0000 	.word	0x447a0000
 80011b0:	40390000 	.word	0x40390000
 80011b4:	3ff00000 	.word	0x3ff00000

080011b8 <new_calculateRSET1>:
float new_calculateRSET1(float voltage){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 20;  // Voltage increase per ohm
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <new_calculateRSET1+0x24>)
 80011c2:	60fb      	str	r3, [r7, #12]
	float resistance = voltage / voltagePerOhm;
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe70 	bl	8000eac <__aeabi_fdiv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	60bb      	str	r3, [r7, #8]
	return resistance;
 80011d0:	68bb      	ldr	r3, [r7, #8]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	41a00000 	.word	0x41a00000

080011e0 <new_calculateECSET10>:
float new_calculateECSET10(float voltage,float Temp){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	const float voltagePerOhm = 3.1;  // Voltage increase per ohm
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <new_calculateECSET10+0xd8>)
 80011ec:	61bb      	str	r3, [r7, #24]
	float resistance = voltage / voltagePerOhm;
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fe5b 	bl	8000eac <__aeabi_fdiv>
 80011f6:	4603      	mov	r3, r0
 80011f8:	617b      	str	r3, [r7, #20]
	float resistivity = resistance * (6.0*3.14);
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff f914 	bl	8000428 <__aeabi_f2d>
 8001200:	a329      	add	r3, pc, #164	; (adr r3, 80012a8 <new_calculateECSET10+0xc8>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc39 	bl	8000a88 <__aeabi_d2f>
 8001216:	4603      	mov	r3, r0
 8001218:	613b      	str	r3, [r7, #16]
	float uncompensatedConductivity  = 0;
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
	if (resistivity != 0) {
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	6938      	ldr	r0, [r7, #16]
 8001226:	f7ff ff21 	bl	800106c <__aeabi_fcmpeq>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10b      	bne.n	8001248 <new_calculateECSET10+0x68>
		uncompensatedConductivity  = (1 / resistivity) * 1000;  // Convert S/m to mS/cm
 8001230:	6939      	ldr	r1, [r7, #16]
 8001232:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001236:	f7ff fe39 	bl	8000eac <__aeabi_fdiv>
 800123a:	4603      	mov	r3, r0
 800123c:	491f      	ldr	r1, [pc, #124]	; (80012bc <new_calculateECSET10+0xdc>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd80 	bl	8000d44 <__aeabi_fmul>
 8001244:	4603      	mov	r3, r0
 8001246:	61fb      	str	r3, [r7, #28]
	}
	float tempCompensationFactor = 1 + (TEMP_COMP_COEFF * (Temp - BASELINE_TEMP));
 8001248:	6838      	ldr	r0, [r7, #0]
 800124a:	f7ff f8ed 	bl	8000428 <__aeabi_f2d>
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <new_calculateECSET10+0xe0>)
 8001254:	f7fe ff88 	bl	8000168 <__aeabi_dsub>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a313      	add	r3, pc, #76	; (adr r3, 80012b0 <new_calculateECSET10+0xd0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f937 	bl	80004d8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <new_calculateECSET10+0xe4>)
 8001278:	f7fe ff78 	bl	800016c <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc00 	bl	8000a88 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	60fb      	str	r3, [r7, #12]
	float compensatedConductivity = uncompensatedConductivity * tempCompensationFactor;
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	69f8      	ldr	r0, [r7, #28]
 8001290:	f7ff fd58 	bl	8000d44 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	60bb      	str	r3, [r7, #8]
	return compensatedConductivity;
 8001298:	68bb      	ldr	r3, [r7, #8]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	3d70a3d7 	.word	0x3d70a3d7
 80012ac:	4032d70a 	.word	0x4032d70a
 80012b0:	47ae147b 	.word	0x47ae147b
 80012b4:	3f947ae1 	.word	0x3f947ae1
 80012b8:	40466666 	.word	0x40466666
 80012bc:	447a0000 	.word	0x447a0000
 80012c0:	40390000 	.word	0x40390000
 80012c4:	3ff00000 	.word	0x3ff00000

080012c8 <new_calculateRSET10>:
float new_calculateRSET10(float voltage){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 3.1;  // Voltage increase per ohm
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <new_calculateRSET10+0x24>)
 80012d2:	60fb      	str	r3, [r7, #12]
	float resistance = voltage / voltagePerOhm;
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fde8 	bl	8000eac <__aeabi_fdiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	60bb      	str	r3, [r7, #8]
	return resistance;
 80012e0:	68bb      	ldr	r3, [r7, #8]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40466666 	.word	0x40466666

080012f0 <new_calculateECSET100>:
float new_calculateECSET100(float voltage,float Temp){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	const float voltagePerOhm = 0.31;  // Voltage increase per ohm
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <new_calculateECSET100+0xd8>)
 80012fc:	61bb      	str	r3, [r7, #24]
	float resistance = voltage / voltagePerOhm;
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fdd3 	bl	8000eac <__aeabi_fdiv>
 8001306:	4603      	mov	r3, r0
 8001308:	617b      	str	r3, [r7, #20]
	float resistivity = resistance * (6.0*3.14);
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff f88c 	bl	8000428 <__aeabi_f2d>
 8001310:	a329      	add	r3, pc, #164	; (adr r3, 80013b8 <new_calculateECSET100+0xc8>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f8df 	bl	80004d8 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fbb1 	bl	8000a88 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	613b      	str	r3, [r7, #16]
	float uncompensatedConductivity  = 0;
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
	if (resistivity != 0) {
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	6938      	ldr	r0, [r7, #16]
 8001336:	f7ff fe99 	bl	800106c <__aeabi_fcmpeq>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10b      	bne.n	8001358 <new_calculateECSET100+0x68>
		uncompensatedConductivity  = (1 / resistivity) * 1000000;  // Convert S/m to uS/cm
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001346:	f7ff fdb1 	bl	8000eac <__aeabi_fdiv>
 800134a:	4603      	mov	r3, r0
 800134c:	491f      	ldr	r1, [pc, #124]	; (80013cc <new_calculateECSET100+0xdc>)
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcf8 	bl	8000d44 <__aeabi_fmul>
 8001354:	4603      	mov	r3, r0
 8001356:	61fb      	str	r3, [r7, #28]
	}
	float tempCompensationFactor = 1 + (TEMP_COMP_COEFF * (Temp - BASELINE_TEMP));
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f7ff f865 	bl	8000428 <__aeabi_f2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <new_calculateECSET100+0xe0>)
 8001364:	f7fe ff00 	bl	8000168 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	a313      	add	r3, pc, #76	; (adr r3, 80013c0 <new_calculateECSET100+0xd0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f8af 	bl	80004d8 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <new_calculateECSET100+0xe4>)
 8001388:	f7fe fef0 	bl	800016c <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fb78 	bl	8000a88 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	60fb      	str	r3, [r7, #12]
	float compensatedConductivity = uncompensatedConductivity * tempCompensationFactor;
 800139c:	68f9      	ldr	r1, [r7, #12]
 800139e:	69f8      	ldr	r0, [r7, #28]
 80013a0:	f7ff fcd0 	bl	8000d44 <__aeabi_fmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	60bb      	str	r3, [r7, #8]
	return compensatedConductivity;
 80013a8:	68bb      	ldr	r3, [r7, #8]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	3d70a3d7 	.word	0x3d70a3d7
 80013bc:	4032d70a 	.word	0x4032d70a
 80013c0:	47ae147b 	.word	0x47ae147b
 80013c4:	3f947ae1 	.word	0x3f947ae1
 80013c8:	3e9eb852 	.word	0x3e9eb852
 80013cc:	49742400 	.word	0x49742400
 80013d0:	40390000 	.word	0x40390000
 80013d4:	3ff00000 	.word	0x3ff00000

080013d8 <new_calculateRSET100>:
float new_calculateRSET100(float voltage){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 0.31;  // Voltage increase per ohm
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <new_calculateRSET100+0x24>)
 80013e2:	60fb      	str	r3, [r7, #12]
	float resistance = voltage / voltagePerOhm;
 80013e4:	68f9      	ldr	r1, [r7, #12]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fd60 	bl	8000eac <__aeabi_fdiv>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
	return resistance;
 80013f0:	68bb      	ldr	r3, [r7, #8]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	3e9eb852 	.word	0x3e9eb852

08001400 <new_calculateECSET1000>:
float new_calculateECSET1000(float voltage,float Temp){
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	const float voltagePerOhm = 0.031;  // Voltage increase per ohm
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <new_calculateECSET1000+0xd8>)
 800140c:	61bb      	str	r3, [r7, #24]
	float resistance = voltage / voltagePerOhm;
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fd4b 	bl	8000eac <__aeabi_fdiv>
 8001416:	4603      	mov	r3, r0
 8001418:	617b      	str	r3, [r7, #20]
	float resistivity = resistance * (6.0*3.14);
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff f804 	bl	8000428 <__aeabi_f2d>
 8001420:	a329      	add	r3, pc, #164	; (adr r3, 80014c8 <new_calculateECSET1000+0xc8>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb29 	bl	8000a88 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	613b      	str	r3, [r7, #16]
	float uncompensatedConductivity  = 0;
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
	if (resistivity != 0) {
 8001440:	f04f 0100 	mov.w	r1, #0
 8001444:	6938      	ldr	r0, [r7, #16]
 8001446:	f7ff fe11 	bl	800106c <__aeabi_fcmpeq>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10b      	bne.n	8001468 <new_calculateECSET1000+0x68>
		uncompensatedConductivity  = (1 / resistivity) * 1000000;  // Convert S/m to uS/cm
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001456:	f7ff fd29 	bl	8000eac <__aeabi_fdiv>
 800145a:	4603      	mov	r3, r0
 800145c:	491f      	ldr	r1, [pc, #124]	; (80014dc <new_calculateECSET1000+0xdc>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc70 	bl	8000d44 <__aeabi_fmul>
 8001464:	4603      	mov	r3, r0
 8001466:	61fb      	str	r3, [r7, #28]
	}
	float tempCompensationFactor = 1 + (TEMP_COMP_COEFF * (Temp - BASELINE_TEMP));
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f7fe ffdd 	bl	8000428 <__aeabi_f2d>
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <new_calculateECSET1000+0xe0>)
 8001474:	f7fe fe78 	bl	8000168 <__aeabi_dsub>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	a313      	add	r3, pc, #76	; (adr r3, 80014d0 <new_calculateECSET1000+0xd0>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f827 	bl	80004d8 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <new_calculateECSET1000+0xe4>)
 8001498:	f7fe fe68 	bl	800016c <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff faf0 	bl	8000a88 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
	float compensatedConductivity = uncompensatedConductivity * tempCompensationFactor;
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	69f8      	ldr	r0, [r7, #28]
 80014b0:	f7ff fc48 	bl	8000d44 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60bb      	str	r3, [r7, #8]
	return compensatedConductivity;
 80014b8:	68bb      	ldr	r3, [r7, #8]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	3d70a3d7 	.word	0x3d70a3d7
 80014cc:	4032d70a 	.word	0x4032d70a
 80014d0:	47ae147b 	.word	0x47ae147b
 80014d4:	3f947ae1 	.word	0x3f947ae1
 80014d8:	3cfdf3b6 	.word	0x3cfdf3b6
 80014dc:	49742400 	.word	0x49742400
 80014e0:	40390000 	.word	0x40390000
 80014e4:	3ff00000 	.word	0x3ff00000

080014e8 <new_calculateRSET1000>:
float new_calculateRSET1000(float voltage){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	const float voltagePerOhm = 0.031;  // Voltage increase per ohm
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <new_calculateRSET1000+0x24>)
 80014f2:	60fb      	str	r3, [r7, #12]
	float resistance = voltage / voltagePerOhm;
 80014f4:	68f9      	ldr	r1, [r7, #12]
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fcd8 	bl	8000eac <__aeabi_fdiv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60bb      	str	r3, [r7, #8]
	return resistance;
 8001500:	68bb      	ldr	r3, [r7, #8]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	3cfdf3b6 	.word	0x3cfdf3b6

08001510 <HAL_TIM_PeriodElapsedCallback>:


	}


	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM3) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x66>
			counter++;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800152a:	6013      	str	r3, [r2, #0]
			counter2++;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001534:	6013      	str	r3, [r2, #0]
			if (counter>65535)
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153e:	d302      	bcc.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x36>
			{
				counter=0;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
			}
			if (counter>30)
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b1e      	cmp	r3, #30
 800154c:	d902      	bls.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				counterflagPWM=1;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]

			}
			if (counter>1000)
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800155c:	d902      	bls.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				counterflagPWM2=1;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
			}
			if(counter2>20000)
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f644 6220 	movw	r2, #20000	; 0x4e20
 800156c:	4293      	cmp	r3, r2
 800156e:	d902      	bls.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				timeout=1;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001572:	2201      	movs	r2, #1
 8001574:	801a      	strh	r2, [r3, #0]
			}

		}
	}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40000400 	.word	0x40000400
 8001584:	20000418 	.word	0x20000418
 8001588:	2000041c 	.word	0x2000041c
 800158c:	20000b88 	.word	0x20000b88
 8001590:	20000b89 	.word	0x20000b89
 8001594:	20000422 	.word	0x20000422

08001598 <PWM_COND>:
		}
		ssd1306_Fill(0);
		ssd1306_UpdateScreen();
	}

	void PWM_COND() {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

		counterflagPWM=0;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <PWM_COND+0x70>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
		counter=0;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <PWM_COND+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
		do{
			delay2(delay_time);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <PWM_COND+0x78>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fab3 	bl	8001b18 <delay2>
			GPIOB->BSRR = GPIO_PIN_6; // Set Pin 7 (output high)
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <PWM_COND+0x7c>)
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	611a      	str	r2, [r3, #16]
			delay2(delay_time); // Adjust delay time as needed
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <PWM_COND+0x78>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 faab 	bl	8001b18 <delay2>
			GPIOB->BSRR = GPIO_PIN_6 << 16; // Reset Pin 7 (output low)
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <PWM_COND+0x7c>)
 80015c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015c8:	611a      	str	r2, [r3, #16]

			delay2(delay_band);
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <PWM_COND+0x80>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 faa2 	bl	8001b18 <delay2>

			// Toggle GPIOB Pin 6
			//        delay2(delay_time);
			GPIOB->BSRR = GPIO_PIN_7; // Set Pin 6 (output high)
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <PWM_COND+0x7c>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	611a      	str	r2, [r3, #16]
			delay2(delay_time); // Adjust delay time as needed
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <PWM_COND+0x78>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fa9a 	bl	8001b18 <delay2>
			GPIOB->BSRR = GPIO_PIN_7 << 16; // Reset Pin 6 (output low)
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <PWM_COND+0x7c>)
 80015e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015ea:	611a      	str	r2, [r3, #16]
			delay2(delay_time);
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <PWM_COND+0x78>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fa91 	bl	8001b18 <delay2>
		}while(counterflagPWM==0);
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <PWM_COND+0x70>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0d3      	beq.n	80015a8 <PWM_COND+0x10>


	}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000b88 	.word	0x20000b88
 800160c:	20000418 	.word	0x20000418
 8001610:	20000000 	.word	0x20000000
 8001614:	40010c00 	.word	0x40010c00
 8001618:	20000004 	.word	0x20000004

0800161c <PWM_MOIST>:

	void PWM_MOIST(){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

		counterflagPWM2=0;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <PWM_MOIST+0x54>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
		counter=0;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <PWM_MOIST+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
		// Set PB3 as output
		GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3); // Clear bits
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <PWM_MOIST+0x5c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <PWM_MOIST+0x5c>)
 8001632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001636:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE3_0; // Set pin mode to general purpose output push-pull 10MHz
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <PWM_MOIST+0x5c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <PWM_MOIST+0x5c>)
 800163e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001642:	6013      	str	r3, [r2, #0]
		do{

			GPIOB->ODR ^= GPIO_ODR_ODR3;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <PWM_MOIST+0x5c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <PWM_MOIST+0x5c>)
 800164a:	f083 0308 	eor.w	r3, r3, #8
 800164e:	60d3      	str	r3, [r2, #12]
			delay2(1);
 8001650:	2001      	movs	r0, #1
 8001652:	f000 fa61 	bl	8001b18 <delay2>


		}while(counterflagPWM2==0);
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <PWM_MOIST+0x54>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f1      	beq.n	8001644 <PWM_MOIST+0x28>


		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2108      	movs	r1, #8
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <PWM_MOIST+0x5c>)
 8001666:	f003 fe1a 	bl	800529e <HAL_GPIO_WritePin>

	}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000b89 	.word	0x20000b89
 8001674:	20000418 	.word	0x20000418
 8001678:	40010c00 	.word	0x40010c00

0800167c <SSD1306_INITS>:


	void SSD1306_INITS()
	{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
		ssd1306_Init();
 8001680:	f002 fa18 	bl	8003ab4 <ssd1306_Init>
		ssd1306_UpdateScreen();
 8001684:	f002 fa98 	bl	8003bb8 <ssd1306_UpdateScreen>
		HAL_Delay(50);
 8001688:	2032      	movs	r0, #50	; 0x32
 800168a:	f002 fee3 	bl	8004454 <HAL_Delay>
		ssd1306_Fill(0);
 800168e:	2000      	movs	r0, #0
 8001690:	f002 fa7a 	bl	8003b88 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001694:	f002 fa90 	bl	8003bb8 <ssd1306_UpdateScreen>
		ssd1306_WriteString("Telectronio",Font_11x18,1);
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <SSD1306_INITS+0x9c>)
 800169a:	2301      	movs	r3, #1
 800169c:	ca06      	ldmia	r2, {r1, r2}
 800169e:	481f      	ldr	r0, [pc, #124]	; (800171c <SSD1306_INITS+0xa0>)
 80016a0:	f002 fb8c 	bl	8003dbc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80016a4:	f002 fa88 	bl	8003bb8 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 80016a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ac:	f002 fed2 	bl	8004454 <HAL_Delay>
		ssd1306_Fill(0);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f002 fa69 	bl	8003b88 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 80016b6:	f002 fa7f 	bl	8003bb8 <ssd1306_UpdateScreen>
		HAL_Delay(50);
 80016ba:	2032      	movs	r0, #50	; 0x32
 80016bc:	f002 feca 	bl	8004454 <HAL_Delay>
		ssd1306_SetCursor(0, 0);
 80016c0:	2100      	movs	r1, #0
 80016c2:	2000      	movs	r0, #0
 80016c4:	f002 fba0 	bl	8003e08 <ssd1306_SetCursor>
		ssd1306_WriteString("Soil", Font_11x18,1);
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <SSD1306_INITS+0x9c>)
 80016ca:	2301      	movs	r3, #1
 80016cc:	ca06      	ldmia	r2, {r1, r2}
 80016ce:	4814      	ldr	r0, [pc, #80]	; (8001720 <SSD1306_INITS+0xa4>)
 80016d0:	f002 fb74 	bl	8003dbc <ssd1306_WriteString>
		ssd1306_SetCursor(0, 19);
 80016d4:	2113      	movs	r1, #19
 80016d6:	2000      	movs	r0, #0
 80016d8:	f002 fb96 	bl	8003e08 <ssd1306_SetCursor>
		ssd1306_WriteString("Meaurement", Font_11x18,1);
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <SSD1306_INITS+0x9c>)
 80016de:	2301      	movs	r3, #1
 80016e0:	ca06      	ldmia	r2, {r1, r2}
 80016e2:	4810      	ldr	r0, [pc, #64]	; (8001724 <SSD1306_INITS+0xa8>)
 80016e4:	f002 fb6a 	bl	8003dbc <ssd1306_WriteString>
		ssd1306_SetCursor(0, 38);
 80016e8:	2126      	movs	r1, #38	; 0x26
 80016ea:	2000      	movs	r0, #0
 80016ec:	f002 fb8c 	bl	8003e08 <ssd1306_SetCursor>
		ssd1306_WriteString("Version1", Font_11x18,1);
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <SSD1306_INITS+0x9c>)
 80016f2:	2301      	movs	r3, #1
 80016f4:	ca06      	ldmia	r2, {r1, r2}
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <SSD1306_INITS+0xac>)
 80016f8:	f002 fb60 	bl	8003dbc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80016fc:	f002 fa5c 	bl	8003bb8 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8001700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001704:	f002 fea6 	bl	8004454 <HAL_Delay>
		ssd1306_Fill(0);
 8001708:	2000      	movs	r0, #0
 800170a:	f002 fa3d 	bl	8003b88 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 800170e:	f002 fa53 	bl	8003bb8 <ssd1306_UpdateScreen>
	}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000020 	.word	0x20000020
 800171c:	0800a3c0 	.word	0x0800a3c0
 8001720:	0800a3cc 	.word	0x0800a3cc
 8001724:	0800a3d4 	.word	0x0800a3d4
 8001728:	0800a3e0 	.word	0x0800a3e0

0800172c <delay>:

	void delay(uint16_t delay){
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <delay+0x2c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 800173e:	bf00      	nop
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <delay+0x2c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3f9      	bcc.n	8001740 <delay+0x14>
	}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	200002f4 	.word	0x200002f4

0800175c <Set_Pin_Output>:


	void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
	{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct={0};
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Pin=GPIO_Pin;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_LOW;
 800177e:	2302      	movs	r3, #2
 8001780:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4619      	mov	r1, r3
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f003 fbed 	bl	8004f68 <HAL_GPIO_Init>
	}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <Set_Pin_Input>:

	void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
	{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct={0};
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Pin=GPIO_Pin;
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull=GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f003 fbd0 	bl	8004f68 <HAL_GPIO_Init>
	}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <DS18B20_Start>:
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
	uint8_t DS18B20_Start (void)
	{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
		uint8_t Response=0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]
		Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80017da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017de:	4815      	ldr	r0, [pc, #84]	; (8001834 <DS18B20_Start+0x64>)
 80017e0:	f7ff ffbc 	bl	800175c <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ea:	4812      	ldr	r0, [pc, #72]	; (8001834 <DS18B20_Start+0x64>)
 80017ec:	f003 fd57 	bl	800529e <HAL_GPIO_WritePin>
		delay(480);
 80017f0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80017f4:	f7ff ff9a 	bl	800172c <delay>
		Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 80017f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <DS18B20_Start+0x64>)
 80017fe:	f7ff ffca 	bl	8001796 <Set_Pin_Input>
		delay(60);
 8001802:	203c      	movs	r0, #60	; 0x3c
 8001804:	f7ff ff92 	bl	800172c <delay>

		if(!(HAL_GPIO_ReadPin (DS18B20_PORT,DS18B20_PIN))) Response =1;
 8001808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <DS18B20_Start+0x64>)
 800180e:	f003 fd2f 	bl	8005270 <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <DS18B20_Start+0x4e>
 8001818:	2301      	movs	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e001      	b.n	8001822 <DS18B20_Start+0x52>
		else Response = -1;
 800181e:	23ff      	movs	r3, #255	; 0xff
 8001820:	71fb      	strb	r3, [r7, #7]
		delay(480);
 8001822:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001826:	f7ff ff81 	bl	800172c <delay>
		return Response;
 800182a:	79fb      	ldrb	r3, [r7, #7]
	}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40010c00 	.word	0x40010c00

08001838 <DS18B20_Write>:

	void DS18B20_Write (uint8_t data)
	{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
		Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001846:	4821      	ldr	r0, [pc, #132]	; (80018cc <DS18B20_Write+0x94>)
 8001848:	f7ff ff88 	bl	800175c <Set_Pin_Output>

		for(int i=0; i<8; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e034      	b.n	80018bc <DS18B20_Write+0x84>
		{
			if((data&(1<<i))!=0)
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	fa42 f303 	asr.w	r3, r2, r3
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d016      	beq.n	8001890 <DS18B20_Write+0x58>
			{
				//write 1
				Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001866:	4819      	ldr	r0, [pc, #100]	; (80018cc <DS18B20_Write+0x94>)
 8001868:	f7ff ff78 	bl	800175c <Set_Pin_Output>
				HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001872:	4816      	ldr	r0, [pc, #88]	; (80018cc <DS18B20_Write+0x94>)
 8001874:	f003 fd13 	bl	800529e <HAL_GPIO_WritePin>
				delay(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ff57 	bl	800172c <delay>
				Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 800187e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <DS18B20_Write+0x94>)
 8001884:	f7ff ff87 	bl	8001796 <Set_Pin_Input>
				delay(60);
 8001888:	203c      	movs	r0, #60	; 0x3c
 800188a:	f7ff ff4f 	bl	800172c <delay>
 800188e:	e012      	b.n	80018b6 <DS18B20_Write+0x7e>
			}
			else
			{
				//write 0

				Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 8001890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <DS18B20_Write+0x94>)
 8001896:	f7ff ff61 	bl	800175c <Set_Pin_Output>
				HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <DS18B20_Write+0x94>)
 80018a2:	f003 fcfc 	bl	800529e <HAL_GPIO_WritePin>
				delay(60);
 80018a6:	203c      	movs	r0, #60	; 0x3c
 80018a8:	f7ff ff40 	bl	800172c <delay>
				Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 80018ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <DS18B20_Write+0x94>)
 80018b2:	f7ff ff70 	bl	8001796 <Set_Pin_Input>
		for(int i=0; i<8; i++)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	ddc7      	ble.n	8001852 <DS18B20_Write+0x1a>

			}
		}
	}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40010c00 	.word	0x40010c00

080018d0 <DS18B20_Read>:

	uint8_t DS18B20_Read (void)
	{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
		uint8_t value=0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
		Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	481c      	ldr	r0, [pc, #112]	; (8001950 <DS18B20_Read+0x80>)
 80018e0:	f7ff ff59 	bl	8001796 <Set_Pin_Input>

		for(int i=0;i<8;i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	e02a      	b.n	8001940 <DS18B20_Read+0x70>
		{
			Set_Pin_Output(DS18B20_PORT,DS18B20_PIN);
 80018ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <DS18B20_Read+0x80>)
 80018f0:	f7ff ff34 	bl	800175c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN,0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fa:	4815      	ldr	r0, [pc, #84]	; (8001950 <DS18B20_Read+0x80>)
 80018fc:	f003 fccf 	bl	800529e <HAL_GPIO_WritePin>
			delay(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff ff13 	bl	800172c <delay>
			Set_Pin_Input(DS18B20_PORT,DS18B20_PIN);
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	4811      	ldr	r0, [pc, #68]	; (8001950 <DS18B20_Read+0x80>)
 800190c:	f7ff ff43 	bl	8001796 <Set_Pin_Input>
			if(HAL_GPIO_ReadPin(DS18B20_PORT,DS18B20_PIN))
 8001910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001914:	480e      	ldr	r0, [pc, #56]	; (8001950 <DS18B20_Read+0x80>)
 8001916:	f003 fcab 	bl	8005270 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <DS18B20_Read+0x64>
			{
				value |= 1<<i; //read=1
 8001920:	2201      	movs	r2, #1
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	b25a      	sxtb	r2, r3
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	4313      	orrs	r3, r2
 8001930:	b25b      	sxtb	r3, r3
 8001932:	71fb      	strb	r3, [r7, #7]
			}
			delay(60);
 8001934:	203c      	movs	r0, #60	; 0x3c
 8001936:	f7ff fef9 	bl	800172c <delay>
		for(int i=0;i<8;i++)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b07      	cmp	r3, #7
 8001944:	ddd1      	ble.n	80018ea <DS18B20_Read+0x1a>
		}
		return value;
 8001946:	79fb      	ldrb	r3, [r7, #7]
	}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40010c00 	.word	0x40010c00

08001954 <DS18B20_GetTemp>:



	float DS18B20_GetTemp(void)
	{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
		Presence = DS18B20_Start();
 8001958:	f7ff ff3a 	bl	80017d0 <DS18B20_Start>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <DS18B20_GetTemp+0xa4>)
 8001962:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001964:	2001      	movs	r0, #1
 8001966:	f002 fd75 	bl	8004454 <HAL_Delay>

		DS18B20_Write(0xCC); // SKIP ROM
 800196a:	20cc      	movs	r0, #204	; 0xcc
 800196c:	f7ff ff64 	bl	8001838 <DS18B20_Write>
		DS18B20_Write(0x44); // Convert T
 8001970:	2044      	movs	r0, #68	; 0x44
 8001972:	f7ff ff61 	bl	8001838 <DS18B20_Write>

		HAL_Delay(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f002 fd6c 	bl	8004454 <HAL_Delay>

		Presence = DS18B20_Start();
 800197c:	f7ff ff28 	bl	80017d0 <DS18B20_Start>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <DS18B20_GetTemp+0xa4>)
 8001986:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f002 fd63 	bl	8004454 <HAL_Delay>

		DS18B20_Write(0xCC);
 800198e:	20cc      	movs	r0, #204	; 0xcc
 8001990:	f7ff ff52 	bl	8001838 <DS18B20_Write>
		DS18B20_Write(0xBE); // Read scratch pad
 8001994:	20be      	movs	r0, #190	; 0xbe
 8001996:	f7ff ff4f 	bl	8001838 <DS18B20_Write>

		Temp_byte1 = DS18B20_Read();
 800199a:	f7ff ff99 	bl	80018d0 <DS18B20_Read>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <DS18B20_GetTemp+0xa8>)
 80019a4:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DS18B20_Read();
 80019a6:	f7ff ff93 	bl	80018d0 <DS18B20_Read>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <DS18B20_GetTemp+0xac>)
 80019b0:	701a      	strb	r2, [r3, #0]
		TEMP = (Temp_byte2 << 8) | Temp_byte1;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <DS18B20_GetTemp+0xac>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <DS18B20_GetTemp+0xa8>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <DS18B20_GetTemp+0xb0>)
 80019c8:	801a      	strh	r2, [r3, #0]
		Temperature = (float)TEMP / 16;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <DS18B20_GetTemp+0xb0>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f960 	bl	8000c94 <__aeabi_ui2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa66 	bl	8000eac <__aeabi_fdiv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <DS18B20_GetTemp+0xb4>)
 80019e6:	601a      	str	r2, [r3, #0]



		HAL_Delay(10);
 80019e8:	200a      	movs	r0, #10
 80019ea:	f002 fd33 	bl	8004454 <HAL_Delay>

		return Temperature;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <DS18B20_GetTemp+0xb4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
	}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000454 	.word	0x20000454
 80019fc:	20000455 	.word	0x20000455
 8001a00:	20000456 	.word	0x20000456
 8001a04:	20000458 	.word	0x20000458
 8001a08:	20000450 	.word	0x20000450

08001a0c <ADC_CH1>:
		{
			Error_Handler();
		}
	}
	void ADC_CH1(void)
	{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
		ADC_ChannelConfTypeDef sConfig = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001a24:	2304      	movs	r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <ADC_CH1+0x38>)
 8001a2e:	f002 fff9 	bl	8004a24 <HAL_ADC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <ADC_CH1+0x30>
		{
			Error_Handler();
 8001a38:	f001 fffe 	bl	8003a38 <Error_Handler>
		}
	}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000218 	.word	0x20000218

08001a48 <ADC_CH2>:
	void ADC_CH2(void)
	{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
		ADC_ChannelConfTypeDef sConfig = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001a60:	2304      	movs	r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <ADC_CH2+0x38>)
 8001a6a:	f002 ffdb 	bl	8004a24 <HAL_ADC_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <ADC_CH2+0x30>
		{
			Error_Handler();
 8001a74:	f001 ffe0 	bl	8003a38 <Error_Handler>
		}
	}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000218 	.word	0x20000218

08001a84 <ADC_CH3>:
	void ADC_CH3(void)
	{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
		ADC_ChannelConfTypeDef sConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_3;
 8001a94:	2303      	movs	r3, #3
 8001a96:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <ADC_CH3+0x38>)
 8001aa6:	f002 ffbd 	bl	8004a24 <HAL_ADC_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <ADC_CH3+0x30>
		{
			Error_Handler();
 8001ab0:	f001 ffc2 	bl	8003a38 <Error_Handler>
		}
	}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000218 	.word	0x20000218

08001ac0 <adc_value_to_voltage>:
	float adc_value_to_voltage(uint16_t adc_value) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
		return (adc_value / 4095.0) * VREF; // 4095 for 12-bit resolution
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fc99 	bl	8000404 <__aeabi_i2d>
 8001ad2:	a30d      	add	r3, pc, #52	; (adr r3, 8001b08 <adc_value_to_voltage+0x48>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fe28 	bl	800072c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	a30a      	add	r3, pc, #40	; (adr r3, 8001b10 <adc_value_to_voltage+0x50>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fcf5 	bl	80004d8 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ffc7 	bl	8000a88 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
	}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40affe00 	.word	0x40affe00
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40a9dc00 	.word	0x40a9dc00

08001b18 <delay2>:

	void delay2(uint32_t delay_time) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
		for (uint32_t i = 0; i < delay_time; ++i) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e003      	b.n	8001b2e <delay2+0x16>
			__NOP(); // Use NOP instruction for delay
 8001b26:	bf00      	nop
		for (uint32_t i = 0; i < delay_time; ++i) {
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3f7      	bcc.n	8001b26 <delay2+0xe>
		}
	}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
	...

08001b44 <EC_out_of_range_fast>:

	void EC_out_of_range_fast()
		{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
			if((final_average_cond>=3080)&& (SET1==1))
 8001b4a:	4b9e      	ldr	r3, [pc, #632]	; (8001dc4 <EC_out_of_range_fast+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	499e      	ldr	r1, [pc, #632]	; (8001dc8 <EC_out_of_range_fast+0x284>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff faa9 	bl	80010a8 <__aeabi_fcmpge>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d02a      	beq.n	8001bb2 <EC_out_of_range_fast+0x6e>
 8001b5c:	4b9b      	ldr	r3, [pc, #620]	; (8001dcc <EC_out_of_range_fast+0x288>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d126      	bne.n	8001bb2 <EC_out_of_range_fast+0x6e>
			{
				for(int i=0;i<5;i++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e020      	b.n	8001bac <EC_out_of_range_fast+0x68>
					ssd1306_Fill(0);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f002 f80c 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8001b70:	f002 f822 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8001b74:	2100      	movs	r1, #0
 8001b76:	2000      	movs	r0, #0
 8001b78:	f002 f946 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001b7c:	4a94      	ldr	r2, [pc, #592]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001b7e:	2301      	movs	r3, #1
 8001b80:	ca06      	ldmia	r2, {r1, r2}
 8001b82:	4894      	ldr	r0, [pc, #592]	; (8001dd4 <EC_out_of_range_fast+0x290>)
 8001b84:	f002 f91a 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001b88:	210a      	movs	r1, #10
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f002 f93c 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001b90:	4a8f      	ldr	r2, [pc, #572]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001b92:	2301      	movs	r3, #1
 8001b94:	ca06      	ldmia	r2, {r1, r2}
 8001b96:	4890      	ldr	r0, [pc, #576]	; (8001dd8 <EC_out_of_range_fast+0x294>)
 8001b98:	f002 f910 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001b9c:	f002 f80c 	bl	8003bb8 <ssd1306_UpdateScreen>
//					conductivity=0;
					HAL_Delay(100);
 8001ba0:	2064      	movs	r0, #100	; 0x64
 8001ba2:	f002 fc57 	bl	8004454 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	dddb      	ble.n	8001b6a <EC_out_of_range_fast+0x26>
				}
				//out of range
				//decrease sensitivity
			}
			if((final_average_cond>=3080)&& (SET10==1))
 8001bb2:	4b84      	ldr	r3, [pc, #528]	; (8001dc4 <EC_out_of_range_fast+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4984      	ldr	r1, [pc, #528]	; (8001dc8 <EC_out_of_range_fast+0x284>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa75 	bl	80010a8 <__aeabi_fcmpge>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02a      	beq.n	8001c1a <EC_out_of_range_fast+0xd6>
 8001bc4:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <EC_out_of_range_fast+0x298>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d126      	bne.n	8001c1a <EC_out_of_range_fast+0xd6>
			{
				for(int i=0;i<5;i++){
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e020      	b.n	8001c14 <EC_out_of_range_fast+0xd0>
					ssd1306_Fill(0);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f001 ffd8 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8001bd8:	f001 ffee 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2000      	movs	r0, #0
 8001be0:	f002 f912 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001be4:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001be6:	2301      	movs	r3, #1
 8001be8:	ca06      	ldmia	r2, {r1, r2}
 8001bea:	487a      	ldr	r0, [pc, #488]	; (8001dd4 <EC_out_of_range_fast+0x290>)
 8001bec:	f002 f8e6 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001bf0:	210a      	movs	r1, #10
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f002 f908 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001bf8:	4a75      	ldr	r2, [pc, #468]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	ca06      	ldmia	r2, {r1, r2}
 8001bfe:	4876      	ldr	r0, [pc, #472]	; (8001dd8 <EC_out_of_range_fast+0x294>)
 8001c00:	f002 f8dc 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001c04:	f001 ffd8 	bl	8003bb8 <ssd1306_UpdateScreen>
					//					conductivity=0;
					HAL_Delay(100);
 8001c08:	2064      	movs	r0, #100	; 0x64
 8001c0a:	f002 fc23 	bl	8004454 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3301      	adds	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	dddb      	ble.n	8001bd2 <EC_out_of_range_fast+0x8e>
				}
				//out of range
				//decrease sensitivity
			}
			if((final_average_cond>=3080)&& (SET100==1))
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <EC_out_of_range_fast+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	496a      	ldr	r1, [pc, #424]	; (8001dc8 <EC_out_of_range_fast+0x284>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa41 	bl	80010a8 <__aeabi_fcmpge>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02a      	beq.n	8001c82 <EC_out_of_range_fast+0x13e>
 8001c2c:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <EC_out_of_range_fast+0x29c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d126      	bne.n	8001c82 <EC_out_of_range_fast+0x13e>
			{
				for(int i=0;i<5;i++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e020      	b.n	8001c7c <EC_out_of_range_fast+0x138>
					ssd1306_Fill(0);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f001 ffa4 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8001c40:	f001 ffba 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2000      	movs	r0, #0
 8001c48:	f002 f8de 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001c4c:	4a60      	ldr	r2, [pc, #384]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001c4e:	2301      	movs	r3, #1
 8001c50:	ca06      	ldmia	r2, {r1, r2}
 8001c52:	4860      	ldr	r0, [pc, #384]	; (8001dd4 <EC_out_of_range_fast+0x290>)
 8001c54:	f002 f8b2 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001c58:	210a      	movs	r1, #10
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f002 f8d4 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001c60:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001c62:	2301      	movs	r3, #1
 8001c64:	ca06      	ldmia	r2, {r1, r2}
 8001c66:	485c      	ldr	r0, [pc, #368]	; (8001dd8 <EC_out_of_range_fast+0x294>)
 8001c68:	f002 f8a8 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001c6c:	f001 ffa4 	bl	8003bb8 <ssd1306_UpdateScreen>
					//					conductivity=0;
					HAL_Delay(100);
 8001c70:	2064      	movs	r0, #100	; 0x64
 8001c72:	f002 fbef 	bl	8004454 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	dddb      	ble.n	8001c3a <EC_out_of_range_fast+0xf6>
				}
				//out of range
				//decrease sensitivity
			}
			if((final_average_cond<=650) && (SET1000==1))
 8001c82:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <EC_out_of_range_fast+0x280>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4957      	ldr	r1, [pc, #348]	; (8001de4 <EC_out_of_range_fast+0x2a0>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fa03 	bl	8001094 <__aeabi_fcmple>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02a      	beq.n	8001cea <EC_out_of_range_fast+0x1a6>
 8001c94:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <EC_out_of_range_fast+0x2a4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d126      	bne.n	8001cea <EC_out_of_range_fast+0x1a6>
			{
				for(int i=0;i<5;i++){
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	e020      	b.n	8001ce4 <EC_out_of_range_fast+0x1a0>
					ssd1306_Fill(0);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f001 ff70 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8001ca8:	f001 ff86 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8001cac:	2100      	movs	r1, #0
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f002 f8aa 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001cb4:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	ca06      	ldmia	r2, {r1, r2}
 8001cba:	4846      	ldr	r0, [pc, #280]	; (8001dd4 <EC_out_of_range_fast+0x290>)
 8001cbc:	f002 f87e 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001cc0:	210a      	movs	r1, #10
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f002 f8a0 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001cc8:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001cca:	2301      	movs	r3, #1
 8001ccc:	ca06      	ldmia	r2, {r1, r2}
 8001cce:	4847      	ldr	r0, [pc, #284]	; (8001dec <EC_out_of_range_fast+0x2a8>)
 8001cd0:	f002 f874 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001cd4:	f001 ff70 	bl	8003bb8 <ssd1306_UpdateScreen>
					//					conductivity=0;
					HAL_Delay(100);
 8001cd8:	2064      	movs	r0, #100	; 0x64
 8001cda:	f002 fbbb 	bl	8004454 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	dddb      	ble.n	8001ca2 <EC_out_of_range_fast+0x15e>
				}
				//out of range
				//increase sensitivity
			}
			if((final_average_cond<=650) && (SET100==1))
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <EC_out_of_range_fast+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	493d      	ldr	r1, [pc, #244]	; (8001de4 <EC_out_of_range_fast+0x2a0>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f9cf 	bl	8001094 <__aeabi_fcmple>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02a      	beq.n	8001d52 <EC_out_of_range_fast+0x20e>
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <EC_out_of_range_fast+0x29c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d126      	bne.n	8001d52 <EC_out_of_range_fast+0x20e>
			{
				for(int i=0;i<5;i++){
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	e020      	b.n	8001d4c <EC_out_of_range_fast+0x208>
					ssd1306_Fill(0);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f001 ff3c 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8001d10:	f001 ff52 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8001d14:	2100      	movs	r1, #0
 8001d16:	2000      	movs	r0, #0
 8001d18:	f002 f876 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001d1e:	2301      	movs	r3, #1
 8001d20:	ca06      	ldmia	r2, {r1, r2}
 8001d22:	482c      	ldr	r0, [pc, #176]	; (8001dd4 <EC_out_of_range_fast+0x290>)
 8001d24:	f002 f84a 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001d28:	210a      	movs	r1, #10
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f002 f86c 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001d32:	2301      	movs	r3, #1
 8001d34:	ca06      	ldmia	r2, {r1, r2}
 8001d36:	482d      	ldr	r0, [pc, #180]	; (8001dec <EC_out_of_range_fast+0x2a8>)
 8001d38:	f002 f840 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001d3c:	f001 ff3c 	bl	8003bb8 <ssd1306_UpdateScreen>
//					conductivity=0;
					HAL_Delay(100);
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f002 fb87 	bl	8004454 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	dddb      	ble.n	8001d0a <EC_out_of_range_fast+0x1c6>
				}
				//out of range
				//increase sensitivity
			}
			if((final_average_cond<=650) && (SET10==1))
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <EC_out_of_range_fast+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <EC_out_of_range_fast+0x2a0>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f99b 	bl	8001094 <__aeabi_fcmple>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d100      	bne.n	8001d66 <EC_out_of_range_fast+0x222>
					HAL_Delay(100);
				}
				//out of range
				//increase sensitivity
			}
		}
 8001d64:	e02a      	b.n	8001dbc <EC_out_of_range_fast+0x278>
			if((final_average_cond<=650) && (SET10==1))
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <EC_out_of_range_fast+0x298>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d126      	bne.n	8001dbc <EC_out_of_range_fast+0x278>
				for(int i=0;i<5;i++){
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	e020      	b.n	8001db6 <EC_out_of_range_fast+0x272>
					ssd1306_Fill(0);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f001 ff07 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8001d7a:	f001 ff1d 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2000      	movs	r0, #0
 8001d82:	f002 f841 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001d88:	2301      	movs	r3, #1
 8001d8a:	ca06      	ldmia	r2, {r1, r2}
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <EC_out_of_range_fast+0x290>)
 8001d8e:	f002 f815 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,10);
 8001d92:	210a      	movs	r1, #10
 8001d94:	2000      	movs	r0, #0
 8001d96:	f002 f837 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <EC_out_of_range_fast+0x28c>)
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	ca06      	ldmia	r2, {r1, r2}
 8001da0:	4812      	ldr	r0, [pc, #72]	; (8001dec <EC_out_of_range_fast+0x2a8>)
 8001da2:	f002 f80b 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001da6:	f001 ff07 	bl	8003bb8 <ssd1306_UpdateScreen>
					HAL_Delay(100);
 8001daa:	2064      	movs	r0, #100	; 0x64
 8001dac:	f002 fb52 	bl	8004454 <HAL_Delay>
				for(int i=0;i<5;i++){
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	dddb      	ble.n	8001d74 <EC_out_of_range_fast+0x230>
		}
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000042c 	.word	0x2000042c
 8001dc8:	45408000 	.word	0x45408000
 8001dcc:	20000b64 	.word	0x20000b64
 8001dd0:	20000018 	.word	0x20000018
 8001dd4:	0800a3ec 	.word	0x0800a3ec
 8001dd8:	0800a400 	.word	0x0800a400
 8001ddc:	20000b65 	.word	0x20000b65
 8001de0:	20000b66 	.word	0x20000b66
 8001de4:	44228000 	.word	0x44228000
 8001de8:	20000b67 	.word	0x20000b67
 8001dec:	0800a410 	.word	0x0800a410

08001df0 <EC_out_of_range>:
	void EC_out_of_range()
	{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
		if((final_average_cond>=3080)&& (SET1==1))
 8001df6:	4ba1      	ldr	r3, [pc, #644]	; (800207c <EC_out_of_range+0x28c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	49a1      	ldr	r1, [pc, #644]	; (8002080 <EC_out_of_range+0x290>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f953 	bl	80010a8 <__aeabi_fcmpge>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d02b      	beq.n	8001e60 <EC_out_of_range+0x70>
 8001e08:	4b9e      	ldr	r3, [pc, #632]	; (8002084 <EC_out_of_range+0x294>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d127      	bne.n	8001e60 <EC_out_of_range+0x70>
		{
			for(int i=0;i<5;i++){
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e021      	b.n	8001e5a <EC_out_of_range+0x6a>
				ssd1306_Fill(0);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f001 feb6 	bl	8003b88 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001e1c:	f001 fecc 	bl	8003bb8 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001e20:	2100      	movs	r1, #0
 8001e22:	2000      	movs	r0, #0
 8001e24:	f001 fff0 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001e28:	4a97      	ldr	r2, [pc, #604]	; (8002088 <EC_out_of_range+0x298>)
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	ca06      	ldmia	r2, {r1, r2}
 8001e2e:	4897      	ldr	r0, [pc, #604]	; (800208c <EC_out_of_range+0x29c>)
 8001e30:	f001 ffc4 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001e34:	210a      	movs	r1, #10
 8001e36:	2000      	movs	r0, #0
 8001e38:	f001 ffe6 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001e3c:	4a92      	ldr	r2, [pc, #584]	; (8002088 <EC_out_of_range+0x298>)
 8001e3e:	2301      	movs	r3, #1
 8001e40:	ca06      	ldmia	r2, {r1, r2}
 8001e42:	4893      	ldr	r0, [pc, #588]	; (8002090 <EC_out_of_range+0x2a0>)
 8001e44:	f001 ffba 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001e48:	f001 feb6 	bl	8003bb8 <ssd1306_UpdateScreen>
				//					conductivity=0;
				HAL_Delay(1000);
 8001e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e50:	f002 fb00 	bl	8004454 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	ddda      	ble.n	8001e16 <EC_out_of_range+0x26>
			}
			//out of range
			//decrease sensitivity
		}
		if((final_average_cond>=3080)&& (SET10==1))
 8001e60:	4b86      	ldr	r3, [pc, #536]	; (800207c <EC_out_of_range+0x28c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4986      	ldr	r1, [pc, #536]	; (8002080 <EC_out_of_range+0x290>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f91e 	bl	80010a8 <__aeabi_fcmpge>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d02b      	beq.n	8001eca <EC_out_of_range+0xda>
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <EC_out_of_range+0x2a4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d127      	bne.n	8001eca <EC_out_of_range+0xda>
		{
			for(int i=0;i<5;i++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e021      	b.n	8001ec4 <EC_out_of_range+0xd4>
				ssd1306_Fill(0);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f001 fe81 	bl	8003b88 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001e86:	f001 fe97 	bl	8003bb8 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f001 ffbb 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001e92:	4a7d      	ldr	r2, [pc, #500]	; (8002088 <EC_out_of_range+0x298>)
 8001e94:	2301      	movs	r3, #1
 8001e96:	ca06      	ldmia	r2, {r1, r2}
 8001e98:	487c      	ldr	r0, [pc, #496]	; (800208c <EC_out_of_range+0x29c>)
 8001e9a:	f001 ff8f 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001e9e:	210a      	movs	r1, #10
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f001 ffb1 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001ea6:	4a78      	ldr	r2, [pc, #480]	; (8002088 <EC_out_of_range+0x298>)
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	ca06      	ldmia	r2, {r1, r2}
 8001eac:	4878      	ldr	r0, [pc, #480]	; (8002090 <EC_out_of_range+0x2a0>)
 8001eae:	f001 ff85 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001eb2:	f001 fe81 	bl	8003bb8 <ssd1306_UpdateScreen>
				//					conductivity=0;
				HAL_Delay(1000);
 8001eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eba:	f002 facb 	bl	8004454 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	ddda      	ble.n	8001e80 <EC_out_of_range+0x90>
			}
			//out of range
			//decrease sensitivity
		}
		if((final_average_cond>=3080)&& (SET100==1))
 8001eca:	4b6c      	ldr	r3, [pc, #432]	; (800207c <EC_out_of_range+0x28c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	496c      	ldr	r1, [pc, #432]	; (8002080 <EC_out_of_range+0x290>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f8e9 	bl	80010a8 <__aeabi_fcmpge>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <EC_out_of_range+0x144>
 8001edc:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <EC_out_of_range+0x2a8>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d127      	bne.n	8001f34 <EC_out_of_range+0x144>
		{
			for(int i=0;i<5;i++){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e021      	b.n	8001f2e <EC_out_of_range+0x13e>
				ssd1306_Fill(0);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f001 fe4c 	bl	8003b88 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001ef0:	f001 fe62 	bl	8003bb8 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f001 ff86 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001efc:	4a62      	ldr	r2, [pc, #392]	; (8002088 <EC_out_of_range+0x298>)
 8001efe:	2301      	movs	r3, #1
 8001f00:	ca06      	ldmia	r2, {r1, r2}
 8001f02:	4862      	ldr	r0, [pc, #392]	; (800208c <EC_out_of_range+0x29c>)
 8001f04:	f001 ff5a 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001f08:	210a      	movs	r1, #10
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f001 ff7c 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("DECREASE SENSE",Font_7x10,1);
 8001f10:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <EC_out_of_range+0x298>)
 8001f12:	2301      	movs	r3, #1
 8001f14:	ca06      	ldmia	r2, {r1, r2}
 8001f16:	485e      	ldr	r0, [pc, #376]	; (8002090 <EC_out_of_range+0x2a0>)
 8001f18:	f001 ff50 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001f1c:	f001 fe4c 	bl	8003bb8 <ssd1306_UpdateScreen>
				//					conductivity=0;
				HAL_Delay(1000);
 8001f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f24:	f002 fa96 	bl	8004454 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	ddda      	ble.n	8001eea <EC_out_of_range+0xfa>
			}
			//out of range
			//decrease sensitivity
		}
		if((final_average_cond<=650) && (SET1000==1))
 8001f34:	4b51      	ldr	r3, [pc, #324]	; (800207c <EC_out_of_range+0x28c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4958      	ldr	r1, [pc, #352]	; (800209c <EC_out_of_range+0x2ac>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f8aa 	bl	8001094 <__aeabi_fcmple>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02b      	beq.n	8001f9e <EC_out_of_range+0x1ae>
 8001f46:	4b56      	ldr	r3, [pc, #344]	; (80020a0 <EC_out_of_range+0x2b0>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d127      	bne.n	8001f9e <EC_out_of_range+0x1ae>
		{
			for(int i=0;i<5;i++){
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	e021      	b.n	8001f98 <EC_out_of_range+0x1a8>
				ssd1306_Fill(0);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f001 fe17 	bl	8003b88 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001f5a:	f001 fe2d 	bl	8003bb8 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2000      	movs	r0, #0
 8001f62:	f001 ff51 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001f66:	4a48      	ldr	r2, [pc, #288]	; (8002088 <EC_out_of_range+0x298>)
 8001f68:	2301      	movs	r3, #1
 8001f6a:	ca06      	ldmia	r2, {r1, r2}
 8001f6c:	4847      	ldr	r0, [pc, #284]	; (800208c <EC_out_of_range+0x29c>)
 8001f6e:	f001 ff25 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001f72:	210a      	movs	r1, #10
 8001f74:	2000      	movs	r0, #0
 8001f76:	f001 ff47 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001f7a:	4a43      	ldr	r2, [pc, #268]	; (8002088 <EC_out_of_range+0x298>)
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	ca06      	ldmia	r2, {r1, r2}
 8001f80:	4848      	ldr	r0, [pc, #288]	; (80020a4 <EC_out_of_range+0x2b4>)
 8001f82:	f001 ff1b 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001f86:	f001 fe17 	bl	8003bb8 <ssd1306_UpdateScreen>
				//					conductivity=0;
				HAL_Delay(1000);
 8001f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f8e:	f002 fa61 	bl	8004454 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	ddda      	ble.n	8001f54 <EC_out_of_range+0x164>
			}
			//out of range
			//increase sensitivity
		}
		if((final_average_cond<=650) && (SET100==1))
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <EC_out_of_range+0x28c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	493e      	ldr	r1, [pc, #248]	; (800209c <EC_out_of_range+0x2ac>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f875 	bl	8001094 <__aeabi_fcmple>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02b      	beq.n	8002008 <EC_out_of_range+0x218>
 8001fb0:	4b39      	ldr	r3, [pc, #228]	; (8002098 <EC_out_of_range+0x2a8>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d127      	bne.n	8002008 <EC_out_of_range+0x218>
		{
			for(int i=0;i<5;i++){
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	e021      	b.n	8002002 <EC_out_of_range+0x212>
				ssd1306_Fill(0);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f001 fde2 	bl	8003b88 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001fc4:	f001 fdf8 	bl	8003bb8 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f001 ff1c 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <EC_out_of_range+0x298>)
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	ca06      	ldmia	r2, {r1, r2}
 8001fd6:	482d      	ldr	r0, [pc, #180]	; (800208c <EC_out_of_range+0x29c>)
 8001fd8:	f001 fef0 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8001fdc:	210a      	movs	r1, #10
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f001 ff12 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <EC_out_of_range+0x298>)
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	ca06      	ldmia	r2, {r1, r2}
 8001fea:	482e      	ldr	r0, [pc, #184]	; (80020a4 <EC_out_of_range+0x2b4>)
 8001fec:	f001 fee6 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001ff0:	f001 fde2 	bl	8003bb8 <ssd1306_UpdateScreen>
				//					conductivity=0;
				HAL_Delay(1000);
 8001ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff8:	f002 fa2c 	bl	8004454 <HAL_Delay>
			for(int i=0;i<5;i++){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3301      	adds	r3, #1
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b04      	cmp	r3, #4
 8002006:	ddda      	ble.n	8001fbe <EC_out_of_range+0x1ce>
			}
			//out of range
			//increase sensitivity
		}
		if((final_average_cond<=650) && (SET10==1))
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <EC_out_of_range+0x28c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4923      	ldr	r1, [pc, #140]	; (800209c <EC_out_of_range+0x2ac>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f840 	bl	8001094 <__aeabi_fcmple>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d100      	bne.n	800201c <EC_out_of_range+0x22c>
				HAL_Delay(1000);
			}
			//out of range
			//increase sensitivity
		}
	}
 800201a:	e02b      	b.n	8002074 <EC_out_of_range+0x284>
		if((final_average_cond<=650) && (SET10==1))
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <EC_out_of_range+0x2a4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d127      	bne.n	8002074 <EC_out_of_range+0x284>
			for(int i=0;i<5;i++){
 8002024:	2300      	movs	r3, #0
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	e021      	b.n	800206e <EC_out_of_range+0x27e>
				ssd1306_Fill(0);
 800202a:	2000      	movs	r0, #0
 800202c:	f001 fdac 	bl	8003b88 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002030:	f001 fdc2 	bl	8003bb8 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(0, 0);
 8002034:	2100      	movs	r1, #0
 8002036:	2000      	movs	r0, #0
 8002038:	f001 fee6 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("EC OUT OF RANGE ",Font_7x10,1);
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <EC_out_of_range+0x298>)
 800203e:	2301      	movs	r3, #1
 8002040:	ca06      	ldmia	r2, {r1, r2}
 8002042:	4812      	ldr	r0, [pc, #72]	; (800208c <EC_out_of_range+0x29c>)
 8002044:	f001 feba 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_SetCursor(0,10);
 8002048:	210a      	movs	r1, #10
 800204a:	2000      	movs	r0, #0
 800204c:	f001 fedc 	bl	8003e08 <ssd1306_SetCursor>
				ssd1306_WriteString("INCREASE SENSE",Font_7x10,1);
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <EC_out_of_range+0x298>)
 8002052:	2301      	movs	r3, #1
 8002054:	ca06      	ldmia	r2, {r1, r2}
 8002056:	4813      	ldr	r0, [pc, #76]	; (80020a4 <EC_out_of_range+0x2b4>)
 8002058:	f001 feb0 	bl	8003dbc <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800205c:	f001 fdac 	bl	8003bb8 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8002060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002064:	f002 f9f6 	bl	8004454 <HAL_Delay>
			for(int i=0;i<5;i++){
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b04      	cmp	r3, #4
 8002072:	ddda      	ble.n	800202a <EC_out_of_range+0x23a>
	}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000042c 	.word	0x2000042c
 8002080:	45408000 	.word	0x45408000
 8002084:	20000b64 	.word	0x20000b64
 8002088:	20000018 	.word	0x20000018
 800208c:	0800a3ec 	.word	0x0800a3ec
 8002090:	0800a400 	.word	0x0800a400
 8002094:	20000b65 	.word	0x20000b65
 8002098:	20000b66 	.word	0x20000b66
 800209c:	44228000 	.word	0x44228000
 80020a0:	20000b67 	.word	0x20000b67
 80020a4:	0800a410 	.word	0x0800a410

080020a8 <Set_counterFREQ>:

	void Set_counterFREQ(){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==1)
 80020ac:	2104      	movs	r1, #4
 80020ae:	4827      	ldr	r0, [pc, #156]	; (800214c <Set_counterFREQ+0xa4>)
 80020b0:	f003 f8de 	bl	8005270 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d108      	bne.n	80020cc <Set_counterFREQ+0x24>
		{
			HAL_Delay(100);
 80020ba:	2064      	movs	r0, #100	; 0x64
 80020bc:	f002 f9ca 	bl	8004454 <HAL_Delay>
			counterFREQ++;
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <Set_counterFREQ+0xa8>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <Set_counterFREQ+0xa8>)
 80020ca:	801a      	strh	r2, [r3, #0]
		}
		if(counterFREQ==0){
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <Set_counterFREQ+0xa8>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d107      	bne.n	80020e4 <Set_counterFREQ+0x3c>
			delay_time = 10000; // 100HZ
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <Set_counterFREQ+0xac>)
 80020d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80020da:	601a      	str	r2, [r3, #0]
			delay_band = 5000; // Initial delay band in microseconds
 80020dc:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <Set_counterFREQ+0xb0>)
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	601a      	str	r2, [r3, #0]
		}
		if(counterFREQ==1){
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <Set_counterFREQ+0xa8>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <Set_counterFREQ+0x54>
			delay_time = 1000; // 1KHZ
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <Set_counterFREQ+0xac>)
 80020ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020f2:	601a      	str	r2, [r3, #0]
			delay_band = 500; // Initial delay band in microseconds
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <Set_counterFREQ+0xb0>)
 80020f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020fa:	601a      	str	r2, [r3, #0]
		}
		if(counterFREQ==2){
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <Set_counterFREQ+0xa8>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d105      	bne.n	8002110 <Set_counterFREQ+0x68>
			delay_time = 100; // 10KHZ delay time in microseconds
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <Set_counterFREQ+0xac>)
 8002106:	2264      	movs	r2, #100	; 0x64
 8002108:	601a      	str	r2, [r3, #0]
			delay_band = 5; // Initial delay band in microseconds
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <Set_counterFREQ+0xb0>)
 800210c:	2205      	movs	r2, #5
 800210e:	601a      	str	r2, [r3, #0]
		}
		if(counterFREQ==3){
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <Set_counterFREQ+0xa8>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d105      	bne.n	8002124 <Set_counterFREQ+0x7c>
			delay_time = 20; // 100KHZ Initial delay time in microseconds
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <Set_counterFREQ+0xac>)
 800211a:	2214      	movs	r2, #20
 800211c:	601a      	str	r2, [r3, #0]
			delay_band = 1; // Initial delay band in microseconds
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <Set_counterFREQ+0xb0>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
		}
		if(counterFREQ==4){
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <Set_counterFREQ+0xa8>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d105      	bne.n	8002138 <Set_counterFREQ+0x90>
			delay_time = 7; // 100KHZ Initial delay time in microseconds
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <Set_counterFREQ+0xac>)
 800212e:	2207      	movs	r2, #7
 8002130:	601a      	str	r2, [r3, #0]
			delay_band = 1; // Initial delay band in microseconds
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <Set_counterFREQ+0xb0>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
//		}
//		if(counterFREQ==7){
//			delay_time = 6; // Initial delay time in microseconds
//			delay_band = 1; // Initial delay band in microseconds
//		}
		if(counterFREQ>4){
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <Set_counterFREQ+0xa8>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d902      	bls.n	8002146 <Set_counterFREQ+0x9e>
			counterFREQ=0;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <Set_counterFREQ+0xa8>)
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
		}
	}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40011000 	.word	0x40011000
 8002150:	20000420 	.word	0x20000420
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <Set_SENSE>:

	void Set_SENSE(){
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
		if (HAL_GPIO_ReadPin(SET_1_GPIO_Port, SET_1_Pin) == 1) {
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	4856      	ldr	r0, [pc, #344]	; (80022bc <Set_SENSE+0x160>)
 8002164:	f003 f884 	bl	8005270 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d123      	bne.n	80021b6 <Set_SENSE+0x5a>
			SET1=1;
 800216e:	4b54      	ldr	r3, [pc, #336]	; (80022c0 <Set_SENSE+0x164>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
			SET10=0;
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <Set_SENSE+0x168>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
			SET100=0;
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <Set_SENSE+0x16c>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
			SET1000=0;
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <Set_SENSE+0x170>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
			moist_offset=0;
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <Set_SENSE+0x174>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
			MIN_VOLTAGE = 1630;
 800218e:	4b51      	ldr	r3, [pc, #324]	; (80022d4 <Set_SENSE+0x178>)
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <Set_SENSE+0x17c>)
 8002192:	601a      	str	r2, [r3, #0]
			MAX_VOLTAGE = 2467;
 8002194:	4b51      	ldr	r3, [pc, #324]	; (80022dc <Set_SENSE+0x180>)
 8002196:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <Set_SENSE+0x184>)
 8002198:	601a      	str	r2, [r3, #0]
			ssd1306_SetCursor(0, 41);
 800219a:	2129      	movs	r1, #41	; 0x29
 800219c:	2000      	movs	r0, #0
 800219e:	f001 fe33 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferSET1, "SENSE = x1     ");
 80021a2:	4950      	ldr	r1, [pc, #320]	; (80022e4 <Set_SENSE+0x188>)
 80021a4:	4850      	ldr	r0, [pc, #320]	; (80022e8 <Set_SENSE+0x18c>)
 80021a6:	f005 ff57 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferSET1, Font_6x8, 1);
 80021aa:	4a50      	ldr	r2, [pc, #320]	; (80022ec <Set_SENSE+0x190>)
 80021ac:	2301      	movs	r3, #1
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	484d      	ldr	r0, [pc, #308]	; (80022e8 <Set_SENSE+0x18c>)
 80021b2:	f001 fe03 	bl	8003dbc <ssd1306_WriteString>

		}

		if (HAL_GPIO_ReadPin(SET_10_GPIO_Port, SET_10_Pin) == 1) {
 80021b6:	2104      	movs	r1, #4
 80021b8:	484d      	ldr	r0, [pc, #308]	; (80022f0 <Set_SENSE+0x194>)
 80021ba:	f003 f859 	bl	8005270 <HAL_GPIO_ReadPin>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d123      	bne.n	800220c <Set_SENSE+0xb0>
			SET1=0;
 80021c4:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <Set_SENSE+0x164>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
			SET10=1;
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <Set_SENSE+0x168>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
			SET100=0;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <Set_SENSE+0x16c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
			SET1000=0;
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <Set_SENSE+0x170>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
			moist_offset=0;
 80021dc:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <Set_SENSE+0x174>)
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
			MIN_VOLTAGE = 1630;
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <Set_SENSE+0x178>)
 80021e6:	4a3c      	ldr	r2, [pc, #240]	; (80022d8 <Set_SENSE+0x17c>)
 80021e8:	601a      	str	r2, [r3, #0]
			MAX_VOLTAGE = 2467;
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <Set_SENSE+0x180>)
 80021ec:	4a3c      	ldr	r2, [pc, #240]	; (80022e0 <Set_SENSE+0x184>)
 80021ee:	601a      	str	r2, [r3, #0]
			ssd1306_SetCursor(0, 41);
 80021f0:	2129      	movs	r1, #41	; 0x29
 80021f2:	2000      	movs	r0, #0
 80021f4:	f001 fe08 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferSET10, "SENSE = x10     ");
 80021f8:	493e      	ldr	r1, [pc, #248]	; (80022f4 <Set_SENSE+0x198>)
 80021fa:	483f      	ldr	r0, [pc, #252]	; (80022f8 <Set_SENSE+0x19c>)
 80021fc:	f005 ff2c 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferSET10, Font_6x8, 1);
 8002200:	4a3a      	ldr	r2, [pc, #232]	; (80022ec <Set_SENSE+0x190>)
 8002202:	2301      	movs	r3, #1
 8002204:	ca06      	ldmia	r2, {r1, r2}
 8002206:	483c      	ldr	r0, [pc, #240]	; (80022f8 <Set_SENSE+0x19c>)
 8002208:	f001 fdd8 	bl	8003dbc <ssd1306_WriteString>

		}

		if (HAL_GPIO_ReadPin(SET_100_GPIO_Port, SET_100_Pin) == 1) {
 800220c:	2102      	movs	r1, #2
 800220e:	4838      	ldr	r0, [pc, #224]	; (80022f0 <Set_SENSE+0x194>)
 8002210:	f003 f82e 	bl	8005270 <HAL_GPIO_ReadPin>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d123      	bne.n	8002262 <Set_SENSE+0x106>
			SET1=0;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <Set_SENSE+0x164>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
			SET10=0;
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <Set_SENSE+0x168>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
			SET100=1;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <Set_SENSE+0x16c>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
			SET1000=0;
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <Set_SENSE+0x170>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
			moist_offset=0;
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <Set_SENSE+0x174>)
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
			MIN_VOLTAGE = 1630;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <Set_SENSE+0x178>)
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <Set_SENSE+0x17c>)
 800223e:	601a      	str	r2, [r3, #0]
			MAX_VOLTAGE = 2467;
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <Set_SENSE+0x180>)
 8002242:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <Set_SENSE+0x184>)
 8002244:	601a      	str	r2, [r3, #0]
			ssd1306_SetCursor(0, 41);
 8002246:	2129      	movs	r1, #41	; 0x29
 8002248:	2000      	movs	r0, #0
 800224a:	f001 fddd 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferSET100, "SENSE = x100     ");
 800224e:	492b      	ldr	r1, [pc, #172]	; (80022fc <Set_SENSE+0x1a0>)
 8002250:	482b      	ldr	r0, [pc, #172]	; (8002300 <Set_SENSE+0x1a4>)
 8002252:	f005 ff01 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferSET100, Font_6x8, 1);
 8002256:	4a25      	ldr	r2, [pc, #148]	; (80022ec <Set_SENSE+0x190>)
 8002258:	2301      	movs	r3, #1
 800225a:	ca06      	ldmia	r2, {r1, r2}
 800225c:	4828      	ldr	r0, [pc, #160]	; (8002300 <Set_SENSE+0x1a4>)
 800225e:	f001 fdad 	bl	8003dbc <ssd1306_WriteString>

		}

		if (HAL_GPIO_ReadPin(SET_1000_GPIO_Port, SET_1000_Pin) == 1) {
 8002262:	2101      	movs	r1, #1
 8002264:	4822      	ldr	r0, [pc, #136]	; (80022f0 <Set_SENSE+0x194>)
 8002266:	f003 f803 	bl	8005270 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d123      	bne.n	80022b8 <Set_SENSE+0x15c>
			SET1=0;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <Set_SENSE+0x164>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
			SET10=0;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <Set_SENSE+0x168>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			SET100=0;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <Set_SENSE+0x16c>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
			SET1000=1;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <Set_SENSE+0x170>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
			moist_offset=0;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <Set_SENSE+0x174>)
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
			MIN_VOLTAGE = 1630;
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <Set_SENSE+0x178>)
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <Set_SENSE+0x17c>)
 8002294:	601a      	str	r2, [r3, #0]
			MAX_VOLTAGE = 2467;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <Set_SENSE+0x180>)
 8002298:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <Set_SENSE+0x184>)
 800229a:	601a      	str	r2, [r3, #0]
			ssd1306_SetCursor(0, 41);
 800229c:	2129      	movs	r1, #41	; 0x29
 800229e:	2000      	movs	r0, #0
 80022a0:	f001 fdb2 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferSET1000, "SENSE = x1000     ");
 80022a4:	4917      	ldr	r1, [pc, #92]	; (8002304 <Set_SENSE+0x1a8>)
 80022a6:	4818      	ldr	r0, [pc, #96]	; (8002308 <Set_SENSE+0x1ac>)
 80022a8:	f005 fed6 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferSET1000, Font_6x8, 1);
 80022ac:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <Set_SENSE+0x190>)
 80022ae:	2301      	movs	r3, #1
 80022b0:	ca06      	ldmia	r2, {r1, r2}
 80022b2:	4815      	ldr	r0, [pc, #84]	; (8002308 <Set_SENSE+0x1ac>)
 80022b4:	f001 fd82 	bl	8003dbc <ssd1306_WriteString>

		}
	}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40011000 	.word	0x40011000
 80022c0:	20000b64 	.word	0x20000b64
 80022c4:	20000b65 	.word	0x20000b65
 80022c8:	20000b66 	.word	0x20000b66
 80022cc:	20000b67 	.word	0x20000b67
 80022d0:	20000424 	.word	0x20000424
 80022d4:	20000008 	.word	0x20000008
 80022d8:	44cbc000 	.word	0x44cbc000
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	451a3000 	.word	0x451a3000
 80022e4:	0800a420 	.word	0x0800a420
 80022e8:	2000077c 	.word	0x2000077c
 80022ec:	20000010 	.word	0x20000010
 80022f0:	40010c00 	.word	0x40010c00
 80022f4:	0800a430 	.word	0x0800a430
 80022f8:	20000844 	.word	0x20000844
 80022fc:	0800a444 	.word	0x0800a444
 8002300:	2000090c 	.word	0x2000090c
 8002304:	0800a458 	.word	0x0800a458
 8002308:	200009d4 	.word	0x200009d4

0800230c <Set_counterFREQ_ssd1306>:

	void Set_counterFREQ_ssd1306(){
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
		if (counterFREQ==0){
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <Set_counterFREQ_ssd1306+0xbc>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10d      	bne.n	8002334 <Set_counterFREQ_ssd1306+0x28>
			ssd1306_SetCursor(0,51);
 8002318:	2133      	movs	r1, #51	; 0x33
 800231a:	2000      	movs	r0, #0
 800231c:	f001 fd74 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferFREQ,"Frequency:0 100Hz   ");
 8002320:	492a      	ldr	r1, [pc, #168]	; (80023cc <Set_counterFREQ_ssd1306+0xc0>)
 8002322:	482b      	ldr	r0, [pc, #172]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 8002324:	f005 fe98 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <Set_counterFREQ_ssd1306+0xc8>)
 800232a:	2301      	movs	r3, #1
 800232c:	ca06      	ldmia	r2, {r1, r2}
 800232e:	4828      	ldr	r0, [pc, #160]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 8002330:	f001 fd44 	bl	8003dbc <ssd1306_WriteString>
		}
		if (counterFREQ==1){
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <Set_counterFREQ_ssd1306+0xbc>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10d      	bne.n	8002358 <Set_counterFREQ_ssd1306+0x4c>
			ssd1306_SetCursor(0,51);
 800233c:	2133      	movs	r1, #51	; 0x33
 800233e:	2000      	movs	r0, #0
 8002340:	f001 fd62 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferFREQ,"Frequency:1 1KHz  ");
 8002344:	4924      	ldr	r1, [pc, #144]	; (80023d8 <Set_counterFREQ_ssd1306+0xcc>)
 8002346:	4822      	ldr	r0, [pc, #136]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 8002348:	f005 fe86 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 800234c:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <Set_counterFREQ_ssd1306+0xc8>)
 800234e:	2301      	movs	r3, #1
 8002350:	ca06      	ldmia	r2, {r1, r2}
 8002352:	481f      	ldr	r0, [pc, #124]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 8002354:	f001 fd32 	bl	8003dbc <ssd1306_WriteString>
		}
		if (counterFREQ==2){
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <Set_counterFREQ_ssd1306+0xbc>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d10d      	bne.n	800237c <Set_counterFREQ_ssd1306+0x70>
			ssd1306_SetCursor(0,51);
 8002360:	2133      	movs	r1, #51	; 0x33
 8002362:	2000      	movs	r0, #0
 8002364:	f001 fd50 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferFREQ,"Frequency:2 10KHz  ");
 8002368:	491c      	ldr	r1, [pc, #112]	; (80023dc <Set_counterFREQ_ssd1306+0xd0>)
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 800236c:	f005 fe74 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <Set_counterFREQ_ssd1306+0xc8>)
 8002372:	2301      	movs	r3, #1
 8002374:	ca06      	ldmia	r2, {r1, r2}
 8002376:	4816      	ldr	r0, [pc, #88]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 8002378:	f001 fd20 	bl	8003dbc <ssd1306_WriteString>
		}
		if (counterFREQ==3){
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <Set_counterFREQ_ssd1306+0xbc>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d10d      	bne.n	80023a0 <Set_counterFREQ_ssd1306+0x94>
			ssd1306_SetCursor(0,51);
 8002384:	2133      	movs	r1, #51	; 0x33
 8002386:	2000      	movs	r0, #0
 8002388:	f001 fd3e 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferFREQ,"Frequency:3 50KHz  ");
 800238c:	4914      	ldr	r1, [pc, #80]	; (80023e0 <Set_counterFREQ_ssd1306+0xd4>)
 800238e:	4810      	ldr	r0, [pc, #64]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 8002390:	f005 fe62 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <Set_counterFREQ_ssd1306+0xc8>)
 8002396:	2301      	movs	r3, #1
 8002398:	ca06      	ldmia	r2, {r1, r2}
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 800239c:	f001 fd0e 	bl	8003dbc <ssd1306_WriteString>
		}
		if (counterFREQ==4){
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <Set_counterFREQ_ssd1306+0xbc>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d10d      	bne.n	80023c4 <Set_counterFREQ_ssd1306+0xb8>
			ssd1306_SetCursor(0,51);
 80023a8:	2133      	movs	r1, #51	; 0x33
 80023aa:	2000      	movs	r0, #0
 80023ac:	f001 fd2c 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferFREQ,"Frequency:4 100KHz  ");
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <Set_counterFREQ_ssd1306+0xd8>)
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 80023b4:	f005 fe50 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <Set_counterFREQ_ssd1306+0xc8>)
 80023ba:	2301      	movs	r3, #1
 80023bc:	ca06      	ldmia	r2, {r1, r2}
 80023be:	4804      	ldr	r0, [pc, #16]	; (80023d0 <Set_counterFREQ_ssd1306+0xc4>)
 80023c0:	f001 fcfc 	bl	8003dbc <ssd1306_WriteString>
//		if (counterFREQ==7){
//			ssd1306_SetCursor(0,51);
//			sprintf(bufferFREQ,"Frequency:7 200KHz  ");
//			ssd1306_WriteString(bufferFREQ, Font_6x8, 1);
//		}
	}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000420 	.word	0x20000420
 80023cc:	0800a46c 	.word	0x0800a46c
 80023d0:	20000a9c 	.word	0x20000a9c
 80023d4:	20000010 	.word	0x20000010
 80023d8:	0800a484 	.word	0x0800a484
 80023dc:	0800a498 	.word	0x0800a498
 80023e0:	0800a4ac 	.word	0x0800a4ac
 80023e4:	0800a4c0 	.word	0x0800a4c0

080023e8 <send_data>:

	void send_data() {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af02      	add	r7, sp, #8
	    // Format the data
	    sprintf(bufferConduct, "R %.fmV %.f Ohm", final_average_cond, resistance);
 80023ee:	4b9f      	ldr	r3, [pc, #636]	; (800266c <send_data+0x284>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f818 	bl	8000428 <__aeabi_f2d>
 80023f8:	4604      	mov	r4, r0
 80023fa:	460d      	mov	r5, r1
 80023fc:	4b9c      	ldr	r3, [pc, #624]	; (8002670 <send_data+0x288>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f811 	bl	8000428 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	e9cd 2300 	strd	r2, r3, [sp]
 800240e:	4622      	mov	r2, r4
 8002410:	462b      	mov	r3, r5
 8002412:	4998      	ldr	r1, [pc, #608]	; (8002674 <send_data+0x28c>)
 8002414:	4898      	ldr	r0, [pc, #608]	; (8002678 <send_data+0x290>)
 8002416:	f005 fe1f 	bl	8008058 <siprintf>
	    sprintf(bufferMoist, "Moist %.1fV %.1f%%", av_moist_sum, percentage_moist2);
 800241a:	4b98      	ldr	r3, [pc, #608]	; (800267c <send_data+0x294>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f802 	bl	8000428 <__aeabi_f2d>
 8002424:	4604      	mov	r4, r0
 8002426:	460d      	mov	r5, r1
 8002428:	4b95      	ldr	r3, [pc, #596]	; (8002680 <send_data+0x298>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fd fffb 	bl	8000428 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	e9cd 2300 	strd	r2, r3, [sp]
 800243a:	4622      	mov	r2, r4
 800243c:	462b      	mov	r3, r5
 800243e:	4991      	ldr	r1, [pc, #580]	; (8002684 <send_data+0x29c>)
 8002440:	4891      	ldr	r0, [pc, #580]	; (8002688 <send_data+0x2a0>)
 8002442:	f005 fe09 	bl	8008058 <siprintf>
	    sprintf(bufferDs18b20, "ds18b20 %.2fC", Temp);
 8002446:	4b91      	ldr	r3, [pc, #580]	; (800268c <send_data+0x2a4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd ffec 	bl	8000428 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	498e      	ldr	r1, [pc, #568]	; (8002690 <send_data+0x2a8>)
 8002456:	488f      	ldr	r0, [pc, #572]	; (8002694 <send_data+0x2ac>)
 8002458:	f005 fdfe 	bl	8008058 <siprintf>

	    // Choose the correct buffer for conductivity based on settings
	    if (SET1 == 1 || SET10 == 1) {
 800245c:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <send_data+0x2b0>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d003      	beq.n	800246c <send_data+0x84>
 8002464:	4b8d      	ldr	r3, [pc, #564]	; (800269c <send_data+0x2b4>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10b      	bne.n	8002484 <send_data+0x9c>
	        sprintf(bufferConduct2, "EC %.3f mS/cm", conductivity);
 800246c:	4b8c      	ldr	r3, [pc, #560]	; (80026a0 <send_data+0x2b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd ffd9 	bl	8000428 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	498a      	ldr	r1, [pc, #552]	; (80026a4 <send_data+0x2bc>)
 800247c:	488a      	ldr	r0, [pc, #552]	; (80026a8 <send_data+0x2c0>)
 800247e:	f005 fdeb 	bl	8008058 <siprintf>
 8002482:	e012      	b.n	80024aa <send_data+0xc2>
	    } else if (SET100 == 1 || SET1000 == 1) {
 8002484:	4b89      	ldr	r3, [pc, #548]	; (80026ac <send_data+0x2c4>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d003      	beq.n	8002494 <send_data+0xac>
 800248c:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <send_data+0x2c8>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10a      	bne.n	80024aa <send_data+0xc2>
	        sprintf(bufferConduct2, "EC %.3f uS/cm", conductivity);
 8002494:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <send_data+0x2b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd ffc5 	bl	8000428 <__aeabi_f2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4984      	ldr	r1, [pc, #528]	; (80026b4 <send_data+0x2cc>)
 80024a4:	4880      	ldr	r0, [pc, #512]	; (80026a8 <send_data+0x2c0>)
 80024a6:	f005 fdd7 	bl	8008058 <siprintf>
	    }

	    // Format the SENSE settings
	    if (HAL_GPIO_ReadPin(SET_1_GPIO_Port, SET_1_Pin) == 1) {
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	4882      	ldr	r0, [pc, #520]	; (80026b8 <send_data+0x2d0>)
 80024ae:	f002 fedf 	bl	8005270 <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d104      	bne.n	80024c2 <send_data+0xda>
	        sprintf(bufferSET1, "SENSE = x1");
 80024b8:	4980      	ldr	r1, [pc, #512]	; (80026bc <send_data+0x2d4>)
 80024ba:	4881      	ldr	r0, [pc, #516]	; (80026c0 <send_data+0x2d8>)
 80024bc:	f005 fdcc 	bl	8008058 <siprintf>
 80024c0:	e022      	b.n	8002508 <send_data+0x120>
	    } else if (HAL_GPIO_ReadPin(SET_10_GPIO_Port, SET_10_Pin) == 1) {
 80024c2:	2104      	movs	r1, #4
 80024c4:	487f      	ldr	r0, [pc, #508]	; (80026c4 <send_data+0x2dc>)
 80024c6:	f002 fed3 	bl	8005270 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d104      	bne.n	80024da <send_data+0xf2>
	        sprintf(bufferSET10, "SENSE = x10");
 80024d0:	497d      	ldr	r1, [pc, #500]	; (80026c8 <send_data+0x2e0>)
 80024d2:	487e      	ldr	r0, [pc, #504]	; (80026cc <send_data+0x2e4>)
 80024d4:	f005 fdc0 	bl	8008058 <siprintf>
 80024d8:	e016      	b.n	8002508 <send_data+0x120>
	    } else if (HAL_GPIO_ReadPin(SET_100_GPIO_Port, SET_100_Pin) == 1) {
 80024da:	2102      	movs	r1, #2
 80024dc:	4879      	ldr	r0, [pc, #484]	; (80026c4 <send_data+0x2dc>)
 80024de:	f002 fec7 	bl	8005270 <HAL_GPIO_ReadPin>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d104      	bne.n	80024f2 <send_data+0x10a>
	        sprintf(bufferSET100, "SENSE = x100");
 80024e8:	4979      	ldr	r1, [pc, #484]	; (80026d0 <send_data+0x2e8>)
 80024ea:	487a      	ldr	r0, [pc, #488]	; (80026d4 <send_data+0x2ec>)
 80024ec:	f005 fdb4 	bl	8008058 <siprintf>
 80024f0:	e00a      	b.n	8002508 <send_data+0x120>
	    } else if (HAL_GPIO_ReadPin(SET_1000_GPIO_Port, SET_1000_Pin) == 1) {
 80024f2:	2101      	movs	r1, #1
 80024f4:	4873      	ldr	r0, [pc, #460]	; (80026c4 <send_data+0x2dc>)
 80024f6:	f002 febb 	bl	8005270 <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d103      	bne.n	8002508 <send_data+0x120>
	        sprintf(bufferSET1000, "SENSE = x1000");
 8002500:	4975      	ldr	r1, [pc, #468]	; (80026d8 <send_data+0x2f0>)
 8002502:	4876      	ldr	r0, [pc, #472]	; (80026dc <send_data+0x2f4>)
 8002504:	f005 fda8 	bl	8008058 <siprintf>
	    }

	    // Format the frequency setting
	    if (counterFREQ == 0) {
 8002508:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <send_data+0x2f8>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <send_data+0x132>
	        sprintf(bufferFREQ, "Frequency: 0 100Hz");
 8002510:	4974      	ldr	r1, [pc, #464]	; (80026e4 <send_data+0x2fc>)
 8002512:	4875      	ldr	r0, [pc, #468]	; (80026e8 <send_data+0x300>)
 8002514:	f005 fda0 	bl	8008058 <siprintf>
 8002518:	e022      	b.n	8002560 <send_data+0x178>
	    } else if (counterFREQ == 1) {
 800251a:	4b71      	ldr	r3, [pc, #452]	; (80026e0 <send_data+0x2f8>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d104      	bne.n	800252c <send_data+0x144>
	        sprintf(bufferFREQ, "Frequency: 1 1KHz");
 8002522:	4972      	ldr	r1, [pc, #456]	; (80026ec <send_data+0x304>)
 8002524:	4870      	ldr	r0, [pc, #448]	; (80026e8 <send_data+0x300>)
 8002526:	f005 fd97 	bl	8008058 <siprintf>
 800252a:	e019      	b.n	8002560 <send_data+0x178>
	    } else if (counterFREQ == 2) {
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <send_data+0x2f8>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d104      	bne.n	800253e <send_data+0x156>
	        sprintf(bufferFREQ, "Frequency: 2 10KHz");
 8002534:	496e      	ldr	r1, [pc, #440]	; (80026f0 <send_data+0x308>)
 8002536:	486c      	ldr	r0, [pc, #432]	; (80026e8 <send_data+0x300>)
 8002538:	f005 fd8e 	bl	8008058 <siprintf>
 800253c:	e010      	b.n	8002560 <send_data+0x178>
	    } else if (counterFREQ == 3) {
 800253e:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <send_data+0x2f8>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d104      	bne.n	8002550 <send_data+0x168>
	        sprintf(bufferFREQ, "Frequency: 3 50KHz");
 8002546:	496b      	ldr	r1, [pc, #428]	; (80026f4 <send_data+0x30c>)
 8002548:	4867      	ldr	r0, [pc, #412]	; (80026e8 <send_data+0x300>)
 800254a:	f005 fd85 	bl	8008058 <siprintf>
 800254e:	e007      	b.n	8002560 <send_data+0x178>
	    } else if (counterFREQ == 4) {
 8002550:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <send_data+0x2f8>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d103      	bne.n	8002560 <send_data+0x178>
	        sprintf(bufferFREQ, "Frequency: 4 100KHz");
 8002558:	4967      	ldr	r1, [pc, #412]	; (80026f8 <send_data+0x310>)
 800255a:	4863      	ldr	r0, [pc, #396]	; (80026e8 <send_data+0x300>)
 800255c:	f005 fd7c 	bl	8008058 <siprintf>
	    }

	    // Transmit the data over SPI
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferConduct, strlen(bufferConduct), HAL_MAX_DELAY);
 8002560:	4845      	ldr	r0, [pc, #276]	; (8002678 <send_data+0x290>)
 8002562:	f7fd fdf5 	bl	8000150 <strlen>
 8002566:	4603      	mov	r3, r0
 8002568:	b29a      	uxth	r2, r3
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	4942      	ldr	r1, [pc, #264]	; (8002678 <send_data+0x290>)
 8002570:	4862      	ldr	r0, [pc, #392]	; (80026fc <send_data+0x314>)
 8002572:	f004 f959 	bl	8006828 <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferMoist, strlen(bufferMoist), HAL_MAX_DELAY);
 8002576:	4844      	ldr	r0, [pc, #272]	; (8002688 <send_data+0x2a0>)
 8002578:	f7fd fdea 	bl	8000150 <strlen>
 800257c:	4603      	mov	r3, r0
 800257e:	b29a      	uxth	r2, r3
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	4940      	ldr	r1, [pc, #256]	; (8002688 <send_data+0x2a0>)
 8002586:	485d      	ldr	r0, [pc, #372]	; (80026fc <send_data+0x314>)
 8002588:	f004 f94e 	bl	8006828 <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferDs18b20, strlen(bufferDs18b20), HAL_MAX_DELAY);
 800258c:	4841      	ldr	r0, [pc, #260]	; (8002694 <send_data+0x2ac>)
 800258e:	f7fd fddf 	bl	8000150 <strlen>
 8002592:	4603      	mov	r3, r0
 8002594:	b29a      	uxth	r2, r3
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	493e      	ldr	r1, [pc, #248]	; (8002694 <send_data+0x2ac>)
 800259c:	4857      	ldr	r0, [pc, #348]	; (80026fc <send_data+0x314>)
 800259e:	f004 f943 	bl	8006828 <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferConduct2, strlen(bufferConduct2), HAL_MAX_DELAY);
 80025a2:	4841      	ldr	r0, [pc, #260]	; (80026a8 <send_data+0x2c0>)
 80025a4:	f7fd fdd4 	bl	8000150 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	493d      	ldr	r1, [pc, #244]	; (80026a8 <send_data+0x2c0>)
 80025b2:	4852      	ldr	r0, [pc, #328]	; (80026fc <send_data+0x314>)
 80025b4:	f004 f938 	bl	8006828 <HAL_SPI_Transmit>

	    if (HAL_GPIO_ReadPin(SET_1_GPIO_Port, SET_1_Pin) == 1) {
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	483f      	ldr	r0, [pc, #252]	; (80026b8 <send_data+0x2d0>)
 80025bc:	f002 fe58 	bl	8005270 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10b      	bne.n	80025de <send_data+0x1f6>
	        HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferSET1, strlen(bufferSET1), HAL_MAX_DELAY);
 80025c6:	483e      	ldr	r0, [pc, #248]	; (80026c0 <send_data+0x2d8>)
 80025c8:	f7fd fdc2 	bl	8000150 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	493a      	ldr	r1, [pc, #232]	; (80026c0 <send_data+0x2d8>)
 80025d6:	4849      	ldr	r0, [pc, #292]	; (80026fc <send_data+0x314>)
 80025d8:	f004 f926 	bl	8006828 <HAL_SPI_Transmit>
 80025dc:	e037      	b.n	800264e <send_data+0x266>
	    } else if (HAL_GPIO_ReadPin(SET_10_GPIO_Port, SET_10_Pin) == 1) {
 80025de:	2104      	movs	r1, #4
 80025e0:	4838      	ldr	r0, [pc, #224]	; (80026c4 <send_data+0x2dc>)
 80025e2:	f002 fe45 	bl	8005270 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10b      	bne.n	8002604 <send_data+0x21c>
	        HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferSET10, strlen(bufferSET10), HAL_MAX_DELAY);
 80025ec:	4837      	ldr	r0, [pc, #220]	; (80026cc <send_data+0x2e4>)
 80025ee:	f7fd fdaf 	bl	8000150 <strlen>
 80025f2:	4603      	mov	r3, r0
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	4934      	ldr	r1, [pc, #208]	; (80026cc <send_data+0x2e4>)
 80025fc:	483f      	ldr	r0, [pc, #252]	; (80026fc <send_data+0x314>)
 80025fe:	f004 f913 	bl	8006828 <HAL_SPI_Transmit>
 8002602:	e024      	b.n	800264e <send_data+0x266>
	    } else if (HAL_GPIO_ReadPin(SET_100_GPIO_Port, SET_100_Pin) == 1) {
 8002604:	2102      	movs	r1, #2
 8002606:	482f      	ldr	r0, [pc, #188]	; (80026c4 <send_data+0x2dc>)
 8002608:	f002 fe32 	bl	8005270 <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10b      	bne.n	800262a <send_data+0x242>
	        HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferSET100, strlen(bufferSET100), HAL_MAX_DELAY);
 8002612:	4830      	ldr	r0, [pc, #192]	; (80026d4 <send_data+0x2ec>)
 8002614:	f7fd fd9c 	bl	8000150 <strlen>
 8002618:	4603      	mov	r3, r0
 800261a:	b29a      	uxth	r2, r3
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	492c      	ldr	r1, [pc, #176]	; (80026d4 <send_data+0x2ec>)
 8002622:	4836      	ldr	r0, [pc, #216]	; (80026fc <send_data+0x314>)
 8002624:	f004 f900 	bl	8006828 <HAL_SPI_Transmit>
 8002628:	e011      	b.n	800264e <send_data+0x266>
	    } else if (HAL_GPIO_ReadPin(SET_1000_GPIO_Port, SET_1000_Pin) == 1) {
 800262a:	2101      	movs	r1, #1
 800262c:	4825      	ldr	r0, [pc, #148]	; (80026c4 <send_data+0x2dc>)
 800262e:	f002 fe1f 	bl	8005270 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10a      	bne.n	800264e <send_data+0x266>
	        HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferSET1000, strlen(bufferSET1000), HAL_MAX_DELAY);
 8002638:	4828      	ldr	r0, [pc, #160]	; (80026dc <send_data+0x2f4>)
 800263a:	f7fd fd89 	bl	8000150 <strlen>
 800263e:	4603      	mov	r3, r0
 8002640:	b29a      	uxth	r2, r3
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	4925      	ldr	r1, [pc, #148]	; (80026dc <send_data+0x2f4>)
 8002648:	482c      	ldr	r0, [pc, #176]	; (80026fc <send_data+0x314>)
 800264a:	f004 f8ed 	bl	8006828 <HAL_SPI_Transmit>
	    }

	    HAL_SPI_Transmit(&hspi1, (uint8_t*)bufferFREQ, strlen(bufferFREQ), HAL_MAX_DELAY);
 800264e:	4826      	ldr	r0, [pc, #152]	; (80026e8 <send_data+0x300>)
 8002650:	f7fd fd7e 	bl	8000150 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	4922      	ldr	r1, [pc, #136]	; (80026e8 <send_data+0x300>)
 800265e:	4827      	ldr	r0, [pc, #156]	; (80026fc <send_data+0x314>)
 8002660:	f004 f8e2 	bl	8006828 <HAL_SPI_Transmit>
	}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bdb0      	pop	{r4, r5, r7, pc}
 800266a:	bf00      	nop
 800266c:	2000042c 	.word	0x2000042c
 8002670:	20000438 	.word	0x20000438
 8002674:	0800a4d8 	.word	0x0800a4d8
 8002678:	2000045c 	.word	0x2000045c
 800267c:	20000428 	.word	0x20000428
 8002680:	20000444 	.word	0x20000444
 8002684:	0800a4e8 	.word	0x0800a4e8
 8002688:	200005ec 	.word	0x200005ec
 800268c:	20000448 	.word	0x20000448
 8002690:	0800a4fc 	.word	0x0800a4fc
 8002694:	200006b4 	.word	0x200006b4
 8002698:	20000b64 	.word	0x20000b64
 800269c:	20000b65 	.word	0x20000b65
 80026a0:	20000434 	.word	0x20000434
 80026a4:	0800a50c 	.word	0x0800a50c
 80026a8:	20000524 	.word	0x20000524
 80026ac:	20000b66 	.word	0x20000b66
 80026b0:	20000b67 	.word	0x20000b67
 80026b4:	0800a51c 	.word	0x0800a51c
 80026b8:	40011000 	.word	0x40011000
 80026bc:	0800a52c 	.word	0x0800a52c
 80026c0:	2000077c 	.word	0x2000077c
 80026c4:	40010c00 	.word	0x40010c00
 80026c8:	0800a538 	.word	0x0800a538
 80026cc:	20000844 	.word	0x20000844
 80026d0:	0800a544 	.word	0x0800a544
 80026d4:	2000090c 	.word	0x2000090c
 80026d8:	0800a554 	.word	0x0800a554
 80026dc:	200009d4 	.word	0x200009d4
 80026e0:	20000420 	.word	0x20000420
 80026e4:	0800a564 	.word	0x0800a564
 80026e8:	20000a9c 	.word	0x20000a9c
 80026ec:	0800a578 	.word	0x0800a578
 80026f0:	0800a58c 	.word	0x0800a58c
 80026f4:	0800a5a0 	.word	0x0800a5a0
 80026f8:	0800a5b4 	.word	0x0800a5b4
 80026fc:	2000029c 	.word	0x2000029c

08002700 <conductonly>:

void conductonly(){
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==1)&((SET1||SET10)||SET100||SET1000))
 8002706:	2102      	movs	r1, #2
 8002708:	4874      	ldr	r0, [pc, #464]	; (80028dc <conductonly+0x1dc>)
 800270a:	f002 fdb1 	bl	8005270 <HAL_GPIO_ReadPin>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <conductonly+0x1e0>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <conductonly+0x3a>
 8002722:	4b70      	ldr	r3, [pc, #448]	; (80028e4 <conductonly+0x1e4>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <conductonly+0x3a>
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <conductonly+0x1e8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <conductonly+0x3a>
 8002732:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <conductonly+0x1ec>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <conductonly+0x3e>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <conductonly+0x40>
 800273e:	2300      	movs	r3, #0
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	4013      	ands	r3, r2
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 81a7 	beq.w	8002a9e <conductonly+0x39e>
	{
		data_rdy=0;
 8002750:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <conductonly+0x1f0>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
		counter2=0;
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <conductonly+0x1f4>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002762:	4865      	ldr	r0, [pc, #404]	; (80028f8 <conductonly+0x1f8>)
 8002764:	f002 fd9b 	bl	800529e <HAL_GPIO_WritePin>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==1){
 8002768:	2102      	movs	r1, #2
 800276a:	485c      	ldr	r0, [pc, #368]	; (80028dc <conductonly+0x1dc>)
 800276c:	f002 fd80 	bl	8005270 <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	f040 8193 	bne.w	8002a9e <conductonly+0x39e>
								av_cond=0;
 8002778:	4b60      	ldr	r3, [pc, #384]	; (80028fc <conductonly+0x1fc>)
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
								conductivity=0;
 8002780:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <conductonly+0x200>)
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
								resistance=0;
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <conductonly+0x204>)
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
								final_average_cond=0;
 8002790:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <conductonly+0x208>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
								Temp=0;
 8002798:	4b5c      	ldr	r3, [pc, #368]	; (800290c <conductonly+0x20c>)
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
								Temp2=0;
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <conductonly+0x210>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]


								ssd1306_Fill(0);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 f9ed 	bl	8003b88 <ssd1306_Fill>
								ssd1306_UpdateScreen();
 80027ae:	f001 fa03 	bl	8003bb8 <ssd1306_UpdateScreen>
								ssd1306_SetCursor(0, 0);
 80027b2:	2100      	movs	r1, #0
 80027b4:	2000      	movs	r0, #0
 80027b6:	f001 fb27 	bl	8003e08 <ssd1306_SetCursor>
								ssd1306_WriteString("Measuring",Font_7x10,1);
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <conductonly+0x214>)
 80027bc:	2301      	movs	r3, #1
 80027be:	ca06      	ldmia	r2, {r1, r2}
 80027c0:	4855      	ldr	r0, [pc, #340]	; (8002918 <conductonly+0x218>)
 80027c2:	f001 fafb 	bl	8003dbc <ssd1306_WriteString>
								ssd1306_SetCursor(0, 10);
 80027c6:	210a      	movs	r1, #10
 80027c8:	2000      	movs	r0, #0
 80027ca:	f001 fb1d 	bl	8003e08 <ssd1306_SetCursor>
								ssd1306_WriteString("Resistance...",Font_7x10,1);
 80027ce:	4a51      	ldr	r2, [pc, #324]	; (8002914 <conductonly+0x214>)
 80027d0:	2301      	movs	r3, #1
 80027d2:	ca06      	ldmia	r2, {r1, r2}
 80027d4:	4851      	ldr	r0, [pc, #324]	; (800291c <conductonly+0x21c>)
 80027d6:	f001 faf1 	bl	8003dbc <ssd1306_WriteString>
								ssd1306_UpdateScreen();
 80027da:	f001 f9ed 	bl	8003bb8 <ssd1306_UpdateScreen>
								ssd1306_Fill(0);
 80027de:	2000      	movs	r0, #0
 80027e0:	f001 f9d2 	bl	8003b88 <ssd1306_Fill>
								HAL_Delay(50);
 80027e4:	2032      	movs	r0, #50	; 0x32
 80027e6:	f001 fe35 	bl	8004454 <HAL_Delay>

								ADC_CH1();
 80027ea:	f7ff f90f 	bl	8001a0c <ADC_CH1>
								for(int i=0;i<50;i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e004      	b.n	80027fe <conductonly+0xfe>
								{
									PWM_COND();
 80027f4:	f7fe fed0 	bl	8001598 <PWM_COND>
								for(int i=0;i<50;i++)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b31      	cmp	r3, #49	; 0x31
 8002802:	ddf7      	ble.n	80027f4 <conductonly+0xf4>
								}



								float av_cond_sum = 0;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	613b      	str	r3, [r7, #16]

								for(int j = 0; j < 10; j++) {
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e041      	b.n	8002894 <conductonly+0x194>

									HAL_ADC_Start(&hadc2);
 8002810:	4843      	ldr	r0, [pc, #268]	; (8002920 <conductonly+0x220>)
 8002812:	f001 ff1b 	bl	800464c <HAL_ADC_Start>
									PWM_COND();
 8002816:	f7fe febf 	bl	8001598 <PWM_COND>
									float av_cond = 0; // Initialize av_cond for each iteration
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]

									for(int i = 0; i < 10; i++) {
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	e024      	b.n	8002870 <conductonly+0x170>

										PWM_COND();
 8002826:	f7fe feb7 	bl	8001598 <PWM_COND>
										HAL_ADC_PollForConversion(&hadc2, 1);
 800282a:	2101      	movs	r1, #1
 800282c:	483c      	ldr	r0, [pc, #240]	; (8002920 <conductonly+0x220>)
 800282e:	f001 ffe7 	bl	8004800 <HAL_ADC_PollForConversion>
										adc_buffer[0] = HAL_ADC_GetValue(&hadc2);
 8002832:	483b      	ldr	r0, [pc, #236]	; (8002920 <conductonly+0x220>)
 8002834:	f002 f8ea 	bl	8004a0c <HAL_ADC_GetValue>
 8002838:	4603      	mov	r3, r0
 800283a:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <conductonly+0x224>)
 800283c:	6013      	str	r3, [r2, #0]
										voltage_buffer[0] = adc_value_to_voltage(adc_buffer[0]);
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <conductonly+0x224>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f93b 	bl	8001ac0 <adc_value_to_voltage>
 800284a:	4603      	mov	r3, r0
 800284c:	4a36      	ldr	r2, [pc, #216]	; (8002928 <conductonly+0x228>)
 800284e:	6013      	str	r3, [r2, #0]
										av_cond += voltage_buffer[0] / 10; // Accumulate the value
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <conductonly+0x228>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <conductonly+0x22c>)
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fb28 	bl	8000eac <__aeabi_fdiv>
 800285c:	4603      	mov	r3, r0
 800285e:	4619      	mov	r1, r3
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f7fe f967 	bl	8000b34 <__addsf3>
 8002866:	4603      	mov	r3, r0
 8002868:	60bb      	str	r3, [r7, #8]
									for(int i = 0; i < 10; i++) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3301      	adds	r3, #1
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b09      	cmp	r3, #9
 8002874:	ddd7      	ble.n	8002826 <conductonly+0x126>

									}

									HAL_ADC_Stop(&hadc2);
 8002876:	482a      	ldr	r0, [pc, #168]	; (8002920 <conductonly+0x220>)
 8002878:	f001 ff96 	bl	80047a8 <HAL_ADC_Stop>
									HAL_Delay(10);
 800287c:	200a      	movs	r0, #10
 800287e:	f001 fde9 	bl	8004454 <HAL_Delay>
									//						Set_Conductivity_outputs_PD();
									//


									// Add the average of this iteration to av_cond_sum
									av_cond_sum += av_cond;
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6938      	ldr	r0, [r7, #16]
 8002886:	f7fe f955 	bl	8000b34 <__addsf3>
 800288a:	4603      	mov	r3, r0
 800288c:	613b      	str	r3, [r7, #16]
								for(int j = 0; j < 10; j++) {
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b09      	cmp	r3, #9
 8002898:	ddba      	ble.n	8002810 <conductonly+0x110>
								}


								// Calculate the final average
								final_average_cond = av_cond_sum / 10;
 800289a:	4924      	ldr	r1, [pc, #144]	; (800292c <conductonly+0x22c>)
 800289c:	6938      	ldr	r0, [r7, #16]
 800289e:	f7fe fb05 	bl	8000eac <__aeabi_fdiv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <conductonly+0x208>)
 80028a8:	601a      	str	r2, [r3, #0]
								ssd1306_UpdateScreen();
 80028aa:	f001 f985 	bl	8003bb8 <ssd1306_UpdateScreen>
								ssd1306_SetCursor(0, 0);
 80028ae:	2100      	movs	r1, #0
 80028b0:	2000      	movs	r0, #0
 80028b2:	f001 faa9 	bl	8003e08 <ssd1306_SetCursor>
								ssd1306_WriteString("OK",Font_7x10,1);
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <conductonly+0x214>)
 80028b8:	2301      	movs	r3, #1
 80028ba:	ca06      	ldmia	r2, {r1, r2}
 80028bc:	481c      	ldr	r0, [pc, #112]	; (8002930 <conductonly+0x230>)
 80028be:	f001 fa7d 	bl	8003dbc <ssd1306_WriteString>
								ssd1306_UpdateScreen();
 80028c2:	f001 f979 	bl	8003bb8 <ssd1306_UpdateScreen>
								ssd1306_Fill(0);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f001 f95e 	bl	8003b88 <ssd1306_Fill>
								HAL_Delay(100);
 80028cc:	2064      	movs	r0, #100	; 0x64
 80028ce:	f001 fdc1 	bl	8004454 <HAL_Delay>

								for(i=0;i<10;i++)
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <conductonly+0x234>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e048      	b.n	800296c <conductonly+0x26c>
 80028da:	bf00      	nop
 80028dc:	40011000 	.word	0x40011000
 80028e0:	20000b64 	.word	0x20000b64
 80028e4:	20000b65 	.word	0x20000b65
 80028e8:	20000b66 	.word	0x20000b66
 80028ec:	20000b67 	.word	0x20000b67
 80028f0:	20000416 	.word	0x20000416
 80028f4:	2000041c 	.word	0x2000041c
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	20000430 	.word	0x20000430
 8002900:	20000434 	.word	0x20000434
 8002904:	20000438 	.word	0x20000438
 8002908:	2000042c 	.word	0x2000042c
 800290c:	20000448 	.word	0x20000448
 8002910:	2000044c 	.word	0x2000044c
 8002914:	20000018 	.word	0x20000018
 8002918:	0800a5c8 	.word	0x0800a5c8
 800291c:	0800a5d4 	.word	0x0800a5d4
 8002920:	20000218 	.word	0x20000218
 8002924:	20000b68 	.word	0x20000b68
 8002928:	20000b78 	.word	0x20000b78
 800292c:	41200000 	.word	0x41200000
 8002930:	0800a5e4 	.word	0x0800a5e4
 8002934:	20000414 	.word	0x20000414
								{
									Temp=DS18B20_GetTemp();
 8002938:	f7ff f80c 	bl	8001954 <DS18B20_GetTemp>
 800293c:	4603      	mov	r3, r0
 800293e:	4a5a      	ldr	r2, [pc, #360]	; (8002aa8 <conductonly+0x3a8>)
 8002940:	6013      	str	r3, [r2, #0]
									Temp2+=Temp;
 8002942:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <conductonly+0x3ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <conductonly+0x3a8>)
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe f8f1 	bl	8000b34 <__addsf3>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	4b55      	ldr	r3, [pc, #340]	; (8002aac <conductonly+0x3ac>)
 8002958:	601a      	str	r2, [r3, #0]
									HAL_Delay(10);
 800295a:	200a      	movs	r0, #10
 800295c:	f001 fd7a 	bl	8004454 <HAL_Delay>
								for(i=0;i<10;i++)
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <conductonly+0x3b0>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b51      	ldr	r3, [pc, #324]	; (8002ab0 <conductonly+0x3b0>)
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <conductonly+0x3b0>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b09      	cmp	r3, #9
 8002972:	d9e1      	bls.n	8002938 <conductonly+0x238>
								}
								Temp=Temp2/10;
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <conductonly+0x3ac>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	494e      	ldr	r1, [pc, #312]	; (8002ab4 <conductonly+0x3b4>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fa96 	bl	8000eac <__aeabi_fdiv>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <conductonly+0x3a8>)
 8002986:	601a      	str	r2, [r3, #0]
								ssd1306_UpdateScreen();
 8002988:	f001 f916 	bl	8003bb8 <ssd1306_UpdateScreen>
								ssd1306_SetCursor(0, 0);
 800298c:	2100      	movs	r1, #0
 800298e:	2000      	movs	r0, #0
 8002990:	f001 fa3a 	bl	8003e08 <ssd1306_SetCursor>
								ssd1306_WriteString("Temp Measure",Font_7x10,1);
 8002994:	4a48      	ldr	r2, [pc, #288]	; (8002ab8 <conductonly+0x3b8>)
 8002996:	2301      	movs	r3, #1
 8002998:	ca06      	ldmia	r2, {r1, r2}
 800299a:	4848      	ldr	r0, [pc, #288]	; (8002abc <conductonly+0x3bc>)
 800299c:	f001 fa0e 	bl	8003dbc <ssd1306_WriteString>
								ssd1306_UpdateScreen();
 80029a0:	f001 f90a 	bl	8003bb8 <ssd1306_UpdateScreen>

								ssd1306_Fill(0);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f001 f8ef 	bl	8003b88 <ssd1306_Fill>
								ssd1306_UpdateScreen();
 80029aa:	f001 f905 	bl	8003bb8 <ssd1306_UpdateScreen>
								ssd1306_SetCursor(5,20);
 80029ae:	2114      	movs	r1, #20
 80029b0:	2005      	movs	r0, #5
 80029b2:	f001 fa29 	bl	8003e08 <ssd1306_SetCursor>
								ssd1306_WriteString("Finished",Font_11x18,1);
 80029b6:	4a42      	ldr	r2, [pc, #264]	; (8002ac0 <conductonly+0x3c0>)
 80029b8:	2301      	movs	r3, #1
 80029ba:	ca06      	ldmia	r2, {r1, r2}
 80029bc:	4841      	ldr	r0, [pc, #260]	; (8002ac4 <conductonly+0x3c4>)
 80029be:	f001 f9fd 	bl	8003dbc <ssd1306_WriteString>
								ssd1306_UpdateScreen();
 80029c2:	f001 f8f9 	bl	8003bb8 <ssd1306_UpdateScreen>
								HAL_Delay(100);
 80029c6:	2064      	movs	r0, #100	; 0x64
 80029c8:	f001 fd44 	bl	8004454 <HAL_Delay>
								if(SET1==1)
 80029cc:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <conductonly+0x3c8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d112      	bne.n	80029fa <conductonly+0x2fa>
								{
									conductivity=new_calculateECSET1(final_average_cond,Temp);
 80029d4:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <conductonly+0x3cc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <conductonly+0x3a8>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fb76 	bl	80010d0 <new_calculateECSET1>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <conductonly+0x3d0>)
 80029e8:	6013      	str	r3, [r2, #0]
									resistance=new_calculateRSET1(final_average_cond);
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <conductonly+0x3cc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fbe2 	bl	80011b8 <new_calculateRSET1>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <conductonly+0x3d4>)
 80029f8:	6013      	str	r3, [r2, #0]
								}
								if(SET10==1)
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <conductonly+0x3d8>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d112      	bne.n	8002a28 <conductonly+0x328>
								{
									conductivity=new_calculateECSET10(final_average_cond,Temp);
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <conductonly+0x3cc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <conductonly+0x3a8>)
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fbe7 	bl	80011e0 <new_calculateECSET10>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <conductonly+0x3d0>)
 8002a16:	6013      	str	r3, [r2, #0]
									resistance=new_calculateRSET10(final_average_cond);
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <conductonly+0x3cc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fc53 	bl	80012c8 <new_calculateRSET10>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <conductonly+0x3d4>)
 8002a26:	6013      	str	r3, [r2, #0]
								}
								if(SET100==1)
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <conductonly+0x3dc>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d112      	bne.n	8002a56 <conductonly+0x356>
								{
									conductivity=new_calculateECSET100(final_average_cond,Temp);
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <conductonly+0x3cc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <conductonly+0x3a8>)
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fc58 	bl	80012f0 <new_calculateECSET100>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <conductonly+0x3d0>)
 8002a44:	6013      	str	r3, [r2, #0]
									resistance=new_calculateRSET100(final_average_cond);
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <conductonly+0x3cc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fcc4 	bl	80013d8 <new_calculateRSET100>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a20      	ldr	r2, [pc, #128]	; (8002ad4 <conductonly+0x3d4>)
 8002a54:	6013      	str	r3, [r2, #0]
								}
								if(SET1000==1)
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <conductonly+0x3e0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d112      	bne.n	8002a84 <conductonly+0x384>
								{
									conductivity=new_calculateECSET1000(final_average_cond,Temp);
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <conductonly+0x3cc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <conductonly+0x3a8>)
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fcc9 	bl	8001400 <new_calculateECSET1000>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <conductonly+0x3d0>)
 8002a72:	6013      	str	r3, [r2, #0]
									resistance=new_calculateRSET1000(final_average_cond);
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <conductonly+0x3cc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fd35 	bl	80014e8 <new_calculateRSET1000>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <conductonly+0x3d4>)
 8002a82:	6013      	str	r3, [r2, #0]
								}
								HAL_Delay(200);
 8002a84:	20c8      	movs	r0, #200	; 0xc8
 8002a86:	f001 fce5 	bl	8004454 <HAL_Delay>
								EC_out_of_range_fast();
 8002a8a:	f7ff f85b 	bl	8001b44 <EC_out_of_range_fast>
			//					salinity_fertilizer();
								ssd1306_Fill(0);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f001 f87a 	bl	8003b88 <ssd1306_Fill>
								ssd1306_UpdateScreen();
 8002a94:	f001 f890 	bl	8003bb8 <ssd1306_UpdateScreen>
								data_rdy=1;
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <conductonly+0x3e4>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]

							}

		}
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000448 	.word	0x20000448
 8002aac:	2000044c 	.word	0x2000044c
 8002ab0:	20000414 	.word	0x20000414
 8002ab4:	41200000 	.word	0x41200000
 8002ab8:	20000018 	.word	0x20000018
 8002abc:	0800a5e8 	.word	0x0800a5e8
 8002ac0:	20000020 	.word	0x20000020
 8002ac4:	0800a5f8 	.word	0x0800a5f8
 8002ac8:	20000b64 	.word	0x20000b64
 8002acc:	2000042c 	.word	0x2000042c
 8002ad0:	20000434 	.word	0x20000434
 8002ad4:	20000438 	.word	0x20000438
 8002ad8:	20000b65 	.word	0x20000b65
 8002adc:	20000b66 	.word	0x20000b66
 8002ae0:	20000b67 	.word	0x20000b67
 8002ae4:	20000416 	.word	0x20000416

08002ae8 <moistconduct>:
	void moistconduct(){
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
		if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)&((SET1||SET10)||SET100||SET1000))
 8002aee:	2108      	movs	r1, #8
 8002af0:	4863      	ldr	r0, [pc, #396]	; (8002c80 <moistconduct+0x198>)
 8002af2:	f002 fbbd 	bl	8005270 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <moistconduct+0x19c>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <moistconduct+0x3a>
 8002b0a:	4b5f      	ldr	r3, [pc, #380]	; (8002c88 <moistconduct+0x1a0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <moistconduct+0x3a>
 8002b12:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <moistconduct+0x1a4>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <moistconduct+0x3a>
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <moistconduct+0x1a8>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <moistconduct+0x3e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <moistconduct+0x40>
 8002b26:	2300      	movs	r3, #0
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 830d 	beq.w	8003152 <moistconduct+0x66a>
		{
			data_rdy=0;
 8002b38:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <moistconduct+0x1ac>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
			counter2=0;
 8002b3e:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <moistconduct+0x1b0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002b44:	2200      	movs	r2, #0
 8002b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b4a:	4854      	ldr	r0, [pc, #336]	; (8002c9c <moistconduct+0x1b4>)
 8002b4c:	f002 fba7 	bl	800529e <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)
 8002b50:	2108      	movs	r1, #8
 8002b52:	484b      	ldr	r0, [pc, #300]	; (8002c80 <moistconduct+0x198>)
 8002b54:	f002 fb8c 	bl	8005270 <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	f040 82f9 	bne.w	8003152 <moistconduct+0x66a>
				{

					av_cond=0;
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <moistconduct+0x1b8>)
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
					av_moist=0;
 8002b68:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <moistconduct+0x1bc>)
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
					final_average_cond=0;
 8002b70:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <moistconduct+0x1c0>)
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
					Temp=0;
 8002b78:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <moistconduct+0x1c4>)
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
					Temp2=0;
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <moistconduct+0x1c8>)
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

					ssd1306_Fill(0);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f000 fffd 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002b8e:	f001 f813 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8002b92:	2100      	movs	r1, #0
 8002b94:	2000      	movs	r0, #0
 8002b96:	f001 f937 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Preparing ",Font_7x10,1);
 8002b9a:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <moistconduct+0x1cc>)
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	ca06      	ldmia	r2, {r1, r2}
 8002ba0:	4845      	ldr	r0, [pc, #276]	; (8002cb8 <moistconduct+0x1d0>)
 8002ba2:	f001 f90b 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0, 10);
 8002ba6:	210a      	movs	r1, #10
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f001 f92d 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("device for ",Font_7x10,1);
 8002bae:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <moistconduct+0x1cc>)
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	ca06      	ldmia	r2, {r1, r2}
 8002bb4:	4841      	ldr	r0, [pc, #260]	; (8002cbc <moistconduct+0x1d4>)
 8002bb6:	f001 f901 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,20);
 8002bba:	2114      	movs	r1, #20
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f001 f923 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("moisture ",Font_7x10,1);
 8002bc2:	4a3c      	ldr	r2, [pc, #240]	; (8002cb4 <moistconduct+0x1cc>)
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	ca06      	ldmia	r2, {r1, r2}
 8002bc8:	483d      	ldr	r0, [pc, #244]	; (8002cc0 <moistconduct+0x1d8>)
 8002bca:	f001 f8f7 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0,30);
 8002bce:	211e      	movs	r1, #30
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f001 f919 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("measurement...",Font_7x10,1);
 8002bd6:	4a37      	ldr	r2, [pc, #220]	; (8002cb4 <moistconduct+0x1cc>)
 8002bd8:	2301      	movs	r3, #1
 8002bda:	ca06      	ldmia	r2, {r1, r2}
 8002bdc:	4839      	ldr	r0, [pc, #228]	; (8002cc4 <moistconduct+0x1dc>)
 8002bde:	f001 f8ed 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002be2:	f000 ffe9 	bl	8003bb8 <ssd1306_UpdateScreen>
					for(i=0;i<15;i++)
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <moistconduct+0x1e0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e007      	b.n	8002bfe <moistconduct+0x116>
					{
						PWM_MOIST();
 8002bee:	f7fe fd15 	bl	800161c <PWM_MOIST>
					for(i=0;i<15;i++)
 8002bf2:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <moistconduct+0x1e0>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <moistconduct+0x1e0>)
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <moistconduct+0x1e0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b0e      	cmp	r3, #14
 8002c04:	d9f3      	bls.n	8002bee <moistconduct+0x106>
					}

					ssd1306_Fill(0);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f000 ffbe 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002c0c:	f000 ffd4 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8002c10:	2100      	movs	r1, #0
 8002c12:	2000      	movs	r0, #0
 8002c14:	f001 f8f8 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Measuring",Font_7x10,1);
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <moistconduct+0x1cc>)
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	ca06      	ldmia	r2, {r1, r2}
 8002c1e:	482b      	ldr	r0, [pc, #172]	; (8002ccc <moistconduct+0x1e4>)
 8002c20:	f001 f8cc 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0, 10);
 8002c24:	210a      	movs	r1, #10
 8002c26:	2000      	movs	r0, #0
 8002c28:	f001 f8ee 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Moisture...",Font_7x10,1);
 8002c2c:	4a21      	ldr	r2, [pc, #132]	; (8002cb4 <moistconduct+0x1cc>)
 8002c2e:	2301      	movs	r3, #1
 8002c30:	ca06      	ldmia	r2, {r1, r2}
 8002c32:	4827      	ldr	r0, [pc, #156]	; (8002cd0 <moistconduct+0x1e8>)
 8002c34:	f001 f8c2 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002c38:	f000 ffbe 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 ffa3 	bl	8003b88 <ssd1306_Fill>

					ADC_CH2();
 8002c42:	f7fe ff01 	bl	8001a48 <ADC_CH2>

					// Inside your loop
					percentage_moist2 = 0; // Initialize averaged percentage variable
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <moistconduct+0x1ec>)
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

					av_moist_sum=0;
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <moistconduct+0x1f0>)
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

					for (j = 0; j < 4; j++) {
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <moistconduct+0x1f4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e0d4      	b.n	8002e08 <moistconduct+0x320>
						percentage_moist=0;
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <moistconduct+0x1f8>)
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
						av_moist = 0; // Reset av_moist for each iteration
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <moistconduct+0x1bc>)
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
						PWM_MOIST();
 8002c6e:	f7fe fcd5 	bl	800161c <PWM_MOIST>
						HAL_ADC_Start(&hadc2);
 8002c72:	481c      	ldr	r0, [pc, #112]	; (8002ce4 <moistconduct+0x1fc>)
 8002c74:	f001 fcea 	bl	800464c <HAL_ADC_Start>
						for (i = 0; i < 5; i++) {
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <moistconduct+0x1e0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e096      	b.n	8002dae <moistconduct+0x2c6>
 8002c80:	40011000 	.word	0x40011000
 8002c84:	20000b64 	.word	0x20000b64
 8002c88:	20000b65 	.word	0x20000b65
 8002c8c:	20000b66 	.word	0x20000b66
 8002c90:	20000b67 	.word	0x20000b67
 8002c94:	20000416 	.word	0x20000416
 8002c98:	2000041c 	.word	0x2000041c
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	20000430 	.word	0x20000430
 8002ca4:	2000043c 	.word	0x2000043c
 8002ca8:	2000042c 	.word	0x2000042c
 8002cac:	20000448 	.word	0x20000448
 8002cb0:	2000044c 	.word	0x2000044c
 8002cb4:	20000018 	.word	0x20000018
 8002cb8:	0800a604 	.word	0x0800a604
 8002cbc:	0800a610 	.word	0x0800a610
 8002cc0:	0800a61c 	.word	0x0800a61c
 8002cc4:	0800a628 	.word	0x0800a628
 8002cc8:	20000414 	.word	0x20000414
 8002ccc:	0800a5c8 	.word	0x0800a5c8
 8002cd0:	0800a638 	.word	0x0800a638
 8002cd4:	20000444 	.word	0x20000444
 8002cd8:	20000428 	.word	0x20000428
 8002cdc:	20000415 	.word	0x20000415
 8002ce0:	20000440 	.word	0x20000440
 8002ce4:	20000218 	.word	0x20000218
							HAL_ADC_PollForConversion(&hadc2, 1);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4882      	ldr	r0, [pc, #520]	; (8002ef4 <moistconduct+0x40c>)
 8002cec:	f001 fd88 	bl	8004800 <HAL_ADC_PollForConversion>
							adc_buffer[1] = HAL_ADC_GetValue(&hadc2);
 8002cf0:	4880      	ldr	r0, [pc, #512]	; (8002ef4 <moistconduct+0x40c>)
 8002cf2:	f001 fe8b 	bl	8004a0c <HAL_ADC_GetValue>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4a7f      	ldr	r2, [pc, #508]	; (8002ef8 <moistconduct+0x410>)
 8002cfa:	6053      	str	r3, [r2, #4]
							voltage_buffer[1] = adc_value_to_voltage(adc_buffer[1]);
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <moistconduct+0x410>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe fedc 	bl	8001ac0 <adc_value_to_voltage>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a7c      	ldr	r2, [pc, #496]	; (8002efc <moistconduct+0x414>)
 8002d0c:	6053      	str	r3, [r2, #4]
							av_moist += voltage_buffer[1] / 5;
 8002d0e:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <moistconduct+0x414>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	497b      	ldr	r1, [pc, #492]	; (8002f00 <moistconduct+0x418>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f8c9 	bl	8000eac <__aeabi_fdiv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b79      	ldr	r3, [pc, #484]	; (8002f04 <moistconduct+0x41c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fd ff05 	bl	8000b34 <__addsf3>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <moistconduct+0x41c>)
 8002d30:	601a      	str	r2, [r3, #0]
							percentage_moist = 100.0-(((((av_moist+moist_offset) - MIN_VOLTAGE)) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0);
 8002d32:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <moistconduct+0x41c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a74      	ldr	r2, [pc, #464]	; (8002f08 <moistconduct+0x420>)
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fef9 	bl	8000b34 <__addsf3>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b71      	ldr	r3, [pc, #452]	; (8002f0c <moistconduct+0x424>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f7fd feef 	bl	8000b30 <__aeabi_fsub>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461c      	mov	r4, r3
 8002d56:	4b6e      	ldr	r3, [pc, #440]	; (8002f10 <moistconduct+0x428>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6c      	ldr	r2, [pc, #432]	; (8002f0c <moistconduct+0x424>)
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fee5 	bl	8000b30 <__aeabi_fsub>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7fe f89e 	bl	8000eac <__aeabi_fdiv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fb58 	bl	8000428 <__aeabi_f2d>
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <moistconduct+0x42c>)
 8002d7e:	f7fd fbab 	bl	80004d8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	4962      	ldr	r1, [pc, #392]	; (8002f14 <moistconduct+0x42c>)
 8002d8c:	f7fd f9ec 	bl	8000168 <__aeabi_dsub>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd fe76 	bl	8000a88 <__aeabi_d2f>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a5e      	ldr	r2, [pc, #376]	; (8002f18 <moistconduct+0x430>)
 8002da0:	6013      	str	r3, [r2, #0]
						for (i = 0; i < 5; i++) {
 8002da2:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <moistconduct+0x434>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <moistconduct+0x434>)
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <moistconduct+0x434>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d998      	bls.n	8002ce8 <moistconduct+0x200>
						}
						HAL_ADC_Stop(&hadc2);
 8002db6:	484f      	ldr	r0, [pc, #316]	; (8002ef4 <moistconduct+0x40c>)
 8002db8:	f001 fcf6 	bl	80047a8 <HAL_ADC_Stop>

						// Calculate percentage_moist for this iteration
						av_moist_sum+=(av_moist+moist_offset);
 8002dbc:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <moistconduct+0x41c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a51      	ldr	r2, [pc, #324]	; (8002f08 <moistconduct+0x420>)
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd feb4 	bl	8000b34 <__addsf3>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <moistconduct+0x438>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f7fd feac 	bl	8000b34 <__addsf3>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <moistconduct+0x438>)
 8002de2:	601a      	str	r2, [r3, #0]

						// Accumulate the calculated percentage
						percentage_moist2 += percentage_moist;
 8002de4:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <moistconduct+0x43c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <moistconduct+0x430>)
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fea0 	bl	8000b34 <__addsf3>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <moistconduct+0x43c>)
 8002dfa:	601a      	str	r2, [r3, #0]
					for (j = 0; j < 4; j++) {
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <moistconduct+0x440>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <moistconduct+0x440>)
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <moistconduct+0x440>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	f67f af26 	bls.w	8002c5e <moistconduct+0x176>

					}

					// Calculate the average of percentage_moist over 15 measurements
					av_moist_sum/=4;
 8002e12:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <moistconduct+0x438>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe f846 	bl	8000eac <__aeabi_fdiv>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <moistconduct+0x438>)
 8002e26:	601a      	str	r2, [r3, #0]
					percentage_moist2 /= 4;
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <moistconduct+0x43c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f83b 	bl	8000eac <__aeabi_fdiv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <moistconduct+0x43c>)
 8002e3c:	601a      	str	r2, [r3, #0]
					// Manipulate the last value of percentage_moist2
					if (percentage_moist2 > 100) {
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <moistconduct+0x43c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	493a      	ldr	r1, [pc, #232]	; (8002f2c <moistconduct+0x444>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe f939 	bl	80010bc <__aeabi_fcmpgt>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <moistconduct+0x370>
						percentage_moist2 = 100;
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <moistconduct+0x43c>)
 8002e52:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <moistconduct+0x444>)
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e00d      	b.n	8002e74 <moistconduct+0x38c>
					} else if (percentage_moist2 < 0) {
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <moistconduct+0x43c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f90d 	bl	8001080 <__aeabi_fcmplt>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <moistconduct+0x38c>
						percentage_moist2 = 0;
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <moistconduct+0x43c>)
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
					}

					ssd1306_Fill(0);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f000 fe87 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002e7a:	f000 fe9d 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2000      	movs	r0, #0
 8002e82:	f000 ffc1 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Measuring",Font_7x10,1);
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <moistconduct+0x448>)
 8002e88:	2301      	movs	r3, #1
 8002e8a:	ca06      	ldmia	r2, {r1, r2}
 8002e8c:	4829      	ldr	r0, [pc, #164]	; (8002f34 <moistconduct+0x44c>)
 8002e8e:	f000 ff95 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0, 10);
 8002e92:	210a      	movs	r1, #10
 8002e94:	2000      	movs	r0, #0
 8002e96:	f000 ffb7 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Resistance...",Font_7x10,1);
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <moistconduct+0x448>)
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	ca06      	ldmia	r2, {r1, r2}
 8002ea0:	4825      	ldr	r0, [pc, #148]	; (8002f38 <moistconduct+0x450>)
 8002ea2:	f000 ff8b 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002ea6:	f000 fe87 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f000 fe6c 	bl	8003b88 <ssd1306_Fill>
					HAL_Delay(1000);
 8002eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eb4:	f001 face 	bl	8004454 <HAL_Delay>

					ADC_CH1();
 8002eb8:	f7fe fda8 	bl	8001a0c <ADC_CH1>
					for(int i=0;i<50;i++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e004      	b.n	8002ecc <moistconduct+0x3e4>
					{
						PWM_COND();
 8002ec2:	f7fe fb69 	bl	8001598 <PWM_COND>
					for(int i=0;i<50;i++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b31      	cmp	r3, #49	; 0x31
 8002ed0:	ddf7      	ble.n	8002ec2 <moistconduct+0x3da>
					}



					float av_cond_sum = 0;
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]

					for(int j = 0; j < 15; j++) {
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e065      	b.n	8002faa <moistconduct+0x4c2>

						HAL_ADC_Start(&hadc2);
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <moistconduct+0x40c>)
 8002ee0:	f001 fbb4 	bl	800464c <HAL_ADC_Start>
						PWM_COND();
 8002ee4:	f7fe fb58 	bl	8001598 <PWM_COND>
						float av_cond = 0; // Initialize av_cond for each iteration
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]

						for(int i = 0; i < 30; i++) {
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	e048      	b.n	8002f86 <moistconduct+0x49e>
 8002ef4:	20000218 	.word	0x20000218
 8002ef8:	20000b68 	.word	0x20000b68
 8002efc:	20000b78 	.word	0x20000b78
 8002f00:	40a00000 	.word	0x40a00000
 8002f04:	2000043c 	.word	0x2000043c
 8002f08:	20000424 	.word	0x20000424
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	40590000 	.word	0x40590000
 8002f18:	20000440 	.word	0x20000440
 8002f1c:	20000414 	.word	0x20000414
 8002f20:	20000428 	.word	0x20000428
 8002f24:	20000444 	.word	0x20000444
 8002f28:	20000415 	.word	0x20000415
 8002f2c:	42c80000 	.word	0x42c80000
 8002f30:	20000018 	.word	0x20000018
 8002f34:	0800a5c8 	.word	0x0800a5c8
 8002f38:	0800a5d4 	.word	0x0800a5d4

							PWM_COND();
 8002f3c:	f7fe fb2c 	bl	8001598 <PWM_COND>
							HAL_ADC_PollForConversion(&hadc2, 1);
 8002f40:	2101      	movs	r1, #1
 8002f42:	4886      	ldr	r0, [pc, #536]	; (800315c <moistconduct+0x674>)
 8002f44:	f001 fc5c 	bl	8004800 <HAL_ADC_PollForConversion>
							adc_buffer[0] = HAL_ADC_GetValue(&hadc2);
 8002f48:	4884      	ldr	r0, [pc, #528]	; (800315c <moistconduct+0x674>)
 8002f4a:	f001 fd5f 	bl	8004a0c <HAL_ADC_GetValue>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4a83      	ldr	r2, [pc, #524]	; (8003160 <moistconduct+0x678>)
 8002f52:	6013      	str	r3, [r2, #0]
							voltage_buffer[0] = adc_value_to_voltage(adc_buffer[0]);
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <moistconduct+0x678>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fdb0 	bl	8001ac0 <adc_value_to_voltage>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <moistconduct+0x67c>)
 8002f64:	6013      	str	r3, [r2, #0]
							av_cond += voltage_buffer[0] / 30; // Accumulate the value
 8002f66:	4b7f      	ldr	r3, [pc, #508]	; (8003164 <moistconduct+0x67c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	497f      	ldr	r1, [pc, #508]	; (8003168 <moistconduct+0x680>)
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd ff9d 	bl	8000eac <__aeabi_fdiv>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4619      	mov	r1, r3
 8002f76:	68b8      	ldr	r0, [r7, #8]
 8002f78:	f7fd fddc 	bl	8000b34 <__addsf3>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60bb      	str	r3, [r7, #8]
						for(int i = 0; i < 30; i++) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3301      	adds	r3, #1
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b1d      	cmp	r3, #29
 8002f8a:	ddd7      	ble.n	8002f3c <moistconduct+0x454>

						}

						HAL_ADC_Stop(&hadc2);
 8002f8c:	4873      	ldr	r0, [pc, #460]	; (800315c <moistconduct+0x674>)
 8002f8e:	f001 fc0b 	bl	80047a8 <HAL_ADC_Stop>
						HAL_Delay(100);
 8002f92:	2064      	movs	r0, #100	; 0x64
 8002f94:	f001 fa5e 	bl	8004454 <HAL_Delay>
						//						Set_Conductivity_outputs_PD();
						//


						// Add the average of this iteration to av_cond_sum
						av_cond_sum += av_cond;
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6938      	ldr	r0, [r7, #16]
 8002f9c:	f7fd fdca 	bl	8000b34 <__addsf3>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	613b      	str	r3, [r7, #16]
					for(int j = 0; j < 15; j++) {
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b0e      	cmp	r3, #14
 8002fae:	dd96      	ble.n	8002ede <moistconduct+0x3f6>
					}


					// Calculate the final average
					final_average_cond = av_cond_sum / 15;
 8002fb0:	496e      	ldr	r1, [pc, #440]	; (800316c <moistconduct+0x684>)
 8002fb2:	6938      	ldr	r0, [r7, #16]
 8002fb4:	f7fd ff7a 	bl	8000eac <__aeabi_fdiv>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <moistconduct+0x688>)
 8002fbe:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8002fc0:	f000 fdfa 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(0, 0);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 ff1e 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Measuring",Font_7x10,1);
 8002fcc:	4a69      	ldr	r2, [pc, #420]	; (8003174 <moistconduct+0x68c>)
 8002fce:	2301      	movs	r3, #1
 8002fd0:	ca06      	ldmia	r2, {r1, r2}
 8002fd2:	4869      	ldr	r0, [pc, #420]	; (8003178 <moistconduct+0x690>)
 8002fd4:	f000 fef2 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_SetCursor(0, 10);
 8002fd8:	210a      	movs	r1, #10
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 ff14 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Temperature...",Font_7x10,1);
 8002fe0:	4a64      	ldr	r2, [pc, #400]	; (8003174 <moistconduct+0x68c>)
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	ca06      	ldmia	r2, {r1, r2}
 8002fe6:	4865      	ldr	r0, [pc, #404]	; (800317c <moistconduct+0x694>)
 8002fe8:	f000 fee8 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002fec:	f000 fde4 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_Fill(0);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f000 fdc9 	bl	8003b88 <ssd1306_Fill>
					HAL_Delay(1000);
 8002ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ffa:	f001 fa2b 	bl	8004454 <HAL_Delay>

					for(i=0;i<10;i++)
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <moistconduct+0x698>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e019      	b.n	800303a <moistconduct+0x552>
					{
						Temp=DS18B20_GetTemp();
 8003006:	f7fe fca5 	bl	8001954 <DS18B20_GetTemp>
 800300a:	4603      	mov	r3, r0
 800300c:	4a5d      	ldr	r2, [pc, #372]	; (8003184 <moistconduct+0x69c>)
 800300e:	6013      	str	r3, [r2, #0]
						Temp2+=Temp;
 8003010:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <moistconduct+0x6a0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <moistconduct+0x69c>)
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fd8a 	bl	8000b34 <__addsf3>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	4b58      	ldr	r3, [pc, #352]	; (8003188 <moistconduct+0x6a0>)
 8003026:	601a      	str	r2, [r3, #0]
						HAL_Delay(10);
 8003028:	200a      	movs	r0, #10
 800302a:	f001 fa13 	bl	8004454 <HAL_Delay>
					for(i=0;i<10;i++)
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <moistconduct+0x698>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b52      	ldr	r3, [pc, #328]	; (8003180 <moistconduct+0x698>)
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	4b51      	ldr	r3, [pc, #324]	; (8003180 <moistconduct+0x698>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b09      	cmp	r3, #9
 8003040:	d9e1      	bls.n	8003006 <moistconduct+0x51e>
					}
					Temp=Temp2/10;
 8003042:	4b51      	ldr	r3, [pc, #324]	; (8003188 <moistconduct+0x6a0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4951      	ldr	r1, [pc, #324]	; (800318c <moistconduct+0x6a4>)
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd ff2f 	bl	8000eac <__aeabi_fdiv>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <moistconduct+0x69c>)
 8003054:	601a      	str	r2, [r3, #0]

					ssd1306_Fill(0);
 8003056:	2000      	movs	r0, #0
 8003058:	f000 fd96 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 800305c:	f000 fdac 	bl	8003bb8 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(5,20);
 8003060:	2114      	movs	r1, #20
 8003062:	2005      	movs	r0, #5
 8003064:	f000 fed0 	bl	8003e08 <ssd1306_SetCursor>
					ssd1306_WriteString("Finished",Font_11x18,1);
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <moistconduct+0x6a8>)
 800306a:	2301      	movs	r3, #1
 800306c:	ca06      	ldmia	r2, {r1, r2}
 800306e:	4849      	ldr	r0, [pc, #292]	; (8003194 <moistconduct+0x6ac>)
 8003070:	f000 fea4 	bl	8003dbc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8003074:	f000 fda0 	bl	8003bb8 <ssd1306_UpdateScreen>
					HAL_Delay(1000);
 8003078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307c:	f001 f9ea 	bl	8004454 <HAL_Delay>
					if(SET1==1)
 8003080:	4b45      	ldr	r3, [pc, #276]	; (8003198 <moistconduct+0x6b0>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d112      	bne.n	80030ae <moistconduct+0x5c6>
					{
						conductivity=new_calculateECSET1(final_average_cond,Temp);
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <moistconduct+0x688>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3d      	ldr	r2, [pc, #244]	; (8003184 <moistconduct+0x69c>)
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe f81c 	bl	80010d0 <new_calculateECSET1>
 8003098:	4603      	mov	r3, r0
 800309a:	4a40      	ldr	r2, [pc, #256]	; (800319c <moistconduct+0x6b4>)
 800309c:	6013      	str	r3, [r2, #0]
						resistance=new_calculateRSET1(final_average_cond);
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <moistconduct+0x688>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe f888 	bl	80011b8 <new_calculateRSET1>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <moistconduct+0x6b8>)
 80030ac:	6013      	str	r3, [r2, #0]
					}
					if(SET10==1)
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <moistconduct+0x6bc>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d112      	bne.n	80030dc <moistconduct+0x5f4>
					{
						conductivity=new_calculateECSET10(final_average_cond,Temp);
 80030b6:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <moistconduct+0x688>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a32      	ldr	r2, [pc, #200]	; (8003184 <moistconduct+0x69c>)
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe f88d 	bl	80011e0 <new_calculateECSET10>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <moistconduct+0x6b4>)
 80030ca:	6013      	str	r3, [r2, #0]
						resistance=new_calculateRSET10(final_average_cond);
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <moistconduct+0x688>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe f8f9 	bl	80012c8 <new_calculateRSET10>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <moistconduct+0x6b8>)
 80030da:	6013      	str	r3, [r2, #0]
					}
					if(SET100==1)
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <moistconduct+0x6c0>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d112      	bne.n	800310a <moistconduct+0x622>
					{
						conductivity=new_calculateECSET100(final_average_cond,Temp);
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <moistconduct+0x688>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <moistconduct+0x69c>)
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f8fe 	bl	80012f0 <new_calculateECSET100>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a29      	ldr	r2, [pc, #164]	; (800319c <moistconduct+0x6b4>)
 80030f8:	6013      	str	r3, [r2, #0]
						resistance=new_calculateRSET100(final_average_cond);
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <moistconduct+0x688>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f96a 	bl	80013d8 <new_calculateRSET100>
 8003104:	4603      	mov	r3, r0
 8003106:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <moistconduct+0x6b8>)
 8003108:	6013      	str	r3, [r2, #0]
					}
					if(SET1000==1)
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <moistconduct+0x6c4>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d112      	bne.n	8003138 <moistconduct+0x650>
					{
						conductivity=new_calculateECSET1000(final_average_cond,Temp);
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <moistconduct+0x688>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <moistconduct+0x69c>)
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f96f 	bl	8001400 <new_calculateECSET1000>
 8003122:	4603      	mov	r3, r0
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <moistconduct+0x6b4>)
 8003126:	6013      	str	r3, [r2, #0]
						resistance=new_calculateRSET1000(final_average_cond);
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <moistconduct+0x688>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe f9db 	bl	80014e8 <new_calculateRSET1000>
 8003132:	4603      	mov	r3, r0
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <moistconduct+0x6b8>)
 8003136:	6013      	str	r3, [r2, #0]
					}
					HAL_Delay(200);
 8003138:	20c8      	movs	r0, #200	; 0xc8
 800313a:	f001 f98b 	bl	8004454 <HAL_Delay>
					EC_out_of_range();
 800313e:	f7fe fe57 	bl	8001df0 <EC_out_of_range>
//					salinity_fertilizer();
					ssd1306_Fill(0);
 8003142:	2000      	movs	r0, #0
 8003144:	f000 fd20 	bl	8003b88 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8003148:	f000 fd36 	bl	8003bb8 <ssd1306_UpdateScreen>
					data_rdy=1;
 800314c:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <moistconduct+0x6c8>)
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
				}


		}

	}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	bf00      	nop
 800315c:	20000218 	.word	0x20000218
 8003160:	20000b68 	.word	0x20000b68
 8003164:	20000b78 	.word	0x20000b78
 8003168:	41f00000 	.word	0x41f00000
 800316c:	41700000 	.word	0x41700000
 8003170:	2000042c 	.word	0x2000042c
 8003174:	20000018 	.word	0x20000018
 8003178:	0800a5c8 	.word	0x0800a5c8
 800317c:	0800a644 	.word	0x0800a644
 8003180:	20000414 	.word	0x20000414
 8003184:	20000448 	.word	0x20000448
 8003188:	2000044c 	.word	0x2000044c
 800318c:	41200000 	.word	0x41200000
 8003190:	20000020 	.word	0x20000020
 8003194:	0800a5f8 	.word	0x0800a5f8
 8003198:	20000b64 	.word	0x20000b64
 800319c:	20000434 	.word	0x20000434
 80031a0:	20000438 	.word	0x20000438
 80031a4:	20000b65 	.word	0x20000b65
 80031a8:	20000b66 	.word	0x20000b66
 80031ac:	20000b67 	.word	0x20000b67
 80031b0:	20000416 	.word	0x20000416

080031b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ba:	f001 f8e9 	bl	8004390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031be:	f000 f96f 	bl	80034a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031c2:	f000 fb9f 	bl	8003904 <MX_GPIO_Init>
  MX_I2C1_Init();
 80031c6:	f000 f9f7 	bl	80035b8 <MX_I2C1_Init>
  MX_ADC2_Init();
 80031ca:	f000 f9c5 	bl	8003558 <MX_ADC2_Init>
  MX_TIM1_Init();
 80031ce:	f000 fa57 	bl	8003680 <MX_TIM1_Init>
  MX_TIM4_Init();
 80031d2:	f000 fb3f 	bl	8003854 <MX_TIM4_Init>
  MX_TIM3_Init();
 80031d6:	f000 faef 	bl	80037b8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80031da:	f000 faa1 	bl	8003720 <MX_TIM2_Init>
  MX_SPI1_Init();
 80031de:	f000 fa19 	bl	8003614 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
		SSD1306_INITS();
 80031e2:	f7fe fa4b 	bl	800167c <SSD1306_INITS>
		HAL_ADC_Init(&hadc2);
 80031e6:	4891      	ldr	r0, [pc, #580]	; (800342c <main+0x278>)
 80031e8:	f001 f958 	bl	800449c <HAL_ADC_Init>
		HAL_TIM_Base_Start(&htim1);
 80031ec:	4890      	ldr	r0, [pc, #576]	; (8003430 <main+0x27c>)
 80031ee:	f003 fd55 	bl	8006c9c <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim2);
 80031f2:	4890      	ldr	r0, [pc, #576]	; (8003434 <main+0x280>)
 80031f4:	f003 fd52 	bl	8006c9c <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim4);
 80031f8:	488f      	ldr	r0, [pc, #572]	; (8003438 <main+0x284>)
 80031fa:	f003 fd4f 	bl	8006c9c <HAL_TIM_Base_Start>

		//  PWM_BEGIN_MOIST();
		HAL_TIM_Base_Start_IT(&htim3);
 80031fe:	488f      	ldr	r0, [pc, #572]	; (800343c <main+0x288>)
 8003200:	f003 fd96 	bl	8006d30 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);  // Set priority and subpriority as needed
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	201d      	movs	r0, #29
 800320a:	f001 fe76 	bl	8004efa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800320e:	201d      	movs	r0, #29
 8003210:	f001 fe8f 	bl	8004f32 <HAL_NVIC_EnableIRQ>
		GPIOB->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8003214:	4b8a      	ldr	r3, [pc, #552]	; (8003440 <main+0x28c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a89      	ldr	r2, [pc, #548]	; (8003440 <main+0x28c>)
 800321a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800321e:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE3;  // Output mode, max speed 50 MHz
 8003220:	4b87      	ldr	r3, [pc, #540]	; (8003440 <main+0x28c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a86      	ldr	r2, [pc, #536]	; (8003440 <main+0x28c>)
 8003226:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800322a:	6013      	str	r3, [r2, #0]

		GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7); // Pin 7
 800322c:	4b84      	ldr	r3, [pc, #528]	; (8003440 <main+0x28c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a83      	ldr	r2, [pc, #524]	; (8003440 <main+0x28c>)
 8003232:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003236:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE7_0; // Output mode, max speed 10 MHz
 8003238:	4b81      	ldr	r3, [pc, #516]	; (8003440 <main+0x28c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a80      	ldr	r2, [pc, #512]	; (8003440 <main+0x28c>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	6013      	str	r3, [r2, #0]
		GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6); // Pin 6
 8003244:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <main+0x28c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <main+0x28c>)
 800324a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800324e:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE6_0; // Output mode, max speed 10 MHz
 8003250:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <main+0x28c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7a      	ldr	r2, [pc, #488]	; (8003440 <main+0x28c>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		while (1)
		{

			Set_counterFREQ();
 800325c:	f7fe ff24 	bl	80020a8 <Set_counterFREQ>
			//MEASURE SEQUENTIAL
			conductonly();
 8003260:	f7ff fa4e 	bl	8002700 <conductonly>
			moistconduct();
 8003264:	f7ff fc40 	bl	8002ae8 <moistconduct>

			//DS18B20
			Temp=DS18B20_GetTemp();
 8003268:	f7fe fb74 	bl	8001954 <DS18B20_GetTemp>
 800326c:	4603      	mov	r3, r0
 800326e:	4a75      	ldr	r2, [pc, #468]	; (8003444 <main+0x290>)
 8003270:	6013      	str	r3, [r2, #0]


			//NTC BOARD TEMP
			ADC_CH3();
 8003272:	f7fe fc07 	bl	8001a84 <ADC_CH3>
			HAL_ADC_Start(&hadc2);
 8003276:	486d      	ldr	r0, [pc, #436]	; (800342c <main+0x278>)
 8003278:	f001 f9e8 	bl	800464c <HAL_ADC_Start>
			HAL_Delay(2);
 800327c:	2002      	movs	r0, #2
 800327e:	f001 f8e9 	bl	8004454 <HAL_Delay>
			HAL_ADC_PollForConversion(&hadc2, 100);
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	4869      	ldr	r0, [pc, #420]	; (800342c <main+0x278>)
 8003286:	f001 fabb 	bl	8004800 <HAL_ADC_PollForConversion>
			adc_buffer[2]=HAL_ADC_GetValue(&hadc2);
 800328a:	4868      	ldr	r0, [pc, #416]	; (800342c <main+0x278>)
 800328c:	f001 fbbe 	bl	8004a0c <HAL_ADC_GetValue>
 8003290:	4603      	mov	r3, r0
 8003292:	4a6d      	ldr	r2, [pc, #436]	; (8003448 <main+0x294>)
 8003294:	6093      	str	r3, [r2, #8]
			voltage_buffer[2]=adc_value_to_voltage(adc_buffer[2]);
 8003296:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <main+0x294>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	b29b      	uxth	r3, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fc0f 	bl	8001ac0 <adc_value_to_voltage>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a69      	ldr	r2, [pc, #420]	; (800344c <main+0x298>)
 80032a6:	6093      	str	r3, [r2, #8]
			HAL_ADC_Stop(&hadc2);
 80032a8:	4860      	ldr	r0, [pc, #384]	; (800342c <main+0x278>)
 80032aa:	f001 fa7d 	bl	80047a8 <HAL_ADC_Stop>
			HAL_Delay(2);
 80032ae:	2002      	movs	r0, #2
 80032b0:	f001 f8d0 	bl	8004454 <HAL_Delay>




			ssd1306_SetCursor(0, 0);
 80032b4:	2100      	movs	r1, #0
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 fda6 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferConduct,"R %.fmV %.f Ohm",final_average_cond,resistance);
 80032bc:	4b64      	ldr	r3, [pc, #400]	; (8003450 <main+0x29c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f8b1 	bl	8000428 <__aeabi_f2d>
 80032c6:	4604      	mov	r4, r0
 80032c8:	460d      	mov	r5, r1
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <main+0x2a0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f8aa 	bl	8000428 <__aeabi_f2d>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	e9cd 2300 	strd	r2, r3, [sp]
 80032dc:	4622      	mov	r2, r4
 80032de:	462b      	mov	r3, r5
 80032e0:	495d      	ldr	r1, [pc, #372]	; (8003458 <main+0x2a4>)
 80032e2:	485e      	ldr	r0, [pc, #376]	; (800345c <main+0x2a8>)
 80032e4:	f004 feb8 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferConduct,Font_6x8,1);
 80032e8:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <main+0x2ac>)
 80032ea:	2301      	movs	r3, #1
 80032ec:	ca06      	ldmia	r2, {r1, r2}
 80032ee:	485b      	ldr	r0, [pc, #364]	; (800345c <main+0x2a8>)
 80032f0:	f000 fd64 	bl	8003dbc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 11);
 80032f4:	210b      	movs	r1, #11
 80032f6:	2000      	movs	r0, #0
 80032f8:	f000 fd86 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferMoist,"Moist %.1fV %.1f%%",av_moist_sum,percentage_moist2);
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <main+0x2b0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f891 	bl	8000428 <__aeabi_f2d>
 8003306:	4604      	mov	r4, r0
 8003308:	460d      	mov	r5, r1
 800330a:	4b57      	ldr	r3, [pc, #348]	; (8003468 <main+0x2b4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f88a 	bl	8000428 <__aeabi_f2d>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	e9cd 2300 	strd	r2, r3, [sp]
 800331c:	4622      	mov	r2, r4
 800331e:	462b      	mov	r3, r5
 8003320:	4952      	ldr	r1, [pc, #328]	; (800346c <main+0x2b8>)
 8003322:	4853      	ldr	r0, [pc, #332]	; (8003470 <main+0x2bc>)
 8003324:	f004 fe98 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferMoist,Font_6x8,1);
 8003328:	4a4d      	ldr	r2, [pc, #308]	; (8003460 <main+0x2ac>)
 800332a:	2301      	movs	r3, #1
 800332c:	ca06      	ldmia	r2, {r1, r2}
 800332e:	4850      	ldr	r0, [pc, #320]	; (8003470 <main+0x2bc>)
 8003330:	f000 fd44 	bl	8003dbc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 21);
 8003334:	2115      	movs	r1, #21
 8003336:	2000      	movs	r0, #0
 8003338:	f000 fd66 	bl	8003e08 <ssd1306_SetCursor>
			sprintf(bufferDs18b20,"ds18b20 %.2fC",Temp);
 800333c:	4b41      	ldr	r3, [pc, #260]	; (8003444 <main+0x290>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f871 	bl	8000428 <__aeabi_f2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	494a      	ldr	r1, [pc, #296]	; (8003474 <main+0x2c0>)
 800334c:	484a      	ldr	r0, [pc, #296]	; (8003478 <main+0x2c4>)
 800334e:	f004 fe83 	bl	8008058 <siprintf>
			ssd1306_WriteString(bufferDs18b20,Font_6x8,1);
 8003352:	4a43      	ldr	r2, [pc, #268]	; (8003460 <main+0x2ac>)
 8003354:	2301      	movs	r3, #1
 8003356:	ca06      	ldmia	r2, {r1, r2}
 8003358:	4847      	ldr	r0, [pc, #284]	; (8003478 <main+0x2c4>)
 800335a:	f000 fd2f 	bl	8003dbc <ssd1306_WriteString>
			if(SET1 == 1 || SET10 ==1){
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <main+0x2c8>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d003      	beq.n	800336e <main+0x1ba>
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <main+0x2cc>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d115      	bne.n	800339a <main+0x1e6>
				ssd1306_SetCursor(0, 31);
 800336e:	211f      	movs	r1, #31
 8003370:	2000      	movs	r0, #0
 8003372:	f000 fd49 	bl	8003e08 <ssd1306_SetCursor>
				sprintf(bufferConduct2,"EC %.3f mS/cm",conductivity);
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <main+0x2d0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f854 	bl	8000428 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4940      	ldr	r1, [pc, #256]	; (8003488 <main+0x2d4>)
 8003386:	4841      	ldr	r0, [pc, #260]	; (800348c <main+0x2d8>)
 8003388:	f004 fe66 	bl	8008058 <siprintf>
				ssd1306_WriteString(bufferConduct2,Font_6x8,1);
 800338c:	4a34      	ldr	r2, [pc, #208]	; (8003460 <main+0x2ac>)
 800338e:	2301      	movs	r3, #1
 8003390:	ca06      	ldmia	r2, {r1, r2}
 8003392:	483e      	ldr	r0, [pc, #248]	; (800348c <main+0x2d8>)
 8003394:	f000 fd12 	bl	8003dbc <ssd1306_WriteString>
 8003398:	e01c      	b.n	80033d4 <main+0x220>
			}else if(SET100==1 || SET1000==1){
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <main+0x2dc>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d003      	beq.n	80033aa <main+0x1f6>
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <main+0x2e0>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d114      	bne.n	80033d4 <main+0x220>
				ssd1306_SetCursor(0, 31);
 80033aa:	211f      	movs	r1, #31
 80033ac:	2000      	movs	r0, #0
 80033ae:	f000 fd2b 	bl	8003e08 <ssd1306_SetCursor>
				sprintf(bufferConduct2,"EC %.3f uS/cm",conductivity);
 80033b2:	4b34      	ldr	r3, [pc, #208]	; (8003484 <main+0x2d0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f836 	bl	8000428 <__aeabi_f2d>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4935      	ldr	r1, [pc, #212]	; (8003498 <main+0x2e4>)
 80033c2:	4832      	ldr	r0, [pc, #200]	; (800348c <main+0x2d8>)
 80033c4:	f004 fe48 	bl	8008058 <siprintf>
				ssd1306_WriteString(bufferConduct2,Font_6x8,1);
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <main+0x2ac>)
 80033ca:	2301      	movs	r3, #1
 80033cc:	ca06      	ldmia	r2, {r1, r2}
 80033ce:	482f      	ldr	r0, [pc, #188]	; (800348c <main+0x2d8>)
 80033d0:	f000 fcf4 	bl	8003dbc <ssd1306_WriteString>
			}

			Set_SENSE();
 80033d4:	f7fe fec2 	bl	800215c <Set_SENSE>
			Set_counterFREQ_ssd1306();
 80033d8:	f7fe ff98 	bl	800230c <Set_counterFREQ_ssd1306>
			ssd1306_UpdateScreen();
 80033dc:	f000 fbec 	bl	8003bb8 <ssd1306_UpdateScreen>
			if(data_rdy){
 80033e0:	4b2e      	ldr	r3, [pc, #184]	; (800349c <main+0x2e8>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <main+0x264>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80033e8:	2201      	movs	r2, #1
 80033ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033ee:	4814      	ldr	r0, [pc, #80]	; (8003440 <main+0x28c>)
 80033f0:	f001 ff55 	bl	800529e <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80033f4:	20c8      	movs	r0, #200	; 0xc8
 80033f6:	f001 f82d 	bl	8004454 <HAL_Delay>
				send_data();
 80033fa:	f7fe fff5 	bl	80023e8 <send_data>
				HAL_Delay(200);
 80033fe:	20c8      	movs	r0, #200	; 0xc8
 8003400:	f001 f828 	bl	8004454 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800340a:	480d      	ldr	r0, [pc, #52]	; (8003440 <main+0x28c>)
 800340c:	f001 ff47 	bl	800529e <HAL_GPIO_WritePin>

				data_rdy=0;
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <main+0x2e8>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e721      	b.n	800325c <main+0xa8>
			}
			else{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800341e:	4808      	ldr	r0, [pc, #32]	; (8003440 <main+0x28c>)
 8003420:	f001 ff3d 	bl	800529e <HAL_GPIO_WritePin>
				data_rdy=0;
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <main+0x2e8>)
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
		{
 800342a:	e717      	b.n	800325c <main+0xa8>
 800342c:	20000218 	.word	0x20000218
 8003430:	200002f4 	.word	0x200002f4
 8003434:	2000033c 	.word	0x2000033c
 8003438:	200003cc 	.word	0x200003cc
 800343c:	20000384 	.word	0x20000384
 8003440:	40010c00 	.word	0x40010c00
 8003444:	20000448 	.word	0x20000448
 8003448:	20000b68 	.word	0x20000b68
 800344c:	20000b78 	.word	0x20000b78
 8003450:	2000042c 	.word	0x2000042c
 8003454:	20000438 	.word	0x20000438
 8003458:	0800a4d8 	.word	0x0800a4d8
 800345c:	2000045c 	.word	0x2000045c
 8003460:	20000010 	.word	0x20000010
 8003464:	20000428 	.word	0x20000428
 8003468:	20000444 	.word	0x20000444
 800346c:	0800a4e8 	.word	0x0800a4e8
 8003470:	200005ec 	.word	0x200005ec
 8003474:	0800a4fc 	.word	0x0800a4fc
 8003478:	200006b4 	.word	0x200006b4
 800347c:	20000b64 	.word	0x20000b64
 8003480:	20000b65 	.word	0x20000b65
 8003484:	20000434 	.word	0x20000434
 8003488:	0800a50c 	.word	0x0800a50c
 800348c:	20000524 	.word	0x20000524
 8003490:	20000b66 	.word	0x20000b66
 8003494:	20000b67 	.word	0x20000b67
 8003498:	0800a51c 	.word	0x0800a51c
 800349c:	20000416 	.word	0x20000416

080034a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b094      	sub	sp, #80	; 0x50
 80034a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034aa:	2228      	movs	r2, #40	; 0x28
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fe4f 	bl	8008152 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80034da:	2300      	movs	r3, #0
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034de:	2301      	movs	r3, #1
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034e2:	2302      	movs	r3, #2
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80034ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80034f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fb96 	bl	8005c28 <HAL_RCC_OscConfig>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003502:	f000 fa99 	bl	8003a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003506:	230f      	movs	r3, #15
 8003508:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800350a:	2302      	movs	r3, #2
 800350c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003516:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fe02 	bl	800612c <HAL_RCC_ClockConfig>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800352e:	f000 fa83 	bl	8003a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003532:	2302      	movs	r3, #2
 8003534:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	4618      	mov	r0, r3
 8003540:	f002 ff82 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800354a:	f000 fa75 	bl	8003a38 <Error_Handler>
  }
}
 800354e:	bf00      	nop
 8003550:	3750      	adds	r7, #80	; 0x50
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <MX_ADC2_Init+0x58>)
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <MX_ADC2_Init+0x5c>)
 800356c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <MX_ADC2_Init+0x58>)
 8003570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003574:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <MX_ADC2_Init+0x58>)
 8003578:	2200      	movs	r2, #0
 800357a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <MX_ADC2_Init+0x58>)
 800357e:	2200      	movs	r2, #0
 8003580:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <MX_ADC2_Init+0x58>)
 8003584:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003588:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <MX_ADC2_Init+0x58>)
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <MX_ADC2_Init+0x58>)
 8003592:	2201      	movs	r2, #1
 8003594:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003596:	4806      	ldr	r0, [pc, #24]	; (80035b0 <MX_ADC2_Init+0x58>)
 8003598:	f000 ff80 	bl	800449c <HAL_ADC_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 80035a2:	f000 fa49 	bl	8003a38 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000218 	.word	0x20000218
 80035b4:	40012800 	.word	0x40012800

080035b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <MX_I2C1_Init+0x50>)
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <MX_I2C1_Init+0x54>)
 80035c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <MX_I2C1_Init+0x50>)
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <MX_I2C1_Init+0x58>)
 80035c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <MX_I2C1_Init+0x50>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <MX_I2C1_Init+0x50>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <MX_I2C1_Init+0x50>)
 80035d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <MX_I2C1_Init+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <MX_I2C1_Init+0x50>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <MX_I2C1_Init+0x50>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <MX_I2C1_Init+0x50>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <MX_I2C1_Init+0x50>)
 80035f6:	f001 fe6b 	bl	80052d0 <HAL_I2C_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003600:	f000 fa1a 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000248 	.word	0x20000248
 800360c:	40005400 	.word	0x40005400
 8003610:	000186a0 	.word	0x000186a0

08003614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003618:	4b17      	ldr	r3, [pc, #92]	; (8003678 <MX_SPI1_Init+0x64>)
 800361a:	4a18      	ldr	r2, [pc, #96]	; (800367c <MX_SPI1_Init+0x68>)
 800361c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <MX_SPI1_Init+0x64>)
 8003620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <MX_SPI1_Init+0x64>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <MX_SPI1_Init+0x64>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <MX_SPI1_Init+0x64>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <MX_SPI1_Init+0x64>)
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_SPI1_Init+0x64>)
 8003640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_SPI1_Init+0x64>)
 8003648:	2238      	movs	r2, #56	; 0x38
 800364a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <MX_SPI1_Init+0x64>)
 800364e:	2200      	movs	r2, #0
 8003650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <MX_SPI1_Init+0x64>)
 8003654:	2200      	movs	r2, #0
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <MX_SPI1_Init+0x64>)
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <MX_SPI1_Init+0x64>)
 8003660:	220a      	movs	r2, #10
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <MX_SPI1_Init+0x64>)
 8003666:	f003 f85b 	bl	8006720 <HAL_SPI_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003670:	f000 f9e2 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	2000029c 	.word	0x2000029c
 800367c:	40013000 	.word	0x40013000

08003680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003686:	f107 0308 	add.w	r3, r7, #8
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	463b      	mov	r3, r7
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <MX_TIM1_Init+0x98>)
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <MX_TIM1_Init+0x9c>)
 80036a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <MX_TIM1_Init+0x98>)
 80036a4:	2247      	movs	r2, #71	; 0x47
 80036a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <MX_TIM1_Init+0x98>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <MX_TIM1_Init+0x98>)
 80036b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <MX_TIM1_Init+0x98>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <MX_TIM1_Init+0x98>)
 80036be:	2200      	movs	r2, #0
 80036c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_TIM1_Init+0x98>)
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036c8:	4813      	ldr	r0, [pc, #76]	; (8003718 <MX_TIM1_Init+0x98>)
 80036ca:	f003 fa97 	bl	8006bfc <HAL_TIM_Base_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80036d4:	f000 f9b0 	bl	8003a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4619      	mov	r1, r3
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <MX_TIM1_Init+0x98>)
 80036e6:	f003 fd1f 	bl	8007128 <HAL_TIM_ConfigClockSource>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80036f0:	f000 f9a2 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036fc:	463b      	mov	r3, r7
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	; (8003718 <MX_TIM1_Init+0x98>)
 8003702:	f003 ff19 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800370c:	f000 f994 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200002f4 	.word	0x200002f4
 800371c:	40012c00 	.word	0x40012c00

08003720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	463b      	mov	r3, r7
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <MX_TIM2_Init+0x94>)
 800373e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003742:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <MX_TIM2_Init+0x94>)
 8003746:	2247      	movs	r2, #71	; 0x47
 8003748:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <MX_TIM2_Init+0x94>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <MX_TIM2_Init+0x94>)
 8003752:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <MX_TIM2_Init+0x94>)
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <MX_TIM2_Init+0x94>)
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003764:	4813      	ldr	r0, [pc, #76]	; (80037b4 <MX_TIM2_Init+0x94>)
 8003766:	f003 fa49 	bl	8006bfc <HAL_TIM_Base_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003770:	f000 f962 	bl	8003a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800377a:	f107 0308 	add.w	r3, r7, #8
 800377e:	4619      	mov	r1, r3
 8003780:	480c      	ldr	r0, [pc, #48]	; (80037b4 <MX_TIM2_Init+0x94>)
 8003782:	f003 fcd1 	bl	8007128 <HAL_TIM_ConfigClockSource>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800378c:	f000 f954 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003798:	463b      	mov	r3, r7
 800379a:	4619      	mov	r1, r3
 800379c:	4805      	ldr	r0, [pc, #20]	; (80037b4 <MX_TIM2_Init+0x94>)
 800379e:	f003 fecb 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037a8:	f000 f946 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	2000033c 	.word	0x2000033c

080037b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037cc:	463b      	mov	r3, r7
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <MX_TIM3_Init+0x94>)
 80037d6:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <MX_TIM3_Init+0x98>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <MX_TIM3_Init+0x94>)
 80037dc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80037e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <MX_TIM3_Init+0x94>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <MX_TIM3_Init+0x94>)
 80037ea:	220a      	movs	r2, #10
 80037ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <MX_TIM3_Init+0x94>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037f4:	4b15      	ldr	r3, [pc, #84]	; (800384c <MX_TIM3_Init+0x94>)
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037fa:	4814      	ldr	r0, [pc, #80]	; (800384c <MX_TIM3_Init+0x94>)
 80037fc:	f003 f9fe 	bl	8006bfc <HAL_TIM_Base_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003806:	f000 f917 	bl	8003a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800380a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800380e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003810:	f107 0308 	add.w	r3, r7, #8
 8003814:	4619      	mov	r1, r3
 8003816:	480d      	ldr	r0, [pc, #52]	; (800384c <MX_TIM3_Init+0x94>)
 8003818:	f003 fc86 	bl	8007128 <HAL_TIM_ConfigClockSource>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003822:	f000 f909 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800382e:	463b      	mov	r3, r7
 8003830:	4619      	mov	r1, r3
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <MX_TIM3_Init+0x94>)
 8003834:	f003 fe80 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800383e:	f000 f8fb 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000384 	.word	0x20000384
 8003850:	40000400 	.word	0x40000400

08003854 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003868:	463b      	mov	r3, r7
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003870:	4b22      	ldr	r3, [pc, #136]	; (80038fc <MX_TIM4_Init+0xa8>)
 8003872:	4a23      	ldr	r2, [pc, #140]	; (8003900 <MX_TIM4_Init+0xac>)
 8003874:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8003876:	4b21      	ldr	r3, [pc, #132]	; (80038fc <MX_TIM4_Init+0xa8>)
 8003878:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800387c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <MX_TIM4_Init+0xa8>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <MX_TIM4_Init+0xa8>)
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <MX_TIM4_Init+0xa8>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003890:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <MX_TIM4_Init+0xa8>)
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003896:	4819      	ldr	r0, [pc, #100]	; (80038fc <MX_TIM4_Init+0xa8>)
 8003898:	f003 f9b0 	bl	8006bfc <HAL_TIM_Base_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80038a2:	f000 f8c9 	bl	8003a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80038ac:	f107 0308 	add.w	r3, r7, #8
 80038b0:	4619      	mov	r1, r3
 80038b2:	4812      	ldr	r0, [pc, #72]	; (80038fc <MX_TIM4_Init+0xa8>)
 80038b4:	f003 fc38 	bl	8007128 <HAL_TIM_ConfigClockSource>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80038be:	f000 f8bb 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038ca:	463b      	mov	r3, r7
 80038cc:	4619      	mov	r1, r3
 80038ce:	480b      	ldr	r0, [pc, #44]	; (80038fc <MX_TIM4_Init+0xa8>)
 80038d0:	f003 fe32 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80038da:	f000 f8ad 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80038de:	2100      	movs	r1, #0
 80038e0:	4806      	ldr	r0, [pc, #24]	; (80038fc <MX_TIM4_Init+0xa8>)
 80038e2:	f003 fa77 	bl	8006dd4 <HAL_TIM_PWM_Start>
		HAL_Delay(100); // Introduce a delay (adjust as needed)
 80038e6:	2064      	movs	r0, #100	; 0x64
 80038e8:	f000 fdb4 	bl	8004454 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80038ec:	2104      	movs	r1, #4
 80038ee:	4803      	ldr	r0, [pc, #12]	; (80038fc <MX_TIM4_Init+0xa8>)
 80038f0:	f003 fa70 	bl	8006dd4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200003cc 	.word	0x200003cc
 8003900:	40000800 	.word	0x40000800

08003904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390a:	f107 0310 	add.w	r3, r7, #16
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003918:	4b44      	ldr	r3, [pc, #272]	; (8003a2c <MX_GPIO_Init+0x128>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4a43      	ldr	r2, [pc, #268]	; (8003a2c <MX_GPIO_Init+0x128>)
 800391e:	f043 0320 	orr.w	r3, r3, #32
 8003922:	6193      	str	r3, [r2, #24]
 8003924:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <MX_GPIO_Init+0x128>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003930:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <MX_GPIO_Init+0x128>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <MX_GPIO_Init+0x128>)
 8003936:	f043 0310 	orr.w	r3, r3, #16
 800393a:	6193      	str	r3, [r2, #24]
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <MX_GPIO_Init+0x128>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003948:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <MX_GPIO_Init+0x128>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	4a37      	ldr	r2, [pc, #220]	; (8003a2c <MX_GPIO_Init+0x128>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6193      	str	r3, [r2, #24]
 8003954:	4b35      	ldr	r3, [pc, #212]	; (8003a2c <MX_GPIO_Init+0x128>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <MX_GPIO_Init+0x128>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <MX_GPIO_Init+0x128>)
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	6193      	str	r3, [r2, #24]
 800396c:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <MX_GPIO_Init+0x128>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003978:	2200      	movs	r2, #0
 800397a:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800397e:	482c      	ldr	r0, [pc, #176]	; (8003a30 <MX_GPIO_Init+0x12c>)
 8003980:	f001 fc8d 	bl	800529e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 SET_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|SET_1_Pin;
 8003984:	234e      	movs	r3, #78	; 0x4e
 8003986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800398c:	2302      	movs	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	4619      	mov	r1, r3
 8003996:	4827      	ldr	r0, [pc, #156]	; (8003a34 <MX_GPIO_Init+0x130>)
 8003998:	f001 fae6 	bl	8004f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_1000_Pin SET_100_Pin SET_10_Pin */
  GPIO_InitStruct.Pin = SET_1000_Pin|SET_100_Pin|SET_10_Pin;
 800399c:	2307      	movs	r3, #7
 800399e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	4619      	mov	r1, r3
 80039ae:	4820      	ldr	r0, [pc, #128]	; (8003a30 <MX_GPIO_Init+0x12c>)
 80039b0:	f001 fada 	bl	8004f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ba:	2301      	movs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039be:	2302      	movs	r3, #2
 80039c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c2:	2302      	movs	r3, #2
 80039c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4619      	mov	r1, r3
 80039cc:	4818      	ldr	r0, [pc, #96]	; (8003a30 <MX_GPIO_Init+0x12c>)
 80039ce:	f001 facb 	bl	8004f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039d2:	2308      	movs	r3, #8
 80039d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d6:	2301      	movs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e2:	f107 0310 	add.w	r3, r7, #16
 80039e6:	4619      	mov	r1, r3
 80039e8:	4811      	ldr	r0, [pc, #68]	; (8003a30 <MX_GPIO_Init+0x12c>)
 80039ea:	f001 fabd 	bl	8004f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039ee:	23c0      	movs	r3, #192	; 0xc0
 80039f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f2:	2301      	movs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fa:	2302      	movs	r3, #2
 80039fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	4619      	mov	r1, r3
 8003a04:	480a      	ldr	r0, [pc, #40]	; (8003a30 <MX_GPIO_Init+0x12c>)
 8003a06:	f001 faaf 	bl	8004f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull
 8003a0e:	2302      	movs	r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a16:	f107 0310 	add.w	r3, r7, #16
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <MX_GPIO_Init+0x12c>)
 8003a1e:	f001 faa3 	bl	8004f68 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8003a22:	bf00      	nop
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40010c00 	.word	0x40010c00
 8003a34:	40011000 	.word	0x40011000

08003a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3c:	b672      	cpsid	i
}
 8003a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8003a40:	e7fe      	b.n	8003a40 <Error_Handler+0x8>

08003a42 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
	...

08003a50 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af04      	add	r7, sp, #16
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	9302      	str	r3, [sp, #8]
 8003a60:	2301      	movs	r3, #1
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2178      	movs	r1, #120	; 0x78
 8003a6e:	4803      	ldr	r0, [pc, #12]	; (8003a7c <ssd1306_WriteCommand+0x2c>)
 8003a70:	f001 fd72 	bl	8005558 <HAL_I2C_Mem_Write>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000248 	.word	0x20000248

08003a80 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a92:	9202      	str	r2, [sp, #8]
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	2240      	movs	r2, #64	; 0x40
 8003a9e:	2178      	movs	r1, #120	; 0x78
 8003aa0:	4803      	ldr	r0, [pc, #12]	; (8003ab0 <ssd1306_WriteData+0x30>)
 8003aa2:	f001 fd59 	bl	8005558 <HAL_I2C_Mem_Write>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000248 	.word	0x20000248

08003ab4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003ab8:	f7ff ffc3 	bl	8003a42 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003abc:	2064      	movs	r0, #100	; 0x64
 8003abe:	f000 fcc9 	bl	8004454 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f000 f9cc 	bl	8003e60 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003ac8:	2020      	movs	r0, #32
 8003aca:	f7ff ffc1 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7ff ffbe 	bl	8003a50 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003ad4:	20b0      	movs	r0, #176	; 0xb0
 8003ad6:	f7ff ffbb 	bl	8003a50 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003ada:	20c8      	movs	r0, #200	; 0xc8
 8003adc:	f7ff ffb8 	bl	8003a50 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7ff ffb5 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003ae6:	2010      	movs	r0, #16
 8003ae8:	f7ff ffb2 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003aec:	2040      	movs	r0, #64	; 0x40
 8003aee:	f7ff ffaf 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003af2:	20ff      	movs	r0, #255	; 0xff
 8003af4:	f000 f9a0 	bl	8003e38 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003af8:	20a1      	movs	r0, #161	; 0xa1
 8003afa:	f7ff ffa9 	bl	8003a50 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003afe:	20a6      	movs	r0, #166	; 0xa6
 8003b00:	f7ff ffa6 	bl	8003a50 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003b04:	20a8      	movs	r0, #168	; 0xa8
 8003b06:	f7ff ffa3 	bl	8003a50 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003b0a:	203f      	movs	r0, #63	; 0x3f
 8003b0c:	f7ff ffa0 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003b10:	20a4      	movs	r0, #164	; 0xa4
 8003b12:	f7ff ff9d 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003b16:	20d3      	movs	r0, #211	; 0xd3
 8003b18:	f7ff ff9a 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7ff ff97 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003b22:	20d5      	movs	r0, #213	; 0xd5
 8003b24:	f7ff ff94 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003b28:	20f0      	movs	r0, #240	; 0xf0
 8003b2a:	f7ff ff91 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003b2e:	20d9      	movs	r0, #217	; 0xd9
 8003b30:	f7ff ff8e 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003b34:	2022      	movs	r0, #34	; 0x22
 8003b36:	f7ff ff8b 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003b3a:	20da      	movs	r0, #218	; 0xda
 8003b3c:	f7ff ff88 	bl	8003a50 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003b40:	2012      	movs	r0, #18
 8003b42:	f7ff ff85 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003b46:	20db      	movs	r0, #219	; 0xdb
 8003b48:	f7ff ff82 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003b4c:	2020      	movs	r0, #32
 8003b4e:	f7ff ff7f 	bl	8003a50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003b52:	208d      	movs	r0, #141	; 0x8d
 8003b54:	f7ff ff7c 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003b58:	2014      	movs	r0, #20
 8003b5a:	f7ff ff79 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f000 f97e 	bl	8003e60 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003b64:	2000      	movs	r0, #0
 8003b66:	f000 f80f 	bl	8003b88 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003b6a:	f000 f825 	bl	8003bb8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <ssd1306_Init+0xd0>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <ssd1306_Init+0xd0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003b7a:	4b02      	ldr	r3, [pc, #8]	; (8003b84 <ssd1306_Init+0xd0>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	711a      	strb	r2, [r3, #4]
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000f8c 	.word	0x20000f8c

08003b88 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <ssd1306_Fill+0x14>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <ssd1306_Fill+0x16>
 8003b9c:	23ff      	movs	r3, #255	; 0xff
 8003b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4803      	ldr	r0, [pc, #12]	; (8003bb4 <ssd1306_Fill+0x2c>)
 8003ba6:	f004 fad4 	bl	8008152 <memset>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000b8c 	.word	0x20000b8c

08003bb8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	71fb      	strb	r3, [r7, #7]
 8003bc2:	e016      	b.n	8003bf2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	3b50      	subs	r3, #80	; 0x50
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff40 	bl	8003a50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7ff ff3d 	bl	8003a50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003bd6:	2010      	movs	r0, #16
 8003bd8:	f7ff ff3a 	bl	8003a50 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	01db      	lsls	r3, r3, #7
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <ssd1306_UpdateScreen+0x4c>)
 8003be2:	4413      	add	r3, r2
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff4a 	bl	8003a80 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	71fb      	strb	r3, [r7, #7]
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2b07      	cmp	r3, #7
 8003bf6:	d9e5      	bls.n	8003bc4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000b8c 	.word	0x20000b8c

08003c08 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
 8003c12:	460b      	mov	r3, r1
 8003c14:	71bb      	strb	r3, [r7, #6]
 8003c16:	4613      	mov	r3, r2
 8003c18:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db3d      	blt.n	8003c9e <ssd1306_DrawPixel+0x96>
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	2b3f      	cmp	r3, #63	; 0x3f
 8003c26:	d83a      	bhi.n	8003c9e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003c28:	797b      	ldrb	r3, [r7, #5]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d11a      	bne.n	8003c64 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003c2e:	79fa      	ldrb	r2, [r7, #7]
 8003c30:	79bb      	ldrb	r3, [r7, #6]
 8003c32:	08db      	lsrs	r3, r3, #3
 8003c34:	b2d8      	uxtb	r0, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	01db      	lsls	r3, r3, #7
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <ssd1306_DrawPixel+0xa0>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	b25a      	sxtb	r2, r3
 8003c42:	79bb      	ldrb	r3, [r7, #6]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b259      	sxtb	r1, r3
 8003c54:	79fa      	ldrb	r2, [r7, #7]
 8003c56:	4603      	mov	r3, r0
 8003c58:	01db      	lsls	r3, r3, #7
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b2c9      	uxtb	r1, r1
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <ssd1306_DrawPixel+0xa0>)
 8003c60:	54d1      	strb	r1, [r2, r3]
 8003c62:	e01d      	b.n	8003ca0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003c64:	79fa      	ldrb	r2, [r7, #7]
 8003c66:	79bb      	ldrb	r3, [r7, #6]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	b2d8      	uxtb	r0, r3
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	01db      	lsls	r3, r3, #7
 8003c70:	4413      	add	r3, r2
 8003c72:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <ssd1306_DrawPixel+0xa0>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	79bb      	ldrb	r3, [r7, #6]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	2101      	movs	r1, #1
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	b25b      	sxtb	r3, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b259      	sxtb	r1, r3
 8003c8e:	79fa      	ldrb	r2, [r7, #7]
 8003c90:	4603      	mov	r3, r0
 8003c92:	01db      	lsls	r3, r3, #7
 8003c94:	4413      	add	r3, r2
 8003c96:	b2c9      	uxtb	r1, r1
 8003c98:	4a03      	ldr	r2, [pc, #12]	; (8003ca8 <ssd1306_DrawPixel+0xa0>)
 8003c9a:	54d1      	strb	r1, [r2, r3]
 8003c9c:	e000      	b.n	8003ca0 <ssd1306_DrawPixel+0x98>
        return;
 8003c9e:	bf00      	nop
    }
}
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	20000b8c 	.word	0x20000b8c

08003cac <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	1d38      	adds	r0, r7, #4
 8003cb6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b1f      	cmp	r3, #31
 8003cc8:	d902      	bls.n	8003cd0 <ssd1306_WriteChar+0x24>
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b7e      	cmp	r3, #126	; 0x7e
 8003cce:	d901      	bls.n	8003cd4 <ssd1306_WriteChar+0x28>
        return 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e06d      	b.n	8003db0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003cd4:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	793b      	ldrb	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	dc06      	bgt.n	8003cf0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003ce2:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003ce4:	885b      	ldrh	r3, [r3, #2]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	797b      	ldrb	r3, [r7, #5]
 8003cea:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	dd01      	ble.n	8003cf4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e05d      	b.n	8003db0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e04c      	b.n	8003d94 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	3b20      	subs	r3, #32
 8003d00:	7979      	ldrb	r1, [r7, #5]
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4619      	mov	r1, r3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	440b      	add	r3, r1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e034      	b.n	8003d84 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003d2a:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	b2d8      	uxtb	r0, r3
 8003d38:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003d3a:	885b      	ldrh	r3, [r3, #2]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	7bba      	ldrb	r2, [r7, #14]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f7ff ff5d 	bl	8003c08 <ssd1306_DrawPixel>
 8003d4e:	e016      	b.n	8003d7e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	b2d8      	uxtb	r0, r3
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003d60:	885b      	ldrh	r3, [r3, #2]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2d9      	uxtb	r1, r3
 8003d6c:	7bbb      	ldrb	r3, [r7, #14]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf0c      	ite	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	2300      	movne	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f7ff ff45 	bl	8003c08 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	793b      	ldrb	r3, [r7, #4]
 8003d86:	461a      	mov	r2, r3
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d3c5      	bcc.n	8003d1a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	797b      	ldrb	r3, [r7, #5]
 8003d96:	461a      	mov	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d3ad      	bcc.n	8003cfa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	793b      	ldrb	r3, [r7, #4]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <ssd1306_WriteChar+0x10c>)
 8003dac:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3724      	adds	r7, #36	; 0x24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd90      	pop	{r4, r7, pc}
 8003db8:	20000f8c 	.word	0x20000f8c

08003dbc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	1d38      	adds	r0, r7, #4
 8003dc6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003dca:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003dcc:	e012      	b.n	8003df4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	7818      	ldrb	r0, [r3, #0]
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	1d3a      	adds	r2, r7, #4
 8003dd6:	ca06      	ldmia	r2, {r1, r2}
 8003dd8:	f7ff ff68 	bl	8003cac <ssd1306_WriteChar>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d002      	beq.n	8003dee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	e008      	b.n	8003e00 <ssd1306_WriteString+0x44>
        }
        str++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e8      	bne.n	8003dce <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	460a      	mov	r2, r1
 8003e12:	71fb      	strb	r3, [r7, #7]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <ssd1306_SetCursor+0x2c>)
 8003e1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003e20:	79bb      	ldrb	r3, [r7, #6]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <ssd1306_SetCursor+0x2c>)
 8003e26:	805a      	strh	r2, [r3, #2]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000f8c 	.word	0x20000f8c

08003e38 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003e42:	2381      	movs	r3, #129	; 0x81
 8003e44:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fe01 	bl	8003a50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fdfd 	bl	8003a50 <ssd1306_WriteCommand>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003e70:	23af      	movs	r3, #175	; 0xaf
 8003e72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <ssd1306_SetDisplayOn+0x38>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	715a      	strb	r2, [r3, #5]
 8003e7a:	e004      	b.n	8003e86 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003e7c:	23ae      	movs	r3, #174	; 0xae
 8003e7e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <ssd1306_SetDisplayOn+0x38>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fde1 	bl	8003a50 <ssd1306_WriteCommand>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000f8c 	.word	0x20000f8c

08003e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_MspInit+0x5c>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_MspInit+0x5c>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6193      	str	r3, [r2, #24]
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_MspInit+0x5c>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_MspInit+0x5c>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <HAL_MspInit+0x5c>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	61d3      	str	r3, [r2, #28]
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_MspInit+0x5c>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_MspInit+0x60>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_MspInit+0x60>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010000 	.word	0x40010000

08003f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 0310 	add.w	r3, r7, #16
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <HAL_ADC_MspInit+0x6c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d121      	bne.n	8003f64 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_ADC_MspInit+0x70>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_ADC_MspInit+0x70>)
 8003f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2a:	6193      	str	r3, [r2, #24]
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_ADC_MspInit+0x70>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_ADC_MspInit+0x70>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <HAL_ADC_MspInit+0x70>)
 8003f3e:	f043 0304 	orr.w	r3, r3, #4
 8003f42:	6193      	str	r3, [r2, #24]
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_ADC_MspInit+0x70>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003f50:	230e      	movs	r3, #14
 8003f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f54:	2303      	movs	r3, #3
 8003f56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f107 0310 	add.w	r3, r7, #16
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4805      	ldr	r0, [pc, #20]	; (8003f74 <HAL_ADC_MspInit+0x74>)
 8003f60:	f001 f802 	bl	8004f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003f64:	bf00      	nop
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40012800 	.word	0x40012800
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40010800 	.word	0x40010800

08003f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_I2C_MspInit+0x90>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d132      	bne.n	8003ffe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HAL_I2C_MspInit+0x94>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_I2C_MspInit+0x94>)
 8003f9e:	f043 0308 	orr.w	r3, r3, #8
 8003fa2:	6193      	str	r3, [r2, #24]
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_I2C_MspInit+0x94>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fb6:	2312      	movs	r3, #18
 8003fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4812      	ldr	r0, [pc, #72]	; (8004010 <HAL_I2C_MspInit+0x98>)
 8003fc6:	f000 ffcf 	bl	8004f68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_I2C_MspInit+0x9c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f043 0302 	orr.w	r3, r3, #2
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <HAL_I2C_MspInit+0x9c>)
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_I2C_MspInit+0x94>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4a08      	ldr	r2, [pc, #32]	; (800400c <HAL_I2C_MspInit+0x94>)
 8003fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ff0:	61d3      	str	r3, [r2, #28]
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_I2C_MspInit+0x94>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ffe:	bf00      	nop
 8004000:	3728      	adds	r7, #40	; 0x28
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40005400 	.word	0x40005400
 800400c:	40021000 	.word	0x40021000
 8004010:	40010c00 	.word	0x40010c00
 8004014:	40010000 	.word	0x40010000

08004018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 0310 	add.w	r3, r7, #16
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <HAL_SPI_MspInit+0x70>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d123      	bne.n	8004080 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <HAL_SPI_MspInit+0x74>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <HAL_SPI_MspInit+0x74>)
 800403e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004042:	6193      	str	r3, [r2, #24]
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_SPI_MspInit+0x74>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_SPI_MspInit+0x74>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <HAL_SPI_MspInit+0x74>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6193      	str	r3, [r2, #24]
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_SPI_MspInit+0x74>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004068:	23a0      	movs	r3, #160	; 0xa0
 800406a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	f107 0310 	add.w	r3, r7, #16
 8004078:	4619      	mov	r1, r3
 800407a:	4805      	ldr	r0, [pc, #20]	; (8004090 <HAL_SPI_MspInit+0x78>)
 800407c:	f000 ff74 	bl	8004f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004080:	bf00      	nop
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40013000 	.word	0x40013000
 800408c:	40021000 	.word	0x40021000
 8004090:	40010800 	.word	0x40010800

08004094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <HAL_TIM_Base_MspInit+0xb0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10c      	bne.n	80040c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040b0:	6193      	str	r3, [r2, #24]
 80040b2:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040be:	e03c      	b.n	800413a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d10c      	bne.n	80040e4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040ca:	4b1f      	ldr	r3, [pc, #124]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	61d3      	str	r3, [r2, #28]
 80040d6:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
}
 80040e2:	e02a      	b.n	800413a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_TIM_Base_MspInit+0xb8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d114      	bne.n	8004118 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	61d3      	str	r3, [r2, #28]
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	201d      	movs	r0, #29
 800410c:	f000 fef5 	bl	8004efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004110:	201d      	movs	r0, #29
 8004112:	f000 ff0e 	bl	8004f32 <HAL_NVIC_EnableIRQ>
}
 8004116:	e010      	b.n	800413a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <HAL_TIM_Base_MspInit+0xbc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10b      	bne.n	800413a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	61d3      	str	r3, [r2, #28]
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_TIM_Base_MspInit+0xb4>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40021000 	.word	0x40021000
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800

08004154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004158:	e7fe      	b.n	8004158 <NMI_Handler+0x4>

0800415a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <HardFault_Handler+0x4>

08004160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler+0x4>

08004166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <UsageFault_Handler+0x4>

08004172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800418a:	b480      	push	{r7}
 800418c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800419a:	f000 f93f 	bl	800441c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041a8:	4802      	ldr	r0, [pc, #8]	; (80041b4 <TIM3_IRQHandler+0x10>)
 80041aa:	f002 feb5 	bl	8006f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000384 	.word	0x20000384

080041b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return 1;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <_kill>:

int _kill(int pid, int sig)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041d0:	f004 f812 	bl	80081f8 <__errno>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2216      	movs	r2, #22
 80041d8:	601a      	str	r2, [r3, #0]
  return -1;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_exit>:

void _exit (int status)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041ee:	f04f 31ff 	mov.w	r1, #4294967295
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ffe7 	bl	80041c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041f8:	e7fe      	b.n	80041f8 <_exit+0x12>

080041fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e00a      	b.n	8004222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800420c:	f3af 8000 	nop.w
 8004210:	4601      	mov	r1, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	60ba      	str	r2, [r7, #8]
 8004218:	b2ca      	uxtb	r2, r1
 800421a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3301      	adds	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	dbf0      	blt.n	800420c <_read+0x12>
  }

  return len;
 800422a:	687b      	ldr	r3, [r7, #4]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e009      	b.n	800425a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	60ba      	str	r2, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	dbf1      	blt.n	8004246 <_write+0x12>
  }
  return len;
 8004262:	687b      	ldr	r3, [r7, #4]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_close>:

int _close(int file)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004292:	605a      	str	r2, [r3, #4]
  return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <_isatty>:

int _isatty(int file)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042a8:	2301      	movs	r3, #1
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <_sbrk+0x5c>)
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <_sbrk+0x60>)
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <_sbrk+0x64>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <_sbrk+0x64>)
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <_sbrk+0x68>)
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <_sbrk+0x64>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d207      	bcs.n	800430c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042fc:	f003 ff7c 	bl	80081f8 <__errno>
 8004300:	4603      	mov	r3, r0
 8004302:	220c      	movs	r2, #12
 8004304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004306:	f04f 33ff 	mov.w	r3, #4294967295
 800430a:	e009      	b.n	8004320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <_sbrk+0x64>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <_sbrk+0x64>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <_sbrk+0x64>)
 800431c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20005000 	.word	0x20005000
 800432c:	00000400 	.word	0x00000400
 8004330:	20000f94 	.word	0x20000f94
 8004334:	200010e8 	.word	0x200010e8

08004338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004344:	f7ff fff8 	bl	8004338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004348:	480b      	ldr	r0, [pc, #44]	; (8004378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800434a:	490c      	ldr	r1, [pc, #48]	; (800437c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800434c:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004350:	e002      	b.n	8004358 <LoopCopyDataInit>

08004352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004356:	3304      	adds	r3, #4

08004358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800435c:	d3f9      	bcc.n	8004352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004360:	4c09      	ldr	r4, [pc, #36]	; (8004388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004364:	e001      	b.n	800436a <LoopFillZerobss>

08004366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004368:	3204      	adds	r2, #4

0800436a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800436c:	d3fb      	bcc.n	8004366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800436e:	f003 ff49 	bl	8008204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004372:	f7fe ff1f 	bl	80031b4 <main>
  bx lr
 8004376:	4770      	bx	lr
  ldr r0, =_sdata
 8004378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800437c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004380:	0800c4c4 	.word	0x0800c4c4
  ldr r2, =_sbss
 8004384:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8004388:	200010e8 	.word	0x200010e8

0800438c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800438c:	e7fe      	b.n	800438c <ADC1_2_IRQHandler>
	...

08004390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_Init+0x28>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <HAL_Init+0x28>)
 800439a:	f043 0310 	orr.w	r3, r3, #16
 800439e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a0:	2003      	movs	r0, #3
 80043a2:	f000 fd9f 	bl	8004ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043a6:	200f      	movs	r0, #15
 80043a8:	f000 f808 	bl	80043bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043ac:	f7ff fd76 	bl	8003e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40022000 	.word	0x40022000

080043bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_InitTick+0x54>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_InitTick+0x58>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4619      	mov	r1, r3
 80043ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fdb7 	bl	8004f4e <HAL_SYSTICK_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e00e      	b.n	8004408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d80a      	bhi.n	8004406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f0:	2200      	movs	r2, #0
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	f000 fd7f 	bl	8004efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043fc:	4a06      	ldr	r2, [pc, #24]	; (8004418 <HAL_InitTick+0x5c>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000028 	.word	0x20000028
 8004414:	20000030 	.word	0x20000030
 8004418:	2000002c 	.word	0x2000002c

0800441c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_IncTick+0x1c>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_IncTick+0x20>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4413      	add	r3, r2
 800442c:	4a03      	ldr	r2, [pc, #12]	; (800443c <HAL_IncTick+0x20>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	20000030 	.word	0x20000030
 800443c:	20000f98 	.word	0x20000f98

08004440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return uwTick;
 8004444:	4b02      	ldr	r3, [pc, #8]	; (8004450 <HAL_GetTick+0x10>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	20000f98 	.word	0x20000f98

08004454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7ff fff0 	bl	8004440 <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d005      	beq.n	800447a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_Delay+0x44>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800447a:	bf00      	nop
 800447c:	f7ff ffe0 	bl	8004440 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d8f7      	bhi.n	800447c <HAL_Delay+0x28>
  {
  }
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000030 	.word	0x20000030

0800449c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0be      	b.n	800463c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fd10 	bl	8003f00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fbf1 	bl	8004cc8 <ADC_ConversionStop_Disable>
 80044e6:	4603      	mov	r3, r0
 80044e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 8099 	bne.w	800462a <HAL_ADC_Init+0x18e>
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 8095 	bne.w	800462a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004508:	f023 0302 	bic.w	r3, r3, #2
 800450c:	f043 0202 	orr.w	r2, r3, #2
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800451c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7b1b      	ldrb	r3, [r3, #12]
 8004522:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004524:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004534:	d003      	beq.n	800453e <HAL_ADC_Init+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d102      	bne.n	8004544 <HAL_ADC_Init+0xa8>
 800453e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004542:	e000      	b.n	8004546 <HAL_ADC_Init+0xaa>
 8004544:	2300      	movs	r3, #0
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7d1b      	ldrb	r3, [r3, #20]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d119      	bne.n	8004588 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7b1b      	ldrb	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	3b01      	subs	r3, #1
 8004562:	035a      	lsls	r2, r3, #13
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e00b      	b.n	8004588 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f043 0201 	orr.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_ADC_Init+0x1a8>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d003      	beq.n	80045c2 <HAL_ADC_Init+0x126>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d104      	bne.n	80045cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	051b      	lsls	r3, r3, #20
 80045ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	430a      	orrs	r2, r1
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <HAL_ADC_Init+0x1ac>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10b      	bne.n	8004608 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004606:	e018      	b.n	800463a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f023 0312 	bic.w	r3, r3, #18
 8004610:	f043 0210 	orr.w	r2, r3, #16
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004628:	e007      	b.n	800463a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	f043 0210 	orr.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	ffe1f7fd 	.word	0xffe1f7fd
 8004648:	ff1f0efe 	.word	0xff1f0efe

0800464c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_ADC_Start+0x1a>
 8004662:	2302      	movs	r3, #2
 8004664:	e098      	b.n	8004798 <HAL_ADC_Start+0x14c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fad0 	bl	8004c14 <ADC_Enable>
 8004674:	4603      	mov	r3, r0
 8004676:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 8087 	bne.w	800478e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <HAL_ADC_Start+0x154>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d105      	bne.n	80046aa <HAL_ADC_Start+0x5e>
 800469e:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <HAL_ADC_Start+0x158>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d115      	bne.n	80046d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d026      	beq.n	8004712 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046d4:	e01d      	b.n	8004712 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <HAL_ADC_Start+0x158>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_ADC_Start+0xaa>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <HAL_ADC_Start+0x154>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10d      	bne.n	8004712 <HAL_ADC_Start+0xc6>
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_ADC_Start+0x158>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800470a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f023 0206 	bic.w	r2, r3, #6
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c
 800472a:	e002      	b.n	8004732 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0202 	mvn.w	r2, #2
 8004742:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800474e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004752:	d113      	bne.n	800477c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004758:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <HAL_ADC_Start+0x154>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d105      	bne.n	800476a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_ADC_Start+0x158>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	e00c      	b.n	8004796 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	e003      	b.n	8004796 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40012800 	.word	0x40012800
 80047a4:	40012400 	.word	0x40012400

080047a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_Stop+0x1a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e01a      	b.n	80047f8 <HAL_ADC_Stop+0x50>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa7c 	bl	8004cc8 <ADC_ConversionStop_Disable>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004816:	f7ff fe13 	bl	8004440 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0d3      	b.n	80049ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d131      	bne.n	80048b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800485a:	2b00      	cmp	r3, #0
 800485c:	d12a      	bne.n	80048b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800485e:	e021      	b.n	80048a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d01d      	beq.n	80048a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_ADC_PollForConversion+0x7e>
 800486e:	f7ff fde7 	bl	8004440 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d212      	bcs.n	80048a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0a2      	b.n	80049ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0d6      	beq.n	8004860 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80048b2:	e070      	b.n	8004996 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_ADC_PollForConversion+0x1f4>)
 80048b6:	681c      	ldr	r4, [r3, #0]
 80048b8:	2002      	movs	r0, #2
 80048ba:	f001 fe7b 	bl	80065b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80048be:	4603      	mov	r3, r0
 80048c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6919      	ldr	r1, [r3, #16]
 80048ca:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_ADC_PollForConversion+0x1f8>)
 80048cc:	400b      	ands	r3, r1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_ADC_PollForConversion+0x104>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68d9      	ldr	r1, [r3, #12]
 80048d8:	4b48      	ldr	r3, [pc, #288]	; (80049fc <HAL_ADC_PollForConversion+0x1fc>)
 80048da:	400b      	ands	r3, r1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d111      	bne.n	8004904 <HAL_ADC_PollForConversion+0x104>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	4b46      	ldr	r3, [pc, #280]	; (8004a00 <HAL_ADC_PollForConversion+0x200>)
 80048e8:	400b      	ands	r3, r1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <HAL_ADC_PollForConversion+0x100>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68d9      	ldr	r1, [r3, #12]
 80048f4:	4b43      	ldr	r3, [pc, #268]	; (8004a04 <HAL_ADC_PollForConversion+0x204>)
 80048f6:	400b      	ands	r3, r1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_PollForConversion+0x100>
 80048fc:	2314      	movs	r3, #20
 80048fe:	e020      	b.n	8004942 <HAL_ADC_PollForConversion+0x142>
 8004900:	2329      	movs	r3, #41	; 0x29
 8004902:	e01e      	b.n	8004942 <HAL_ADC_PollForConversion+0x142>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6919      	ldr	r1, [r3, #16]
 800490a:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_ADC_PollForConversion+0x200>)
 800490c:	400b      	ands	r3, r1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_ADC_PollForConversion+0x120>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68d9      	ldr	r1, [r3, #12]
 8004918:	4b3a      	ldr	r3, [pc, #232]	; (8004a04 <HAL_ADC_PollForConversion+0x204>)
 800491a:	400b      	ands	r3, r1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <HAL_ADC_PollForConversion+0x13c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6919      	ldr	r1, [r3, #16]
 8004926:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_ADC_PollForConversion+0x208>)
 8004928:	400b      	ands	r3, r1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_ADC_PollForConversion+0x140>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68d9      	ldr	r1, [r3, #12]
 8004934:	4b34      	ldr	r3, [pc, #208]	; (8004a08 <HAL_ADC_PollForConversion+0x208>)
 8004936:	400b      	ands	r3, r1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_ADC_PollForConversion+0x140>
 800493c:	2354      	movs	r3, #84	; 0x54
 800493e:	e000      	b.n	8004942 <HAL_ADC_PollForConversion+0x142>
 8004940:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004948:	e021      	b.n	800498e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d01a      	beq.n	8004988 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_ADC_PollForConversion+0x168>
 8004958:	f7ff fd72 	bl	8004440 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d20f      	bcs.n	8004988 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d90b      	bls.n	8004988 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e030      	b.n	80049ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d8d9      	bhi.n	800494a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0212 	mvn.w	r2, #18
 800499e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80049b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80049ba:	d115      	bne.n	80049e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d111      	bne.n	80049e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f043 0201 	orr.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000028 	.word	0x20000028
 80049f8:	24924924 	.word	0x24924924
 80049fc:	00924924 	.word	0x00924924
 8004a00:	12492492 	.word	0x12492492
 8004a04:	00492492 	.word	0x00492492
 8004a08:	00249249 	.word	0x00249249

08004a0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x20>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e0dc      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x1da>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b06      	cmp	r3, #6
 8004a52:	d81c      	bhi.n	8004a8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	3b05      	subs	r3, #5
 8004a66:	221f      	movs	r2, #31
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	4019      	ands	r1, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3b05      	subs	r3, #5
 8004a80:	fa00 f203 	lsl.w	r2, r0, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a8c:	e03c      	b.n	8004b08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d81c      	bhi.n	8004ad0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3b23      	subs	r3, #35	; 0x23
 8004aa8:	221f      	movs	r2, #31
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	4019      	ands	r1, r3
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	3b23      	subs	r3, #35	; 0x23
 8004ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ace:	e01b      	b.n	8004b08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	3b41      	subs	r3, #65	; 0x41
 8004ae2:	221f      	movs	r2, #31
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	4019      	ands	r1, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	3b41      	subs	r3, #65	; 0x41
 8004afc:	fa00 f203 	lsl.w	r2, r0, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d91c      	bls.n	8004b4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68d9      	ldr	r1, [r3, #12]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	3b1e      	subs	r3, #30
 8004b22:	2207      	movs	r2, #7
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	4019      	ands	r1, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6898      	ldr	r0, [r3, #8]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4413      	add	r3, r2
 8004b3a:	3b1e      	subs	r3, #30
 8004b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	e019      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6919      	ldr	r1, [r3, #16]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	2207      	movs	r2, #7
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	4019      	ands	r1, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	6898      	ldr	r0, [r3, #8]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	fa00 f203 	lsl.w	r2, r0, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d003      	beq.n	8004b8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b8a:	2b11      	cmp	r3, #17
 8004b8c:	d132      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <HAL_ADC_ConfigChannel+0x1e4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d125      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d126      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004bb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d11a      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_ADC_ConfigChannel+0x1e8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_ADC_ConfigChannel+0x1ec>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0c9a      	lsrs	r2, r3, #18
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bd4:	e002      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x1b2>
 8004be2:	e007      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	40012400 	.word	0x40012400
 8004c0c:	20000028 	.word	0x20000028
 8004c10:	431bde83 	.word	0x431bde83

08004c14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d040      	beq.n	8004cb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c42:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <ADC_Enable+0xac>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <ADC_Enable+0xb0>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	0c9b      	lsrs	r3, r3, #18
 8004c4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004c50:	e002      	b.n	8004c58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f9      	bne.n	8004c52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c5e:	f7ff fbef 	bl	8004440 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004c64:	e01f      	b.n	8004ca6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c66:	f7ff fbeb 	bl	8004440 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d918      	bls.n	8004ca6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d011      	beq.n	8004ca6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e007      	b.n	8004cb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d1d8      	bne.n	8004c66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000028 	.word	0x20000028
 8004cc4:	431bde83 	.word	0x431bde83

08004cc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d12e      	bne.n	8004d40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cf2:	f7ff fba5 	bl	8004440 <HAL_GetTick>
 8004cf6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004cf8:	e01b      	b.n	8004d32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004cfa:	f7ff fba1 	bl	8004440 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d914      	bls.n	8004d32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10d      	bne.n	8004d32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f043 0210 	orr.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e007      	b.n	8004d42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d0dc      	beq.n	8004cfa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <__NVIC_SetPriorityGrouping+0x44>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d7e:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <__NVIC_SetPriorityGrouping+0x44>)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	60d3      	str	r3, [r2, #12]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <__NVIC_GetPriorityGrouping+0x18>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	f003 0307 	and.w	r3, r3, #7
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	db0b      	blt.n	8004dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	f003 021f 	and.w	r2, r3, #31
 8004dc8:	4906      	ldr	r1, [pc, #24]	; (8004de4 <__NVIC_EnableIRQ+0x34>)
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	e000e100 	.word	0xe000e100

08004de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db0a      	blt.n	8004e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	490c      	ldr	r1, [pc, #48]	; (8004e34 <__NVIC_SetPriority+0x4c>)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e10:	e00a      	b.n	8004e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4908      	ldr	r1, [pc, #32]	; (8004e38 <__NVIC_SetPriority+0x50>)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	0112      	lsls	r2, r2, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	761a      	strb	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	; 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	bf28      	it	cs
 8004e5a:	2304      	movcs	r3, #4
 8004e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d902      	bls.n	8004e6c <NVIC_EncodePriority+0x30>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3b03      	subs	r3, #3
 8004e6a:	e000      	b.n	8004e6e <NVIC_EncodePriority+0x32>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	401a      	ands	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	4313      	orrs	r3, r2
         );
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	; 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eb0:	d301      	bcc.n	8004eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e00f      	b.n	8004ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <SysTick_Config+0x40>)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ebe:	210f      	movs	r1, #15
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	f7ff ff90 	bl	8004de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <SysTick_Config+0x40>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ece:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <SysTick_Config+0x40>)
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000e010 	.word	0xe000e010

08004ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff2d 	bl	8004d4c <__NVIC_SetPriorityGrouping>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b086      	sub	sp, #24
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	4603      	mov	r3, r0
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f0c:	f7ff ff42 	bl	8004d94 <__NVIC_GetPriorityGrouping>
 8004f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	6978      	ldr	r0, [r7, #20]
 8004f18:	f7ff ff90 	bl	8004e3c <NVIC_EncodePriority>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff5f 	bl	8004de8 <__NVIC_SetPriority>
}
 8004f2a:	bf00      	nop
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	4603      	mov	r3, r0
 8004f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff ff35 	bl	8004db0 <__NVIC_EnableIRQ>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ffa2 	bl	8004ea0 <SysTick_Config>
 8004f5c:	4603      	mov	r3, r0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b08b      	sub	sp, #44	; 0x2c
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f7a:	e169      	b.n	8005250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	f040 8158 	bne.w	800524a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a9a      	ldr	r2, [pc, #616]	; (8005208 <HAL_GPIO_Init+0x2a0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d05e      	beq.n	8005062 <HAL_GPIO_Init+0xfa>
 8004fa4:	4a98      	ldr	r2, [pc, #608]	; (8005208 <HAL_GPIO_Init+0x2a0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d875      	bhi.n	8005096 <HAL_GPIO_Init+0x12e>
 8004faa:	4a98      	ldr	r2, [pc, #608]	; (800520c <HAL_GPIO_Init+0x2a4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d058      	beq.n	8005062 <HAL_GPIO_Init+0xfa>
 8004fb0:	4a96      	ldr	r2, [pc, #600]	; (800520c <HAL_GPIO_Init+0x2a4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d86f      	bhi.n	8005096 <HAL_GPIO_Init+0x12e>
 8004fb6:	4a96      	ldr	r2, [pc, #600]	; (8005210 <HAL_GPIO_Init+0x2a8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d052      	beq.n	8005062 <HAL_GPIO_Init+0xfa>
 8004fbc:	4a94      	ldr	r2, [pc, #592]	; (8005210 <HAL_GPIO_Init+0x2a8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d869      	bhi.n	8005096 <HAL_GPIO_Init+0x12e>
 8004fc2:	4a94      	ldr	r2, [pc, #592]	; (8005214 <HAL_GPIO_Init+0x2ac>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d04c      	beq.n	8005062 <HAL_GPIO_Init+0xfa>
 8004fc8:	4a92      	ldr	r2, [pc, #584]	; (8005214 <HAL_GPIO_Init+0x2ac>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d863      	bhi.n	8005096 <HAL_GPIO_Init+0x12e>
 8004fce:	4a92      	ldr	r2, [pc, #584]	; (8005218 <HAL_GPIO_Init+0x2b0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d046      	beq.n	8005062 <HAL_GPIO_Init+0xfa>
 8004fd4:	4a90      	ldr	r2, [pc, #576]	; (8005218 <HAL_GPIO_Init+0x2b0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d85d      	bhi.n	8005096 <HAL_GPIO_Init+0x12e>
 8004fda:	2b12      	cmp	r3, #18
 8004fdc:	d82a      	bhi.n	8005034 <HAL_GPIO_Init+0xcc>
 8004fde:	2b12      	cmp	r3, #18
 8004fe0:	d859      	bhi.n	8005096 <HAL_GPIO_Init+0x12e>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_GPIO_Init+0x80>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005063 	.word	0x08005063
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800504f 	.word	0x0800504f
 8004ff4:	08005091 	.word	0x08005091
 8004ff8:	08005097 	.word	0x08005097
 8004ffc:	08005097 	.word	0x08005097
 8005000:	08005097 	.word	0x08005097
 8005004:	08005097 	.word	0x08005097
 8005008:	08005097 	.word	0x08005097
 800500c:	08005097 	.word	0x08005097
 8005010:	08005097 	.word	0x08005097
 8005014:	08005097 	.word	0x08005097
 8005018:	08005097 	.word	0x08005097
 800501c:	08005097 	.word	0x08005097
 8005020:	08005097 	.word	0x08005097
 8005024:	08005097 	.word	0x08005097
 8005028:	08005097 	.word	0x08005097
 800502c:	08005045 	.word	0x08005045
 8005030:	08005059 	.word	0x08005059
 8005034:	4a79      	ldr	r2, [pc, #484]	; (800521c <HAL_GPIO_Init+0x2b4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800503a:	e02c      	b.n	8005096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	623b      	str	r3, [r7, #32]
          break;
 8005042:	e029      	b.n	8005098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	3304      	adds	r3, #4
 800504a:	623b      	str	r3, [r7, #32]
          break;
 800504c:	e024      	b.n	8005098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	3308      	adds	r3, #8
 8005054:	623b      	str	r3, [r7, #32]
          break;
 8005056:	e01f      	b.n	8005098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	330c      	adds	r3, #12
 800505e:	623b      	str	r3, [r7, #32]
          break;
 8005060:	e01a      	b.n	8005098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800506a:	2304      	movs	r3, #4
 800506c:	623b      	str	r3, [r7, #32]
          break;
 800506e:	e013      	b.n	8005098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005078:	2308      	movs	r3, #8
 800507a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	611a      	str	r2, [r3, #16]
          break;
 8005082:	e009      	b.n	8005098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005084:	2308      	movs	r3, #8
 8005086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	615a      	str	r2, [r3, #20]
          break;
 800508e:	e003      	b.n	8005098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005090:	2300      	movs	r3, #0
 8005092:	623b      	str	r3, [r7, #32]
          break;
 8005094:	e000      	b.n	8005098 <HAL_GPIO_Init+0x130>
          break;
 8005096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2bff      	cmp	r3, #255	; 0xff
 800509c:	d801      	bhi.n	80050a2 <HAL_GPIO_Init+0x13a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	e001      	b.n	80050a6 <HAL_GPIO_Init+0x13e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3304      	adds	r3, #4
 80050a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2bff      	cmp	r3, #255	; 0xff
 80050ac:	d802      	bhi.n	80050b4 <HAL_GPIO_Init+0x14c>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	e002      	b.n	80050ba <HAL_GPIO_Init+0x152>
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	3b08      	subs	r3, #8
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	210f      	movs	r1, #15
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	6a39      	ldr	r1, [r7, #32]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80b1 	beq.w	800524a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80050e8:	4b4d      	ldr	r3, [pc, #308]	; (8005220 <HAL_GPIO_Init+0x2b8>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	4a4c      	ldr	r2, [pc, #304]	; (8005220 <HAL_GPIO_Init+0x2b8>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6193      	str	r3, [r2, #24]
 80050f4:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <HAL_GPIO_Init+0x2b8>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005100:	4a48      	ldr	r2, [pc, #288]	; (8005224 <HAL_GPIO_Init+0x2bc>)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	089b      	lsrs	r3, r3, #2
 8005106:	3302      	adds	r3, #2
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	220f      	movs	r2, #15
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a40      	ldr	r2, [pc, #256]	; (8005228 <HAL_GPIO_Init+0x2c0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_GPIO_Init+0x1ec>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3f      	ldr	r2, [pc, #252]	; (800522c <HAL_GPIO_Init+0x2c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00d      	beq.n	8005150 <HAL_GPIO_Init+0x1e8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3e      	ldr	r2, [pc, #248]	; (8005230 <HAL_GPIO_Init+0x2c8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <HAL_GPIO_Init+0x1e4>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3d      	ldr	r2, [pc, #244]	; (8005234 <HAL_GPIO_Init+0x2cc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <HAL_GPIO_Init+0x1e0>
 8005144:	2303      	movs	r3, #3
 8005146:	e006      	b.n	8005156 <HAL_GPIO_Init+0x1ee>
 8005148:	2304      	movs	r3, #4
 800514a:	e004      	b.n	8005156 <HAL_GPIO_Init+0x1ee>
 800514c:	2302      	movs	r3, #2
 800514e:	e002      	b.n	8005156 <HAL_GPIO_Init+0x1ee>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_GPIO_Init+0x1ee>
 8005154:	2300      	movs	r3, #0
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	f002 0203 	and.w	r2, r2, #3
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	4093      	lsls	r3, r2
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005166:	492f      	ldr	r1, [pc, #188]	; (8005224 <HAL_GPIO_Init+0x2bc>)
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	3302      	adds	r3, #2
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d006      	beq.n	800518e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	492c      	ldr	r1, [pc, #176]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]
 800518c:	e006      	b.n	800519c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800518e:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	43db      	mvns	r3, r3
 8005196:	4928      	ldr	r1, [pc, #160]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 8005198:	4013      	ands	r3, r2
 800519a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80051a8:	4b23      	ldr	r3, [pc, #140]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	4922      	ldr	r1, [pc, #136]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60cb      	str	r3, [r1, #12]
 80051b4:	e006      	b.n	80051c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	43db      	mvns	r3, r3
 80051be:	491e      	ldr	r1, [pc, #120]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	4918      	ldr	r1, [pc, #96]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	e006      	b.n	80051ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80051de:	4b16      	ldr	r3, [pc, #88]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	4914      	ldr	r1, [pc, #80]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d021      	beq.n	800523c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80051f8:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	490e      	ldr	r1, [pc, #56]	; (8005238 <HAL_GPIO_Init+0x2d0>)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e021      	b.n	800524a <HAL_GPIO_Init+0x2e2>
 8005206:	bf00      	nop
 8005208:	10320000 	.word	0x10320000
 800520c:	10310000 	.word	0x10310000
 8005210:	10220000 	.word	0x10220000
 8005214:	10210000 	.word	0x10210000
 8005218:	10120000 	.word	0x10120000
 800521c:	10110000 	.word	0x10110000
 8005220:	40021000 	.word	0x40021000
 8005224:	40010000 	.word	0x40010000
 8005228:	40010800 	.word	0x40010800
 800522c:	40010c00 	.word	0x40010c00
 8005230:	40011000 	.word	0x40011000
 8005234:	40011400 	.word	0x40011400
 8005238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_GPIO_Init+0x304>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	43db      	mvns	r3, r3
 8005244:	4909      	ldr	r1, [pc, #36]	; (800526c <HAL_GPIO_Init+0x304>)
 8005246:	4013      	ands	r3, r2
 8005248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	3301      	adds	r3, #1
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	f47f ae8e 	bne.w	8004f7c <HAL_GPIO_Init+0x14>
  }
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	372c      	adds	r7, #44	; 0x2c
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	40010400 	.word	0x40010400

08005270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	e001      	b.n	8005292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	807b      	strh	r3, [r7, #2]
 80052aa:	4613      	mov	r3, r2
 80052ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052ae:	787b      	ldrb	r3, [r7, #1]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052b4:	887a      	ldrh	r2, [r7, #2]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80052ba:	e003      	b.n	80052c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052bc:	887b      	ldrh	r3, [r7, #2]
 80052be:	041a      	lsls	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	611a      	str	r2, [r3, #16]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e12b      	b.n	800553a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fe fe3e 	bl	8003f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005334:	f001 f842 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8005338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4a81      	ldr	r2, [pc, #516]	; (8005544 <HAL_I2C_Init+0x274>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d807      	bhi.n	8005354 <HAL_I2C_Init+0x84>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a80      	ldr	r2, [pc, #512]	; (8005548 <HAL_I2C_Init+0x278>)
 8005348:	4293      	cmp	r3, r2
 800534a:	bf94      	ite	ls
 800534c:	2301      	movls	r3, #1
 800534e:	2300      	movhi	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e006      	b.n	8005362 <HAL_I2C_Init+0x92>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a7d      	ldr	r2, [pc, #500]	; (800554c <HAL_I2C_Init+0x27c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	bf94      	ite	ls
 800535c:	2301      	movls	r3, #1
 800535e:	2300      	movhi	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e0e7      	b.n	800553a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a78      	ldr	r2, [pc, #480]	; (8005550 <HAL_I2C_Init+0x280>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0c9b      	lsrs	r3, r3, #18
 8005374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a6a      	ldr	r2, [pc, #424]	; (8005544 <HAL_I2C_Init+0x274>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d802      	bhi.n	80053a4 <HAL_I2C_Init+0xd4>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3301      	adds	r3, #1
 80053a2:	e009      	b.n	80053b8 <HAL_I2C_Init+0xe8>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	4a69      	ldr	r2, [pc, #420]	; (8005554 <HAL_I2C_Init+0x284>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	099b      	lsrs	r3, r3, #6
 80053b6:	3301      	adds	r3, #1
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	430b      	orrs	r3, r1
 80053be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	495c      	ldr	r1, [pc, #368]	; (8005544 <HAL_I2C_Init+0x274>)
 80053d4:	428b      	cmp	r3, r1
 80053d6:	d819      	bhi.n	800540c <HAL_I2C_Init+0x13c>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e59      	subs	r1, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053ec:	400b      	ands	r3, r1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_I2C_Init+0x138>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1e59      	subs	r1, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005400:	3301      	adds	r3, #1
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	e051      	b.n	80054ac <HAL_I2C_Init+0x1dc>
 8005408:	2304      	movs	r3, #4
 800540a:	e04f      	b.n	80054ac <HAL_I2C_Init+0x1dc>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d111      	bne.n	8005438 <HAL_I2C_Init+0x168>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	1e58      	subs	r0, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6859      	ldr	r1, [r3, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	440b      	add	r3, r1
 8005422:	fbb0 f3f3 	udiv	r3, r0, r3
 8005426:	3301      	adds	r3, #1
 8005428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	e012      	b.n	800545e <HAL_I2C_Init+0x18e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1e58      	subs	r0, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6859      	ldr	r1, [r3, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	0099      	lsls	r1, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	fbb0 f3f3 	udiv	r3, r0, r3
 800544e:	3301      	adds	r3, #1
 8005450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Init+0x196>
 8005462:	2301      	movs	r3, #1
 8005464:	e022      	b.n	80054ac <HAL_I2C_Init+0x1dc>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10e      	bne.n	800548c <HAL_I2C_Init+0x1bc>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1e58      	subs	r0, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	440b      	add	r3, r1
 800547c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005480:	3301      	adds	r3, #1
 8005482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	e00f      	b.n	80054ac <HAL_I2C_Init+0x1dc>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1e58      	subs	r0, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	0099      	lsls	r1, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	fbb0 f3f3 	udiv	r3, r0, r3
 80054a2:	3301      	adds	r3, #1
 80054a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	6809      	ldr	r1, [r1, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6911      	ldr	r1, [r2, #16]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68d2      	ldr	r2, [r2, #12]
 80054e6:	4311      	orrs	r1, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	000186a0 	.word	0x000186a0
 8005548:	001e847f 	.word	0x001e847f
 800554c:	003d08ff 	.word	0x003d08ff
 8005550:	431bde83 	.word	0x431bde83
 8005554:	10624dd3 	.word	0x10624dd3

08005558 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	461a      	mov	r2, r3
 8005566:	4603      	mov	r3, r0
 8005568:	817b      	strh	r3, [r7, #10]
 800556a:	460b      	mov	r3, r1
 800556c:	813b      	strh	r3, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005572:	f7fe ff65 	bl	8004440 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b20      	cmp	r3, #32
 8005582:	f040 80d9 	bne.w	8005738 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2319      	movs	r3, #25
 800558c:	2201      	movs	r2, #1
 800558e:	496d      	ldr	r1, [pc, #436]	; (8005744 <HAL_I2C_Mem_Write+0x1ec>)
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f971 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	e0cc      	b.n	800573a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_I2C_Mem_Write+0x56>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e0c5      	b.n	800573a <HAL_I2C_Mem_Write+0x1e2>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d007      	beq.n	80055d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2221      	movs	r2, #33	; 0x21
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <HAL_I2C_Mem_Write+0x1f0>)
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005616:	88f8      	ldrh	r0, [r7, #6]
 8005618:	893a      	ldrh	r2, [r7, #8]
 800561a:	8979      	ldrh	r1, [r7, #10]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	4603      	mov	r3, r0
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f890 	bl	800574c <I2C_RequestMemoryWrite>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d052      	beq.n	80056d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e081      	b.n	800573a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fa36 	bl	8005aac <I2C_WaitOnTXEFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b04      	cmp	r3, #4
 800564c:	d107      	bne.n	800565e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e06b      	b.n	800573a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d11b      	bne.n	80056d8 <HAL_I2C_Mem_Write+0x180>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d017      	beq.n	80056d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1aa      	bne.n	8005636 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fa29 	bl	8005b3c <I2C_WaitOnBTFFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00d      	beq.n	800570c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d107      	bne.n	8005708 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005706:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e016      	b.n	800573a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	00100002 	.word	0x00100002
 8005748:	ffff0000 	.word	0xffff0000

0800574c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4603      	mov	r3, r0
 800575c:	817b      	strh	r3, [r7, #10]
 800575e:	460b      	mov	r3, r1
 8005760:	813b      	strh	r3, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	2200      	movs	r2, #0
 800577e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f878 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579c:	d103      	bne.n	80057a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e05f      	b.n	800586a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	492d      	ldr	r1, [pc, #180]	; (8005874 <I2C_RequestMemoryWrite+0x128>)
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f8d3 	bl	800596c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e04c      	b.n	800586a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	6a39      	ldr	r1, [r7, #32]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f95e 	bl	8005aac <I2C_WaitOnTXEFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d107      	bne.n	800580e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e02b      	b.n	800586a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005818:	893b      	ldrh	r3, [r7, #8]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	611a      	str	r2, [r3, #16]
 8005822:	e021      	b.n	8005868 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005824:	893b      	ldrh	r3, [r7, #8]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b29b      	uxth	r3, r3
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005834:	6a39      	ldr	r1, [r7, #32]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f938 	bl	8005aac <I2C_WaitOnTXEFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00d      	beq.n	800585e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	2b04      	cmp	r3, #4
 8005848:	d107      	bne.n	800585a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e005      	b.n	800586a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800585e:	893b      	ldrh	r3, [r7, #8]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	00010002 	.word	0x00010002

08005878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005888:	e048      	b.n	800591c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d044      	beq.n	800591c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fe fdd5 	bl	8004440 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d139      	bne.n	800591c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d10d      	bne.n	80058ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	43da      	mvns	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	e00c      	b.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	43da      	mvns	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d116      	bne.n	800591c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f043 0220 	orr.w	r2, r3, #32
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e023      	b.n	8005964 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	d10d      	bne.n	8005942 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	43da      	mvns	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	e00c      	b.n	800595c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	43da      	mvns	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4013      	ands	r3, r2
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	429a      	cmp	r2, r3
 8005960:	d093      	beq.n	800588a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800597a:	e071      	b.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598a:	d123      	bne.n	80059d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800599a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f043 0204 	orr.w	r2, r3, #4
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e067      	b.n	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d041      	beq.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059dc:	f7fe fd30 	bl	8004440 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d302      	bcc.n	80059f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d136      	bne.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d10c      	bne.n	8005a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	43da      	mvns	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4013      	ands	r3, r2
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e00b      	b.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4013      	ands	r3, r2
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e021      	b.n	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d10c      	bne.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	43da      	mvns	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4013      	ands	r3, r2
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e00b      	b.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bf14      	ite	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	2300      	moveq	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f af6d 	bne.w	800597c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab8:	e034      	b.n	8005b24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f886 	bl	8005bcc <I2C_IsAcknowledgeFailed>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e034      	b.n	8005b34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d028      	beq.n	8005b24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fe fcb5 	bl	8004440 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11d      	bne.n	8005b24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d016      	beq.n	8005b24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f043 0220 	orr.w	r2, r3, #32
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e007      	b.n	8005b34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d1c3      	bne.n	8005aba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b48:	e034      	b.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f83e 	bl	8005bcc <I2C_IsAcknowledgeFailed>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e034      	b.n	8005bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d028      	beq.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fe fc6d 	bl	8004440 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11d      	bne.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d016      	beq.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e007      	b.n	8005bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d1c3      	bne.n	8005b4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d11b      	bne.n	8005c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e272      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8087 	beq.w	8005d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c48:	4b92      	ldr	r3, [pc, #584]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 030c 	and.w	r3, r3, #12
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d00c      	beq.n	8005c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c54:	4b8f      	ldr	r3, [pc, #572]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d112      	bne.n	8005c86 <HAL_RCC_OscConfig+0x5e>
 8005c60:	4b8c      	ldr	r3, [pc, #560]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d10b      	bne.n	8005c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6e:	4b89      	ldr	r3, [pc, #548]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d06c      	beq.n	8005d54 <HAL_RCC_OscConfig+0x12c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d168      	bne.n	8005d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e24c      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8e:	d106      	bne.n	8005c9e <HAL_RCC_OscConfig+0x76>
 8005c90:	4b80      	ldr	r3, [pc, #512]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a7f      	ldr	r2, [pc, #508]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e02e      	b.n	8005cfc <HAL_RCC_OscConfig+0xd4>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x98>
 8005ca6:	4b7b      	ldr	r3, [pc, #492]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a7a      	ldr	r2, [pc, #488]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	4b78      	ldr	r3, [pc, #480]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a77      	ldr	r2, [pc, #476]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	e01d      	b.n	8005cfc <HAL_RCC_OscConfig+0xd4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0xbc>
 8005cca:	4b72      	ldr	r3, [pc, #456]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a71      	ldr	r2, [pc, #452]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b6f      	ldr	r3, [pc, #444]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a6e      	ldr	r2, [pc, #440]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCC_OscConfig+0xd4>
 8005ce4:	4b6b      	ldr	r3, [pc, #428]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a6a      	ldr	r2, [pc, #424]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a67      	ldr	r2, [pc, #412]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d013      	beq.n	8005d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fe fb9c 	bl	8004440 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fe fb98 	bl	8004440 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e200      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1e:	4b5d      	ldr	r3, [pc, #372]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0xe4>
 8005d2a:	e014      	b.n	8005d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fe fb88 	bl	8004440 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fe fb84 	bl	8004440 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	; 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e1ec      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d46:	4b53      	ldr	r3, [pc, #332]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x10c>
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d063      	beq.n	8005e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d62:	4b4c      	ldr	r3, [pc, #304]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d6e:	4b49      	ldr	r3, [pc, #292]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d11c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x18c>
 8005d7a:	4b46      	ldr	r3, [pc, #280]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d116      	bne.n	8005db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_RCC_OscConfig+0x176>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d001      	beq.n	8005d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e1c0      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9e:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4939      	ldr	r1, [pc, #228]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	e03a      	b.n	8005e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d020      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dbc:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc2:	f7fe fb3d 	bl	8004440 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dca:	f7fe fb39 	bl	8004440 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e1a1      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ddc:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de8:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4927      	ldr	r1, [pc, #156]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]
 8005dfc:	e015      	b.n	8005e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfe:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e04:	f7fe fb1c 	bl	8004440 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fe fb18 	bl	8004440 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e180      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d03a      	beq.n	8005eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d019      	beq.n	8005e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <HAL_RCC_OscConfig+0x274>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e44:	f7fe fafc 	bl	8004440 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e4c:	f7fe faf8 	bl	8004440 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e160      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <HAL_RCC_OscConfig+0x26c>)
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	f000 face 	bl	800640c <RCC_Delay>
 8005e70:	e01c      	b.n	8005eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <HAL_RCC_OscConfig+0x274>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e78:	f7fe fae2 	bl	8004440 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7e:	e00f      	b.n	8005ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e80:	f7fe fade 	bl	8004440 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d908      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e146      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
 8005e98:	42420000 	.word	0x42420000
 8005e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea0:	4b92      	ldr	r3, [pc, #584]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e9      	bne.n	8005e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80a6 	beq.w	8006006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ebe:	4b8b      	ldr	r3, [pc, #556]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eca:	4b88      	ldr	r3, [pc, #544]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4a87      	ldr	r2, [pc, #540]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed4:	61d3      	str	r3, [r2, #28]
 8005ed6:	4b85      	ldr	r3, [pc, #532]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee6:	4b82      	ldr	r3, [pc, #520]	; (80060f0 <HAL_RCC_OscConfig+0x4c8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d118      	bne.n	8005f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef2:	4b7f      	ldr	r3, [pc, #508]	; (80060f0 <HAL_RCC_OscConfig+0x4c8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a7e      	ldr	r2, [pc, #504]	; (80060f0 <HAL_RCC_OscConfig+0x4c8>)
 8005ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efe:	f7fe fa9f 	bl	8004440 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f06:	f7fe fa9b 	bl	8004440 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b64      	cmp	r3, #100	; 0x64
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e103      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f18:	4b75      	ldr	r3, [pc, #468]	; (80060f0 <HAL_RCC_OscConfig+0x4c8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCC_OscConfig+0x312>
 8005f2c:	4b6f      	ldr	r3, [pc, #444]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	4a6e      	ldr	r2, [pc, #440]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	6213      	str	r3, [r2, #32]
 8005f38:	e02d      	b.n	8005f96 <HAL_RCC_OscConfig+0x36e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x334>
 8005f42:	4b6a      	ldr	r3, [pc, #424]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	4a69      	ldr	r2, [pc, #420]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6213      	str	r3, [r2, #32]
 8005f4e:	4b67      	ldr	r3, [pc, #412]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4a66      	ldr	r2, [pc, #408]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	6213      	str	r3, [r2, #32]
 8005f5a:	e01c      	b.n	8005f96 <HAL_RCC_OscConfig+0x36e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b05      	cmp	r3, #5
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCC_OscConfig+0x356>
 8005f64:	4b61      	ldr	r3, [pc, #388]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	4a60      	ldr	r2, [pc, #384]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f6a:	f043 0304 	orr.w	r3, r3, #4
 8005f6e:	6213      	str	r3, [r2, #32]
 8005f70:	4b5e      	ldr	r3, [pc, #376]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4a5d      	ldr	r2, [pc, #372]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6213      	str	r3, [r2, #32]
 8005f7c:	e00b      	b.n	8005f96 <HAL_RCC_OscConfig+0x36e>
 8005f7e:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	4a5a      	ldr	r2, [pc, #360]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6213      	str	r3, [r2, #32]
 8005f8a:	4b58      	ldr	r3, [pc, #352]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	4a57      	ldr	r2, [pc, #348]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d015      	beq.n	8005fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9e:	f7fe fa4f 	bl	8004440 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fe fa4b 	bl	8004440 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e0b1      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fbc:	4b4b      	ldr	r3, [pc, #300]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0ee      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x37e>
 8005fc8:	e014      	b.n	8005ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fca:	f7fe fa39 	bl	8004440 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fe fa35 	bl	8004440 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e09b      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe8:	4b40      	ldr	r3, [pc, #256]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ee      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d105      	bne.n	8006006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffa:	4b3c      	ldr	r3, [pc, #240]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	4a3b      	ldr	r2, [pc, #236]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8006000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 8087 	beq.w	800611e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006010:	4b36      	ldr	r3, [pc, #216]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 030c 	and.w	r3, r3, #12
 8006018:	2b08      	cmp	r3, #8
 800601a:	d061      	beq.n	80060e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d146      	bne.n	80060b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006024:	4b33      	ldr	r3, [pc, #204]	; (80060f4 <HAL_RCC_OscConfig+0x4cc>)
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602a:	f7fe fa09 	bl	8004440 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006032:	f7fe fa05 	bl	8004440 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e06d      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006044:	4b29      	ldr	r3, [pc, #164]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f0      	bne.n	8006032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d108      	bne.n	800606c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800605a:	4b24      	ldr	r3, [pc, #144]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	4921      	ldr	r1, [pc, #132]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800606c:	4b1f      	ldr	r3, [pc, #124]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a19      	ldr	r1, [r3, #32]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	430b      	orrs	r3, r1
 800607e:	491b      	ldr	r1, [pc, #108]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <HAL_RCC_OscConfig+0x4cc>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608a:	f7fe f9d9 	bl	8004440 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006092:	f7fe f9d5 	bl	8004440 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e03d      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x46a>
 80060b0:	e035      	b.n	800611e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <HAL_RCC_OscConfig+0x4cc>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b8:	f7fe f9c2 	bl	8004440 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c0:	f7fe f9be 	bl	8004440 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e026      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <HAL_RCC_OscConfig+0x4c4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x498>
 80060de:	e01e      	b.n	800611e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d107      	bne.n	80060f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e019      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40007000 	.word	0x40007000
 80060f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_RCC_OscConfig+0x500>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	429a      	cmp	r2, r3
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d001      	beq.n	800611e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40021000 	.word	0x40021000

0800612c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0d0      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006140:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d910      	bls.n	8006170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614e:	4b67      	ldr	r3, [pc, #412]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f023 0207 	bic.w	r2, r3, #7
 8006156:	4965      	ldr	r1, [pc, #404]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800615e:	4b63      	ldr	r3, [pc, #396]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0b8      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d020      	beq.n	80061be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006188:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a58      	ldr	r2, [pc, #352]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a0:	4b53      	ldr	r3, [pc, #332]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	4a52      	ldr	r2, [pc, #328]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ac:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	494d      	ldr	r1, [pc, #308]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d040      	beq.n	800624c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d2:	4b47      	ldr	r3, [pc, #284]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d115      	bne.n	800620a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e07f      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d107      	bne.n	80061fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e073      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fa:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e06b      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800620a:	4b39      	ldr	r3, [pc, #228]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f023 0203 	bic.w	r2, r3, #3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4936      	ldr	r1, [pc, #216]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006218:	4313      	orrs	r3, r2
 800621a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800621c:	f7fe f910 	bl	8004440 <HAL_GetTick>
 8006220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006222:	e00a      	b.n	800623a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006224:	f7fe f90c 	bl	8004440 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e053      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623a:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 020c 	and.w	r2, r3, #12
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	429a      	cmp	r2, r3
 800624a:	d1eb      	bne.n	8006224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d210      	bcs.n	800627c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f023 0207 	bic.w	r2, r3, #7
 8006262:	4922      	ldr	r1, [pc, #136]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d001      	beq.n	800627c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e032      	b.n	80062e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006288:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4916      	ldr	r1, [pc, #88]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062a6:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	490e      	ldr	r1, [pc, #56]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ba:	f000 f821 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80062be:	4602      	mov	r2, r0
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	490a      	ldr	r1, [pc, #40]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	5ccb      	ldrb	r3, [r1, r3]
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <HAL_RCC_ClockConfig+0x1cc>)
 80062d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x1d0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe f86e 	bl	80043bc <HAL_InitTick>

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40022000 	.word	0x40022000
 80062f0:	40021000 	.word	0x40021000
 80062f4:	0800c10c 	.word	0x0800c10c
 80062f8:	20000028 	.word	0x20000028
 80062fc:	2000002c 	.word	0x2000002c

08006300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <HAL_RCC_GetSysClockFreq+0x94>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b04      	cmp	r3, #4
 8006328:	d002      	beq.n	8006330 <HAL_RCC_GetSysClockFreq+0x30>
 800632a:	2b08      	cmp	r3, #8
 800632c:	d003      	beq.n	8006336 <HAL_RCC_GetSysClockFreq+0x36>
 800632e:	e027      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006330:	4b19      	ldr	r3, [pc, #100]	; (8006398 <HAL_RCC_GetSysClockFreq+0x98>)
 8006332:	613b      	str	r3, [r7, #16]
      break;
 8006334:	e027      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	0c9b      	lsrs	r3, r3, #18
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	4a17      	ldr	r2, [pc, #92]	; (800639c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006340:	5cd3      	ldrb	r3, [r2, r3]
 8006342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d010      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800634e:	4b11      	ldr	r3, [pc, #68]	; (8006394 <HAL_RCC_GetSysClockFreq+0x94>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	0c5b      	lsrs	r3, r3, #17
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	4a11      	ldr	r2, [pc, #68]	; (80063a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800635a:	5cd3      	ldrb	r3, [r2, r3]
 800635c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <HAL_RCC_GetSysClockFreq+0x98>)
 8006362:	fb03 f202 	mul.w	r2, r3, r2
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e004      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	613b      	str	r3, [r7, #16]
      break;
 800637e:	e002      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCC_GetSysClockFreq+0x98>)
 8006382:	613b      	str	r3, [r7, #16]
      break;
 8006384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006386:	693b      	ldr	r3, [r7, #16]
}
 8006388:	4618      	mov	r0, r3
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	007a1200 	.word	0x007a1200
 800639c:	0800c124 	.word	0x0800c124
 80063a0:	0800c134 	.word	0x0800c134
 80063a4:	003d0900 	.word	0x003d0900

080063a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063ac:	4b02      	ldr	r3, [pc, #8]	; (80063b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80063ae:	681b      	ldr	r3, [r3, #0]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	20000028 	.word	0x20000028

080063bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063c0:	f7ff fff2 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 80063c4:	4602      	mov	r2, r0
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4903      	ldr	r1, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063d2:	5ccb      	ldrb	r3, [r1, r3]
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40021000 	.word	0x40021000
 80063e0:	0800c11c 	.word	0x0800c11c

080063e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063e8:	f7ff ffde 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	0adb      	lsrs	r3, r3, #11
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4903      	ldr	r1, [pc, #12]	; (8006408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40021000 	.word	0x40021000
 8006408:	0800c11c 	.word	0x0800c11c

0800640c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <RCC_Delay+0x34>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <RCC_Delay+0x38>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	0a5b      	lsrs	r3, r3, #9
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006428:	bf00      	nop
  }
  while (Delay --);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	60fa      	str	r2, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f9      	bne.n	8006428 <RCC_Delay+0x1c>
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr
 8006440:	20000028 	.word	0x20000028
 8006444:	10624dd3 	.word	0x10624dd3

08006448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d07d      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006468:	4b4f      	ldr	r3, [pc, #316]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006474:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	4a4b      	ldr	r2, [pc, #300]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647e:	61d3      	str	r3, [r2, #28]
 8006480:	4b49      	ldr	r3, [pc, #292]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006490:	4b46      	ldr	r3, [pc, #280]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d118      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649c:	4b43      	ldr	r3, [pc, #268]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a42      	ldr	r2, [pc, #264]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a8:	f7fd ffca 	bl	8004440 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ae:	e008      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b0:	f7fd ffc6 	bl	8004440 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b64      	cmp	r3, #100	; 0x64
 80064bc:	d901      	bls.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e06d      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c2:	4b3a      	ldr	r3, [pc, #232]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d02e      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d027      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064ec:	4b2e      	ldr	r3, [pc, #184]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064f6:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064fc:	4b2c      	ldr	r3, [pc, #176]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006502:	4a29      	ldr	r2, [pc, #164]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d014      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7fd ff95 	bl	8004440 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006518:	e00a      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651a:	f7fd ff91 	bl	8004440 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f241 3288 	movw	r2, #5000	; 0x1388
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e036      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006530:	4b1d      	ldr	r3, [pc, #116]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ee      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800653c:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4917      	ldr	r1, [pc, #92]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800654a:	4313      	orrs	r3, r2
 800654c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d105      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006554:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800656c:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	490b      	ldr	r1, [pc, #44]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657a:	4313      	orrs	r3, r2
 800657c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4904      	ldr	r1, [pc, #16]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006598:	4313      	orrs	r3, r2
 800659a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40021000 	.word	0x40021000
 80065ac:	40007000 	.word	0x40007000
 80065b0:	42420440 	.word	0x42420440

080065b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d00a      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	f200 808a 	bhi.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d045      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d075      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80065ea:	e082      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80065ec:	4b46      	ldr	r3, [pc, #280]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80065f2:	4b45      	ldr	r3, [pc, #276]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d07b      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	0c9b      	lsrs	r3, r3, #18
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	4a41      	ldr	r2, [pc, #260]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006608:	5cd3      	ldrb	r3, [r2, r3]
 800660a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d015      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006616:	4b3c      	ldr	r3, [pc, #240]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	0c5b      	lsrs	r3, r3, #17
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	4a3b      	ldr	r2, [pc, #236]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006622:	5cd3      	ldrb	r3, [r2, r3]
 8006624:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00d      	beq.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006630:	4a38      	ldr	r2, [pc, #224]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	fbb2 f2f3 	udiv	r2, r2, r3
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e004      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4a34      	ldr	r2, [pc, #208]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800664c:	4b2e      	ldr	r3, [pc, #184]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006658:	d102      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	61bb      	str	r3, [r7, #24]
      break;
 800665e:	e04a      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	4a2d      	ldr	r2, [pc, #180]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	61bb      	str	r3, [r7, #24]
      break;
 800666e:	e042      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006670:	4b25      	ldr	r3, [pc, #148]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006680:	d108      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800668c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e01f      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669e:	d109      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80066ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e00f      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066be:	d11c      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d016      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80066cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80066d0:	61bb      	str	r3, [r7, #24]
      break;
 80066d2:	e012      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066d4:	e011      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80066d6:	f7ff fe85 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 80066da:	4602      	mov	r2, r0
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	0b9b      	lsrs	r3, r3, #14
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	3301      	adds	r3, #1
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	61bb      	str	r3, [r7, #24]
      break;
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80066fa:	bf00      	nop
    }
  }
  return (frequency);
 80066fc:	69bb      	ldr	r3, [r7, #24]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	0800c138 	.word	0x0800c138
 8006710:	0800c148 	.word	0x0800c148
 8006714:	007a1200 	.word	0x007a1200
 8006718:	003d0900 	.word	0x003d0900
 800671c:	aaaaaaab 	.word	0xaaaaaaab

08006720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e076      	b.n	8006820 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d108      	bne.n	800674c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006742:	d009      	beq.n	8006758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	61da      	str	r2, [r3, #28]
 800674a:	e005      	b.n	8006758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fd fc50 	bl	8004018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800678e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067dc:	ea42 0103 	orr.w	r1, r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	0c1a      	lsrs	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f002 0204 	and.w	r2, r2, #4
 80067fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800680e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_Transmit+0x22>
 8006846:	2302      	movs	r3, #2
 8006848:	e12d      	b.n	8006aa6 <HAL_SPI_Transmit+0x27e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006852:	f7fd fdf5 	bl	8004440 <HAL_GetTick>
 8006856:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d002      	beq.n	800686e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800686c:	e116      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_SPI_Transmit+0x52>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800687e:	e10d      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2203      	movs	r2, #3
 8006884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d10f      	bne.n	80068e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d007      	beq.n	8006906 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690e:	d14f      	bne.n	80069b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_SPI_Transmit+0xf6>
 8006918:	8afb      	ldrh	r3, [r7, #22]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d142      	bne.n	80069a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006942:	e02f      	b.n	80069a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b02      	cmp	r3, #2
 8006950:	d112      	bne.n	8006978 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	86da      	strh	r2, [r3, #54]	; 0x36
 8006976:	e015      	b.n	80069a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006978:	f7fd fd62 	bl	8004440 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d803      	bhi.n	8006990 <HAL_SPI_Transmit+0x168>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d102      	bne.n	8006996 <HAL_SPI_Transmit+0x16e>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80069a2:	e07b      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ca      	bne.n	8006944 <HAL_SPI_Transmit+0x11c>
 80069ae:	e050      	b.n	8006a52 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_SPI_Transmit+0x196>
 80069b8:	8afb      	ldrh	r3, [r7, #22]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d144      	bne.n	8006a48 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069e4:	e030      	b.n	8006a48 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d113      	bne.n	8006a1c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a1a:	e015      	b.n	8006a48 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1c:	f7fd fd10 	bl	8004440 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d803      	bhi.n	8006a34 <HAL_SPI_Transmit+0x20c>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d102      	bne.n	8006a3a <HAL_SPI_Transmit+0x212>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006a46:	e029      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1c9      	bne.n	80069e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f8b2 	bl	8006bc0 <SPI_EndRxTxTransaction>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e003      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	4613      	mov	r3, r2
 8006abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ac0:	f7fd fcbe 	bl	8004440 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	4413      	add	r3, r2
 8006ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ad0:	f7fd fcb6 	bl	8004440 <HAL_GetTick>
 8006ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ad6:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	015b      	lsls	r3, r3, #5
 8006adc:	0d1b      	lsrs	r3, r3, #20
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ae6:	e054      	b.n	8006b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d050      	beq.n	8006b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006af0:	f7fd fca6 	bl	8004440 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d902      	bls.n	8006b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d13d      	bne.n	8006b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b1e:	d111      	bne.n	8006b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	d004      	beq.n	8006b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b32:	d107      	bne.n	8006b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4c:	d10f      	bne.n	8006b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e017      	b.n	8006bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2301      	moveq	r3, #1
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d19b      	bne.n	8006ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000028 	.word	0x20000028

08006bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7ff ff6a 	bl	8006ab0 <SPI_WaitFlagStateUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f043 0220 	orr.w	r2, r3, #32
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e000      	b.n	8006bf4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e041      	b.n	8006c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fd fa36 	bl	8004094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f000 fb60 	bl	8007300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d001      	beq.n	8006cb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e032      	b.n	8006d1a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_TIM_Base_Start+0x88>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_TIM_Base_Start+0x48>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d009      	beq.n	8006ce4 <HAL_TIM_Base_Start+0x48>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <HAL_TIM_Base_Start+0x8c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_Base_Start+0x48>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <HAL_TIM_Base_Start+0x90>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d111      	bne.n	8006d08 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d010      	beq.n	8006d18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	e007      	b.n	8006d18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800

08006d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d001      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e03a      	b.n	8006dbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <HAL_TIM_Base_Start_IT+0x98>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x58>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d009      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x58>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <HAL_TIM_Base_Start_IT+0x9c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x58>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d111      	bne.n	8006dac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d010      	beq.n	8006dbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006daa:	e007      	b.n	8006dbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800

08006dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_PWM_Start+0x24>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e022      	b.n	8006e3e <HAL_TIM_PWM_Start+0x6a>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d109      	bne.n	8006e12 <HAL_TIM_PWM_Start+0x3e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	e015      	b.n	8006e3e <HAL_TIM_PWM_Start+0x6a>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d109      	bne.n	8006e2c <HAL_TIM_PWM_Start+0x58>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	bf14      	ite	ne
 8006e24:	2301      	movne	r3, #1
 8006e26:	2300      	moveq	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	e008      	b.n	8006e3e <HAL_TIM_PWM_Start+0x6a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e05e      	b.n	8006f04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_PWM_Start+0x82>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e54:	e013      	b.n	8006e7e <HAL_TIM_PWM_Start+0xaa>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_PWM_Start+0x92>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e64:	e00b      	b.n	8006e7e <HAL_TIM_PWM_Start+0xaa>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIM_PWM_Start+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e74:	e003      	b.n	8006e7e <HAL_TIM_PWM_Start+0xaa>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2201      	movs	r2, #1
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fb32 	bl	80074f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <HAL_TIM_PWM_Start+0x138>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d107      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <HAL_TIM_PWM_Start+0x138>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIM_PWM_Start+0xfa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d009      	beq.n	8006ece <HAL_TIM_PWM_Start+0xfa>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a14      	ldr	r2, [pc, #80]	; (8006f10 <HAL_TIM_PWM_Start+0x13c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIM_PWM_Start+0xfa>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a12      	ldr	r2, [pc, #72]	; (8006f14 <HAL_TIM_PWM_Start+0x140>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d111      	bne.n	8006ef2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b06      	cmp	r3, #6
 8006ede:	d010      	beq.n	8006f02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef0:	e007      	b.n	8006f02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0201 	orr.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800

08006f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d122      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d11b      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0202 	mvn.w	r2, #2
 8006f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9b4 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006f60:	e005      	b.n	8006f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9a7 	bl	80072b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9b6 	bl	80072da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d122      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0204 	mvn.w	r2, #4
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f98a 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f97d 	bl	80072b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f98c 	bl	80072da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0208 	mvn.w	r2, #8
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f960 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f953 	bl	80072b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f962 	bl	80072da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b10      	cmp	r3, #16
 8007028:	d122      	bne.n	8007070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b10      	cmp	r3, #16
 8007036:	d11b      	bne.n	8007070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0210 	mvn.w	r2, #16
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2208      	movs	r2, #8
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f936 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f929 	bl	80072b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f938 	bl	80072da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10e      	bne.n	800709c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d107      	bne.n	800709c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0201 	mvn.w	r2, #1
 8007094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fa fa3a 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa9f 	bl	8007606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b40      	cmp	r3, #64	; 0x40
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f8fc 	bl	80072ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b20      	cmp	r3, #32
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0220 	mvn.w	r2, #32
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa6a 	bl	80075f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_TIM_ConfigClockSource+0x1c>
 8007140:	2302      	movs	r3, #2
 8007142:	e0b4      	b.n	80072ae <HAL_TIM_ConfigClockSource+0x186>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717c:	d03e      	beq.n	80071fc <HAL_TIM_ConfigClockSource+0xd4>
 800717e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007182:	f200 8087 	bhi.w	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	f000 8086 	beq.w	800729a <HAL_TIM_ConfigClockSource+0x172>
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d87f      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b70      	cmp	r3, #112	; 0x70
 8007196:	d01a      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0xa6>
 8007198:	2b70      	cmp	r3, #112	; 0x70
 800719a:	d87b      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b60      	cmp	r3, #96	; 0x60
 800719e:	d050      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x11a>
 80071a0:	2b60      	cmp	r3, #96	; 0x60
 80071a2:	d877      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071a4:	2b50      	cmp	r3, #80	; 0x50
 80071a6:	d03c      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0xfa>
 80071a8:	2b50      	cmp	r3, #80	; 0x50
 80071aa:	d873      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d058      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x13a>
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d86f      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071b4:	2b30      	cmp	r3, #48	; 0x30
 80071b6:	d064      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071b8:	2b30      	cmp	r3, #48	; 0x30
 80071ba:	d86b      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d060      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d867      	bhi.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d05c      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d05a      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x15a>
 80071cc:	e062      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071de:	f000 f968 	bl	80074b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	609a      	str	r2, [r3, #8]
      break;
 80071fa:	e04f      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800720c:	f000 f951 	bl	80074b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800721e:	609a      	str	r2, [r3, #8]
      break;
 8007220:	e03c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800722e:	461a      	mov	r2, r3
 8007230:	f000 f8c8 	bl	80073c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2150      	movs	r1, #80	; 0x50
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f91f 	bl	800747e <TIM_ITRx_SetConfig>
      break;
 8007240:	e02c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800724e:	461a      	mov	r2, r3
 8007250:	f000 f8e6 	bl	8007420 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2160      	movs	r1, #96	; 0x60
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f90f 	bl	800747e <TIM_ITRx_SetConfig>
      break;
 8007260:	e01c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800726e:	461a      	mov	r2, r3
 8007270:	f000 f8a8 	bl	80073c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2140      	movs	r1, #64	; 0x40
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f8ff 	bl	800747e <TIM_ITRx_SetConfig>
      break;
 8007280:	e00c      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f000 f8f6 	bl	800747e <TIM_ITRx_SetConfig>
      break;
 8007292:	e003      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
      break;
 8007298:	e000      	b.n	800729c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800729a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr
	...

08007300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a29      	ldr	r2, [pc, #164]	; (80073b8 <TIM_Base_SetConfig+0xb8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00b      	beq.n	8007330 <TIM_Base_SetConfig+0x30>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731e:	d007      	beq.n	8007330 <TIM_Base_SetConfig+0x30>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a26      	ldr	r2, [pc, #152]	; (80073bc <TIM_Base_SetConfig+0xbc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_Base_SetConfig+0x30>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a25      	ldr	r2, [pc, #148]	; (80073c0 <TIM_Base_SetConfig+0xc0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d108      	bne.n	8007342 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <TIM_Base_SetConfig+0xb8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00b      	beq.n	8007362 <TIM_Base_SetConfig+0x62>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007350:	d007      	beq.n	8007362 <TIM_Base_SetConfig+0x62>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a19      	ldr	r2, [pc, #100]	; (80073bc <TIM_Base_SetConfig+0xbc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_Base_SetConfig+0x62>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <TIM_Base_SetConfig+0xc0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d108      	bne.n	8007374 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <TIM_Base_SetConfig+0xb8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d103      	bne.n	80073a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	615a      	str	r2, [r3, #20]
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800

080073c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f023 0201 	bic.w	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 030a 	bic.w	r3, r3, #10
 8007400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f023 0210 	bic.w	r2, r3, #16
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800744a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	031b      	lsls	r3, r3, #12
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800745c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	f043 0307 	orr.w	r3, r3, #7
 80074a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	609a      	str	r2, [r3, #8]
}
 80074a8:	bf00      	nop
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr

080074b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b087      	sub	sp, #28
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	021a      	lsls	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4313      	orrs	r3, r2
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	609a      	str	r2, [r3, #8]
}
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr

080074f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2201      	movs	r2, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	fa01 f303 	lsl.w	r3, r1, r3
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800754c:	2302      	movs	r3, #2
 800754e:	e046      	b.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a16      	ldr	r2, [pc, #88]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759c:	d009      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a12      	ldr	r2, [pc, #72]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d10c      	bne.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr
 80075e8:	40012c00 	.word	0x40012c00
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800

080075f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <__cvt>:
 8007618:	2b00      	cmp	r3, #0
 800761a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761e:	461f      	mov	r7, r3
 8007620:	bfbb      	ittet	lt
 8007622:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007626:	461f      	movlt	r7, r3
 8007628:	2300      	movge	r3, #0
 800762a:	232d      	movlt	r3, #45	; 0x2d
 800762c:	b088      	sub	sp, #32
 800762e:	4614      	mov	r4, r2
 8007630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007632:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007634:	7013      	strb	r3, [r2, #0]
 8007636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007638:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800763c:	f023 0820 	bic.w	r8, r3, #32
 8007640:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007644:	d005      	beq.n	8007652 <__cvt+0x3a>
 8007646:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800764a:	d100      	bne.n	800764e <__cvt+0x36>
 800764c:	3501      	adds	r5, #1
 800764e:	2302      	movs	r3, #2
 8007650:	e000      	b.n	8007654 <__cvt+0x3c>
 8007652:	2303      	movs	r3, #3
 8007654:	aa07      	add	r2, sp, #28
 8007656:	9204      	str	r2, [sp, #16]
 8007658:	aa06      	add	r2, sp, #24
 800765a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800765e:	e9cd 3500 	strd	r3, r5, [sp]
 8007662:	4622      	mov	r2, r4
 8007664:	463b      	mov	r3, r7
 8007666:	f000 fe9b 	bl	80083a0 <_dtoa_r>
 800766a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800766e:	4606      	mov	r6, r0
 8007670:	d102      	bne.n	8007678 <__cvt+0x60>
 8007672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007674:	07db      	lsls	r3, r3, #31
 8007676:	d522      	bpl.n	80076be <__cvt+0xa6>
 8007678:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800767c:	eb06 0905 	add.w	r9, r6, r5
 8007680:	d110      	bne.n	80076a4 <__cvt+0x8c>
 8007682:	7833      	ldrb	r3, [r6, #0]
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d10a      	bne.n	800769e <__cvt+0x86>
 8007688:	2200      	movs	r2, #0
 800768a:	2300      	movs	r3, #0
 800768c:	4620      	mov	r0, r4
 800768e:	4639      	mov	r1, r7
 8007690:	f7f9 f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8007694:	b918      	cbnz	r0, 800769e <__cvt+0x86>
 8007696:	f1c5 0501 	rsb	r5, r5, #1
 800769a:	f8ca 5000 	str.w	r5, [sl]
 800769e:	f8da 3000 	ldr.w	r3, [sl]
 80076a2:	4499      	add	r9, r3
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4620      	mov	r0, r4
 80076aa:	4639      	mov	r1, r7
 80076ac:	f7f9 f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80076b0:	b108      	cbz	r0, 80076b6 <__cvt+0x9e>
 80076b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80076b6:	2230      	movs	r2, #48	; 0x30
 80076b8:	9b07      	ldr	r3, [sp, #28]
 80076ba:	454b      	cmp	r3, r9
 80076bc:	d307      	bcc.n	80076ce <__cvt+0xb6>
 80076be:	4630      	mov	r0, r6
 80076c0:	9b07      	ldr	r3, [sp, #28]
 80076c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076c4:	1b9b      	subs	r3, r3, r6
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	b008      	add	sp, #32
 80076ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ce:	1c59      	adds	r1, r3, #1
 80076d0:	9107      	str	r1, [sp, #28]
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e7f0      	b.n	80076b8 <__cvt+0xa0>

080076d6 <__exponent>:
 80076d6:	4603      	mov	r3, r0
 80076d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076da:	2900      	cmp	r1, #0
 80076dc:	f803 2b02 	strb.w	r2, [r3], #2
 80076e0:	bfb6      	itet	lt
 80076e2:	222d      	movlt	r2, #45	; 0x2d
 80076e4:	222b      	movge	r2, #43	; 0x2b
 80076e6:	4249      	neglt	r1, r1
 80076e8:	2909      	cmp	r1, #9
 80076ea:	7042      	strb	r2, [r0, #1]
 80076ec:	dd2a      	ble.n	8007744 <__exponent+0x6e>
 80076ee:	f10d 0207 	add.w	r2, sp, #7
 80076f2:	4617      	mov	r7, r2
 80076f4:	260a      	movs	r6, #10
 80076f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80076fa:	4694      	mov	ip, r2
 80076fc:	fb06 1415 	mls	r4, r6, r5, r1
 8007700:	3430      	adds	r4, #48	; 0x30
 8007702:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007706:	460c      	mov	r4, r1
 8007708:	2c63      	cmp	r4, #99	; 0x63
 800770a:	4629      	mov	r1, r5
 800770c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007710:	dcf1      	bgt.n	80076f6 <__exponent+0x20>
 8007712:	3130      	adds	r1, #48	; 0x30
 8007714:	f1ac 0402 	sub.w	r4, ip, #2
 8007718:	f802 1c01 	strb.w	r1, [r2, #-1]
 800771c:	4622      	mov	r2, r4
 800771e:	1c41      	adds	r1, r0, #1
 8007720:	42ba      	cmp	r2, r7
 8007722:	d30a      	bcc.n	800773a <__exponent+0x64>
 8007724:	f10d 0209 	add.w	r2, sp, #9
 8007728:	eba2 020c 	sub.w	r2, r2, ip
 800772c:	42bc      	cmp	r4, r7
 800772e:	bf88      	it	hi
 8007730:	2200      	movhi	r2, #0
 8007732:	4413      	add	r3, r2
 8007734:	1a18      	subs	r0, r3, r0
 8007736:	b003      	add	sp, #12
 8007738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800773e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007742:	e7ed      	b.n	8007720 <__exponent+0x4a>
 8007744:	2330      	movs	r3, #48	; 0x30
 8007746:	3130      	adds	r1, #48	; 0x30
 8007748:	7083      	strb	r3, [r0, #2]
 800774a:	70c1      	strb	r1, [r0, #3]
 800774c:	1d03      	adds	r3, r0, #4
 800774e:	e7f1      	b.n	8007734 <__exponent+0x5e>

08007750 <_printf_float>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	b091      	sub	sp, #68	; 0x44
 8007756:	460c      	mov	r4, r1
 8007758:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800775c:	4616      	mov	r6, r2
 800775e:	461f      	mov	r7, r3
 8007760:	4605      	mov	r5, r0
 8007762:	f000 fcff 	bl	8008164 <_localeconv_r>
 8007766:	6803      	ldr	r3, [r0, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	9309      	str	r3, [sp, #36]	; 0x24
 800776c:	f7f8 fcf0 	bl	8000150 <strlen>
 8007770:	2300      	movs	r3, #0
 8007772:	930e      	str	r3, [sp, #56]	; 0x38
 8007774:	f8d8 3000 	ldr.w	r3, [r8]
 8007778:	900a      	str	r0, [sp, #40]	; 0x28
 800777a:	3307      	adds	r3, #7
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	f103 0208 	add.w	r2, r3, #8
 8007784:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007788:	f8d4 b000 	ldr.w	fp, [r4]
 800778c:	f8c8 2000 	str.w	r2, [r8]
 8007790:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007794:	4652      	mov	r2, sl
 8007796:	4643      	mov	r3, r8
 8007798:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800779c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80077a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a2:	f04f 32ff 	mov.w	r2, #4294967295
 80077a6:	4650      	mov	r0, sl
 80077a8:	4b9c      	ldr	r3, [pc, #624]	; (8007a1c <_printf_float+0x2cc>)
 80077aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ac:	f7f9 f92e 	bl	8000a0c <__aeabi_dcmpun>
 80077b0:	bb70      	cbnz	r0, 8007810 <_printf_float+0xc0>
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	4650      	mov	r0, sl
 80077b8:	4b98      	ldr	r3, [pc, #608]	; (8007a1c <_printf_float+0x2cc>)
 80077ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077bc:	f7f9 f908 	bl	80009d0 <__aeabi_dcmple>
 80077c0:	bb30      	cbnz	r0, 8007810 <_printf_float+0xc0>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	4650      	mov	r0, sl
 80077c8:	4641      	mov	r1, r8
 80077ca:	f7f9 f8f7 	bl	80009bc <__aeabi_dcmplt>
 80077ce:	b110      	cbz	r0, 80077d6 <_printf_float+0x86>
 80077d0:	232d      	movs	r3, #45	; 0x2d
 80077d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d6:	4a92      	ldr	r2, [pc, #584]	; (8007a20 <_printf_float+0x2d0>)
 80077d8:	4b92      	ldr	r3, [pc, #584]	; (8007a24 <_printf_float+0x2d4>)
 80077da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80077de:	bf94      	ite	ls
 80077e0:	4690      	movls	r8, r2
 80077e2:	4698      	movhi	r8, r3
 80077e4:	2303      	movs	r3, #3
 80077e6:	f04f 0a00 	mov.w	sl, #0
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	f02b 0304 	bic.w	r3, fp, #4
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	4633      	mov	r3, r6
 80077f4:	4621      	mov	r1, r4
 80077f6:	4628      	mov	r0, r5
 80077f8:	9700      	str	r7, [sp, #0]
 80077fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80077fc:	f000 f9d6 	bl	8007bac <_printf_common>
 8007800:	3001      	adds	r0, #1
 8007802:	f040 8090 	bne.w	8007926 <_printf_float+0x1d6>
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	b011      	add	sp, #68	; 0x44
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	4652      	mov	r2, sl
 8007812:	4643      	mov	r3, r8
 8007814:	4650      	mov	r0, sl
 8007816:	4641      	mov	r1, r8
 8007818:	f7f9 f8f8 	bl	8000a0c <__aeabi_dcmpun>
 800781c:	b148      	cbz	r0, 8007832 <_printf_float+0xe2>
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	bfb8      	it	lt
 8007824:	232d      	movlt	r3, #45	; 0x2d
 8007826:	4a80      	ldr	r2, [pc, #512]	; (8007a28 <_printf_float+0x2d8>)
 8007828:	bfb8      	it	lt
 800782a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800782e:	4b7f      	ldr	r3, [pc, #508]	; (8007a2c <_printf_float+0x2dc>)
 8007830:	e7d3      	b.n	80077da <_printf_float+0x8a>
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	d142      	bne.n	80078c2 <_printf_float+0x172>
 800783c:	2306      	movs	r3, #6
 800783e:	6063      	str	r3, [r4, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	9206      	str	r2, [sp, #24]
 8007844:	aa0e      	add	r2, sp, #56	; 0x38
 8007846:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800784a:	aa0d      	add	r2, sp, #52	; 0x34
 800784c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007850:	9203      	str	r2, [sp, #12]
 8007852:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007856:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	4652      	mov	r2, sl
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4628      	mov	r0, r5
 8007864:	4643      	mov	r3, r8
 8007866:	910b      	str	r1, [sp, #44]	; 0x2c
 8007868:	f7ff fed6 	bl	8007618 <__cvt>
 800786c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800786e:	4680      	mov	r8, r0
 8007870:	2947      	cmp	r1, #71	; 0x47
 8007872:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007874:	d108      	bne.n	8007888 <_printf_float+0x138>
 8007876:	1cc8      	adds	r0, r1, #3
 8007878:	db02      	blt.n	8007880 <_printf_float+0x130>
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	4299      	cmp	r1, r3
 800787e:	dd40      	ble.n	8007902 <_printf_float+0x1b2>
 8007880:	f1a9 0902 	sub.w	r9, r9, #2
 8007884:	fa5f f989 	uxtb.w	r9, r9
 8007888:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800788c:	d81f      	bhi.n	80078ce <_printf_float+0x17e>
 800788e:	464a      	mov	r2, r9
 8007890:	3901      	subs	r1, #1
 8007892:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007896:	910d      	str	r1, [sp, #52]	; 0x34
 8007898:	f7ff ff1d 	bl	80076d6 <__exponent>
 800789c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800789e:	4682      	mov	sl, r0
 80078a0:	1813      	adds	r3, r2, r0
 80078a2:	2a01      	cmp	r2, #1
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	dc02      	bgt.n	80078ae <_printf_float+0x15e>
 80078a8:	6822      	ldr	r2, [r4, #0]
 80078aa:	07d2      	lsls	r2, r2, #31
 80078ac:	d501      	bpl.n	80078b2 <_printf_float+0x162>
 80078ae:	3301      	adds	r3, #1
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d09b      	beq.n	80077f2 <_printf_float+0xa2>
 80078ba:	232d      	movs	r3, #45	; 0x2d
 80078bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c0:	e797      	b.n	80077f2 <_printf_float+0xa2>
 80078c2:	2947      	cmp	r1, #71	; 0x47
 80078c4:	d1bc      	bne.n	8007840 <_printf_float+0xf0>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1ba      	bne.n	8007840 <_printf_float+0xf0>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e7b7      	b.n	800783e <_printf_float+0xee>
 80078ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80078d2:	d118      	bne.n	8007906 <_printf_float+0x1b6>
 80078d4:	2900      	cmp	r1, #0
 80078d6:	6863      	ldr	r3, [r4, #4]
 80078d8:	dd0b      	ble.n	80078f2 <_printf_float+0x1a2>
 80078da:	6121      	str	r1, [r4, #16]
 80078dc:	b913      	cbnz	r3, 80078e4 <_printf_float+0x194>
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	07d0      	lsls	r0, r2, #31
 80078e2:	d502      	bpl.n	80078ea <_printf_float+0x19a>
 80078e4:	3301      	adds	r3, #1
 80078e6:	440b      	add	r3, r1
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	f04f 0a00 	mov.w	sl, #0
 80078ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80078f0:	e7df      	b.n	80078b2 <_printf_float+0x162>
 80078f2:	b913      	cbnz	r3, 80078fa <_printf_float+0x1aa>
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	07d2      	lsls	r2, r2, #31
 80078f8:	d501      	bpl.n	80078fe <_printf_float+0x1ae>
 80078fa:	3302      	adds	r3, #2
 80078fc:	e7f4      	b.n	80078e8 <_printf_float+0x198>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7f2      	b.n	80078e8 <_printf_float+0x198>
 8007902:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007908:	4299      	cmp	r1, r3
 800790a:	db05      	blt.n	8007918 <_printf_float+0x1c8>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	6121      	str	r1, [r4, #16]
 8007910:	07d8      	lsls	r0, r3, #31
 8007912:	d5ea      	bpl.n	80078ea <_printf_float+0x19a>
 8007914:	1c4b      	adds	r3, r1, #1
 8007916:	e7e7      	b.n	80078e8 <_printf_float+0x198>
 8007918:	2900      	cmp	r1, #0
 800791a:	bfcc      	ite	gt
 800791c:	2201      	movgt	r2, #1
 800791e:	f1c1 0202 	rsble	r2, r1, #2
 8007922:	4413      	add	r3, r2
 8007924:	e7e0      	b.n	80078e8 <_printf_float+0x198>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	055a      	lsls	r2, r3, #21
 800792a:	d407      	bmi.n	800793c <_printf_float+0x1ec>
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	4642      	mov	r2, r8
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	d12b      	bne.n	8007992 <_printf_float+0x242>
 800793a:	e764      	b.n	8007806 <_printf_float+0xb6>
 800793c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007940:	f240 80dd 	bls.w	8007afe <_printf_float+0x3ae>
 8007944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	f7f9 f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8007950:	2800      	cmp	r0, #0
 8007952:	d033      	beq.n	80079bc <_printf_float+0x26c>
 8007954:	2301      	movs	r3, #1
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	4a35      	ldr	r2, [pc, #212]	; (8007a30 <_printf_float+0x2e0>)
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f af51 	beq.w	8007806 <_printf_float+0xb6>
 8007964:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007968:	429a      	cmp	r2, r3
 800796a:	db02      	blt.n	8007972 <_printf_float+0x222>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07d8      	lsls	r0, r3, #31
 8007970:	d50f      	bpl.n	8007992 <_printf_float+0x242>
 8007972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f af42 	beq.w	8007806 <_printf_float+0xb6>
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	f104 091a 	add.w	r9, r4, #26
 800798a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798c:	3b01      	subs	r3, #1
 800798e:	4543      	cmp	r3, r8
 8007990:	dc09      	bgt.n	80079a6 <_printf_float+0x256>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	079b      	lsls	r3, r3, #30
 8007996:	f100 8104 	bmi.w	8007ba2 <_printf_float+0x452>
 800799a:	68e0      	ldr	r0, [r4, #12]
 800799c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800799e:	4298      	cmp	r0, r3
 80079a0:	bfb8      	it	lt
 80079a2:	4618      	movlt	r0, r3
 80079a4:	e731      	b.n	800780a <_printf_float+0xba>
 80079a6:	2301      	movs	r3, #1
 80079a8:	464a      	mov	r2, r9
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f af28 	beq.w	8007806 <_printf_float+0xb6>
 80079b6:	f108 0801 	add.w	r8, r8, #1
 80079ba:	e7e6      	b.n	800798a <_printf_float+0x23a>
 80079bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dc38      	bgt.n	8007a34 <_printf_float+0x2e4>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <_printf_float+0x2e0>)
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f af1a 	beq.w	8007806 <_printf_float+0xb6>
 80079d2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d102      	bne.n	80079e0 <_printf_float+0x290>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	07d9      	lsls	r1, r3, #31
 80079de:	d5d8      	bpl.n	8007992 <_printf_float+0x242>
 80079e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	f43f af0b 	beq.w	8007806 <_printf_float+0xb6>
 80079f0:	f04f 0900 	mov.w	r9, #0
 80079f4:	f104 0a1a 	add.w	sl, r4, #26
 80079f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079fa:	425b      	negs	r3, r3
 80079fc:	454b      	cmp	r3, r9
 80079fe:	dc01      	bgt.n	8007a04 <_printf_float+0x2b4>
 8007a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a02:	e794      	b.n	800792e <_printf_float+0x1de>
 8007a04:	2301      	movs	r3, #1
 8007a06:	4652      	mov	r2, sl
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f aef9 	beq.w	8007806 <_printf_float+0xb6>
 8007a14:	f109 0901 	add.w	r9, r9, #1
 8007a18:	e7ee      	b.n	80079f8 <_printf_float+0x2a8>
 8007a1a:	bf00      	nop
 8007a1c:	7fefffff 	.word	0x7fefffff
 8007a20:	0800c14a 	.word	0x0800c14a
 8007a24:	0800c14e 	.word	0x0800c14e
 8007a28:	0800c152 	.word	0x0800c152
 8007a2c:	0800c156 	.word	0x0800c156
 8007a30:	0800c15a 	.word	0x0800c15a
 8007a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bfa8      	it	ge
 8007a3c:	461a      	movge	r2, r3
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	4691      	mov	r9, r2
 8007a42:	dc37      	bgt.n	8007ab4 <_printf_float+0x364>
 8007a44:	f04f 0b00 	mov.w	fp, #0
 8007a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a4c:	f104 021a 	add.w	r2, r4, #26
 8007a50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007a54:	ebaa 0309 	sub.w	r3, sl, r9
 8007a58:	455b      	cmp	r3, fp
 8007a5a:	dc33      	bgt.n	8007ac4 <_printf_float+0x374>
 8007a5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a60:	429a      	cmp	r2, r3
 8007a62:	db3b      	blt.n	8007adc <_printf_float+0x38c>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	07da      	lsls	r2, r3, #31
 8007a68:	d438      	bmi.n	8007adc <_printf_float+0x38c>
 8007a6a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a6e:	eba2 0903 	sub.w	r9, r2, r3
 8007a72:	eba2 020a 	sub.w	r2, r2, sl
 8007a76:	4591      	cmp	r9, r2
 8007a78:	bfa8      	it	ge
 8007a7a:	4691      	movge	r9, r2
 8007a7c:	f1b9 0f00 	cmp.w	r9, #0
 8007a80:	dc34      	bgt.n	8007aec <_printf_float+0x39c>
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a8a:	f104 0a1a 	add.w	sl, r4, #26
 8007a8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	eba3 0309 	sub.w	r3, r3, r9
 8007a98:	4543      	cmp	r3, r8
 8007a9a:	f77f af7a 	ble.w	8007992 <_printf_float+0x242>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f43f aeac 	beq.w	8007806 <_printf_float+0xb6>
 8007aae:	f108 0801 	add.w	r8, r8, #1
 8007ab2:	e7ec      	b.n	8007a8e <_printf_float+0x33e>
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4642      	mov	r2, r8
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d1c0      	bne.n	8007a44 <_printf_float+0x2f4>
 8007ac2:	e6a0      	b.n	8007806 <_printf_float+0xb6>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	920b      	str	r2, [sp, #44]	; 0x2c
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f ae99 	beq.w	8007806 <_printf_float+0xb6>
 8007ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ad6:	f10b 0b01 	add.w	fp, fp, #1
 8007ada:	e7b9      	b.n	8007a50 <_printf_float+0x300>
 8007adc:	4631      	mov	r1, r6
 8007ade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d1bf      	bne.n	8007a6a <_printf_float+0x31a>
 8007aea:	e68c      	b.n	8007806 <_printf_float+0xb6>
 8007aec:	464b      	mov	r3, r9
 8007aee:	4631      	mov	r1, r6
 8007af0:	4628      	mov	r0, r5
 8007af2:	eb08 020a 	add.w	r2, r8, sl
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	d1c2      	bne.n	8007a82 <_printf_float+0x332>
 8007afc:	e683      	b.n	8007806 <_printf_float+0xb6>
 8007afe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b00:	2a01      	cmp	r2, #1
 8007b02:	dc01      	bgt.n	8007b08 <_printf_float+0x3b8>
 8007b04:	07db      	lsls	r3, r3, #31
 8007b06:	d539      	bpl.n	8007b7c <_printf_float+0x42c>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f ae77 	beq.w	8007806 <_printf_float+0xb6>
 8007b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f ae6f 	beq.w	8007806 <_printf_float+0xb6>
 8007b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007b34:	f7f8 ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8007b38:	b9d8      	cbnz	r0, 8007b72 <_printf_float+0x422>
 8007b3a:	f109 33ff 	add.w	r3, r9, #4294967295
 8007b3e:	f108 0201 	add.w	r2, r8, #1
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d10e      	bne.n	8007b6a <_printf_float+0x41a>
 8007b4c:	e65b      	b.n	8007806 <_printf_float+0xb6>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	464a      	mov	r2, r9
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f ae54 	beq.w	8007806 <_printf_float+0xb6>
 8007b5e:	f108 0801 	add.w	r8, r8, #1
 8007b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b64:	3b01      	subs	r3, #1
 8007b66:	4543      	cmp	r3, r8
 8007b68:	dcf1      	bgt.n	8007b4e <_printf_float+0x3fe>
 8007b6a:	4653      	mov	r3, sl
 8007b6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b70:	e6de      	b.n	8007930 <_printf_float+0x1e0>
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	f104 091a 	add.w	r9, r4, #26
 8007b7a:	e7f2      	b.n	8007b62 <_printf_float+0x412>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4642      	mov	r2, r8
 8007b80:	e7df      	b.n	8007b42 <_printf_float+0x3f2>
 8007b82:	2301      	movs	r3, #1
 8007b84:	464a      	mov	r2, r9
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f ae3a 	beq.w	8007806 <_printf_float+0xb6>
 8007b92:	f108 0801 	add.w	r8, r8, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	4543      	cmp	r3, r8
 8007b9e:	dcf0      	bgt.n	8007b82 <_printf_float+0x432>
 8007ba0:	e6fb      	b.n	800799a <_printf_float+0x24a>
 8007ba2:	f04f 0800 	mov.w	r8, #0
 8007ba6:	f104 0919 	add.w	r9, r4, #25
 8007baa:	e7f4      	b.n	8007b96 <_printf_float+0x446>

08007bac <_printf_common>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	4699      	mov	r9, r3
 8007bb4:	688a      	ldr	r2, [r1, #8]
 8007bb6:	690b      	ldr	r3, [r1, #16]
 8007bb8:	4607      	mov	r7, r0
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	bfb8      	it	lt
 8007bbe:	4613      	movlt	r3, r2
 8007bc0:	6033      	str	r3, [r6, #0]
 8007bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bcc:	b10a      	cbz	r2, 8007bd2 <_printf_common+0x26>
 8007bce:	3301      	adds	r3, #1
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	0699      	lsls	r1, r3, #26
 8007bd6:	bf42      	ittt	mi
 8007bd8:	6833      	ldrmi	r3, [r6, #0]
 8007bda:	3302      	addmi	r3, #2
 8007bdc:	6033      	strmi	r3, [r6, #0]
 8007bde:	6825      	ldr	r5, [r4, #0]
 8007be0:	f015 0506 	ands.w	r5, r5, #6
 8007be4:	d106      	bne.n	8007bf4 <_printf_common+0x48>
 8007be6:	f104 0a19 	add.w	sl, r4, #25
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	6832      	ldr	r2, [r6, #0]
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc2b      	bgt.n	8007c4c <_printf_common+0xa0>
 8007bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bf8:	1e13      	subs	r3, r2, #0
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	bf18      	it	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	0692      	lsls	r2, r2, #26
 8007c02:	d430      	bmi.n	8007c66 <_printf_common+0xba>
 8007c04:	4649      	mov	r1, r9
 8007c06:	4638      	mov	r0, r7
 8007c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c0c:	47c0      	blx	r8
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d023      	beq.n	8007c5a <_printf_common+0xae>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	f003 0306 	and.w	r3, r3, #6
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	bf14      	ite	ne
 8007c1e:	2500      	movne	r5, #0
 8007c20:	6833      	ldreq	r3, [r6, #0]
 8007c22:	f04f 0600 	mov.w	r6, #0
 8007c26:	bf08      	it	eq
 8007c28:	68e5      	ldreq	r5, [r4, #12]
 8007c2a:	f104 041a 	add.w	r4, r4, #26
 8007c2e:	bf08      	it	eq
 8007c30:	1aed      	subeq	r5, r5, r3
 8007c32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007c36:	bf08      	it	eq
 8007c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	bfc4      	itt	gt
 8007c40:	1a9b      	subgt	r3, r3, r2
 8007c42:	18ed      	addgt	r5, r5, r3
 8007c44:	42b5      	cmp	r5, r6
 8007c46:	d11a      	bne.n	8007c7e <_printf_common+0xd2>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e008      	b.n	8007c5e <_printf_common+0xb2>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4649      	mov	r1, r9
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d103      	bne.n	8007c62 <_printf_common+0xb6>
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c62:	3501      	adds	r5, #1
 8007c64:	e7c1      	b.n	8007bea <_printf_common+0x3e>
 8007c66:	2030      	movs	r0, #48	; 0x30
 8007c68:	18e1      	adds	r1, r4, r3
 8007c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c74:	4422      	add	r2, r4
 8007c76:	3302      	adds	r3, #2
 8007c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c7c:	e7c2      	b.n	8007c04 <_printf_common+0x58>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4622      	mov	r2, r4
 8007c82:	4649      	mov	r1, r9
 8007c84:	4638      	mov	r0, r7
 8007c86:	47c0      	blx	r8
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d0e6      	beq.n	8007c5a <_printf_common+0xae>
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7d9      	b.n	8007c44 <_printf_common+0x98>

08007c90 <_printf_i>:
 8007c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	7e0f      	ldrb	r7, [r1, #24]
 8007c96:	4691      	mov	r9, r2
 8007c98:	2f78      	cmp	r7, #120	; 0x78
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	469a      	mov	sl, r3
 8007ca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ca6:	d807      	bhi.n	8007cb8 <_printf_i+0x28>
 8007ca8:	2f62      	cmp	r7, #98	; 0x62
 8007caa:	d80a      	bhi.n	8007cc2 <_printf_i+0x32>
 8007cac:	2f00      	cmp	r7, #0
 8007cae:	f000 80d5 	beq.w	8007e5c <_printf_i+0x1cc>
 8007cb2:	2f58      	cmp	r7, #88	; 0x58
 8007cb4:	f000 80c1 	beq.w	8007e3a <_printf_i+0x1aa>
 8007cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cc0:	e03a      	b.n	8007d38 <_printf_i+0xa8>
 8007cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cc6:	2b15      	cmp	r3, #21
 8007cc8:	d8f6      	bhi.n	8007cb8 <_printf_i+0x28>
 8007cca:	a101      	add	r1, pc, #4	; (adr r1, 8007cd0 <_printf_i+0x40>)
 8007ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd0:	08007d29 	.word	0x08007d29
 8007cd4:	08007d3d 	.word	0x08007d3d
 8007cd8:	08007cb9 	.word	0x08007cb9
 8007cdc:	08007cb9 	.word	0x08007cb9
 8007ce0:	08007cb9 	.word	0x08007cb9
 8007ce4:	08007cb9 	.word	0x08007cb9
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007cb9 	.word	0x08007cb9
 8007cf0:	08007cb9 	.word	0x08007cb9
 8007cf4:	08007cb9 	.word	0x08007cb9
 8007cf8:	08007cb9 	.word	0x08007cb9
 8007cfc:	08007e43 	.word	0x08007e43
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007dfd 	.word	0x08007dfd
 8007d08:	08007cb9 	.word	0x08007cb9
 8007d0c:	08007cb9 	.word	0x08007cb9
 8007d10:	08007e65 	.word	0x08007e65
 8007d14:	08007cb9 	.word	0x08007cb9
 8007d18:	08007d69 	.word	0x08007d69
 8007d1c:	08007cb9 	.word	0x08007cb9
 8007d20:	08007cb9 	.word	0x08007cb9
 8007d24:	08007e05 	.word	0x08007e05
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	1d1a      	adds	r2, r3, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	602a      	str	r2, [r5, #0]
 8007d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e0a0      	b.n	8007e7e <_printf_i+0x1ee>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	682b      	ldr	r3, [r5, #0]
 8007d40:	0607      	lsls	r7, r0, #24
 8007d42:	f103 0104 	add.w	r1, r3, #4
 8007d46:	6029      	str	r1, [r5, #0]
 8007d48:	d501      	bpl.n	8007d4e <_printf_i+0xbe>
 8007d4a:	681e      	ldr	r6, [r3, #0]
 8007d4c:	e003      	b.n	8007d56 <_printf_i+0xc6>
 8007d4e:	0646      	lsls	r6, r0, #25
 8007d50:	d5fb      	bpl.n	8007d4a <_printf_i+0xba>
 8007d52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	da03      	bge.n	8007d62 <_printf_i+0xd2>
 8007d5a:	232d      	movs	r3, #45	; 0x2d
 8007d5c:	4276      	negs	r6, r6
 8007d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d62:	230a      	movs	r3, #10
 8007d64:	4859      	ldr	r0, [pc, #356]	; (8007ecc <_printf_i+0x23c>)
 8007d66:	e012      	b.n	8007d8e <_printf_i+0xfe>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	1d19      	adds	r1, r3, #4
 8007d6e:	6029      	str	r1, [r5, #0]
 8007d70:	0605      	lsls	r5, r0, #24
 8007d72:	d501      	bpl.n	8007d78 <_printf_i+0xe8>
 8007d74:	681e      	ldr	r6, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <_printf_i+0xee>
 8007d78:	0641      	lsls	r1, r0, #25
 8007d7a:	d5fb      	bpl.n	8007d74 <_printf_i+0xe4>
 8007d7c:	881e      	ldrh	r6, [r3, #0]
 8007d7e:	2f6f      	cmp	r7, #111	; 0x6f
 8007d80:	bf0c      	ite	eq
 8007d82:	2308      	moveq	r3, #8
 8007d84:	230a      	movne	r3, #10
 8007d86:	4851      	ldr	r0, [pc, #324]	; (8007ecc <_printf_i+0x23c>)
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d8e:	6865      	ldr	r5, [r4, #4]
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	bfa8      	it	ge
 8007d94:	6821      	ldrge	r1, [r4, #0]
 8007d96:	60a5      	str	r5, [r4, #8]
 8007d98:	bfa4      	itt	ge
 8007d9a:	f021 0104 	bicge.w	r1, r1, #4
 8007d9e:	6021      	strge	r1, [r4, #0]
 8007da0:	b90e      	cbnz	r6, 8007da6 <_printf_i+0x116>
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	d04b      	beq.n	8007e3e <_printf_i+0x1ae>
 8007da6:	4615      	mov	r5, r2
 8007da8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dac:	fb03 6711 	mls	r7, r3, r1, r6
 8007db0:	5dc7      	ldrb	r7, [r0, r7]
 8007db2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007db6:	4637      	mov	r7, r6
 8007db8:	42bb      	cmp	r3, r7
 8007dba:	460e      	mov	r6, r1
 8007dbc:	d9f4      	bls.n	8007da8 <_printf_i+0x118>
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d10b      	bne.n	8007dda <_printf_i+0x14a>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	07de      	lsls	r6, r3, #31
 8007dc6:	d508      	bpl.n	8007dda <_printf_i+0x14a>
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	6861      	ldr	r1, [r4, #4]
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	bfde      	ittt	le
 8007dd0:	2330      	movle	r3, #48	; 0x30
 8007dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dda:	1b52      	subs	r2, r2, r5
 8007ddc:	6122      	str	r2, [r4, #16]
 8007dde:	464b      	mov	r3, r9
 8007de0:	4621      	mov	r1, r4
 8007de2:	4640      	mov	r0, r8
 8007de4:	f8cd a000 	str.w	sl, [sp]
 8007de8:	aa03      	add	r2, sp, #12
 8007dea:	f7ff fedf 	bl	8007bac <_printf_common>
 8007dee:	3001      	adds	r0, #1
 8007df0:	d14a      	bne.n	8007e88 <_printf_i+0x1f8>
 8007df2:	f04f 30ff 	mov.w	r0, #4294967295
 8007df6:	b004      	add	sp, #16
 8007df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	f043 0320 	orr.w	r3, r3, #32
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	2778      	movs	r7, #120	; 0x78
 8007e06:	4832      	ldr	r0, [pc, #200]	; (8007ed0 <_printf_i+0x240>)
 8007e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	6829      	ldr	r1, [r5, #0]
 8007e10:	061f      	lsls	r7, r3, #24
 8007e12:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e16:	d402      	bmi.n	8007e1e <_printf_i+0x18e>
 8007e18:	065f      	lsls	r7, r3, #25
 8007e1a:	bf48      	it	mi
 8007e1c:	b2b6      	uxthmi	r6, r6
 8007e1e:	07df      	lsls	r7, r3, #31
 8007e20:	bf48      	it	mi
 8007e22:	f043 0320 	orrmi.w	r3, r3, #32
 8007e26:	6029      	str	r1, [r5, #0]
 8007e28:	bf48      	it	mi
 8007e2a:	6023      	strmi	r3, [r4, #0]
 8007e2c:	b91e      	cbnz	r6, 8007e36 <_printf_i+0x1a6>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	f023 0320 	bic.w	r3, r3, #32
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	2310      	movs	r3, #16
 8007e38:	e7a6      	b.n	8007d88 <_printf_i+0xf8>
 8007e3a:	4824      	ldr	r0, [pc, #144]	; (8007ecc <_printf_i+0x23c>)
 8007e3c:	e7e4      	b.n	8007e08 <_printf_i+0x178>
 8007e3e:	4615      	mov	r5, r2
 8007e40:	e7bd      	b.n	8007dbe <_printf_i+0x12e>
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	6826      	ldr	r6, [r4, #0]
 8007e46:	1d18      	adds	r0, r3, #4
 8007e48:	6961      	ldr	r1, [r4, #20]
 8007e4a:	6028      	str	r0, [r5, #0]
 8007e4c:	0635      	lsls	r5, r6, #24
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	d501      	bpl.n	8007e56 <_printf_i+0x1c6>
 8007e52:	6019      	str	r1, [r3, #0]
 8007e54:	e002      	b.n	8007e5c <_printf_i+0x1cc>
 8007e56:	0670      	lsls	r0, r6, #25
 8007e58:	d5fb      	bpl.n	8007e52 <_printf_i+0x1c2>
 8007e5a:	8019      	strh	r1, [r3, #0]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4615      	mov	r5, r2
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	e7bc      	b.n	8007dde <_printf_i+0x14e>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	2100      	movs	r1, #0
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	4628      	mov	r0, r5
 8007e72:	f000 f9ee 	bl	8008252 <memchr>
 8007e76:	b108      	cbz	r0, 8007e7c <_printf_i+0x1ec>
 8007e78:	1b40      	subs	r0, r0, r5
 8007e7a:	6060      	str	r0, [r4, #4]
 8007e7c:	6863      	ldr	r3, [r4, #4]
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	2300      	movs	r3, #0
 8007e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e86:	e7aa      	b.n	8007dde <_printf_i+0x14e>
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	47d0      	blx	sl
 8007e92:	3001      	adds	r0, #1
 8007e94:	d0ad      	beq.n	8007df2 <_printf_i+0x162>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	079b      	lsls	r3, r3, #30
 8007e9a:	d413      	bmi.n	8007ec4 <_printf_i+0x234>
 8007e9c:	68e0      	ldr	r0, [r4, #12]
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	4298      	cmp	r0, r3
 8007ea2:	bfb8      	it	lt
 8007ea4:	4618      	movlt	r0, r3
 8007ea6:	e7a6      	b.n	8007df6 <_printf_i+0x166>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4632      	mov	r2, r6
 8007eac:	4649      	mov	r1, r9
 8007eae:	4640      	mov	r0, r8
 8007eb0:	47d0      	blx	sl
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d09d      	beq.n	8007df2 <_printf_i+0x162>
 8007eb6:	3501      	adds	r5, #1
 8007eb8:	68e3      	ldr	r3, [r4, #12]
 8007eba:	9903      	ldr	r1, [sp, #12]
 8007ebc:	1a5b      	subs	r3, r3, r1
 8007ebe:	42ab      	cmp	r3, r5
 8007ec0:	dcf2      	bgt.n	8007ea8 <_printf_i+0x218>
 8007ec2:	e7eb      	b.n	8007e9c <_printf_i+0x20c>
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	f104 0619 	add.w	r6, r4, #25
 8007eca:	e7f5      	b.n	8007eb8 <_printf_i+0x228>
 8007ecc:	0800c15c 	.word	0x0800c15c
 8007ed0:	0800c16d 	.word	0x0800c16d

08007ed4 <std>:
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	4604      	mov	r4, r0
 8007eda:	e9c0 3300 	strd	r3, r3, [r0]
 8007ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ee2:	6083      	str	r3, [r0, #8]
 8007ee4:	8181      	strh	r1, [r0, #12]
 8007ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee8:	81c2      	strh	r2, [r0, #14]
 8007eea:	6183      	str	r3, [r0, #24]
 8007eec:	4619      	mov	r1, r3
 8007eee:	2208      	movs	r2, #8
 8007ef0:	305c      	adds	r0, #92	; 0x5c
 8007ef2:	f000 f92e 	bl	8008152 <memset>
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <std+0x58>)
 8007ef8:	6224      	str	r4, [r4, #32]
 8007efa:	6263      	str	r3, [r4, #36]	; 0x24
 8007efc:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <std+0x5c>)
 8007efe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f00:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <std+0x60>)
 8007f02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <std+0x64>)
 8007f06:	6323      	str	r3, [r4, #48]	; 0x30
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <std+0x68>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d006      	beq.n	8007f1c <std+0x48>
 8007f0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f12:	4294      	cmp	r4, r2
 8007f14:	d002      	beq.n	8007f1c <std+0x48>
 8007f16:	33d0      	adds	r3, #208	; 0xd0
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	d105      	bne.n	8007f28 <std+0x54>
 8007f1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f24:	f000 b992 	b.w	800824c <__retarget_lock_init_recursive>
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	08008099 	.word	0x08008099
 8007f30:	080080bb 	.word	0x080080bb
 8007f34:	080080f3 	.word	0x080080f3
 8007f38:	08008117 	.word	0x08008117
 8007f3c:	20000f9c 	.word	0x20000f9c

08007f40 <stdio_exit_handler>:
 8007f40:	4a02      	ldr	r2, [pc, #8]	; (8007f4c <stdio_exit_handler+0xc>)
 8007f42:	4903      	ldr	r1, [pc, #12]	; (8007f50 <stdio_exit_handler+0x10>)
 8007f44:	4803      	ldr	r0, [pc, #12]	; (8007f54 <stdio_exit_handler+0x14>)
 8007f46:	f000 b869 	b.w	800801c <_fwalk_sglue>
 8007f4a:	bf00      	nop
 8007f4c:	20000034 	.word	0x20000034
 8007f50:	08009c05 	.word	0x08009c05
 8007f54:	20000040 	.word	0x20000040

08007f58 <cleanup_stdio>:
 8007f58:	6841      	ldr	r1, [r0, #4]
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <cleanup_stdio+0x34>)
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	4604      	mov	r4, r0
 8007f62:	d001      	beq.n	8007f68 <cleanup_stdio+0x10>
 8007f64:	f001 fe4e 	bl	8009c04 <_fflush_r>
 8007f68:	68a1      	ldr	r1, [r4, #8]
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <cleanup_stdio+0x38>)
 8007f6c:	4299      	cmp	r1, r3
 8007f6e:	d002      	beq.n	8007f76 <cleanup_stdio+0x1e>
 8007f70:	4620      	mov	r0, r4
 8007f72:	f001 fe47 	bl	8009c04 <_fflush_r>
 8007f76:	68e1      	ldr	r1, [r4, #12]
 8007f78:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <cleanup_stdio+0x3c>)
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	d004      	beq.n	8007f88 <cleanup_stdio+0x30>
 8007f7e:	4620      	mov	r0, r4
 8007f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f84:	f001 be3e 	b.w	8009c04 <_fflush_r>
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000f9c 	.word	0x20000f9c
 8007f90:	20001004 	.word	0x20001004
 8007f94:	2000106c 	.word	0x2000106c

08007f98 <global_stdio_init.part.0>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <global_stdio_init.part.0+0x30>)
 8007f9c:	4c0b      	ldr	r4, [pc, #44]	; (8007fcc <global_stdio_init.part.0+0x34>)
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <global_stdio_init.part.0+0x38>)
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	2104      	movs	r1, #4
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f7ff ff94 	bl	8007ed4 <std>
 8007fac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	2109      	movs	r1, #9
 8007fb4:	f7ff ff8e 	bl	8007ed4 <std>
 8007fb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc2:	2112      	movs	r1, #18
 8007fc4:	f7ff bf86 	b.w	8007ed4 <std>
 8007fc8:	200010d4 	.word	0x200010d4
 8007fcc:	20000f9c 	.word	0x20000f9c
 8007fd0:	08007f41 	.word	0x08007f41

08007fd4 <__sfp_lock_acquire>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sfp_lock_acquire+0x8>)
 8007fd6:	f000 b93a 	b.w	800824e <__retarget_lock_acquire_recursive>
 8007fda:	bf00      	nop
 8007fdc:	200010dd 	.word	0x200010dd

08007fe0 <__sfp_lock_release>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__sfp_lock_release+0x8>)
 8007fe2:	f000 b935 	b.w	8008250 <__retarget_lock_release_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	200010dd 	.word	0x200010dd

08007fec <__sinit>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	4604      	mov	r4, r0
 8007ff0:	f7ff fff0 	bl	8007fd4 <__sfp_lock_acquire>
 8007ff4:	6a23      	ldr	r3, [r4, #32]
 8007ff6:	b11b      	cbz	r3, 8008000 <__sinit+0x14>
 8007ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffc:	f7ff bff0 	b.w	8007fe0 <__sfp_lock_release>
 8008000:	4b04      	ldr	r3, [pc, #16]	; (8008014 <__sinit+0x28>)
 8008002:	6223      	str	r3, [r4, #32]
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <__sinit+0x2c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f5      	bne.n	8007ff8 <__sinit+0xc>
 800800c:	f7ff ffc4 	bl	8007f98 <global_stdio_init.part.0>
 8008010:	e7f2      	b.n	8007ff8 <__sinit+0xc>
 8008012:	bf00      	nop
 8008014:	08007f59 	.word	0x08007f59
 8008018:	200010d4 	.word	0x200010d4

0800801c <_fwalk_sglue>:
 800801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008020:	4607      	mov	r7, r0
 8008022:	4688      	mov	r8, r1
 8008024:	4614      	mov	r4, r2
 8008026:	2600      	movs	r6, #0
 8008028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800802c:	f1b9 0901 	subs.w	r9, r9, #1
 8008030:	d505      	bpl.n	800803e <_fwalk_sglue+0x22>
 8008032:	6824      	ldr	r4, [r4, #0]
 8008034:	2c00      	cmp	r4, #0
 8008036:	d1f7      	bne.n	8008028 <_fwalk_sglue+0xc>
 8008038:	4630      	mov	r0, r6
 800803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d907      	bls.n	8008054 <_fwalk_sglue+0x38>
 8008044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008048:	3301      	adds	r3, #1
 800804a:	d003      	beq.n	8008054 <_fwalk_sglue+0x38>
 800804c:	4629      	mov	r1, r5
 800804e:	4638      	mov	r0, r7
 8008050:	47c0      	blx	r8
 8008052:	4306      	orrs	r6, r0
 8008054:	3568      	adds	r5, #104	; 0x68
 8008056:	e7e9      	b.n	800802c <_fwalk_sglue+0x10>

08008058 <siprintf>:
 8008058:	b40e      	push	{r1, r2, r3}
 800805a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800805e:	b500      	push	{lr}
 8008060:	b09c      	sub	sp, #112	; 0x70
 8008062:	ab1d      	add	r3, sp, #116	; 0x74
 8008064:	9002      	str	r0, [sp, #8]
 8008066:	9006      	str	r0, [sp, #24]
 8008068:	9107      	str	r1, [sp, #28]
 800806a:	9104      	str	r1, [sp, #16]
 800806c:	4808      	ldr	r0, [pc, #32]	; (8008090 <siprintf+0x38>)
 800806e:	4909      	ldr	r1, [pc, #36]	; (8008094 <siprintf+0x3c>)
 8008070:	f853 2b04 	ldr.w	r2, [r3], #4
 8008074:	9105      	str	r1, [sp, #20]
 8008076:	6800      	ldr	r0, [r0, #0]
 8008078:	a902      	add	r1, sp, #8
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	f001 fc42 	bl	8009904 <_svfiprintf_r>
 8008080:	2200      	movs	r2, #0
 8008082:	9b02      	ldr	r3, [sp, #8]
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	b01c      	add	sp, #112	; 0x70
 8008088:	f85d eb04 	ldr.w	lr, [sp], #4
 800808c:	b003      	add	sp, #12
 800808e:	4770      	bx	lr
 8008090:	2000008c 	.word	0x2000008c
 8008094:	ffff0208 	.word	0xffff0208

08008098 <__sread>:
 8008098:	b510      	push	{r4, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	f000 f886 	bl	80081b0 <_read_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	bfab      	itete	ge
 80080a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080aa:	89a3      	ldrhlt	r3, [r4, #12]
 80080ac:	181b      	addge	r3, r3, r0
 80080ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080b2:	bfac      	ite	ge
 80080b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080b6:	81a3      	strhlt	r3, [r4, #12]
 80080b8:	bd10      	pop	{r4, pc}

080080ba <__swrite>:
 80080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	461f      	mov	r7, r3
 80080c0:	898b      	ldrh	r3, [r1, #12]
 80080c2:	4605      	mov	r5, r0
 80080c4:	05db      	lsls	r3, r3, #23
 80080c6:	460c      	mov	r4, r1
 80080c8:	4616      	mov	r6, r2
 80080ca:	d505      	bpl.n	80080d8 <__swrite+0x1e>
 80080cc:	2302      	movs	r3, #2
 80080ce:	2200      	movs	r2, #0
 80080d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d4:	f000 f85a 	bl	800818c <_lseek_r>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	4632      	mov	r2, r6
 80080dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	4628      	mov	r0, r5
 80080e4:	463b      	mov	r3, r7
 80080e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	f000 b871 	b.w	80081d4 <_write_r>

080080f2 <__sseek>:
 80080f2:	b510      	push	{r4, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fa:	f000 f847 	bl	800818c <_lseek_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	bf15      	itete	ne
 8008104:	6560      	strne	r0, [r4, #84]	; 0x54
 8008106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800810a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800810e:	81a3      	strheq	r3, [r4, #12]
 8008110:	bf18      	it	ne
 8008112:	81a3      	strhne	r3, [r4, #12]
 8008114:	bd10      	pop	{r4, pc}

08008116 <__sclose>:
 8008116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811a:	f000 b827 	b.w	800816c <_close_r>

0800811e <memmove>:
 800811e:	4288      	cmp	r0, r1
 8008120:	b510      	push	{r4, lr}
 8008122:	eb01 0402 	add.w	r4, r1, r2
 8008126:	d902      	bls.n	800812e <memmove+0x10>
 8008128:	4284      	cmp	r4, r0
 800812a:	4623      	mov	r3, r4
 800812c:	d807      	bhi.n	800813e <memmove+0x20>
 800812e:	1e43      	subs	r3, r0, #1
 8008130:	42a1      	cmp	r1, r4
 8008132:	d008      	beq.n	8008146 <memmove+0x28>
 8008134:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008138:	f803 2f01 	strb.w	r2, [r3, #1]!
 800813c:	e7f8      	b.n	8008130 <memmove+0x12>
 800813e:	4601      	mov	r1, r0
 8008140:	4402      	add	r2, r0
 8008142:	428a      	cmp	r2, r1
 8008144:	d100      	bne.n	8008148 <memmove+0x2a>
 8008146:	bd10      	pop	{r4, pc}
 8008148:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800814c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008150:	e7f7      	b.n	8008142 <memmove+0x24>

08008152 <memset>:
 8008152:	4603      	mov	r3, r0
 8008154:	4402      	add	r2, r0
 8008156:	4293      	cmp	r3, r2
 8008158:	d100      	bne.n	800815c <memset+0xa>
 800815a:	4770      	bx	lr
 800815c:	f803 1b01 	strb.w	r1, [r3], #1
 8008160:	e7f9      	b.n	8008156 <memset+0x4>
	...

08008164 <_localeconv_r>:
 8008164:	4800      	ldr	r0, [pc, #0]	; (8008168 <_localeconv_r+0x4>)
 8008166:	4770      	bx	lr
 8008168:	20000180 	.word	0x20000180

0800816c <_close_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	2300      	movs	r3, #0
 8008170:	4d05      	ldr	r5, [pc, #20]	; (8008188 <_close_r+0x1c>)
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f7fc f878 	bl	800426c <_close>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_close_r+0x1a>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_close_r+0x1a>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	200010d8 	.word	0x200010d8

0800818c <_lseek_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	4611      	mov	r1, r2
 8008194:	2200      	movs	r2, #0
 8008196:	4d05      	ldr	r5, [pc, #20]	; (80081ac <_lseek_r+0x20>)
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f7fc f88a 	bl	80042b4 <_lseek>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_lseek_r+0x1e>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_lseek_r+0x1e>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	200010d8 	.word	0x200010d8

080081b0 <_read_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	2200      	movs	r2, #0
 80081ba:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_read_r+0x20>)
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7fc f81b 	bl	80041fa <_read>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_read_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_read_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	200010d8 	.word	0x200010d8

080081d4 <_write_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	4d05      	ldr	r5, [pc, #20]	; (80081f4 <_write_r+0x20>)
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f7fc f826 	bl	8004234 <_write>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_write_r+0x1e>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_write_r+0x1e>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	200010d8 	.word	0x200010d8

080081f8 <__errno>:
 80081f8:	4b01      	ldr	r3, [pc, #4]	; (8008200 <__errno+0x8>)
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	2000008c 	.word	0x2000008c

08008204 <__libc_init_array>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	2600      	movs	r6, #0
 8008208:	4d0c      	ldr	r5, [pc, #48]	; (800823c <__libc_init_array+0x38>)
 800820a:	4c0d      	ldr	r4, [pc, #52]	; (8008240 <__libc_init_array+0x3c>)
 800820c:	1b64      	subs	r4, r4, r5
 800820e:	10a4      	asrs	r4, r4, #2
 8008210:	42a6      	cmp	r6, r4
 8008212:	d109      	bne.n	8008228 <__libc_init_array+0x24>
 8008214:	f002 f86e 	bl	800a2f4 <_init>
 8008218:	2600      	movs	r6, #0
 800821a:	4d0a      	ldr	r5, [pc, #40]	; (8008244 <__libc_init_array+0x40>)
 800821c:	4c0a      	ldr	r4, [pc, #40]	; (8008248 <__libc_init_array+0x44>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	42a6      	cmp	r6, r4
 8008224:	d105      	bne.n	8008232 <__libc_init_array+0x2e>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	f855 3b04 	ldr.w	r3, [r5], #4
 800822c:	4798      	blx	r3
 800822e:	3601      	adds	r6, #1
 8008230:	e7ee      	b.n	8008210 <__libc_init_array+0xc>
 8008232:	f855 3b04 	ldr.w	r3, [r5], #4
 8008236:	4798      	blx	r3
 8008238:	3601      	adds	r6, #1
 800823a:	e7f2      	b.n	8008222 <__libc_init_array+0x1e>
 800823c:	0800c4bc 	.word	0x0800c4bc
 8008240:	0800c4bc 	.word	0x0800c4bc
 8008244:	0800c4bc 	.word	0x0800c4bc
 8008248:	0800c4c0 	.word	0x0800c4c0

0800824c <__retarget_lock_init_recursive>:
 800824c:	4770      	bx	lr

0800824e <__retarget_lock_acquire_recursive>:
 800824e:	4770      	bx	lr

08008250 <__retarget_lock_release_recursive>:
 8008250:	4770      	bx	lr

08008252 <memchr>:
 8008252:	4603      	mov	r3, r0
 8008254:	b510      	push	{r4, lr}
 8008256:	b2c9      	uxtb	r1, r1
 8008258:	4402      	add	r2, r0
 800825a:	4293      	cmp	r3, r2
 800825c:	4618      	mov	r0, r3
 800825e:	d101      	bne.n	8008264 <memchr+0x12>
 8008260:	2000      	movs	r0, #0
 8008262:	e003      	b.n	800826c <memchr+0x1a>
 8008264:	7804      	ldrb	r4, [r0, #0]
 8008266:	3301      	adds	r3, #1
 8008268:	428c      	cmp	r4, r1
 800826a:	d1f6      	bne.n	800825a <memchr+0x8>
 800826c:	bd10      	pop	{r4, pc}

0800826e <memcpy>:
 800826e:	440a      	add	r2, r1
 8008270:	4291      	cmp	r1, r2
 8008272:	f100 33ff 	add.w	r3, r0, #4294967295
 8008276:	d100      	bne.n	800827a <memcpy+0xc>
 8008278:	4770      	bx	lr
 800827a:	b510      	push	{r4, lr}
 800827c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008280:	4291      	cmp	r1, r2
 8008282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008286:	d1f9      	bne.n	800827c <memcpy+0xe>
 8008288:	bd10      	pop	{r4, pc}

0800828a <quorem>:
 800828a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828e:	6903      	ldr	r3, [r0, #16]
 8008290:	690c      	ldr	r4, [r1, #16]
 8008292:	4607      	mov	r7, r0
 8008294:	42a3      	cmp	r3, r4
 8008296:	db7f      	blt.n	8008398 <quorem+0x10e>
 8008298:	3c01      	subs	r4, #1
 800829a:	f100 0514 	add.w	r5, r0, #20
 800829e:	f101 0814 	add.w	r8, r1, #20
 80082a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082b0:	3301      	adds	r3, #1
 80082b2:	429a      	cmp	r2, r3
 80082b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082c0:	d331      	bcc.n	8008326 <quorem+0x9c>
 80082c2:	f04f 0e00 	mov.w	lr, #0
 80082c6:	4640      	mov	r0, r8
 80082c8:	46ac      	mov	ip, r5
 80082ca:	46f2      	mov	sl, lr
 80082cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80082d0:	b293      	uxth	r3, r2
 80082d2:	fb06 e303 	mla	r3, r6, r3, lr
 80082d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082da:	0c1a      	lsrs	r2, r3, #16
 80082dc:	b29b      	uxth	r3, r3
 80082de:	fb06 220e 	mla	r2, r6, lr, r2
 80082e2:	ebaa 0303 	sub.w	r3, sl, r3
 80082e6:	f8dc a000 	ldr.w	sl, [ip]
 80082ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ee:	fa1f fa8a 	uxth.w	sl, sl
 80082f2:	4453      	add	r3, sl
 80082f4:	f8dc a000 	ldr.w	sl, [ip]
 80082f8:	b292      	uxth	r2, r2
 80082fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008302:	b29b      	uxth	r3, r3
 8008304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008308:	4581      	cmp	r9, r0
 800830a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800830e:	f84c 3b04 	str.w	r3, [ip], #4
 8008312:	d2db      	bcs.n	80082cc <quorem+0x42>
 8008314:	f855 300b 	ldr.w	r3, [r5, fp]
 8008318:	b92b      	cbnz	r3, 8008326 <quorem+0x9c>
 800831a:	9b01      	ldr	r3, [sp, #4]
 800831c:	3b04      	subs	r3, #4
 800831e:	429d      	cmp	r5, r3
 8008320:	461a      	mov	r2, r3
 8008322:	d32d      	bcc.n	8008380 <quorem+0xf6>
 8008324:	613c      	str	r4, [r7, #16]
 8008326:	4638      	mov	r0, r7
 8008328:	f001 f994 	bl	8009654 <__mcmp>
 800832c:	2800      	cmp	r0, #0
 800832e:	db23      	blt.n	8008378 <quorem+0xee>
 8008330:	4629      	mov	r1, r5
 8008332:	2000      	movs	r0, #0
 8008334:	3601      	adds	r6, #1
 8008336:	f858 2b04 	ldr.w	r2, [r8], #4
 800833a:	f8d1 c000 	ldr.w	ip, [r1]
 800833e:	b293      	uxth	r3, r2
 8008340:	1ac3      	subs	r3, r0, r3
 8008342:	0c12      	lsrs	r2, r2, #16
 8008344:	fa1f f08c 	uxth.w	r0, ip
 8008348:	4403      	add	r3, r0
 800834a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800834e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008352:	b29b      	uxth	r3, r3
 8008354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008358:	45c1      	cmp	r9, r8
 800835a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800835e:	f841 3b04 	str.w	r3, [r1], #4
 8008362:	d2e8      	bcs.n	8008336 <quorem+0xac>
 8008364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800836c:	b922      	cbnz	r2, 8008378 <quorem+0xee>
 800836e:	3b04      	subs	r3, #4
 8008370:	429d      	cmp	r5, r3
 8008372:	461a      	mov	r2, r3
 8008374:	d30a      	bcc.n	800838c <quorem+0x102>
 8008376:	613c      	str	r4, [r7, #16]
 8008378:	4630      	mov	r0, r6
 800837a:	b003      	add	sp, #12
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	3b04      	subs	r3, #4
 8008384:	2a00      	cmp	r2, #0
 8008386:	d1cd      	bne.n	8008324 <quorem+0x9a>
 8008388:	3c01      	subs	r4, #1
 800838a:	e7c8      	b.n	800831e <quorem+0x94>
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	3b04      	subs	r3, #4
 8008390:	2a00      	cmp	r2, #0
 8008392:	d1f0      	bne.n	8008376 <quorem+0xec>
 8008394:	3c01      	subs	r4, #1
 8008396:	e7eb      	b.n	8008370 <quorem+0xe6>
 8008398:	2000      	movs	r0, #0
 800839a:	e7ee      	b.n	800837a <quorem+0xf0>
 800839c:	0000      	movs	r0, r0
	...

080083a0 <_dtoa_r>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4616      	mov	r6, r2
 80083a6:	461f      	mov	r7, r3
 80083a8:	69c4      	ldr	r4, [r0, #28]
 80083aa:	b099      	sub	sp, #100	; 0x64
 80083ac:	4605      	mov	r5, r0
 80083ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083b6:	b974      	cbnz	r4, 80083d6 <_dtoa_r+0x36>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f000 fe1d 	bl	8008ff8 <malloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	61e8      	str	r0, [r5, #28]
 80083c2:	b920      	cbnz	r0, 80083ce <_dtoa_r+0x2e>
 80083c4:	21ef      	movs	r1, #239	; 0xef
 80083c6:	4bac      	ldr	r3, [pc, #688]	; (8008678 <_dtoa_r+0x2d8>)
 80083c8:	48ac      	ldr	r0, [pc, #688]	; (800867c <_dtoa_r+0x2dc>)
 80083ca:	f001 fc53 	bl	8009c74 <__assert_func>
 80083ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d2:	6004      	str	r4, [r0, #0]
 80083d4:	60c4      	str	r4, [r0, #12]
 80083d6:	69eb      	ldr	r3, [r5, #28]
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	b151      	cbz	r1, 80083f2 <_dtoa_r+0x52>
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	2301      	movs	r3, #1
 80083e0:	4093      	lsls	r3, r2
 80083e2:	604a      	str	r2, [r1, #4]
 80083e4:	608b      	str	r3, [r1, #8]
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 fefa 	bl	80091e0 <_Bfree>
 80083ec:	2200      	movs	r2, #0
 80083ee:	69eb      	ldr	r3, [r5, #28]
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	1e3b      	subs	r3, r7, #0
 80083f4:	bfaf      	iteee	ge
 80083f6:	2300      	movge	r3, #0
 80083f8:	2201      	movlt	r2, #1
 80083fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083fe:	9305      	strlt	r3, [sp, #20]
 8008400:	bfa8      	it	ge
 8008402:	f8c8 3000 	strge.w	r3, [r8]
 8008406:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800840a:	4b9d      	ldr	r3, [pc, #628]	; (8008680 <_dtoa_r+0x2e0>)
 800840c:	bfb8      	it	lt
 800840e:	f8c8 2000 	strlt.w	r2, [r8]
 8008412:	ea33 0309 	bics.w	r3, r3, r9
 8008416:	d119      	bne.n	800844c <_dtoa_r+0xac>
 8008418:	f242 730f 	movw	r3, #9999	; 0x270f
 800841c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008424:	4333      	orrs	r3, r6
 8008426:	f000 8589 	beq.w	8008f3c <_dtoa_r+0xb9c>
 800842a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800842c:	b953      	cbnz	r3, 8008444 <_dtoa_r+0xa4>
 800842e:	4b95      	ldr	r3, [pc, #596]	; (8008684 <_dtoa_r+0x2e4>)
 8008430:	e023      	b.n	800847a <_dtoa_r+0xda>
 8008432:	4b95      	ldr	r3, [pc, #596]	; (8008688 <_dtoa_r+0x2e8>)
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	3308      	adds	r3, #8
 8008438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	9803      	ldr	r0, [sp, #12]
 800843e:	b019      	add	sp, #100	; 0x64
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b8f      	ldr	r3, [pc, #572]	; (8008684 <_dtoa_r+0x2e4>)
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	3303      	adds	r3, #3
 800844a:	e7f5      	b.n	8008438 <_dtoa_r+0x98>
 800844c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008450:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008458:	2200      	movs	r2, #0
 800845a:	2300      	movs	r3, #0
 800845c:	f7f8 faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8008460:	4680      	mov	r8, r0
 8008462:	b160      	cbz	r0, 800847e <_dtoa_r+0xde>
 8008464:	2301      	movs	r3, #1
 8008466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8562 	beq.w	8008f36 <_dtoa_r+0xb96>
 8008472:	4b86      	ldr	r3, [pc, #536]	; (800868c <_dtoa_r+0x2ec>)
 8008474:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	e7de      	b.n	800843c <_dtoa_r+0x9c>
 800847e:	ab16      	add	r3, sp, #88	; 0x58
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	ab17      	add	r3, sp, #92	; 0x5c
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4628      	mov	r0, r5
 8008488:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800848c:	f001 f98a 	bl	80097a4 <__d2b>
 8008490:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008494:	4682      	mov	sl, r0
 8008496:	2c00      	cmp	r4, #0
 8008498:	d07e      	beq.n	8008598 <_dtoa_r+0x1f8>
 800849a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80084ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084b4:	4619      	mov	r1, r3
 80084b6:	2200      	movs	r2, #0
 80084b8:	4b75      	ldr	r3, [pc, #468]	; (8008690 <_dtoa_r+0x2f0>)
 80084ba:	f7f7 fe55 	bl	8000168 <__aeabi_dsub>
 80084be:	a368      	add	r3, pc, #416	; (adr r3, 8008660 <_dtoa_r+0x2c0>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	a367      	add	r3, pc, #412	; (adr r3, 8008668 <_dtoa_r+0x2c8>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f7 fe4d 	bl	800016c <__adddf3>
 80084d2:	4606      	mov	r6, r0
 80084d4:	4620      	mov	r0, r4
 80084d6:	460f      	mov	r7, r1
 80084d8:	f7f7 ff94 	bl	8000404 <__aeabi_i2d>
 80084dc:	a364      	add	r3, pc, #400	; (adr r3, 8008670 <_dtoa_r+0x2d0>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fff9 	bl	80004d8 <__aeabi_dmul>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4630      	mov	r0, r6
 80084ec:	4639      	mov	r1, r7
 80084ee:	f7f7 fe3d 	bl	800016c <__adddf3>
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	f7f8 fa9f 	bl	8000a38 <__aeabi_d2iz>
 80084fa:	2200      	movs	r2, #0
 80084fc:	4683      	mov	fp, r0
 80084fe:	2300      	movs	r3, #0
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 fa5a 	bl	80009bc <__aeabi_dcmplt>
 8008508:	b148      	cbz	r0, 800851e <_dtoa_r+0x17e>
 800850a:	4658      	mov	r0, fp
 800850c:	f7f7 ff7a 	bl	8000404 <__aeabi_i2d>
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	f7f8 fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8008518:	b908      	cbnz	r0, 800851e <_dtoa_r+0x17e>
 800851a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800851e:	f1bb 0f16 	cmp.w	fp, #22
 8008522:	d857      	bhi.n	80085d4 <_dtoa_r+0x234>
 8008524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008528:	4b5a      	ldr	r3, [pc, #360]	; (8008694 <_dtoa_r+0x2f4>)
 800852a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f8 fa43 	bl	80009bc <__aeabi_dcmplt>
 8008536:	2800      	cmp	r0, #0
 8008538:	d04e      	beq.n	80085d8 <_dtoa_r+0x238>
 800853a:	2300      	movs	r3, #0
 800853c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008540:	930f      	str	r3, [sp, #60]	; 0x3c
 8008542:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008544:	1b1b      	subs	r3, r3, r4
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	bf46      	itte	mi
 800854a:	f1c3 0901 	rsbmi	r9, r3, #1
 800854e:	2300      	movmi	r3, #0
 8008550:	f04f 0900 	movpl.w	r9, #0
 8008554:	9209      	str	r2, [sp, #36]	; 0x24
 8008556:	bf48      	it	mi
 8008558:	9309      	strmi	r3, [sp, #36]	; 0x24
 800855a:	f1bb 0f00 	cmp.w	fp, #0
 800855e:	db3d      	blt.n	80085dc <_dtoa_r+0x23c>
 8008560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008562:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008566:	445b      	add	r3, fp
 8008568:	9309      	str	r3, [sp, #36]	; 0x24
 800856a:	2300      	movs	r3, #0
 800856c:	930a      	str	r3, [sp, #40]	; 0x28
 800856e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008570:	2b09      	cmp	r3, #9
 8008572:	d867      	bhi.n	8008644 <_dtoa_r+0x2a4>
 8008574:	2b05      	cmp	r3, #5
 8008576:	bfc4      	itt	gt
 8008578:	3b04      	subgt	r3, #4
 800857a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800857c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800857e:	bfc8      	it	gt
 8008580:	2400      	movgt	r4, #0
 8008582:	f1a3 0302 	sub.w	r3, r3, #2
 8008586:	bfd8      	it	le
 8008588:	2401      	movle	r4, #1
 800858a:	2b03      	cmp	r3, #3
 800858c:	f200 8086 	bhi.w	800869c <_dtoa_r+0x2fc>
 8008590:	e8df f003 	tbb	[pc, r3]
 8008594:	5637392c 	.word	0x5637392c
 8008598:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800859c:	441c      	add	r4, r3
 800859e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	bfc1      	itttt	gt
 80085a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80085ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80085b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80085b6:	bfd6      	itet	le
 80085b8:	f1c3 0320 	rsble	r3, r3, #32
 80085bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80085c0:	fa06 f003 	lslle.w	r0, r6, r3
 80085c4:	f7f7 ff0e 	bl	80003e4 <__aeabi_ui2d>
 80085c8:	2201      	movs	r2, #1
 80085ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085ce:	3c01      	subs	r4, #1
 80085d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80085d2:	e76f      	b.n	80084b4 <_dtoa_r+0x114>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e7b3      	b.n	8008540 <_dtoa_r+0x1a0>
 80085d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80085da:	e7b2      	b.n	8008542 <_dtoa_r+0x1a2>
 80085dc:	f1cb 0300 	rsb	r3, fp, #0
 80085e0:	930a      	str	r3, [sp, #40]	; 0x28
 80085e2:	2300      	movs	r3, #0
 80085e4:	eba9 090b 	sub.w	r9, r9, fp
 80085e8:	930e      	str	r3, [sp, #56]	; 0x38
 80085ea:	e7c0      	b.n	800856e <_dtoa_r+0x1ce>
 80085ec:	2300      	movs	r3, #0
 80085ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dc55      	bgt.n	80086a2 <_dtoa_r+0x302>
 80085f6:	2301      	movs	r3, #1
 80085f8:	461a      	mov	r2, r3
 80085fa:	9306      	str	r3, [sp, #24]
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8008600:	e00b      	b.n	800861a <_dtoa_r+0x27a>
 8008602:	2301      	movs	r3, #1
 8008604:	e7f3      	b.n	80085ee <_dtoa_r+0x24e>
 8008606:	2300      	movs	r3, #0
 8008608:	930b      	str	r3, [sp, #44]	; 0x2c
 800860a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800860c:	445b      	add	r3, fp
 800860e:	9306      	str	r3, [sp, #24]
 8008610:	3301      	adds	r3, #1
 8008612:	2b01      	cmp	r3, #1
 8008614:	9308      	str	r3, [sp, #32]
 8008616:	bfb8      	it	lt
 8008618:	2301      	movlt	r3, #1
 800861a:	2100      	movs	r1, #0
 800861c:	2204      	movs	r2, #4
 800861e:	69e8      	ldr	r0, [r5, #28]
 8008620:	f102 0614 	add.w	r6, r2, #20
 8008624:	429e      	cmp	r6, r3
 8008626:	d940      	bls.n	80086aa <_dtoa_r+0x30a>
 8008628:	6041      	str	r1, [r0, #4]
 800862a:	4628      	mov	r0, r5
 800862c:	f000 fd98 	bl	8009160 <_Balloc>
 8008630:	9003      	str	r0, [sp, #12]
 8008632:	2800      	cmp	r0, #0
 8008634:	d13c      	bne.n	80086b0 <_dtoa_r+0x310>
 8008636:	4602      	mov	r2, r0
 8008638:	f240 11af 	movw	r1, #431	; 0x1af
 800863c:	4b16      	ldr	r3, [pc, #88]	; (8008698 <_dtoa_r+0x2f8>)
 800863e:	e6c3      	b.n	80083c8 <_dtoa_r+0x28>
 8008640:	2301      	movs	r3, #1
 8008642:	e7e1      	b.n	8008608 <_dtoa_r+0x268>
 8008644:	2401      	movs	r4, #1
 8008646:	2300      	movs	r3, #0
 8008648:	940b      	str	r4, [sp, #44]	; 0x2c
 800864a:	9322      	str	r3, [sp, #136]	; 0x88
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	2200      	movs	r2, #0
 8008652:	9306      	str	r3, [sp, #24]
 8008654:	9308      	str	r3, [sp, #32]
 8008656:	2312      	movs	r3, #18
 8008658:	e7d1      	b.n	80085fe <_dtoa_r+0x25e>
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w
 8008660:	636f4361 	.word	0x636f4361
 8008664:	3fd287a7 	.word	0x3fd287a7
 8008668:	8b60c8b3 	.word	0x8b60c8b3
 800866c:	3fc68a28 	.word	0x3fc68a28
 8008670:	509f79fb 	.word	0x509f79fb
 8008674:	3fd34413 	.word	0x3fd34413
 8008678:	0800c18b 	.word	0x0800c18b
 800867c:	0800c1a2 	.word	0x0800c1a2
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	0800c187 	.word	0x0800c187
 8008688:	0800c17e 	.word	0x0800c17e
 800868c:	0800c15b 	.word	0x0800c15b
 8008690:	3ff80000 	.word	0x3ff80000
 8008694:	0800c290 	.word	0x0800c290
 8008698:	0800c1fa 	.word	0x0800c1fa
 800869c:	2301      	movs	r3, #1
 800869e:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a0:	e7d4      	b.n	800864c <_dtoa_r+0x2ac>
 80086a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086a4:	9306      	str	r3, [sp, #24]
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	e7b7      	b.n	800861a <_dtoa_r+0x27a>
 80086aa:	3101      	adds	r1, #1
 80086ac:	0052      	lsls	r2, r2, #1
 80086ae:	e7b7      	b.n	8008620 <_dtoa_r+0x280>
 80086b0:	69eb      	ldr	r3, [r5, #28]
 80086b2:	9a03      	ldr	r2, [sp, #12]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	9b08      	ldr	r3, [sp, #32]
 80086b8:	2b0e      	cmp	r3, #14
 80086ba:	f200 80a8 	bhi.w	800880e <_dtoa_r+0x46e>
 80086be:	2c00      	cmp	r4, #0
 80086c0:	f000 80a5 	beq.w	800880e <_dtoa_r+0x46e>
 80086c4:	f1bb 0f00 	cmp.w	fp, #0
 80086c8:	dd34      	ble.n	8008734 <_dtoa_r+0x394>
 80086ca:	4b9a      	ldr	r3, [pc, #616]	; (8008934 <_dtoa_r+0x594>)
 80086cc:	f00b 020f 	and.w	r2, fp, #15
 80086d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80086e4:	d016      	beq.n	8008714 <_dtoa_r+0x374>
 80086e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086ea:	4b93      	ldr	r3, [pc, #588]	; (8008938 <_dtoa_r+0x598>)
 80086ec:	2703      	movs	r7, #3
 80086ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f2:	f7f8 f81b 	bl	800072c <__aeabi_ddiv>
 80086f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086fa:	f004 040f 	and.w	r4, r4, #15
 80086fe:	4e8e      	ldr	r6, [pc, #568]	; (8008938 <_dtoa_r+0x598>)
 8008700:	b954      	cbnz	r4, 8008718 <_dtoa_r+0x378>
 8008702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800870a:	f7f8 f80f 	bl	800072c <__aeabi_ddiv>
 800870e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008712:	e029      	b.n	8008768 <_dtoa_r+0x3c8>
 8008714:	2702      	movs	r7, #2
 8008716:	e7f2      	b.n	80086fe <_dtoa_r+0x35e>
 8008718:	07e1      	lsls	r1, r4, #31
 800871a:	d508      	bpl.n	800872e <_dtoa_r+0x38e>
 800871c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008720:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008724:	f7f7 fed8 	bl	80004d8 <__aeabi_dmul>
 8008728:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800872c:	3701      	adds	r7, #1
 800872e:	1064      	asrs	r4, r4, #1
 8008730:	3608      	adds	r6, #8
 8008732:	e7e5      	b.n	8008700 <_dtoa_r+0x360>
 8008734:	f000 80a5 	beq.w	8008882 <_dtoa_r+0x4e2>
 8008738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800873c:	f1cb 0400 	rsb	r4, fp, #0
 8008740:	4b7c      	ldr	r3, [pc, #496]	; (8008934 <_dtoa_r+0x594>)
 8008742:	f004 020f 	and.w	r2, r4, #15
 8008746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 fec3 	bl	80004d8 <__aeabi_dmul>
 8008752:	2702      	movs	r7, #2
 8008754:	2300      	movs	r3, #0
 8008756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800875a:	4e77      	ldr	r6, [pc, #476]	; (8008938 <_dtoa_r+0x598>)
 800875c:	1124      	asrs	r4, r4, #4
 800875e:	2c00      	cmp	r4, #0
 8008760:	f040 8084 	bne.w	800886c <_dtoa_r+0x4cc>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1d2      	bne.n	800870e <_dtoa_r+0x36e>
 8008768:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800876c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 8087 	beq.w	8008886 <_dtoa_r+0x4e6>
 8008778:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800877c:	2200      	movs	r2, #0
 800877e:	4b6f      	ldr	r3, [pc, #444]	; (800893c <_dtoa_r+0x59c>)
 8008780:	f7f8 f91c 	bl	80009bc <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	d07e      	beq.n	8008886 <_dtoa_r+0x4e6>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d07b      	beq.n	8008886 <_dtoa_r+0x4e6>
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dd38      	ble.n	8008806 <_dtoa_r+0x466>
 8008794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008798:	2200      	movs	r2, #0
 800879a:	4b69      	ldr	r3, [pc, #420]	; (8008940 <_dtoa_r+0x5a0>)
 800879c:	f7f7 fe9c 	bl	80004d8 <__aeabi_dmul>
 80087a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087a4:	9c06      	ldr	r4, [sp, #24]
 80087a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80087aa:	3701      	adds	r7, #1
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7f7 fe29 	bl	8000404 <__aeabi_i2d>
 80087b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087b6:	f7f7 fe8f 	bl	80004d8 <__aeabi_dmul>
 80087ba:	2200      	movs	r2, #0
 80087bc:	4b61      	ldr	r3, [pc, #388]	; (8008944 <_dtoa_r+0x5a4>)
 80087be:	f7f7 fcd5 	bl	800016c <__adddf3>
 80087c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80087c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087ca:	9611      	str	r6, [sp, #68]	; 0x44
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	d15d      	bne.n	800888c <_dtoa_r+0x4ec>
 80087d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d4:	2200      	movs	r2, #0
 80087d6:	4b5c      	ldr	r3, [pc, #368]	; (8008948 <_dtoa_r+0x5a8>)
 80087d8:	f7f7 fcc6 	bl	8000168 <__aeabi_dsub>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087e4:	4633      	mov	r3, r6
 80087e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087e8:	f7f8 f906 	bl	80009f8 <__aeabi_dcmpgt>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f040 8295 	bne.w	8008d1c <_dtoa_r+0x97c>
 80087f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80087fc:	f7f8 f8de 	bl	80009bc <__aeabi_dcmplt>
 8008800:	2800      	cmp	r0, #0
 8008802:	f040 8289 	bne.w	8008d18 <_dtoa_r+0x978>
 8008806:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800880a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800880e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008810:	2b00      	cmp	r3, #0
 8008812:	f2c0 8151 	blt.w	8008ab8 <_dtoa_r+0x718>
 8008816:	f1bb 0f0e 	cmp.w	fp, #14
 800881a:	f300 814d 	bgt.w	8008ab8 <_dtoa_r+0x718>
 800881e:	4b45      	ldr	r3, [pc, #276]	; (8008934 <_dtoa_r+0x594>)
 8008820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008824:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008828:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800882c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800882e:	2b00      	cmp	r3, #0
 8008830:	f280 80da 	bge.w	80089e8 <_dtoa_r+0x648>
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f300 80d6 	bgt.w	80089e8 <_dtoa_r+0x648>
 800883c:	f040 826b 	bne.w	8008d16 <_dtoa_r+0x976>
 8008840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008844:	2200      	movs	r2, #0
 8008846:	4b40      	ldr	r3, [pc, #256]	; (8008948 <_dtoa_r+0x5a8>)
 8008848:	f7f7 fe46 	bl	80004d8 <__aeabi_dmul>
 800884c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008850:	f7f8 f8c8 	bl	80009e4 <__aeabi_dcmpge>
 8008854:	9c08      	ldr	r4, [sp, #32]
 8008856:	4626      	mov	r6, r4
 8008858:	2800      	cmp	r0, #0
 800885a:	f040 8241 	bne.w	8008ce0 <_dtoa_r+0x940>
 800885e:	2331      	movs	r3, #49	; 0x31
 8008860:	9f03      	ldr	r7, [sp, #12]
 8008862:	f10b 0b01 	add.w	fp, fp, #1
 8008866:	f807 3b01 	strb.w	r3, [r7], #1
 800886a:	e23d      	b.n	8008ce8 <_dtoa_r+0x948>
 800886c:	07e2      	lsls	r2, r4, #31
 800886e:	d505      	bpl.n	800887c <_dtoa_r+0x4dc>
 8008870:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008874:	f7f7 fe30 	bl	80004d8 <__aeabi_dmul>
 8008878:	2301      	movs	r3, #1
 800887a:	3701      	adds	r7, #1
 800887c:	1064      	asrs	r4, r4, #1
 800887e:	3608      	adds	r6, #8
 8008880:	e76d      	b.n	800875e <_dtoa_r+0x3be>
 8008882:	2702      	movs	r7, #2
 8008884:	e770      	b.n	8008768 <_dtoa_r+0x3c8>
 8008886:	46d8      	mov	r8, fp
 8008888:	9c08      	ldr	r4, [sp, #32]
 800888a:	e78f      	b.n	80087ac <_dtoa_r+0x40c>
 800888c:	9903      	ldr	r1, [sp, #12]
 800888e:	4b29      	ldr	r3, [pc, #164]	; (8008934 <_dtoa_r+0x594>)
 8008890:	4421      	add	r1, r4
 8008892:	9112      	str	r1, [sp, #72]	; 0x48
 8008894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008896:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800889a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800889e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088a2:	2900      	cmp	r1, #0
 80088a4:	d054      	beq.n	8008950 <_dtoa_r+0x5b0>
 80088a6:	2000      	movs	r0, #0
 80088a8:	4928      	ldr	r1, [pc, #160]	; (800894c <_dtoa_r+0x5ac>)
 80088aa:	f7f7 ff3f 	bl	800072c <__aeabi_ddiv>
 80088ae:	463b      	mov	r3, r7
 80088b0:	4632      	mov	r2, r6
 80088b2:	f7f7 fc59 	bl	8000168 <__aeabi_dsub>
 80088b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088ba:	9f03      	ldr	r7, [sp, #12]
 80088bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c0:	f7f8 f8ba 	bl	8000a38 <__aeabi_d2iz>
 80088c4:	4604      	mov	r4, r0
 80088c6:	f7f7 fd9d 	bl	8000404 <__aeabi_i2d>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088d2:	f7f7 fc49 	bl	8000168 <__aeabi_dsub>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	3430      	adds	r4, #48	; 0x30
 80088dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088e4:	f807 4b01 	strb.w	r4, [r7], #1
 80088e8:	f7f8 f868 	bl	80009bc <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d173      	bne.n	80089d8 <_dtoa_r+0x638>
 80088f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f4:	2000      	movs	r0, #0
 80088f6:	4911      	ldr	r1, [pc, #68]	; (800893c <_dtoa_r+0x59c>)
 80088f8:	f7f7 fc36 	bl	8000168 <__aeabi_dsub>
 80088fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008900:	f7f8 f85c 	bl	80009bc <__aeabi_dcmplt>
 8008904:	2800      	cmp	r0, #0
 8008906:	f040 80b6 	bne.w	8008a76 <_dtoa_r+0x6d6>
 800890a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800890c:	429f      	cmp	r7, r3
 800890e:	f43f af7a 	beq.w	8008806 <_dtoa_r+0x466>
 8008912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008916:	2200      	movs	r2, #0
 8008918:	4b09      	ldr	r3, [pc, #36]	; (8008940 <_dtoa_r+0x5a0>)
 800891a:	f7f7 fddd 	bl	80004d8 <__aeabi_dmul>
 800891e:	2200      	movs	r2, #0
 8008920:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <_dtoa_r+0x5a0>)
 800892a:	f7f7 fdd5 	bl	80004d8 <__aeabi_dmul>
 800892e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008932:	e7c3      	b.n	80088bc <_dtoa_r+0x51c>
 8008934:	0800c290 	.word	0x0800c290
 8008938:	0800c268 	.word	0x0800c268
 800893c:	3ff00000 	.word	0x3ff00000
 8008940:	40240000 	.word	0x40240000
 8008944:	401c0000 	.word	0x401c0000
 8008948:	40140000 	.word	0x40140000
 800894c:	3fe00000 	.word	0x3fe00000
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f7 fdc0 	bl	80004d8 <__aeabi_dmul>
 8008958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800895a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800895e:	9c03      	ldr	r4, [sp, #12]
 8008960:	9314      	str	r3, [sp, #80]	; 0x50
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	f7f8 f867 	bl	8000a38 <__aeabi_d2iz>
 800896a:	9015      	str	r0, [sp, #84]	; 0x54
 800896c:	f7f7 fd4a 	bl	8000404 <__aeabi_i2d>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008978:	f7f7 fbf6 	bl	8000168 <__aeabi_dsub>
 800897c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800897e:	4606      	mov	r6, r0
 8008980:	3330      	adds	r3, #48	; 0x30
 8008982:	f804 3b01 	strb.w	r3, [r4], #1
 8008986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008988:	460f      	mov	r7, r1
 800898a:	429c      	cmp	r4, r3
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	d124      	bne.n	80089dc <_dtoa_r+0x63c>
 8008992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008996:	4baf      	ldr	r3, [pc, #700]	; (8008c54 <_dtoa_r+0x8b4>)
 8008998:	f7f7 fbe8 	bl	800016c <__adddf3>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f7f8 f828 	bl	80009f8 <__aeabi_dcmpgt>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d163      	bne.n	8008a74 <_dtoa_r+0x6d4>
 80089ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089b0:	2000      	movs	r0, #0
 80089b2:	49a8      	ldr	r1, [pc, #672]	; (8008c54 <_dtoa_r+0x8b4>)
 80089b4:	f7f7 fbd8 	bl	8000168 <__aeabi_dsub>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f7 fffc 	bl	80009bc <__aeabi_dcmplt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f43f af1e 	beq.w	8008806 <_dtoa_r+0x466>
 80089ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089cc:	1e7b      	subs	r3, r7, #1
 80089ce:	9314      	str	r3, [sp, #80]	; 0x50
 80089d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80089d4:	2b30      	cmp	r3, #48	; 0x30
 80089d6:	d0f8      	beq.n	80089ca <_dtoa_r+0x62a>
 80089d8:	46c3      	mov	fp, r8
 80089da:	e03b      	b.n	8008a54 <_dtoa_r+0x6b4>
 80089dc:	4b9e      	ldr	r3, [pc, #632]	; (8008c58 <_dtoa_r+0x8b8>)
 80089de:	f7f7 fd7b 	bl	80004d8 <__aeabi_dmul>
 80089e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089e6:	e7bc      	b.n	8008962 <_dtoa_r+0x5c2>
 80089e8:	9f03      	ldr	r7, [sp, #12]
 80089ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80089ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f7 fe99 	bl	800072c <__aeabi_ddiv>
 80089fa:	f7f8 f81d 	bl	8000a38 <__aeabi_d2iz>
 80089fe:	4604      	mov	r4, r0
 8008a00:	f7f7 fd00 	bl	8000404 <__aeabi_i2d>
 8008a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a08:	f7f7 fd66 	bl	80004d8 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4640      	mov	r0, r8
 8008a12:	4649      	mov	r1, r9
 8008a14:	f7f7 fba8 	bl	8000168 <__aeabi_dsub>
 8008a18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a1c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a20:	9e03      	ldr	r6, [sp, #12]
 8008a22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a26:	1bbe      	subs	r6, r7, r6
 8008a28:	45b4      	cmp	ip, r6
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	d136      	bne.n	8008a9e <_dtoa_r+0x6fe>
 8008a30:	f7f7 fb9c 	bl	800016c <__adddf3>
 8008a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4689      	mov	r9, r1
 8008a3c:	f7f7 ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 8008a40:	bb58      	cbnz	r0, 8008a9a <_dtoa_r+0x6fa>
 8008a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f7 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8008a4e:	b108      	cbz	r0, 8008a54 <_dtoa_r+0x6b4>
 8008a50:	07e3      	lsls	r3, r4, #31
 8008a52:	d422      	bmi.n	8008a9a <_dtoa_r+0x6fa>
 8008a54:	4651      	mov	r1, sl
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 fbc2 	bl	80091e0 <_Bfree>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a60:	703b      	strb	r3, [r7, #0]
 8008a62:	f10b 0301 	add.w	r3, fp, #1
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f43f ace6 	beq.w	800843c <_dtoa_r+0x9c>
 8008a70:	601f      	str	r7, [r3, #0]
 8008a72:	e4e3      	b.n	800843c <_dtoa_r+0x9c>
 8008a74:	4627      	mov	r7, r4
 8008a76:	463b      	mov	r3, r7
 8008a78:	461f      	mov	r7, r3
 8008a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a7e:	2a39      	cmp	r2, #57	; 0x39
 8008a80:	d107      	bne.n	8008a92 <_dtoa_r+0x6f2>
 8008a82:	9a03      	ldr	r2, [sp, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1f7      	bne.n	8008a78 <_dtoa_r+0x6d8>
 8008a88:	2230      	movs	r2, #48	; 0x30
 8008a8a:	9903      	ldr	r1, [sp, #12]
 8008a8c:	f108 0801 	add.w	r8, r8, #1
 8008a90:	700a      	strb	r2, [r1, #0]
 8008a92:	781a      	ldrb	r2, [r3, #0]
 8008a94:	3201      	adds	r2, #1
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	e79e      	b.n	80089d8 <_dtoa_r+0x638>
 8008a9a:	46d8      	mov	r8, fp
 8008a9c:	e7eb      	b.n	8008a76 <_dtoa_r+0x6d6>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4b6d      	ldr	r3, [pc, #436]	; (8008c58 <_dtoa_r+0x8b8>)
 8008aa2:	f7f7 fd19 	bl	80004d8 <__aeabi_dmul>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4680      	mov	r8, r0
 8008aac:	4689      	mov	r9, r1
 8008aae:	f7f7 ff7b 	bl	80009a8 <__aeabi_dcmpeq>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d09b      	beq.n	80089ee <_dtoa_r+0x64e>
 8008ab6:	e7cd      	b.n	8008a54 <_dtoa_r+0x6b4>
 8008ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	f000 80c4 	beq.w	8008c48 <_dtoa_r+0x8a8>
 8008ac0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ac2:	2a01      	cmp	r2, #1
 8008ac4:	f300 80a8 	bgt.w	8008c18 <_dtoa_r+0x878>
 8008ac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 80a0 	beq.w	8008c10 <_dtoa_r+0x870>
 8008ad0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ad4:	464f      	mov	r7, r9
 8008ad6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ada:	2101      	movs	r1, #1
 8008adc:	441a      	add	r2, r3
 8008ade:	4628      	mov	r0, r5
 8008ae0:	4499      	add	r9, r3
 8008ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae4:	f000 fc32 	bl	800934c <__i2b>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	b15f      	cbz	r7, 8008b04 <_dtoa_r+0x764>
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dd08      	ble.n	8008b04 <_dtoa_r+0x764>
 8008af2:	42bb      	cmp	r3, r7
 8008af4:	bfa8      	it	ge
 8008af6:	463b      	movge	r3, r7
 8008af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afa:	eba9 0903 	sub.w	r9, r9, r3
 8008afe:	1aff      	subs	r7, r7, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b06:	b1f3      	cbz	r3, 8008b46 <_dtoa_r+0x7a6>
 8008b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80a0 	beq.w	8008c50 <_dtoa_r+0x8b0>
 8008b10:	2c00      	cmp	r4, #0
 8008b12:	dd10      	ble.n	8008b36 <_dtoa_r+0x796>
 8008b14:	4631      	mov	r1, r6
 8008b16:	4622      	mov	r2, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 fcd5 	bl	80094c8 <__pow5mult>
 8008b1e:	4652      	mov	r2, sl
 8008b20:	4601      	mov	r1, r0
 8008b22:	4606      	mov	r6, r0
 8008b24:	4628      	mov	r0, r5
 8008b26:	f000 fc27 	bl	8009378 <__multiply>
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 fb56 	bl	80091e0 <_Bfree>
 8008b34:	46c2      	mov	sl, r8
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	1b1a      	subs	r2, r3, r4
 8008b3a:	d004      	beq.n	8008b46 <_dtoa_r+0x7a6>
 8008b3c:	4651      	mov	r1, sl
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fcc2 	bl	80094c8 <__pow5mult>
 8008b44:	4682      	mov	sl, r0
 8008b46:	2101      	movs	r1, #1
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 fbff 	bl	800934c <__i2b>
 8008b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b50:	4604      	mov	r4, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f340 8082 	ble.w	8008c5c <_dtoa_r+0x8bc>
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fcb3 	bl	80094c8 <__pow5mult>
 8008b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b64:	4604      	mov	r4, r0
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	dd7b      	ble.n	8008c62 <_dtoa_r+0x8c2>
 8008b6a:	f04f 0800 	mov.w	r8, #0
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b74:	6918      	ldr	r0, [r3, #16]
 8008b76:	f000 fb9b 	bl	80092b0 <__hi0bits>
 8008b7a:	f1c0 0020 	rsb	r0, r0, #32
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	4418      	add	r0, r3
 8008b82:	f010 001f 	ands.w	r0, r0, #31
 8008b86:	f000 8092 	beq.w	8008cae <_dtoa_r+0x90e>
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	f340 8085 	ble.w	8008c9e <_dtoa_r+0x8fe>
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	f1c0 001c 	rsb	r0, r0, #28
 8008b9a:	4403      	add	r3, r0
 8008b9c:	4481      	add	r9, r0
 8008b9e:	4407      	add	r7, r0
 8008ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	dd05      	ble.n	8008bb4 <_dtoa_r+0x814>
 8008ba8:	4651      	mov	r1, sl
 8008baa:	464a      	mov	r2, r9
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 fce5 	bl	800957c <__lshift>
 8008bb2:	4682      	mov	sl, r0
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dd05      	ble.n	8008bc6 <_dtoa_r+0x826>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 fcdc 	bl	800957c <__lshift>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d072      	beq.n	8008cb2 <_dtoa_r+0x912>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f000 fd40 	bl	8009654 <__mcmp>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	da6c      	bge.n	8008cb2 <_dtoa_r+0x912>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4651      	mov	r1, sl
 8008bdc:	220a      	movs	r2, #10
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fb20 	bl	8009224 <__multadd>
 8008be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be6:	4682      	mov	sl, r0
 8008be8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 81ac 	beq.w	8008f4a <_dtoa_r+0xbaa>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 fb13 	bl	8009224 <__multadd>
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	4606      	mov	r6, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f300 8093 	bgt.w	8008d2e <_dtoa_r+0x98e>
 8008c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	dc59      	bgt.n	8008cc2 <_dtoa_r+0x922>
 8008c0e:	e08e      	b.n	8008d2e <_dtoa_r+0x98e>
 8008c10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c16:	e75d      	b.n	8008ad4 <_dtoa_r+0x734>
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	1e5c      	subs	r4, r3, #1
 8008c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	bfbf      	itttt	lt
 8008c22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008c26:	1ae3      	sublt	r3, r4, r3
 8008c28:	18d2      	addlt	r2, r2, r3
 8008c2a:	bfa8      	it	ge
 8008c2c:	1b1c      	subge	r4, r3, r4
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	bfbe      	ittt	lt
 8008c32:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c34:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008c36:	2400      	movlt	r4, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfb5      	itete	lt
 8008c3c:	eba9 0703 	sublt.w	r7, r9, r3
 8008c40:	464f      	movge	r7, r9
 8008c42:	2300      	movlt	r3, #0
 8008c44:	9b08      	ldrge	r3, [sp, #32]
 8008c46:	e747      	b.n	8008ad8 <_dtoa_r+0x738>
 8008c48:	464f      	mov	r7, r9
 8008c4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008c4e:	e74c      	b.n	8008aea <_dtoa_r+0x74a>
 8008c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c52:	e773      	b.n	8008b3c <_dtoa_r+0x79c>
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	dc18      	bgt.n	8008c94 <_dtoa_r+0x8f4>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	b9b3      	cbnz	r3, 8008c94 <_dtoa_r+0x8f4>
 8008c66:	9b05      	ldr	r3, [sp, #20]
 8008c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6c:	b993      	cbnz	r3, 8008c94 <_dtoa_r+0x8f4>
 8008c6e:	9b05      	ldr	r3, [sp, #20]
 8008c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c74:	0d1b      	lsrs	r3, r3, #20
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	b17b      	cbz	r3, 8008c9a <_dtoa_r+0x8fa>
 8008c7a:	f04f 0801 	mov.w	r8, #1
 8008c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c80:	f109 0901 	add.w	r9, r9, #1
 8008c84:	3301      	adds	r3, #1
 8008c86:	9309      	str	r3, [sp, #36]	; 0x24
 8008c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af6f 	bne.w	8008b6e <_dtoa_r+0x7ce>
 8008c90:	2001      	movs	r0, #1
 8008c92:	e774      	b.n	8008b7e <_dtoa_r+0x7de>
 8008c94:	f04f 0800 	mov.w	r8, #0
 8008c98:	e7f6      	b.n	8008c88 <_dtoa_r+0x8e8>
 8008c9a:	4698      	mov	r8, r3
 8008c9c:	e7f4      	b.n	8008c88 <_dtoa_r+0x8e8>
 8008c9e:	d080      	beq.n	8008ba2 <_dtoa_r+0x802>
 8008ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca2:	331c      	adds	r3, #28
 8008ca4:	441a      	add	r2, r3
 8008ca6:	4499      	add	r9, r3
 8008ca8:	441f      	add	r7, r3
 8008caa:	9209      	str	r2, [sp, #36]	; 0x24
 8008cac:	e779      	b.n	8008ba2 <_dtoa_r+0x802>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	e7f6      	b.n	8008ca0 <_dtoa_r+0x900>
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dc34      	bgt.n	8008d22 <_dtoa_r+0x982>
 8008cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	dd31      	ble.n	8008d22 <_dtoa_r+0x982>
 8008cbe:	9b08      	ldr	r3, [sp, #32]
 8008cc0:	9306      	str	r3, [sp, #24]
 8008cc2:	9b06      	ldr	r3, [sp, #24]
 8008cc4:	b963      	cbnz	r3, 8008ce0 <_dtoa_r+0x940>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	2205      	movs	r2, #5
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 faaa 	bl	8009224 <__multadd>
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	f000 fcbd 	bl	8009654 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f73f adbf 	bgt.w	800885e <_dtoa_r+0x4be>
 8008ce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ce2:	9f03      	ldr	r7, [sp, #12]
 8008ce4:	ea6f 0b03 	mvn.w	fp, r3
 8008ce8:	f04f 0800 	mov.w	r8, #0
 8008cec:	4621      	mov	r1, r4
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f000 fa76 	bl	80091e0 <_Bfree>
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	f43f aead 	beq.w	8008a54 <_dtoa_r+0x6b4>
 8008cfa:	f1b8 0f00 	cmp.w	r8, #0
 8008cfe:	d005      	beq.n	8008d0c <_dtoa_r+0x96c>
 8008d00:	45b0      	cmp	r8, r6
 8008d02:	d003      	beq.n	8008d0c <_dtoa_r+0x96c>
 8008d04:	4641      	mov	r1, r8
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 fa6a 	bl	80091e0 <_Bfree>
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fa66 	bl	80091e0 <_Bfree>
 8008d14:	e69e      	b.n	8008a54 <_dtoa_r+0x6b4>
 8008d16:	2400      	movs	r4, #0
 8008d18:	4626      	mov	r6, r4
 8008d1a:	e7e1      	b.n	8008ce0 <_dtoa_r+0x940>
 8008d1c:	46c3      	mov	fp, r8
 8008d1e:	4626      	mov	r6, r4
 8008d20:	e59d      	b.n	800885e <_dtoa_r+0x4be>
 8008d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80c8 	beq.w	8008eba <_dtoa_r+0xb1a>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	dd05      	ble.n	8008d3e <_dtoa_r+0x99e>
 8008d32:	4631      	mov	r1, r6
 8008d34:	463a      	mov	r2, r7
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 fc20 	bl	800957c <__lshift>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d05b      	beq.n	8008dfc <_dtoa_r+0xa5c>
 8008d44:	4628      	mov	r0, r5
 8008d46:	6871      	ldr	r1, [r6, #4]
 8008d48:	f000 fa0a 	bl	8009160 <_Balloc>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	b928      	cbnz	r0, 8008d5c <_dtoa_r+0x9bc>
 8008d50:	4602      	mov	r2, r0
 8008d52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d56:	4b81      	ldr	r3, [pc, #516]	; (8008f5c <_dtoa_r+0xbbc>)
 8008d58:	f7ff bb36 	b.w	80083c8 <_dtoa_r+0x28>
 8008d5c:	6932      	ldr	r2, [r6, #16]
 8008d5e:	f106 010c 	add.w	r1, r6, #12
 8008d62:	3202      	adds	r2, #2
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	300c      	adds	r0, #12
 8008d68:	f7ff fa81 	bl	800826e <memcpy>
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4639      	mov	r1, r7
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 fc03 	bl	800957c <__lshift>
 8008d76:	46b0      	mov	r8, r6
 8008d78:	4606      	mov	r6, r0
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	9a03      	ldr	r2, [sp, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b06      	ldr	r3, [sp, #24]
 8008d84:	4413      	add	r3, r2
 8008d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	4621      	mov	r1, r4
 8008d94:	3b01      	subs	r3, #1
 8008d96:	4650      	mov	r0, sl
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	f7ff fa76 	bl	800828a <quorem>
 8008d9e:	4641      	mov	r1, r8
 8008da0:	9006      	str	r0, [sp, #24]
 8008da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008da6:	4650      	mov	r0, sl
 8008da8:	f000 fc54 	bl	8009654 <__mcmp>
 8008dac:	4632      	mov	r2, r6
 8008dae:	9009      	str	r0, [sp, #36]	; 0x24
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 fc6a 	bl	800968c <__mdiff>
 8008db8:	68c2      	ldr	r2, [r0, #12]
 8008dba:	4607      	mov	r7, r0
 8008dbc:	bb02      	cbnz	r2, 8008e00 <_dtoa_r+0xa60>
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	f000 fc47 	bl	8009654 <__mcmp>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4628      	mov	r0, r5
 8008dcc:	920c      	str	r2, [sp, #48]	; 0x30
 8008dce:	f000 fa07 	bl	80091e0 <_Bfree>
 8008dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd6:	9f08      	ldr	r7, [sp, #32]
 8008dd8:	ea43 0102 	orr.w	r1, r3, r2
 8008ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dde:	4319      	orrs	r1, r3
 8008de0:	d110      	bne.n	8008e04 <_dtoa_r+0xa64>
 8008de2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008de6:	d029      	beq.n	8008e3c <_dtoa_r+0xa9c>
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dd02      	ble.n	8008df4 <_dtoa_r+0xa54>
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	f883 9000 	strb.w	r9, [r3]
 8008dfa:	e777      	b.n	8008cec <_dtoa_r+0x94c>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	e7ba      	b.n	8008d76 <_dtoa_r+0x9d6>
 8008e00:	2201      	movs	r2, #1
 8008e02:	e7e1      	b.n	8008dc8 <_dtoa_r+0xa28>
 8008e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	db04      	blt.n	8008e14 <_dtoa_r+0xa74>
 8008e0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e10:	430b      	orrs	r3, r1
 8008e12:	d120      	bne.n	8008e56 <_dtoa_r+0xab6>
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	dded      	ble.n	8008df4 <_dtoa_r+0xa54>
 8008e18:	4651      	mov	r1, sl
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f000 fbad 	bl	800957c <__lshift>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4682      	mov	sl, r0
 8008e26:	f000 fc15 	bl	8009654 <__mcmp>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	dc03      	bgt.n	8008e36 <_dtoa_r+0xa96>
 8008e2e:	d1e1      	bne.n	8008df4 <_dtoa_r+0xa54>
 8008e30:	f019 0f01 	tst.w	r9, #1
 8008e34:	d0de      	beq.n	8008df4 <_dtoa_r+0xa54>
 8008e36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e3a:	d1d8      	bne.n	8008dee <_dtoa_r+0xa4e>
 8008e3c:	2339      	movs	r3, #57	; 0x39
 8008e3e:	9a04      	ldr	r2, [sp, #16]
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	463b      	mov	r3, r7
 8008e44:	461f      	mov	r7, r3
 8008e46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	2a39      	cmp	r2, #57	; 0x39
 8008e4e:	d06b      	beq.n	8008f28 <_dtoa_r+0xb88>
 8008e50:	3201      	adds	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	e74a      	b.n	8008cec <_dtoa_r+0x94c>
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	dd07      	ble.n	8008e6a <_dtoa_r+0xaca>
 8008e5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e5e:	d0ed      	beq.n	8008e3c <_dtoa_r+0xa9c>
 8008e60:	9a04      	ldr	r2, [sp, #16]
 8008e62:	f109 0301 	add.w	r3, r9, #1
 8008e66:	7013      	strb	r3, [r2, #0]
 8008e68:	e740      	b.n	8008cec <_dtoa_r+0x94c>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d042      	beq.n	8008efc <_dtoa_r+0xb5c>
 8008e76:	4651      	mov	r1, sl
 8008e78:	2300      	movs	r3, #0
 8008e7a:	220a      	movs	r2, #10
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 f9d1 	bl	8009224 <__multadd>
 8008e82:	45b0      	cmp	r8, r6
 8008e84:	4682      	mov	sl, r0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f04f 020a 	mov.w	r2, #10
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4628      	mov	r0, r5
 8008e92:	d107      	bne.n	8008ea4 <_dtoa_r+0xb04>
 8008e94:	f000 f9c6 	bl	8009224 <__multadd>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	9b08      	ldr	r3, [sp, #32]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	e775      	b.n	8008d90 <_dtoa_r+0x9f0>
 8008ea4:	f000 f9be 	bl	8009224 <__multadd>
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4680      	mov	r8, r0
 8008eac:	2300      	movs	r3, #0
 8008eae:	220a      	movs	r2, #10
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 f9b7 	bl	8009224 <__multadd>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	e7f0      	b.n	8008e9c <_dtoa_r+0xafc>
 8008eba:	9b08      	ldr	r3, [sp, #32]
 8008ebc:	9306      	str	r3, [sp, #24]
 8008ebe:	9f03      	ldr	r7, [sp, #12]
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	f7ff f9e1 	bl	800828a <quorem>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ece:	f807 9b01 	strb.w	r9, [r7], #1
 8008ed2:	1afa      	subs	r2, r7, r3
 8008ed4:	9b06      	ldr	r3, [sp, #24]
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	dd07      	ble.n	8008eea <_dtoa_r+0xb4a>
 8008eda:	4651      	mov	r1, sl
 8008edc:	2300      	movs	r3, #0
 8008ede:	220a      	movs	r2, #10
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 f99f 	bl	8009224 <__multadd>
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	e7ea      	b.n	8008ec0 <_dtoa_r+0xb20>
 8008eea:	9b06      	ldr	r3, [sp, #24]
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfcc      	ite	gt
 8008ef4:	461f      	movgt	r7, r3
 8008ef6:	2701      	movle	r7, #1
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	441f      	add	r7, r3
 8008efc:	4651      	mov	r1, sl
 8008efe:	2201      	movs	r2, #1
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 fb3b 	bl	800957c <__lshift>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4682      	mov	sl, r0
 8008f0a:	f000 fba3 	bl	8009654 <__mcmp>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	dc97      	bgt.n	8008e42 <_dtoa_r+0xaa2>
 8008f12:	d102      	bne.n	8008f1a <_dtoa_r+0xb7a>
 8008f14:	f019 0f01 	tst.w	r9, #1
 8008f18:	d193      	bne.n	8008e42 <_dtoa_r+0xaa2>
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	461f      	mov	r7, r3
 8008f1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f22:	2a30      	cmp	r2, #48	; 0x30
 8008f24:	d0fa      	beq.n	8008f1c <_dtoa_r+0xb7c>
 8008f26:	e6e1      	b.n	8008cec <_dtoa_r+0x94c>
 8008f28:	9a03      	ldr	r2, [sp, #12]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d18a      	bne.n	8008e44 <_dtoa_r+0xaa4>
 8008f2e:	2331      	movs	r3, #49	; 0x31
 8008f30:	f10b 0b01 	add.w	fp, fp, #1
 8008f34:	e797      	b.n	8008e66 <_dtoa_r+0xac6>
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <_dtoa_r+0xbc0>)
 8008f38:	f7ff ba9f 	b.w	800847a <_dtoa_r+0xda>
 8008f3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f47f aa77 	bne.w	8008432 <_dtoa_r+0x92>
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <_dtoa_r+0xbc4>)
 8008f46:	f7ff ba98 	b.w	800847a <_dtoa_r+0xda>
 8008f4a:	9b06      	ldr	r3, [sp, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dcb6      	bgt.n	8008ebe <_dtoa_r+0xb1e>
 8008f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	f73f aeb5 	bgt.w	8008cc2 <_dtoa_r+0x922>
 8008f58:	e7b1      	b.n	8008ebe <_dtoa_r+0xb1e>
 8008f5a:	bf00      	nop
 8008f5c:	0800c1fa 	.word	0x0800c1fa
 8008f60:	0800c15a 	.word	0x0800c15a
 8008f64:	0800c17e 	.word	0x0800c17e

08008f68 <_free_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	d040      	beq.n	8008ff2 <_free_r+0x8a>
 8008f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f74:	1f0c      	subs	r4, r1, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfb8      	it	lt
 8008f7a:	18e4      	addlt	r4, r4, r3
 8008f7c:	f000 f8e4 	bl	8009148 <__malloc_lock>
 8008f80:	4a1c      	ldr	r2, [pc, #112]	; (8008ff4 <_free_r+0x8c>)
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x2c>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f90:	f000 b8e0 	b.w	8009154 <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x42>
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	1821      	adds	r1, r4, r0
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x1e>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x4c>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x42>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1850      	adds	r0, r2, r1
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x6c>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	4401      	add	r1, r0
 8008fc0:	1850      	adds	r0, r2, r1
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x22>
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4408      	add	r0, r1
 8008fce:	6010      	str	r0, [r2, #0]
 8008fd0:	6053      	str	r3, [r2, #4]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x22>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x74>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x22>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	1821      	adds	r1, r4, r0
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf01      	itttt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	1809      	addeq	r1, r1, r0
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	6063      	str	r3, [r4, #4]
 8008fee:	6054      	str	r4, [r2, #4]
 8008ff0:	e7cb      	b.n	8008f8a <_free_r+0x22>
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	200010e0 	.word	0x200010e0

08008ff8 <malloc>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <malloc+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f000 b823 	b.w	8009048 <_malloc_r>
 8009002:	bf00      	nop
 8009004:	2000008c 	.word	0x2000008c

08009008 <sbrk_aligned>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4e0e      	ldr	r6, [pc, #56]	; (8009044 <sbrk_aligned+0x3c>)
 800900c:	460c      	mov	r4, r1
 800900e:	6831      	ldr	r1, [r6, #0]
 8009010:	4605      	mov	r5, r0
 8009012:	b911      	cbnz	r1, 800901a <sbrk_aligned+0x12>
 8009014:	f000 fe1e 	bl	8009c54 <_sbrk_r>
 8009018:	6030      	str	r0, [r6, #0]
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f000 fe19 	bl	8009c54 <_sbrk_r>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d00a      	beq.n	800903c <sbrk_aligned+0x34>
 8009026:	1cc4      	adds	r4, r0, #3
 8009028:	f024 0403 	bic.w	r4, r4, #3
 800902c:	42a0      	cmp	r0, r4
 800902e:	d007      	beq.n	8009040 <sbrk_aligned+0x38>
 8009030:	1a21      	subs	r1, r4, r0
 8009032:	4628      	mov	r0, r5
 8009034:	f000 fe0e 	bl	8009c54 <_sbrk_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d101      	bne.n	8009040 <sbrk_aligned+0x38>
 800903c:	f04f 34ff 	mov.w	r4, #4294967295
 8009040:	4620      	mov	r0, r4
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	200010e4 	.word	0x200010e4

08009048 <_malloc_r>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	1ccd      	adds	r5, r1, #3
 800904e:	f025 0503 	bic.w	r5, r5, #3
 8009052:	3508      	adds	r5, #8
 8009054:	2d0c      	cmp	r5, #12
 8009056:	bf38      	it	cc
 8009058:	250c      	movcc	r5, #12
 800905a:	2d00      	cmp	r5, #0
 800905c:	4607      	mov	r7, r0
 800905e:	db01      	blt.n	8009064 <_malloc_r+0x1c>
 8009060:	42a9      	cmp	r1, r5
 8009062:	d905      	bls.n	8009070 <_malloc_r+0x28>
 8009064:	230c      	movs	r3, #12
 8009066:	2600      	movs	r6, #0
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4630      	mov	r0, r6
 800906c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009144 <_malloc_r+0xfc>
 8009074:	f000 f868 	bl	8009148 <__malloc_lock>
 8009078:	f8d8 3000 	ldr.w	r3, [r8]
 800907c:	461c      	mov	r4, r3
 800907e:	bb5c      	cbnz	r4, 80090d8 <_malloc_r+0x90>
 8009080:	4629      	mov	r1, r5
 8009082:	4638      	mov	r0, r7
 8009084:	f7ff ffc0 	bl	8009008 <sbrk_aligned>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	4604      	mov	r4, r0
 800908c:	d155      	bne.n	800913a <_malloc_r+0xf2>
 800908e:	f8d8 4000 	ldr.w	r4, [r8]
 8009092:	4626      	mov	r6, r4
 8009094:	2e00      	cmp	r6, #0
 8009096:	d145      	bne.n	8009124 <_malloc_r+0xdc>
 8009098:	2c00      	cmp	r4, #0
 800909a:	d048      	beq.n	800912e <_malloc_r+0xe6>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	4631      	mov	r1, r6
 80090a0:	4638      	mov	r0, r7
 80090a2:	eb04 0903 	add.w	r9, r4, r3
 80090a6:	f000 fdd5 	bl	8009c54 <_sbrk_r>
 80090aa:	4581      	cmp	r9, r0
 80090ac:	d13f      	bne.n	800912e <_malloc_r+0xe6>
 80090ae:	6821      	ldr	r1, [r4, #0]
 80090b0:	4638      	mov	r0, r7
 80090b2:	1a6d      	subs	r5, r5, r1
 80090b4:	4629      	mov	r1, r5
 80090b6:	f7ff ffa7 	bl	8009008 <sbrk_aligned>
 80090ba:	3001      	adds	r0, #1
 80090bc:	d037      	beq.n	800912e <_malloc_r+0xe6>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	442b      	add	r3, r5
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	f8d8 3000 	ldr.w	r3, [r8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d038      	beq.n	800913e <_malloc_r+0xf6>
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	42a2      	cmp	r2, r4
 80090d0:	d12b      	bne.n	800912a <_malloc_r+0xe2>
 80090d2:	2200      	movs	r2, #0
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	e00f      	b.n	80090f8 <_malloc_r+0xb0>
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	1b52      	subs	r2, r2, r5
 80090dc:	d41f      	bmi.n	800911e <_malloc_r+0xd6>
 80090de:	2a0b      	cmp	r2, #11
 80090e0:	d917      	bls.n	8009112 <_malloc_r+0xca>
 80090e2:	1961      	adds	r1, r4, r5
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	6025      	str	r5, [r4, #0]
 80090e8:	bf18      	it	ne
 80090ea:	6059      	strne	r1, [r3, #4]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	bf08      	it	eq
 80090f0:	f8c8 1000 	streq.w	r1, [r8]
 80090f4:	5162      	str	r2, [r4, r5]
 80090f6:	604b      	str	r3, [r1, #4]
 80090f8:	4638      	mov	r0, r7
 80090fa:	f104 060b 	add.w	r6, r4, #11
 80090fe:	f000 f829 	bl	8009154 <__malloc_unlock>
 8009102:	f026 0607 	bic.w	r6, r6, #7
 8009106:	1d23      	adds	r3, r4, #4
 8009108:	1af2      	subs	r2, r6, r3
 800910a:	d0ae      	beq.n	800906a <_malloc_r+0x22>
 800910c:	1b9b      	subs	r3, r3, r6
 800910e:	50a3      	str	r3, [r4, r2]
 8009110:	e7ab      	b.n	800906a <_malloc_r+0x22>
 8009112:	42a3      	cmp	r3, r4
 8009114:	6862      	ldr	r2, [r4, #4]
 8009116:	d1dd      	bne.n	80090d4 <_malloc_r+0x8c>
 8009118:	f8c8 2000 	str.w	r2, [r8]
 800911c:	e7ec      	b.n	80090f8 <_malloc_r+0xb0>
 800911e:	4623      	mov	r3, r4
 8009120:	6864      	ldr	r4, [r4, #4]
 8009122:	e7ac      	b.n	800907e <_malloc_r+0x36>
 8009124:	4634      	mov	r4, r6
 8009126:	6876      	ldr	r6, [r6, #4]
 8009128:	e7b4      	b.n	8009094 <_malloc_r+0x4c>
 800912a:	4613      	mov	r3, r2
 800912c:	e7cc      	b.n	80090c8 <_malloc_r+0x80>
 800912e:	230c      	movs	r3, #12
 8009130:	4638      	mov	r0, r7
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	f000 f80e 	bl	8009154 <__malloc_unlock>
 8009138:	e797      	b.n	800906a <_malloc_r+0x22>
 800913a:	6025      	str	r5, [r4, #0]
 800913c:	e7dc      	b.n	80090f8 <_malloc_r+0xb0>
 800913e:	605b      	str	r3, [r3, #4]
 8009140:	deff      	udf	#255	; 0xff
 8009142:	bf00      	nop
 8009144:	200010e0 	.word	0x200010e0

08009148 <__malloc_lock>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__malloc_lock+0x8>)
 800914a:	f7ff b880 	b.w	800824e <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	200010dc 	.word	0x200010dc

08009154 <__malloc_unlock>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__malloc_unlock+0x8>)
 8009156:	f7ff b87b 	b.w	8008250 <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	200010dc 	.word	0x200010dc

08009160 <_Balloc>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	69c6      	ldr	r6, [r0, #28]
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	b976      	cbnz	r6, 8009188 <_Balloc+0x28>
 800916a:	2010      	movs	r0, #16
 800916c:	f7ff ff44 	bl	8008ff8 <malloc>
 8009170:	4602      	mov	r2, r0
 8009172:	61e0      	str	r0, [r4, #28]
 8009174:	b920      	cbnz	r0, 8009180 <_Balloc+0x20>
 8009176:	216b      	movs	r1, #107	; 0x6b
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <_Balloc+0x78>)
 800917a:	4818      	ldr	r0, [pc, #96]	; (80091dc <_Balloc+0x7c>)
 800917c:	f000 fd7a 	bl	8009c74 <__assert_func>
 8009180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009184:	6006      	str	r6, [r0, #0]
 8009186:	60c6      	str	r6, [r0, #12]
 8009188:	69e6      	ldr	r6, [r4, #28]
 800918a:	68f3      	ldr	r3, [r6, #12]
 800918c:	b183      	cbz	r3, 80091b0 <_Balloc+0x50>
 800918e:	69e3      	ldr	r3, [r4, #28]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009196:	b9b8      	cbnz	r0, 80091c8 <_Balloc+0x68>
 8009198:	2101      	movs	r1, #1
 800919a:	fa01 f605 	lsl.w	r6, r1, r5
 800919e:	1d72      	adds	r2, r6, #5
 80091a0:	4620      	mov	r0, r4
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	f000 fd84 	bl	8009cb0 <_calloc_r>
 80091a8:	b160      	cbz	r0, 80091c4 <_Balloc+0x64>
 80091aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091ae:	e00e      	b.n	80091ce <_Balloc+0x6e>
 80091b0:	2221      	movs	r2, #33	; 0x21
 80091b2:	2104      	movs	r1, #4
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fd7b 	bl	8009cb0 <_calloc_r>
 80091ba:	69e3      	ldr	r3, [r4, #28]
 80091bc:	60f0      	str	r0, [r6, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e4      	bne.n	800918e <_Balloc+0x2e>
 80091c4:	2000      	movs	r0, #0
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	6802      	ldr	r2, [r0, #0]
 80091ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ce:	2300      	movs	r3, #0
 80091d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d4:	e7f7      	b.n	80091c6 <_Balloc+0x66>
 80091d6:	bf00      	nop
 80091d8:	0800c18b 	.word	0x0800c18b
 80091dc:	0800c20b 	.word	0x0800c20b

080091e0 <_Bfree>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	69c6      	ldr	r6, [r0, #28]
 80091e4:	4605      	mov	r5, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	b976      	cbnz	r6, 8009208 <_Bfree+0x28>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7ff ff04 	bl	8008ff8 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	61e8      	str	r0, [r5, #28]
 80091f4:	b920      	cbnz	r0, 8009200 <_Bfree+0x20>
 80091f6:	218f      	movs	r1, #143	; 0x8f
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <_Bfree+0x3c>)
 80091fa:	4809      	ldr	r0, [pc, #36]	; (8009220 <_Bfree+0x40>)
 80091fc:	f000 fd3a 	bl	8009c74 <__assert_func>
 8009200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009204:	6006      	str	r6, [r0, #0]
 8009206:	60c6      	str	r6, [r0, #12]
 8009208:	b13c      	cbz	r4, 800921a <_Bfree+0x3a>
 800920a:	69eb      	ldr	r3, [r5, #28]
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009214:	6021      	str	r1, [r4, #0]
 8009216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	0800c18b 	.word	0x0800c18b
 8009220:	0800c20b 	.word	0x0800c20b

08009224 <__multadd>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	461e      	mov	r6, r3
 800922e:	2000      	movs	r0, #0
 8009230:	690d      	ldr	r5, [r1, #16]
 8009232:	f101 0c14 	add.w	ip, r1, #20
 8009236:	f8dc 3000 	ldr.w	r3, [ip]
 800923a:	3001      	adds	r0, #1
 800923c:	b299      	uxth	r1, r3
 800923e:	fb02 6101 	mla	r1, r2, r1, r6
 8009242:	0c1e      	lsrs	r6, r3, #16
 8009244:	0c0b      	lsrs	r3, r1, #16
 8009246:	fb02 3306 	mla	r3, r2, r6, r3
 800924a:	b289      	uxth	r1, r1
 800924c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009250:	4285      	cmp	r5, r0
 8009252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009256:	f84c 1b04 	str.w	r1, [ip], #4
 800925a:	dcec      	bgt.n	8009236 <__multadd+0x12>
 800925c:	b30e      	cbz	r6, 80092a2 <__multadd+0x7e>
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc19      	bgt.n	8009298 <__multadd+0x74>
 8009264:	6861      	ldr	r1, [r4, #4]
 8009266:	4638      	mov	r0, r7
 8009268:	3101      	adds	r1, #1
 800926a:	f7ff ff79 	bl	8009160 <_Balloc>
 800926e:	4680      	mov	r8, r0
 8009270:	b928      	cbnz	r0, 800927e <__multadd+0x5a>
 8009272:	4602      	mov	r2, r0
 8009274:	21ba      	movs	r1, #186	; 0xba
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <__multadd+0x84>)
 8009278:	480c      	ldr	r0, [pc, #48]	; (80092ac <__multadd+0x88>)
 800927a:	f000 fcfb 	bl	8009c74 <__assert_func>
 800927e:	6922      	ldr	r2, [r4, #16]
 8009280:	f104 010c 	add.w	r1, r4, #12
 8009284:	3202      	adds	r2, #2
 8009286:	0092      	lsls	r2, r2, #2
 8009288:	300c      	adds	r0, #12
 800928a:	f7fe fff0 	bl	800826e <memcpy>
 800928e:	4621      	mov	r1, r4
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ffa5 	bl	80091e0 <_Bfree>
 8009296:	4644      	mov	r4, r8
 8009298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800929c:	3501      	adds	r5, #1
 800929e:	615e      	str	r6, [r3, #20]
 80092a0:	6125      	str	r5, [r4, #16]
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a8:	0800c1fa 	.word	0x0800c1fa
 80092ac:	0800c20b 	.word	0x0800c20b

080092b0 <__hi0bits>:
 80092b0:	0c02      	lsrs	r2, r0, #16
 80092b2:	0412      	lsls	r2, r2, #16
 80092b4:	4603      	mov	r3, r0
 80092b6:	b9ca      	cbnz	r2, 80092ec <__hi0bits+0x3c>
 80092b8:	0403      	lsls	r3, r0, #16
 80092ba:	2010      	movs	r0, #16
 80092bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80092c0:	bf04      	itt	eq
 80092c2:	021b      	lsleq	r3, r3, #8
 80092c4:	3008      	addeq	r0, #8
 80092c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80092ca:	bf04      	itt	eq
 80092cc:	011b      	lsleq	r3, r3, #4
 80092ce:	3004      	addeq	r0, #4
 80092d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80092d4:	bf04      	itt	eq
 80092d6:	009b      	lsleq	r3, r3, #2
 80092d8:	3002      	addeq	r0, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	db05      	blt.n	80092ea <__hi0bits+0x3a>
 80092de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80092e2:	f100 0001 	add.w	r0, r0, #1
 80092e6:	bf08      	it	eq
 80092e8:	2020      	moveq	r0, #32
 80092ea:	4770      	bx	lr
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7e5      	b.n	80092bc <__hi0bits+0xc>

080092f0 <__lo0bits>:
 80092f0:	6803      	ldr	r3, [r0, #0]
 80092f2:	4602      	mov	r2, r0
 80092f4:	f013 0007 	ands.w	r0, r3, #7
 80092f8:	d00b      	beq.n	8009312 <__lo0bits+0x22>
 80092fa:	07d9      	lsls	r1, r3, #31
 80092fc:	d421      	bmi.n	8009342 <__lo0bits+0x52>
 80092fe:	0798      	lsls	r0, r3, #30
 8009300:	bf49      	itett	mi
 8009302:	085b      	lsrmi	r3, r3, #1
 8009304:	089b      	lsrpl	r3, r3, #2
 8009306:	2001      	movmi	r0, #1
 8009308:	6013      	strmi	r3, [r2, #0]
 800930a:	bf5c      	itt	pl
 800930c:	2002      	movpl	r0, #2
 800930e:	6013      	strpl	r3, [r2, #0]
 8009310:	4770      	bx	lr
 8009312:	b299      	uxth	r1, r3
 8009314:	b909      	cbnz	r1, 800931a <__lo0bits+0x2a>
 8009316:	2010      	movs	r0, #16
 8009318:	0c1b      	lsrs	r3, r3, #16
 800931a:	b2d9      	uxtb	r1, r3
 800931c:	b909      	cbnz	r1, 8009322 <__lo0bits+0x32>
 800931e:	3008      	adds	r0, #8
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	0719      	lsls	r1, r3, #28
 8009324:	bf04      	itt	eq
 8009326:	091b      	lsreq	r3, r3, #4
 8009328:	3004      	addeq	r0, #4
 800932a:	0799      	lsls	r1, r3, #30
 800932c:	bf04      	itt	eq
 800932e:	089b      	lsreq	r3, r3, #2
 8009330:	3002      	addeq	r0, #2
 8009332:	07d9      	lsls	r1, r3, #31
 8009334:	d403      	bmi.n	800933e <__lo0bits+0x4e>
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	f100 0001 	add.w	r0, r0, #1
 800933c:	d003      	beq.n	8009346 <__lo0bits+0x56>
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	4770      	bx	lr
 8009342:	2000      	movs	r0, #0
 8009344:	4770      	bx	lr
 8009346:	2020      	movs	r0, #32
 8009348:	4770      	bx	lr
	...

0800934c <__i2b>:
 800934c:	b510      	push	{r4, lr}
 800934e:	460c      	mov	r4, r1
 8009350:	2101      	movs	r1, #1
 8009352:	f7ff ff05 	bl	8009160 <_Balloc>
 8009356:	4602      	mov	r2, r0
 8009358:	b928      	cbnz	r0, 8009366 <__i2b+0x1a>
 800935a:	f240 1145 	movw	r1, #325	; 0x145
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <__i2b+0x24>)
 8009360:	4804      	ldr	r0, [pc, #16]	; (8009374 <__i2b+0x28>)
 8009362:	f000 fc87 	bl	8009c74 <__assert_func>
 8009366:	2301      	movs	r3, #1
 8009368:	6144      	str	r4, [r0, #20]
 800936a:	6103      	str	r3, [r0, #16]
 800936c:	bd10      	pop	{r4, pc}
 800936e:	bf00      	nop
 8009370:	0800c1fa 	.word	0x0800c1fa
 8009374:	0800c20b 	.word	0x0800c20b

08009378 <__multiply>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	4691      	mov	r9, r2
 800937e:	690a      	ldr	r2, [r1, #16]
 8009380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009384:	460c      	mov	r4, r1
 8009386:	429a      	cmp	r2, r3
 8009388:	bfbe      	ittt	lt
 800938a:	460b      	movlt	r3, r1
 800938c:	464c      	movlt	r4, r9
 800938e:	4699      	movlt	r9, r3
 8009390:	6927      	ldr	r7, [r4, #16]
 8009392:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009396:	68a3      	ldr	r3, [r4, #8]
 8009398:	6861      	ldr	r1, [r4, #4]
 800939a:	eb07 060a 	add.w	r6, r7, sl
 800939e:	42b3      	cmp	r3, r6
 80093a0:	b085      	sub	sp, #20
 80093a2:	bfb8      	it	lt
 80093a4:	3101      	addlt	r1, #1
 80093a6:	f7ff fedb 	bl	8009160 <_Balloc>
 80093aa:	b930      	cbnz	r0, 80093ba <__multiply+0x42>
 80093ac:	4602      	mov	r2, r0
 80093ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80093b2:	4b43      	ldr	r3, [pc, #268]	; (80094c0 <__multiply+0x148>)
 80093b4:	4843      	ldr	r0, [pc, #268]	; (80094c4 <__multiply+0x14c>)
 80093b6:	f000 fc5d 	bl	8009c74 <__assert_func>
 80093ba:	f100 0514 	add.w	r5, r0, #20
 80093be:	462b      	mov	r3, r5
 80093c0:	2200      	movs	r2, #0
 80093c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093c6:	4543      	cmp	r3, r8
 80093c8:	d321      	bcc.n	800940e <__multiply+0x96>
 80093ca:	f104 0314 	add.w	r3, r4, #20
 80093ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093d2:	f109 0314 	add.w	r3, r9, #20
 80093d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093da:	9202      	str	r2, [sp, #8]
 80093dc:	1b3a      	subs	r2, r7, r4
 80093de:	3a15      	subs	r2, #21
 80093e0:	f022 0203 	bic.w	r2, r2, #3
 80093e4:	3204      	adds	r2, #4
 80093e6:	f104 0115 	add.w	r1, r4, #21
 80093ea:	428f      	cmp	r7, r1
 80093ec:	bf38      	it	cc
 80093ee:	2204      	movcc	r2, #4
 80093f0:	9201      	str	r2, [sp, #4]
 80093f2:	9a02      	ldr	r2, [sp, #8]
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d80c      	bhi.n	8009414 <__multiply+0x9c>
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	dd03      	ble.n	8009406 <__multiply+0x8e>
 80093fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009402:	2b00      	cmp	r3, #0
 8009404:	d05a      	beq.n	80094bc <__multiply+0x144>
 8009406:	6106      	str	r6, [r0, #16]
 8009408:	b005      	add	sp, #20
 800940a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940e:	f843 2b04 	str.w	r2, [r3], #4
 8009412:	e7d8      	b.n	80093c6 <__multiply+0x4e>
 8009414:	f8b3 a000 	ldrh.w	sl, [r3]
 8009418:	f1ba 0f00 	cmp.w	sl, #0
 800941c:	d023      	beq.n	8009466 <__multiply+0xee>
 800941e:	46a9      	mov	r9, r5
 8009420:	f04f 0c00 	mov.w	ip, #0
 8009424:	f104 0e14 	add.w	lr, r4, #20
 8009428:	f85e 2b04 	ldr.w	r2, [lr], #4
 800942c:	f8d9 1000 	ldr.w	r1, [r9]
 8009430:	fa1f fb82 	uxth.w	fp, r2
 8009434:	b289      	uxth	r1, r1
 8009436:	fb0a 110b 	mla	r1, sl, fp, r1
 800943a:	4461      	add	r1, ip
 800943c:	f8d9 c000 	ldr.w	ip, [r9]
 8009440:	0c12      	lsrs	r2, r2, #16
 8009442:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009446:	fb0a c202 	mla	r2, sl, r2, ip
 800944a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800944e:	b289      	uxth	r1, r1
 8009450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009454:	4577      	cmp	r7, lr
 8009456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800945a:	f849 1b04 	str.w	r1, [r9], #4
 800945e:	d8e3      	bhi.n	8009428 <__multiply+0xb0>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	f845 c002 	str.w	ip, [r5, r2]
 8009466:	9a03      	ldr	r2, [sp, #12]
 8009468:	3304      	adds	r3, #4
 800946a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	d021      	beq.n	80094b8 <__multiply+0x140>
 8009474:	46ae      	mov	lr, r5
 8009476:	f04f 0a00 	mov.w	sl, #0
 800947a:	6829      	ldr	r1, [r5, #0]
 800947c:	f104 0c14 	add.w	ip, r4, #20
 8009480:	f8bc b000 	ldrh.w	fp, [ip]
 8009484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009488:	b289      	uxth	r1, r1
 800948a:	fb09 220b 	mla	r2, r9, fp, r2
 800948e:	4452      	add	r2, sl
 8009490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009494:	f84e 1b04 	str.w	r1, [lr], #4
 8009498:	f85c 1b04 	ldr.w	r1, [ip], #4
 800949c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094a0:	f8be 1000 	ldrh.w	r1, [lr]
 80094a4:	4567      	cmp	r7, ip
 80094a6:	fb09 110a 	mla	r1, r9, sl, r1
 80094aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80094ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094b2:	d8e5      	bhi.n	8009480 <__multiply+0x108>
 80094b4:	9a01      	ldr	r2, [sp, #4]
 80094b6:	50a9      	str	r1, [r5, r2]
 80094b8:	3504      	adds	r5, #4
 80094ba:	e79a      	b.n	80093f2 <__multiply+0x7a>
 80094bc:	3e01      	subs	r6, #1
 80094be:	e79c      	b.n	80093fa <__multiply+0x82>
 80094c0:	0800c1fa 	.word	0x0800c1fa
 80094c4:	0800c20b 	.word	0x0800c20b

080094c8 <__pow5mult>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	4615      	mov	r5, r2
 80094ce:	f012 0203 	ands.w	r2, r2, #3
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	d007      	beq.n	80094e8 <__pow5mult+0x20>
 80094d8:	4c25      	ldr	r4, [pc, #148]	; (8009570 <__pow5mult+0xa8>)
 80094da:	3a01      	subs	r2, #1
 80094dc:	2300      	movs	r3, #0
 80094de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094e2:	f7ff fe9f 	bl	8009224 <__multadd>
 80094e6:	4607      	mov	r7, r0
 80094e8:	10ad      	asrs	r5, r5, #2
 80094ea:	d03d      	beq.n	8009568 <__pow5mult+0xa0>
 80094ec:	69f4      	ldr	r4, [r6, #28]
 80094ee:	b97c      	cbnz	r4, 8009510 <__pow5mult+0x48>
 80094f0:	2010      	movs	r0, #16
 80094f2:	f7ff fd81 	bl	8008ff8 <malloc>
 80094f6:	4602      	mov	r2, r0
 80094f8:	61f0      	str	r0, [r6, #28]
 80094fa:	b928      	cbnz	r0, 8009508 <__pow5mult+0x40>
 80094fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009500:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <__pow5mult+0xac>)
 8009502:	481d      	ldr	r0, [pc, #116]	; (8009578 <__pow5mult+0xb0>)
 8009504:	f000 fbb6 	bl	8009c74 <__assert_func>
 8009508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800950c:	6004      	str	r4, [r0, #0]
 800950e:	60c4      	str	r4, [r0, #12]
 8009510:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009518:	b94c      	cbnz	r4, 800952e <__pow5mult+0x66>
 800951a:	f240 2171 	movw	r1, #625	; 0x271
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ff14 	bl	800934c <__i2b>
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	f8c8 0008 	str.w	r0, [r8, #8]
 800952c:	6003      	str	r3, [r0, #0]
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	07eb      	lsls	r3, r5, #31
 8009534:	d50a      	bpl.n	800954c <__pow5mult+0x84>
 8009536:	4639      	mov	r1, r7
 8009538:	4622      	mov	r2, r4
 800953a:	4630      	mov	r0, r6
 800953c:	f7ff ff1c 	bl	8009378 <__multiply>
 8009540:	4680      	mov	r8, r0
 8009542:	4639      	mov	r1, r7
 8009544:	4630      	mov	r0, r6
 8009546:	f7ff fe4b 	bl	80091e0 <_Bfree>
 800954a:	4647      	mov	r7, r8
 800954c:	106d      	asrs	r5, r5, #1
 800954e:	d00b      	beq.n	8009568 <__pow5mult+0xa0>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	b938      	cbnz	r0, 8009564 <__pow5mult+0x9c>
 8009554:	4622      	mov	r2, r4
 8009556:	4621      	mov	r1, r4
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff ff0d 	bl	8009378 <__multiply>
 800955e:	6020      	str	r0, [r4, #0]
 8009560:	f8c0 9000 	str.w	r9, [r0]
 8009564:	4604      	mov	r4, r0
 8009566:	e7e4      	b.n	8009532 <__pow5mult+0x6a>
 8009568:	4638      	mov	r0, r7
 800956a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956e:	bf00      	nop
 8009570:	0800c358 	.word	0x0800c358
 8009574:	0800c18b 	.word	0x0800c18b
 8009578:	0800c20b 	.word	0x0800c20b

0800957c <__lshift>:
 800957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	4607      	mov	r7, r0
 8009584:	4691      	mov	r9, r2
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	6849      	ldr	r1, [r1, #4]
 800958a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800958e:	68a3      	ldr	r3, [r4, #8]
 8009590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009594:	f108 0601 	add.w	r6, r8, #1
 8009598:	42b3      	cmp	r3, r6
 800959a:	db0b      	blt.n	80095b4 <__lshift+0x38>
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff fddf 	bl	8009160 <_Balloc>
 80095a2:	4605      	mov	r5, r0
 80095a4:	b948      	cbnz	r0, 80095ba <__lshift+0x3e>
 80095a6:	4602      	mov	r2, r0
 80095a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80095ac:	4b27      	ldr	r3, [pc, #156]	; (800964c <__lshift+0xd0>)
 80095ae:	4828      	ldr	r0, [pc, #160]	; (8009650 <__lshift+0xd4>)
 80095b0:	f000 fb60 	bl	8009c74 <__assert_func>
 80095b4:	3101      	adds	r1, #1
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	e7ee      	b.n	8009598 <__lshift+0x1c>
 80095ba:	2300      	movs	r3, #0
 80095bc:	f100 0114 	add.w	r1, r0, #20
 80095c0:	f100 0210 	add.w	r2, r0, #16
 80095c4:	4618      	mov	r0, r3
 80095c6:	4553      	cmp	r3, sl
 80095c8:	db33      	blt.n	8009632 <__lshift+0xb6>
 80095ca:	6920      	ldr	r0, [r4, #16]
 80095cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095d0:	f104 0314 	add.w	r3, r4, #20
 80095d4:	f019 091f 	ands.w	r9, r9, #31
 80095d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095e0:	d02b      	beq.n	800963a <__lshift+0xbe>
 80095e2:	468a      	mov	sl, r1
 80095e4:	2200      	movs	r2, #0
 80095e6:	f1c9 0e20 	rsb	lr, r9, #32
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	fa00 f009 	lsl.w	r0, r0, r9
 80095f0:	4310      	orrs	r0, r2
 80095f2:	f84a 0b04 	str.w	r0, [sl], #4
 80095f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095fa:	459c      	cmp	ip, r3
 80095fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009600:	d8f3      	bhi.n	80095ea <__lshift+0x6e>
 8009602:	ebac 0304 	sub.w	r3, ip, r4
 8009606:	3b15      	subs	r3, #21
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	3304      	adds	r3, #4
 800960e:	f104 0015 	add.w	r0, r4, #21
 8009612:	4584      	cmp	ip, r0
 8009614:	bf38      	it	cc
 8009616:	2304      	movcc	r3, #4
 8009618:	50ca      	str	r2, [r1, r3]
 800961a:	b10a      	cbz	r2, 8009620 <__lshift+0xa4>
 800961c:	f108 0602 	add.w	r6, r8, #2
 8009620:	3e01      	subs	r6, #1
 8009622:	4638      	mov	r0, r7
 8009624:	4621      	mov	r1, r4
 8009626:	612e      	str	r6, [r5, #16]
 8009628:	f7ff fdda 	bl	80091e0 <_Bfree>
 800962c:	4628      	mov	r0, r5
 800962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009632:	f842 0f04 	str.w	r0, [r2, #4]!
 8009636:	3301      	adds	r3, #1
 8009638:	e7c5      	b.n	80095c6 <__lshift+0x4a>
 800963a:	3904      	subs	r1, #4
 800963c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009640:	459c      	cmp	ip, r3
 8009642:	f841 2f04 	str.w	r2, [r1, #4]!
 8009646:	d8f9      	bhi.n	800963c <__lshift+0xc0>
 8009648:	e7ea      	b.n	8009620 <__lshift+0xa4>
 800964a:	bf00      	nop
 800964c:	0800c1fa 	.word	0x0800c1fa
 8009650:	0800c20b 	.word	0x0800c20b

08009654 <__mcmp>:
 8009654:	4603      	mov	r3, r0
 8009656:	690a      	ldr	r2, [r1, #16]
 8009658:	6900      	ldr	r0, [r0, #16]
 800965a:	b530      	push	{r4, r5, lr}
 800965c:	1a80      	subs	r0, r0, r2
 800965e:	d10d      	bne.n	800967c <__mcmp+0x28>
 8009660:	3314      	adds	r3, #20
 8009662:	3114      	adds	r1, #20
 8009664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800966c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009674:	4295      	cmp	r5, r2
 8009676:	d002      	beq.n	800967e <__mcmp+0x2a>
 8009678:	d304      	bcc.n	8009684 <__mcmp+0x30>
 800967a:	2001      	movs	r0, #1
 800967c:	bd30      	pop	{r4, r5, pc}
 800967e:	42a3      	cmp	r3, r4
 8009680:	d3f4      	bcc.n	800966c <__mcmp+0x18>
 8009682:	e7fb      	b.n	800967c <__mcmp+0x28>
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	e7f8      	b.n	800967c <__mcmp+0x28>
	...

0800968c <__mdiff>:
 800968c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	460d      	mov	r5, r1
 8009692:	4607      	mov	r7, r0
 8009694:	4611      	mov	r1, r2
 8009696:	4628      	mov	r0, r5
 8009698:	4614      	mov	r4, r2
 800969a:	f7ff ffdb 	bl	8009654 <__mcmp>
 800969e:	1e06      	subs	r6, r0, #0
 80096a0:	d111      	bne.n	80096c6 <__mdiff+0x3a>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff fd5b 	bl	8009160 <_Balloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__mdiff+0x2e>
 80096ae:	f240 2137 	movw	r1, #567	; 0x237
 80096b2:	4b3a      	ldr	r3, [pc, #232]	; (800979c <__mdiff+0x110>)
 80096b4:	483a      	ldr	r0, [pc, #232]	; (80097a0 <__mdiff+0x114>)
 80096b6:	f000 fadd 	bl	8009c74 <__assert_func>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80096c0:	4610      	mov	r0, r2
 80096c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	bfa4      	itt	ge
 80096c8:	4623      	movge	r3, r4
 80096ca:	462c      	movge	r4, r5
 80096cc:	4638      	mov	r0, r7
 80096ce:	6861      	ldr	r1, [r4, #4]
 80096d0:	bfa6      	itte	ge
 80096d2:	461d      	movge	r5, r3
 80096d4:	2600      	movge	r6, #0
 80096d6:	2601      	movlt	r6, #1
 80096d8:	f7ff fd42 	bl	8009160 <_Balloc>
 80096dc:	4602      	mov	r2, r0
 80096de:	b918      	cbnz	r0, 80096e8 <__mdiff+0x5c>
 80096e0:	f240 2145 	movw	r1, #581	; 0x245
 80096e4:	4b2d      	ldr	r3, [pc, #180]	; (800979c <__mdiff+0x110>)
 80096e6:	e7e5      	b.n	80096b4 <__mdiff+0x28>
 80096e8:	f102 0814 	add.w	r8, r2, #20
 80096ec:	46c2      	mov	sl, r8
 80096ee:	f04f 0c00 	mov.w	ip, #0
 80096f2:	6927      	ldr	r7, [r4, #16]
 80096f4:	60c6      	str	r6, [r0, #12]
 80096f6:	692e      	ldr	r6, [r5, #16]
 80096f8:	f104 0014 	add.w	r0, r4, #20
 80096fc:	f105 0914 	add.w	r9, r5, #20
 8009700:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009708:	3410      	adds	r4, #16
 800970a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800970e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009712:	fa1f f18b 	uxth.w	r1, fp
 8009716:	4461      	add	r1, ip
 8009718:	fa1f fc83 	uxth.w	ip, r3
 800971c:	0c1b      	lsrs	r3, r3, #16
 800971e:	eba1 010c 	sub.w	r1, r1, ip
 8009722:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009726:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800972a:	b289      	uxth	r1, r1
 800972c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009730:	454e      	cmp	r6, r9
 8009732:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009736:	f84a 1b04 	str.w	r1, [sl], #4
 800973a:	d8e6      	bhi.n	800970a <__mdiff+0x7e>
 800973c:	1b73      	subs	r3, r6, r5
 800973e:	3b15      	subs	r3, #21
 8009740:	f023 0303 	bic.w	r3, r3, #3
 8009744:	3515      	adds	r5, #21
 8009746:	3304      	adds	r3, #4
 8009748:	42ae      	cmp	r6, r5
 800974a:	bf38      	it	cc
 800974c:	2304      	movcc	r3, #4
 800974e:	4418      	add	r0, r3
 8009750:	4443      	add	r3, r8
 8009752:	461e      	mov	r6, r3
 8009754:	4605      	mov	r5, r0
 8009756:	4575      	cmp	r5, lr
 8009758:	d30e      	bcc.n	8009778 <__mdiff+0xec>
 800975a:	f10e 0103 	add.w	r1, lr, #3
 800975e:	1a09      	subs	r1, r1, r0
 8009760:	f021 0103 	bic.w	r1, r1, #3
 8009764:	3803      	subs	r0, #3
 8009766:	4586      	cmp	lr, r0
 8009768:	bf38      	it	cc
 800976a:	2100      	movcc	r1, #0
 800976c:	440b      	add	r3, r1
 800976e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009772:	b189      	cbz	r1, 8009798 <__mdiff+0x10c>
 8009774:	6117      	str	r7, [r2, #16]
 8009776:	e7a3      	b.n	80096c0 <__mdiff+0x34>
 8009778:	f855 8b04 	ldr.w	r8, [r5], #4
 800977c:	fa1f f188 	uxth.w	r1, r8
 8009780:	4461      	add	r1, ip
 8009782:	140c      	asrs	r4, r1, #16
 8009784:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009788:	b289      	uxth	r1, r1
 800978a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800978e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009792:	f846 1b04 	str.w	r1, [r6], #4
 8009796:	e7de      	b.n	8009756 <__mdiff+0xca>
 8009798:	3f01      	subs	r7, #1
 800979a:	e7e8      	b.n	800976e <__mdiff+0xe2>
 800979c:	0800c1fa 	.word	0x0800c1fa
 80097a0:	0800c20b 	.word	0x0800c20b

080097a4 <__d2b>:
 80097a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a6:	2101      	movs	r1, #1
 80097a8:	4617      	mov	r7, r2
 80097aa:	461c      	mov	r4, r3
 80097ac:	9e08      	ldr	r6, [sp, #32]
 80097ae:	f7ff fcd7 	bl	8009160 <_Balloc>
 80097b2:	4605      	mov	r5, r0
 80097b4:	b930      	cbnz	r0, 80097c4 <__d2b+0x20>
 80097b6:	4602      	mov	r2, r0
 80097b8:	f240 310f 	movw	r1, #783	; 0x30f
 80097bc:	4b22      	ldr	r3, [pc, #136]	; (8009848 <__d2b+0xa4>)
 80097be:	4823      	ldr	r0, [pc, #140]	; (800984c <__d2b+0xa8>)
 80097c0:	f000 fa58 	bl	8009c74 <__assert_func>
 80097c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80097c8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80097cc:	bb24      	cbnz	r4, 8009818 <__d2b+0x74>
 80097ce:	2f00      	cmp	r7, #0
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	d026      	beq.n	8009822 <__d2b+0x7e>
 80097d4:	4668      	mov	r0, sp
 80097d6:	9700      	str	r7, [sp, #0]
 80097d8:	f7ff fd8a 	bl	80092f0 <__lo0bits>
 80097dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097e0:	b1e8      	cbz	r0, 800981e <__d2b+0x7a>
 80097e2:	f1c0 0320 	rsb	r3, r0, #32
 80097e6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ea:	430b      	orrs	r3, r1
 80097ec:	40c2      	lsrs	r2, r0
 80097ee:	616b      	str	r3, [r5, #20]
 80097f0:	9201      	str	r2, [sp, #4]
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bf14      	ite	ne
 80097f8:	2102      	movne	r1, #2
 80097fa:	2101      	moveq	r1, #1
 80097fc:	61ab      	str	r3, [r5, #24]
 80097fe:	6129      	str	r1, [r5, #16]
 8009800:	b1bc      	cbz	r4, 8009832 <__d2b+0x8e>
 8009802:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009806:	4404      	add	r4, r0
 8009808:	6034      	str	r4, [r6, #0]
 800980a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800980e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009810:	6018      	str	r0, [r3, #0]
 8009812:	4628      	mov	r0, r5
 8009814:	b003      	add	sp, #12
 8009816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800981c:	e7d7      	b.n	80097ce <__d2b+0x2a>
 800981e:	6169      	str	r1, [r5, #20]
 8009820:	e7e7      	b.n	80097f2 <__d2b+0x4e>
 8009822:	a801      	add	r0, sp, #4
 8009824:	f7ff fd64 	bl	80092f0 <__lo0bits>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	2101      	movs	r1, #1
 800982c:	616b      	str	r3, [r5, #20]
 800982e:	3020      	adds	r0, #32
 8009830:	e7e5      	b.n	80097fe <__d2b+0x5a>
 8009832:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009836:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800983a:	6030      	str	r0, [r6, #0]
 800983c:	6918      	ldr	r0, [r3, #16]
 800983e:	f7ff fd37 	bl	80092b0 <__hi0bits>
 8009842:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009846:	e7e2      	b.n	800980e <__d2b+0x6a>
 8009848:	0800c1fa 	.word	0x0800c1fa
 800984c:	0800c20b 	.word	0x0800c20b

08009850 <__ssputs_r>:
 8009850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	461f      	mov	r7, r3
 8009856:	688e      	ldr	r6, [r1, #8]
 8009858:	4682      	mov	sl, r0
 800985a:	42be      	cmp	r6, r7
 800985c:	460c      	mov	r4, r1
 800985e:	4690      	mov	r8, r2
 8009860:	680b      	ldr	r3, [r1, #0]
 8009862:	d82c      	bhi.n	80098be <__ssputs_r+0x6e>
 8009864:	898a      	ldrh	r2, [r1, #12]
 8009866:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800986a:	d026      	beq.n	80098ba <__ssputs_r+0x6a>
 800986c:	6965      	ldr	r5, [r4, #20]
 800986e:	6909      	ldr	r1, [r1, #16]
 8009870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009874:	eba3 0901 	sub.w	r9, r3, r1
 8009878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800987c:	1c7b      	adds	r3, r7, #1
 800987e:	444b      	add	r3, r9
 8009880:	106d      	asrs	r5, r5, #1
 8009882:	429d      	cmp	r5, r3
 8009884:	bf38      	it	cc
 8009886:	461d      	movcc	r5, r3
 8009888:	0553      	lsls	r3, r2, #21
 800988a:	d527      	bpl.n	80098dc <__ssputs_r+0x8c>
 800988c:	4629      	mov	r1, r5
 800988e:	f7ff fbdb 	bl	8009048 <_malloc_r>
 8009892:	4606      	mov	r6, r0
 8009894:	b360      	cbz	r0, 80098f0 <__ssputs_r+0xa0>
 8009896:	464a      	mov	r2, r9
 8009898:	6921      	ldr	r1, [r4, #16]
 800989a:	f7fe fce8 	bl	800826e <memcpy>
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	6126      	str	r6, [r4, #16]
 80098ac:	444e      	add	r6, r9
 80098ae:	6026      	str	r6, [r4, #0]
 80098b0:	463e      	mov	r6, r7
 80098b2:	6165      	str	r5, [r4, #20]
 80098b4:	eba5 0509 	sub.w	r5, r5, r9
 80098b8:	60a5      	str	r5, [r4, #8]
 80098ba:	42be      	cmp	r6, r7
 80098bc:	d900      	bls.n	80098c0 <__ssputs_r+0x70>
 80098be:	463e      	mov	r6, r7
 80098c0:	4632      	mov	r2, r6
 80098c2:	4641      	mov	r1, r8
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	f7fe fc2a 	bl	800811e <memmove>
 80098ca:	2000      	movs	r0, #0
 80098cc:	68a3      	ldr	r3, [r4, #8]
 80098ce:	1b9b      	subs	r3, r3, r6
 80098d0:	60a3      	str	r3, [r4, #8]
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	4433      	add	r3, r6
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	462a      	mov	r2, r5
 80098de:	f000 fa0d 	bl	8009cfc <_realloc_r>
 80098e2:	4606      	mov	r6, r0
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d1e0      	bne.n	80098aa <__ssputs_r+0x5a>
 80098e8:	4650      	mov	r0, sl
 80098ea:	6921      	ldr	r1, [r4, #16]
 80098ec:	f7ff fb3c 	bl	8008f68 <_free_r>
 80098f0:	230c      	movs	r3, #12
 80098f2:	f8ca 3000 	str.w	r3, [sl]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f04f 30ff 	mov.w	r0, #4294967295
 80098fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	e7e9      	b.n	80098d8 <__ssputs_r+0x88>

08009904 <_svfiprintf_r>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	4698      	mov	r8, r3
 800990a:	898b      	ldrh	r3, [r1, #12]
 800990c:	4607      	mov	r7, r0
 800990e:	061b      	lsls	r3, r3, #24
 8009910:	460d      	mov	r5, r1
 8009912:	4614      	mov	r4, r2
 8009914:	b09d      	sub	sp, #116	; 0x74
 8009916:	d50e      	bpl.n	8009936 <_svfiprintf_r+0x32>
 8009918:	690b      	ldr	r3, [r1, #16]
 800991a:	b963      	cbnz	r3, 8009936 <_svfiprintf_r+0x32>
 800991c:	2140      	movs	r1, #64	; 0x40
 800991e:	f7ff fb93 	bl	8009048 <_malloc_r>
 8009922:	6028      	str	r0, [r5, #0]
 8009924:	6128      	str	r0, [r5, #16]
 8009926:	b920      	cbnz	r0, 8009932 <_svfiprintf_r+0x2e>
 8009928:	230c      	movs	r3, #12
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	e0d0      	b.n	8009ad4 <_svfiprintf_r+0x1d0>
 8009932:	2340      	movs	r3, #64	; 0x40
 8009934:	616b      	str	r3, [r5, #20]
 8009936:	2300      	movs	r3, #0
 8009938:	9309      	str	r3, [sp, #36]	; 0x24
 800993a:	2320      	movs	r3, #32
 800993c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009940:	2330      	movs	r3, #48	; 0x30
 8009942:	f04f 0901 	mov.w	r9, #1
 8009946:	f8cd 800c 	str.w	r8, [sp, #12]
 800994a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009aec <_svfiprintf_r+0x1e8>
 800994e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009952:	4623      	mov	r3, r4
 8009954:	469a      	mov	sl, r3
 8009956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800995a:	b10a      	cbz	r2, 8009960 <_svfiprintf_r+0x5c>
 800995c:	2a25      	cmp	r2, #37	; 0x25
 800995e:	d1f9      	bne.n	8009954 <_svfiprintf_r+0x50>
 8009960:	ebba 0b04 	subs.w	fp, sl, r4
 8009964:	d00b      	beq.n	800997e <_svfiprintf_r+0x7a>
 8009966:	465b      	mov	r3, fp
 8009968:	4622      	mov	r2, r4
 800996a:	4629      	mov	r1, r5
 800996c:	4638      	mov	r0, r7
 800996e:	f7ff ff6f 	bl	8009850 <__ssputs_r>
 8009972:	3001      	adds	r0, #1
 8009974:	f000 80a9 	beq.w	8009aca <_svfiprintf_r+0x1c6>
 8009978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800997a:	445a      	add	r2, fp
 800997c:	9209      	str	r2, [sp, #36]	; 0x24
 800997e:	f89a 3000 	ldrb.w	r3, [sl]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 80a1 	beq.w	8009aca <_svfiprintf_r+0x1c6>
 8009988:	2300      	movs	r3, #0
 800998a:	f04f 32ff 	mov.w	r2, #4294967295
 800998e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009992:	f10a 0a01 	add.w	sl, sl, #1
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	9307      	str	r3, [sp, #28]
 800999a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800999e:	931a      	str	r3, [sp, #104]	; 0x68
 80099a0:	4654      	mov	r4, sl
 80099a2:	2205      	movs	r2, #5
 80099a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a8:	4850      	ldr	r0, [pc, #320]	; (8009aec <_svfiprintf_r+0x1e8>)
 80099aa:	f7fe fc52 	bl	8008252 <memchr>
 80099ae:	9a04      	ldr	r2, [sp, #16]
 80099b0:	b9d8      	cbnz	r0, 80099ea <_svfiprintf_r+0xe6>
 80099b2:	06d0      	lsls	r0, r2, #27
 80099b4:	bf44      	itt	mi
 80099b6:	2320      	movmi	r3, #32
 80099b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099bc:	0711      	lsls	r1, r2, #28
 80099be:	bf44      	itt	mi
 80099c0:	232b      	movmi	r3, #43	; 0x2b
 80099c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099c6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ca:	2b2a      	cmp	r3, #42	; 0x2a
 80099cc:	d015      	beq.n	80099fa <_svfiprintf_r+0xf6>
 80099ce:	4654      	mov	r4, sl
 80099d0:	2000      	movs	r0, #0
 80099d2:	f04f 0c0a 	mov.w	ip, #10
 80099d6:	9a07      	ldr	r2, [sp, #28]
 80099d8:	4621      	mov	r1, r4
 80099da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099de:	3b30      	subs	r3, #48	; 0x30
 80099e0:	2b09      	cmp	r3, #9
 80099e2:	d94d      	bls.n	8009a80 <_svfiprintf_r+0x17c>
 80099e4:	b1b0      	cbz	r0, 8009a14 <_svfiprintf_r+0x110>
 80099e6:	9207      	str	r2, [sp, #28]
 80099e8:	e014      	b.n	8009a14 <_svfiprintf_r+0x110>
 80099ea:	eba0 0308 	sub.w	r3, r0, r8
 80099ee:	fa09 f303 	lsl.w	r3, r9, r3
 80099f2:	4313      	orrs	r3, r2
 80099f4:	46a2      	mov	sl, r4
 80099f6:	9304      	str	r3, [sp, #16]
 80099f8:	e7d2      	b.n	80099a0 <_svfiprintf_r+0x9c>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	1d19      	adds	r1, r3, #4
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	9103      	str	r1, [sp, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	bfbb      	ittet	lt
 8009a06:	425b      	neglt	r3, r3
 8009a08:	f042 0202 	orrlt.w	r2, r2, #2
 8009a0c:	9307      	strge	r3, [sp, #28]
 8009a0e:	9307      	strlt	r3, [sp, #28]
 8009a10:	bfb8      	it	lt
 8009a12:	9204      	strlt	r2, [sp, #16]
 8009a14:	7823      	ldrb	r3, [r4, #0]
 8009a16:	2b2e      	cmp	r3, #46	; 0x2e
 8009a18:	d10c      	bne.n	8009a34 <_svfiprintf_r+0x130>
 8009a1a:	7863      	ldrb	r3, [r4, #1]
 8009a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a1e:	d134      	bne.n	8009a8a <_svfiprintf_r+0x186>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	3402      	adds	r4, #2
 8009a24:	1d1a      	adds	r2, r3, #4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	9203      	str	r2, [sp, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfb8      	it	lt
 8009a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a32:	9305      	str	r3, [sp, #20]
 8009a34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009af0 <_svfiprintf_r+0x1ec>
 8009a38:	2203      	movs	r2, #3
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	7821      	ldrb	r1, [r4, #0]
 8009a3e:	f7fe fc08 	bl	8008252 <memchr>
 8009a42:	b138      	cbz	r0, 8009a54 <_svfiprintf_r+0x150>
 8009a44:	2240      	movs	r2, #64	; 0x40
 8009a46:	9b04      	ldr	r3, [sp, #16]
 8009a48:	eba0 000a 	sub.w	r0, r0, sl
 8009a4c:	4082      	lsls	r2, r0
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	3401      	adds	r4, #1
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a58:	2206      	movs	r2, #6
 8009a5a:	4826      	ldr	r0, [pc, #152]	; (8009af4 <_svfiprintf_r+0x1f0>)
 8009a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a60:	f7fe fbf7 	bl	8008252 <memchr>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d038      	beq.n	8009ada <_svfiprintf_r+0x1d6>
 8009a68:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <_svfiprintf_r+0x1f4>)
 8009a6a:	bb1b      	cbnz	r3, 8009ab4 <_svfiprintf_r+0x1b0>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	3307      	adds	r3, #7
 8009a70:	f023 0307 	bic.w	r3, r3, #7
 8009a74:	3308      	adds	r3, #8
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7a:	4433      	add	r3, r6
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	e768      	b.n	8009952 <_svfiprintf_r+0x4e>
 8009a80:	460c      	mov	r4, r1
 8009a82:	2001      	movs	r0, #1
 8009a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a88:	e7a6      	b.n	80099d8 <_svfiprintf_r+0xd4>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f04f 0c0a 	mov.w	ip, #10
 8009a90:	4619      	mov	r1, r3
 8009a92:	3401      	adds	r4, #1
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	4620      	mov	r0, r4
 8009a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a9c:	3a30      	subs	r2, #48	; 0x30
 8009a9e:	2a09      	cmp	r2, #9
 8009aa0:	d903      	bls.n	8009aaa <_svfiprintf_r+0x1a6>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0c6      	beq.n	8009a34 <_svfiprintf_r+0x130>
 8009aa6:	9105      	str	r1, [sp, #20]
 8009aa8:	e7c4      	b.n	8009a34 <_svfiprintf_r+0x130>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	2301      	movs	r3, #1
 8009aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ab2:	e7f0      	b.n	8009a96 <_svfiprintf_r+0x192>
 8009ab4:	ab03      	add	r3, sp, #12
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4638      	mov	r0, r7
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <_svfiprintf_r+0x1f8>)
 8009abe:	a904      	add	r1, sp, #16
 8009ac0:	f7fd fe46 	bl	8007750 <_printf_float>
 8009ac4:	1c42      	adds	r2, r0, #1
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	d1d6      	bne.n	8009a78 <_svfiprintf_r+0x174>
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	065b      	lsls	r3, r3, #25
 8009ace:	f53f af2d 	bmi.w	800992c <_svfiprintf_r+0x28>
 8009ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad4:	b01d      	add	sp, #116	; 0x74
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	ab03      	add	r3, sp, #12
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	4b06      	ldr	r3, [pc, #24]	; (8009afc <_svfiprintf_r+0x1f8>)
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	f7fe f8d3 	bl	8007c90 <_printf_i>
 8009aea:	e7eb      	b.n	8009ac4 <_svfiprintf_r+0x1c0>
 8009aec:	0800c364 	.word	0x0800c364
 8009af0:	0800c36a 	.word	0x0800c36a
 8009af4:	0800c36e 	.word	0x0800c36e
 8009af8:	08007751 	.word	0x08007751
 8009afc:	08009851 	.word	0x08009851

08009b00 <__sflush_r>:
 8009b00:	898a      	ldrh	r2, [r1, #12]
 8009b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b04:	4605      	mov	r5, r0
 8009b06:	0710      	lsls	r0, r2, #28
 8009b08:	460c      	mov	r4, r1
 8009b0a:	d457      	bmi.n	8009bbc <__sflush_r+0xbc>
 8009b0c:	684b      	ldr	r3, [r1, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dc04      	bgt.n	8009b1c <__sflush_r+0x1c>
 8009b12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dc01      	bgt.n	8009b1c <__sflush_r+0x1c>
 8009b18:	2000      	movs	r0, #0
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d0fa      	beq.n	8009b18 <__sflush_r+0x18>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b28:	682f      	ldr	r7, [r5, #0]
 8009b2a:	6a21      	ldr	r1, [r4, #32]
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	d032      	beq.n	8009b96 <__sflush_r+0x96>
 8009b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	075a      	lsls	r2, r3, #29
 8009b36:	d505      	bpl.n	8009b44 <__sflush_r+0x44>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	1ac0      	subs	r0, r0, r3
 8009b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b3e:	b10b      	cbz	r3, 8009b44 <__sflush_r+0x44>
 8009b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b42:	1ac0      	subs	r0, r0, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	4602      	mov	r2, r0
 8009b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	6a21      	ldr	r1, [r4, #32]
 8009b4e:	47b0      	blx	r6
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	d106      	bne.n	8009b64 <__sflush_r+0x64>
 8009b56:	6829      	ldr	r1, [r5, #0]
 8009b58:	291d      	cmp	r1, #29
 8009b5a:	d82b      	bhi.n	8009bb4 <__sflush_r+0xb4>
 8009b5c:	4a28      	ldr	r2, [pc, #160]	; (8009c00 <__sflush_r+0x100>)
 8009b5e:	410a      	asrs	r2, r1
 8009b60:	07d6      	lsls	r6, r2, #31
 8009b62:	d427      	bmi.n	8009bb4 <__sflush_r+0xb4>
 8009b64:	2200      	movs	r2, #0
 8009b66:	6062      	str	r2, [r4, #4]
 8009b68:	6922      	ldr	r2, [r4, #16]
 8009b6a:	04d9      	lsls	r1, r3, #19
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	d504      	bpl.n	8009b7a <__sflush_r+0x7a>
 8009b70:	1c42      	adds	r2, r0, #1
 8009b72:	d101      	bne.n	8009b78 <__sflush_r+0x78>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b903      	cbnz	r3, 8009b7a <__sflush_r+0x7a>
 8009b78:	6560      	str	r0, [r4, #84]	; 0x54
 8009b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b7c:	602f      	str	r7, [r5, #0]
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d0ca      	beq.n	8009b18 <__sflush_r+0x18>
 8009b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d002      	beq.n	8009b90 <__sflush_r+0x90>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7ff f9ec 	bl	8008f68 <_free_r>
 8009b90:	2000      	movs	r0, #0
 8009b92:	6360      	str	r0, [r4, #52]	; 0x34
 8009b94:	e7c1      	b.n	8009b1a <__sflush_r+0x1a>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b0      	blx	r6
 8009b9c:	1c41      	adds	r1, r0, #1
 8009b9e:	d1c8      	bne.n	8009b32 <__sflush_r+0x32>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c5      	beq.n	8009b32 <__sflush_r+0x32>
 8009ba6:	2b1d      	cmp	r3, #29
 8009ba8:	d001      	beq.n	8009bae <__sflush_r+0xae>
 8009baa:	2b16      	cmp	r3, #22
 8009bac:	d101      	bne.n	8009bb2 <__sflush_r+0xb2>
 8009bae:	602f      	str	r7, [r5, #0]
 8009bb0:	e7b2      	b.n	8009b18 <__sflush_r+0x18>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	e7ae      	b.n	8009b1a <__sflush_r+0x1a>
 8009bbc:	690f      	ldr	r7, [r1, #16]
 8009bbe:	2f00      	cmp	r7, #0
 8009bc0:	d0aa      	beq.n	8009b18 <__sflush_r+0x18>
 8009bc2:	0793      	lsls	r3, r2, #30
 8009bc4:	bf18      	it	ne
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	680e      	ldr	r6, [r1, #0]
 8009bca:	bf08      	it	eq
 8009bcc:	694b      	ldreq	r3, [r1, #20]
 8009bce:	1bf6      	subs	r6, r6, r7
 8009bd0:	600f      	str	r7, [r1, #0]
 8009bd2:	608b      	str	r3, [r1, #8]
 8009bd4:	2e00      	cmp	r6, #0
 8009bd6:	dd9f      	ble.n	8009b18 <__sflush_r+0x18>
 8009bd8:	4633      	mov	r3, r6
 8009bda:	463a      	mov	r2, r7
 8009bdc:	4628      	mov	r0, r5
 8009bde:	6a21      	ldr	r1, [r4, #32]
 8009be0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009be4:	47e0      	blx	ip
 8009be6:	2800      	cmp	r0, #0
 8009be8:	dc06      	bgt.n	8009bf8 <__sflush_r+0xf8>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e790      	b.n	8009b1a <__sflush_r+0x1a>
 8009bf8:	4407      	add	r7, r0
 8009bfa:	1a36      	subs	r6, r6, r0
 8009bfc:	e7ea      	b.n	8009bd4 <__sflush_r+0xd4>
 8009bfe:	bf00      	nop
 8009c00:	dfbffffe 	.word	0xdfbffffe

08009c04 <_fflush_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	690b      	ldr	r3, [r1, #16]
 8009c08:	4605      	mov	r5, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	b913      	cbnz	r3, 8009c14 <_fflush_r+0x10>
 8009c0e:	2500      	movs	r5, #0
 8009c10:	4628      	mov	r0, r5
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	b118      	cbz	r0, 8009c1e <_fflush_r+0x1a>
 8009c16:	6a03      	ldr	r3, [r0, #32]
 8009c18:	b90b      	cbnz	r3, 8009c1e <_fflush_r+0x1a>
 8009c1a:	f7fe f9e7 	bl	8007fec <__sinit>
 8009c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0f3      	beq.n	8009c0e <_fflush_r+0xa>
 8009c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c28:	07d0      	lsls	r0, r2, #31
 8009c2a:	d404      	bmi.n	8009c36 <_fflush_r+0x32>
 8009c2c:	0599      	lsls	r1, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_fflush_r+0x32>
 8009c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c32:	f7fe fb0c 	bl	800824e <__retarget_lock_acquire_recursive>
 8009c36:	4628      	mov	r0, r5
 8009c38:	4621      	mov	r1, r4
 8009c3a:	f7ff ff61 	bl	8009b00 <__sflush_r>
 8009c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c40:	4605      	mov	r5, r0
 8009c42:	07da      	lsls	r2, r3, #31
 8009c44:	d4e4      	bmi.n	8009c10 <_fflush_r+0xc>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	059b      	lsls	r3, r3, #22
 8009c4a:	d4e1      	bmi.n	8009c10 <_fflush_r+0xc>
 8009c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c4e:	f7fe faff 	bl	8008250 <__retarget_lock_release_recursive>
 8009c52:	e7dd      	b.n	8009c10 <_fflush_r+0xc>

08009c54 <_sbrk_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	2300      	movs	r3, #0
 8009c58:	4d05      	ldr	r5, [pc, #20]	; (8009c70 <_sbrk_r+0x1c>)
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	f7fa fb34 	bl	80042cc <_sbrk>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_sbrk_r+0x1a>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_sbrk_r+0x1a>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	200010d8 	.word	0x200010d8

08009c74 <__assert_func>:
 8009c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c76:	4614      	mov	r4, r2
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <__assert_func+0x2c>)
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68d8      	ldr	r0, [r3, #12]
 8009c82:	b14c      	cbz	r4, 8009c98 <__assert_func+0x24>
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <__assert_func+0x30>)
 8009c86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c8a:	9100      	str	r1, [sp, #0]
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	4906      	ldr	r1, [pc, #24]	; (8009ca8 <__assert_func+0x34>)
 8009c90:	f000 f870 	bl	8009d74 <fiprintf>
 8009c94:	f000 f880 	bl	8009d98 <abort>
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <__assert_func+0x38>)
 8009c9a:	461c      	mov	r4, r3
 8009c9c:	e7f3      	b.n	8009c86 <__assert_func+0x12>
 8009c9e:	bf00      	nop
 8009ca0:	2000008c 	.word	0x2000008c
 8009ca4:	0800c37f 	.word	0x0800c37f
 8009ca8:	0800c38c 	.word	0x0800c38c
 8009cac:	0800c3ba 	.word	0x0800c3ba

08009cb0 <_calloc_r>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	fba1 5402 	umull	r5, r4, r1, r2
 8009cb6:	b934      	cbnz	r4, 8009cc6 <_calloc_r+0x16>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7ff f9c5 	bl	8009048 <_malloc_r>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	b928      	cbnz	r0, 8009cce <_calloc_r+0x1e>
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	bd70      	pop	{r4, r5, r6, pc}
 8009cc6:	220c      	movs	r2, #12
 8009cc8:	2600      	movs	r6, #0
 8009cca:	6002      	str	r2, [r0, #0]
 8009ccc:	e7f9      	b.n	8009cc2 <_calloc_r+0x12>
 8009cce:	462a      	mov	r2, r5
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	f7fe fa3e 	bl	8008152 <memset>
 8009cd6:	e7f4      	b.n	8009cc2 <_calloc_r+0x12>

08009cd8 <__ascii_mbtowc>:
 8009cd8:	b082      	sub	sp, #8
 8009cda:	b901      	cbnz	r1, 8009cde <__ascii_mbtowc+0x6>
 8009cdc:	a901      	add	r1, sp, #4
 8009cde:	b142      	cbz	r2, 8009cf2 <__ascii_mbtowc+0x1a>
 8009ce0:	b14b      	cbz	r3, 8009cf6 <__ascii_mbtowc+0x1e>
 8009ce2:	7813      	ldrb	r3, [r2, #0]
 8009ce4:	600b      	str	r3, [r1, #0]
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	1e10      	subs	r0, r2, #0
 8009cea:	bf18      	it	ne
 8009cec:	2001      	movne	r0, #1
 8009cee:	b002      	add	sp, #8
 8009cf0:	4770      	bx	lr
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	e7fb      	b.n	8009cee <__ascii_mbtowc+0x16>
 8009cf6:	f06f 0001 	mvn.w	r0, #1
 8009cfa:	e7f8      	b.n	8009cee <__ascii_mbtowc+0x16>

08009cfc <_realloc_r>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	4680      	mov	r8, r0
 8009d02:	4614      	mov	r4, r2
 8009d04:	460e      	mov	r6, r1
 8009d06:	b921      	cbnz	r1, 8009d12 <_realloc_r+0x16>
 8009d08:	4611      	mov	r1, r2
 8009d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0e:	f7ff b99b 	b.w	8009048 <_malloc_r>
 8009d12:	b92a      	cbnz	r2, 8009d20 <_realloc_r+0x24>
 8009d14:	f7ff f928 	bl	8008f68 <_free_r>
 8009d18:	4625      	mov	r5, r4
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	f000 f841 	bl	8009da6 <_malloc_usable_size_r>
 8009d24:	4284      	cmp	r4, r0
 8009d26:	4607      	mov	r7, r0
 8009d28:	d802      	bhi.n	8009d30 <_realloc_r+0x34>
 8009d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d2e:	d812      	bhi.n	8009d56 <_realloc_r+0x5a>
 8009d30:	4621      	mov	r1, r4
 8009d32:	4640      	mov	r0, r8
 8009d34:	f7ff f988 	bl	8009048 <_malloc_r>
 8009d38:	4605      	mov	r5, r0
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0ed      	beq.n	8009d1a <_realloc_r+0x1e>
 8009d3e:	42bc      	cmp	r4, r7
 8009d40:	4622      	mov	r2, r4
 8009d42:	4631      	mov	r1, r6
 8009d44:	bf28      	it	cs
 8009d46:	463a      	movcs	r2, r7
 8009d48:	f7fe fa91 	bl	800826e <memcpy>
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f7ff f90a 	bl	8008f68 <_free_r>
 8009d54:	e7e1      	b.n	8009d1a <_realloc_r+0x1e>
 8009d56:	4635      	mov	r5, r6
 8009d58:	e7df      	b.n	8009d1a <_realloc_r+0x1e>

08009d5a <__ascii_wctomb>:
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	b141      	cbz	r1, 8009d72 <__ascii_wctomb+0x18>
 8009d60:	2aff      	cmp	r2, #255	; 0xff
 8009d62:	d904      	bls.n	8009d6e <__ascii_wctomb+0x14>
 8009d64:	228a      	movs	r2, #138	; 0x8a
 8009d66:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	4770      	bx	lr
 8009d6e:	2001      	movs	r0, #1
 8009d70:	700a      	strb	r2, [r1, #0]
 8009d72:	4770      	bx	lr

08009d74 <fiprintf>:
 8009d74:	b40e      	push	{r1, r2, r3}
 8009d76:	b503      	push	{r0, r1, lr}
 8009d78:	4601      	mov	r1, r0
 8009d7a:	ab03      	add	r3, sp, #12
 8009d7c:	4805      	ldr	r0, [pc, #20]	; (8009d94 <fiprintf+0x20>)
 8009d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d82:	6800      	ldr	r0, [r0, #0]
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	f000 f83d 	bl	8009e04 <_vfiprintf_r>
 8009d8a:	b002      	add	sp, #8
 8009d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d90:	b003      	add	sp, #12
 8009d92:	4770      	bx	lr
 8009d94:	2000008c 	.word	0x2000008c

08009d98 <abort>:
 8009d98:	2006      	movs	r0, #6
 8009d9a:	b508      	push	{r3, lr}
 8009d9c:	f000 fa0a 	bl	800a1b4 <raise>
 8009da0:	2001      	movs	r0, #1
 8009da2:	f7fa fa20 	bl	80041e6 <_exit>

08009da6 <_malloc_usable_size_r>:
 8009da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009daa:	1f18      	subs	r0, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfbc      	itt	lt
 8009db0:	580b      	ldrlt	r3, [r1, r0]
 8009db2:	18c0      	addlt	r0, r0, r3
 8009db4:	4770      	bx	lr

08009db6 <__sfputc_r>:
 8009db6:	6893      	ldr	r3, [r2, #8]
 8009db8:	b410      	push	{r4}
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	6093      	str	r3, [r2, #8]
 8009dc0:	da07      	bge.n	8009dd2 <__sfputc_r+0x1c>
 8009dc2:	6994      	ldr	r4, [r2, #24]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	db01      	blt.n	8009dcc <__sfputc_r+0x16>
 8009dc8:	290a      	cmp	r1, #10
 8009dca:	d102      	bne.n	8009dd2 <__sfputc_r+0x1c>
 8009dcc:	bc10      	pop	{r4}
 8009dce:	f000 b933 	b.w	800a038 <__swbuf_r>
 8009dd2:	6813      	ldr	r3, [r2, #0]
 8009dd4:	1c58      	adds	r0, r3, #1
 8009dd6:	6010      	str	r0, [r2, #0]
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	4608      	mov	r0, r1
 8009ddc:	bc10      	pop	{r4}
 8009dde:	4770      	bx	lr

08009de0 <__sfputs_r>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	4614      	mov	r4, r2
 8009de8:	18d5      	adds	r5, r2, r3
 8009dea:	42ac      	cmp	r4, r5
 8009dec:	d101      	bne.n	8009df2 <__sfputs_r+0x12>
 8009dee:	2000      	movs	r0, #0
 8009df0:	e007      	b.n	8009e02 <__sfputs_r+0x22>
 8009df2:	463a      	mov	r2, r7
 8009df4:	4630      	mov	r0, r6
 8009df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfa:	f7ff ffdc 	bl	8009db6 <__sfputc_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d1f3      	bne.n	8009dea <__sfputs_r+0xa>
 8009e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e04 <_vfiprintf_r>:
 8009e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	460d      	mov	r5, r1
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	4698      	mov	r8, r3
 8009e0e:	4606      	mov	r6, r0
 8009e10:	b09d      	sub	sp, #116	; 0x74
 8009e12:	b118      	cbz	r0, 8009e1c <_vfiprintf_r+0x18>
 8009e14:	6a03      	ldr	r3, [r0, #32]
 8009e16:	b90b      	cbnz	r3, 8009e1c <_vfiprintf_r+0x18>
 8009e18:	f7fe f8e8 	bl	8007fec <__sinit>
 8009e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e1e:	07d9      	lsls	r1, r3, #31
 8009e20:	d405      	bmi.n	8009e2e <_vfiprintf_r+0x2a>
 8009e22:	89ab      	ldrh	r3, [r5, #12]
 8009e24:	059a      	lsls	r2, r3, #22
 8009e26:	d402      	bmi.n	8009e2e <_vfiprintf_r+0x2a>
 8009e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e2a:	f7fe fa10 	bl	800824e <__retarget_lock_acquire_recursive>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	071b      	lsls	r3, r3, #28
 8009e32:	d501      	bpl.n	8009e38 <_vfiprintf_r+0x34>
 8009e34:	692b      	ldr	r3, [r5, #16]
 8009e36:	b99b      	cbnz	r3, 8009e60 <_vfiprintf_r+0x5c>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f000 f93a 	bl	800a0b4 <__swsetup_r>
 8009e40:	b170      	cbz	r0, 8009e60 <_vfiprintf_r+0x5c>
 8009e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e44:	07dc      	lsls	r4, r3, #31
 8009e46:	d504      	bpl.n	8009e52 <_vfiprintf_r+0x4e>
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4c:	b01d      	add	sp, #116	; 0x74
 8009e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e52:	89ab      	ldrh	r3, [r5, #12]
 8009e54:	0598      	lsls	r0, r3, #22
 8009e56:	d4f7      	bmi.n	8009e48 <_vfiprintf_r+0x44>
 8009e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e5a:	f7fe f9f9 	bl	8008250 <__retarget_lock_release_recursive>
 8009e5e:	e7f3      	b.n	8009e48 <_vfiprintf_r+0x44>
 8009e60:	2300      	movs	r3, #0
 8009e62:	9309      	str	r3, [sp, #36]	; 0x24
 8009e64:	2320      	movs	r3, #32
 8009e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e6a:	2330      	movs	r3, #48	; 0x30
 8009e6c:	f04f 0901 	mov.w	r9, #1
 8009e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a024 <_vfiprintf_r+0x220>
 8009e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e7c:	4623      	mov	r3, r4
 8009e7e:	469a      	mov	sl, r3
 8009e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e84:	b10a      	cbz	r2, 8009e8a <_vfiprintf_r+0x86>
 8009e86:	2a25      	cmp	r2, #37	; 0x25
 8009e88:	d1f9      	bne.n	8009e7e <_vfiprintf_r+0x7a>
 8009e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e8e:	d00b      	beq.n	8009ea8 <_vfiprintf_r+0xa4>
 8009e90:	465b      	mov	r3, fp
 8009e92:	4622      	mov	r2, r4
 8009e94:	4629      	mov	r1, r5
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7ff ffa2 	bl	8009de0 <__sfputs_r>
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f000 80a9 	beq.w	8009ff4 <_vfiprintf_r+0x1f0>
 8009ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ea4:	445a      	add	r2, fp
 8009ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80a1 	beq.w	8009ff4 <_vfiprintf_r+0x1f0>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ebc:	f10a 0a01 	add.w	sl, sl, #1
 8009ec0:	9304      	str	r3, [sp, #16]
 8009ec2:	9307      	str	r3, [sp, #28]
 8009ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8009eca:	4654      	mov	r4, sl
 8009ecc:	2205      	movs	r2, #5
 8009ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed2:	4854      	ldr	r0, [pc, #336]	; (800a024 <_vfiprintf_r+0x220>)
 8009ed4:	f7fe f9bd 	bl	8008252 <memchr>
 8009ed8:	9a04      	ldr	r2, [sp, #16]
 8009eda:	b9d8      	cbnz	r0, 8009f14 <_vfiprintf_r+0x110>
 8009edc:	06d1      	lsls	r1, r2, #27
 8009ede:	bf44      	itt	mi
 8009ee0:	2320      	movmi	r3, #32
 8009ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ee6:	0713      	lsls	r3, r2, #28
 8009ee8:	bf44      	itt	mi
 8009eea:	232b      	movmi	r3, #43	; 0x2b
 8009eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef6:	d015      	beq.n	8009f24 <_vfiprintf_r+0x120>
 8009ef8:	4654      	mov	r4, sl
 8009efa:	2000      	movs	r0, #0
 8009efc:	f04f 0c0a 	mov.w	ip, #10
 8009f00:	9a07      	ldr	r2, [sp, #28]
 8009f02:	4621      	mov	r1, r4
 8009f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f08:	3b30      	subs	r3, #48	; 0x30
 8009f0a:	2b09      	cmp	r3, #9
 8009f0c:	d94d      	bls.n	8009faa <_vfiprintf_r+0x1a6>
 8009f0e:	b1b0      	cbz	r0, 8009f3e <_vfiprintf_r+0x13a>
 8009f10:	9207      	str	r2, [sp, #28]
 8009f12:	e014      	b.n	8009f3e <_vfiprintf_r+0x13a>
 8009f14:	eba0 0308 	sub.w	r3, r0, r8
 8009f18:	fa09 f303 	lsl.w	r3, r9, r3
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	46a2      	mov	sl, r4
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	e7d2      	b.n	8009eca <_vfiprintf_r+0xc6>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	1d19      	adds	r1, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	9103      	str	r1, [sp, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfbb      	ittet	lt
 8009f30:	425b      	neglt	r3, r3
 8009f32:	f042 0202 	orrlt.w	r2, r2, #2
 8009f36:	9307      	strge	r3, [sp, #28]
 8009f38:	9307      	strlt	r3, [sp, #28]
 8009f3a:	bfb8      	it	lt
 8009f3c:	9204      	strlt	r2, [sp, #16]
 8009f3e:	7823      	ldrb	r3, [r4, #0]
 8009f40:	2b2e      	cmp	r3, #46	; 0x2e
 8009f42:	d10c      	bne.n	8009f5e <_vfiprintf_r+0x15a>
 8009f44:	7863      	ldrb	r3, [r4, #1]
 8009f46:	2b2a      	cmp	r3, #42	; 0x2a
 8009f48:	d134      	bne.n	8009fb4 <_vfiprintf_r+0x1b0>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	3402      	adds	r4, #2
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	9203      	str	r2, [sp, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	bfb8      	it	lt
 8009f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a028 <_vfiprintf_r+0x224>
 8009f62:	2203      	movs	r2, #3
 8009f64:	4650      	mov	r0, sl
 8009f66:	7821      	ldrb	r1, [r4, #0]
 8009f68:	f7fe f973 	bl	8008252 <memchr>
 8009f6c:	b138      	cbz	r0, 8009f7e <_vfiprintf_r+0x17a>
 8009f6e:	2240      	movs	r2, #64	; 0x40
 8009f70:	9b04      	ldr	r3, [sp, #16]
 8009f72:	eba0 000a 	sub.w	r0, r0, sl
 8009f76:	4082      	lsls	r2, r0
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	2206      	movs	r2, #6
 8009f84:	4829      	ldr	r0, [pc, #164]	; (800a02c <_vfiprintf_r+0x228>)
 8009f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f8a:	f7fe f962 	bl	8008252 <memchr>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d03f      	beq.n	800a012 <_vfiprintf_r+0x20e>
 8009f92:	4b27      	ldr	r3, [pc, #156]	; (800a030 <_vfiprintf_r+0x22c>)
 8009f94:	bb1b      	cbnz	r3, 8009fde <_vfiprintf_r+0x1da>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	3307      	adds	r3, #7
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa4:	443b      	add	r3, r7
 8009fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa8:	e768      	b.n	8009e7c <_vfiprintf_r+0x78>
 8009faa:	460c      	mov	r4, r1
 8009fac:	2001      	movs	r0, #1
 8009fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fb2:	e7a6      	b.n	8009f02 <_vfiprintf_r+0xfe>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f04f 0c0a 	mov.w	ip, #10
 8009fba:	4619      	mov	r1, r3
 8009fbc:	3401      	adds	r4, #1
 8009fbe:	9305      	str	r3, [sp, #20]
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc6:	3a30      	subs	r2, #48	; 0x30
 8009fc8:	2a09      	cmp	r2, #9
 8009fca:	d903      	bls.n	8009fd4 <_vfiprintf_r+0x1d0>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0c6      	beq.n	8009f5e <_vfiprintf_r+0x15a>
 8009fd0:	9105      	str	r1, [sp, #20]
 8009fd2:	e7c4      	b.n	8009f5e <_vfiprintf_r+0x15a>
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fdc:	e7f0      	b.n	8009fc0 <_vfiprintf_r+0x1bc>
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	4b13      	ldr	r3, [pc, #76]	; (800a034 <_vfiprintf_r+0x230>)
 8009fe8:	a904      	add	r1, sp, #16
 8009fea:	f7fd fbb1 	bl	8007750 <_printf_float>
 8009fee:	4607      	mov	r7, r0
 8009ff0:	1c78      	adds	r0, r7, #1
 8009ff2:	d1d6      	bne.n	8009fa2 <_vfiprintf_r+0x19e>
 8009ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff6:	07d9      	lsls	r1, r3, #31
 8009ff8:	d405      	bmi.n	800a006 <_vfiprintf_r+0x202>
 8009ffa:	89ab      	ldrh	r3, [r5, #12]
 8009ffc:	059a      	lsls	r2, r3, #22
 8009ffe:	d402      	bmi.n	800a006 <_vfiprintf_r+0x202>
 800a000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a002:	f7fe f925 	bl	8008250 <__retarget_lock_release_recursive>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	065b      	lsls	r3, r3, #25
 800a00a:	f53f af1d 	bmi.w	8009e48 <_vfiprintf_r+0x44>
 800a00e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a010:	e71c      	b.n	8009e4c <_vfiprintf_r+0x48>
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	462a      	mov	r2, r5
 800a018:	4630      	mov	r0, r6
 800a01a:	4b06      	ldr	r3, [pc, #24]	; (800a034 <_vfiprintf_r+0x230>)
 800a01c:	a904      	add	r1, sp, #16
 800a01e:	f7fd fe37 	bl	8007c90 <_printf_i>
 800a022:	e7e4      	b.n	8009fee <_vfiprintf_r+0x1ea>
 800a024:	0800c364 	.word	0x0800c364
 800a028:	0800c36a 	.word	0x0800c36a
 800a02c:	0800c36e 	.word	0x0800c36e
 800a030:	08007751 	.word	0x08007751
 800a034:	08009de1 	.word	0x08009de1

0800a038 <__swbuf_r>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	460e      	mov	r6, r1
 800a03c:	4614      	mov	r4, r2
 800a03e:	4605      	mov	r5, r0
 800a040:	b118      	cbz	r0, 800a04a <__swbuf_r+0x12>
 800a042:	6a03      	ldr	r3, [r0, #32]
 800a044:	b90b      	cbnz	r3, 800a04a <__swbuf_r+0x12>
 800a046:	f7fd ffd1 	bl	8007fec <__sinit>
 800a04a:	69a3      	ldr	r3, [r4, #24]
 800a04c:	60a3      	str	r3, [r4, #8]
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	071a      	lsls	r2, r3, #28
 800a052:	d525      	bpl.n	800a0a0 <__swbuf_r+0x68>
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	b31b      	cbz	r3, 800a0a0 <__swbuf_r+0x68>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	6922      	ldr	r2, [r4, #16]
 800a05c:	b2f6      	uxtb	r6, r6
 800a05e:	1a98      	subs	r0, r3, r2
 800a060:	6963      	ldr	r3, [r4, #20]
 800a062:	4637      	mov	r7, r6
 800a064:	4283      	cmp	r3, r0
 800a066:	dc04      	bgt.n	800a072 <__swbuf_r+0x3a>
 800a068:	4621      	mov	r1, r4
 800a06a:	4628      	mov	r0, r5
 800a06c:	f7ff fdca 	bl	8009c04 <_fflush_r>
 800a070:	b9e0      	cbnz	r0, 800a0ac <__swbuf_r+0x74>
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	3b01      	subs	r3, #1
 800a076:	60a3      	str	r3, [r4, #8]
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	701e      	strb	r6, [r3, #0]
 800a080:	6962      	ldr	r2, [r4, #20]
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	429a      	cmp	r2, r3
 800a086:	d004      	beq.n	800a092 <__swbuf_r+0x5a>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	07db      	lsls	r3, r3, #31
 800a08c:	d506      	bpl.n	800a09c <__swbuf_r+0x64>
 800a08e:	2e0a      	cmp	r6, #10
 800a090:	d104      	bne.n	800a09c <__swbuf_r+0x64>
 800a092:	4621      	mov	r1, r4
 800a094:	4628      	mov	r0, r5
 800a096:	f7ff fdb5 	bl	8009c04 <_fflush_r>
 800a09a:	b938      	cbnz	r0, 800a0ac <__swbuf_r+0x74>
 800a09c:	4638      	mov	r0, r7
 800a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 f806 	bl	800a0b4 <__swsetup_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d0d5      	beq.n	800a058 <__swbuf_r+0x20>
 800a0ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a0b0:	e7f4      	b.n	800a09c <__swbuf_r+0x64>
	...

0800a0b4 <__swsetup_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <__swsetup_r+0xac>)
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	460c      	mov	r4, r1
 800a0be:	b118      	cbz	r0, 800a0c8 <__swsetup_r+0x14>
 800a0c0:	6a03      	ldr	r3, [r0, #32]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <__swsetup_r+0x14>
 800a0c4:	f7fd ff92 	bl	8007fec <__sinit>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0ce:	0718      	lsls	r0, r3, #28
 800a0d0:	d422      	bmi.n	800a118 <__swsetup_r+0x64>
 800a0d2:	06d9      	lsls	r1, r3, #27
 800a0d4:	d407      	bmi.n	800a0e6 <__swsetup_r+0x32>
 800a0d6:	2309      	movs	r3, #9
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	e034      	b.n	800a150 <__swsetup_r+0x9c>
 800a0e6:	0758      	lsls	r0, r3, #29
 800a0e8:	d512      	bpl.n	800a110 <__swsetup_r+0x5c>
 800a0ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ec:	b141      	cbz	r1, 800a100 <__swsetup_r+0x4c>
 800a0ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	d002      	beq.n	800a0fc <__swsetup_r+0x48>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7fe ff36 	bl	8008f68 <_free_r>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6363      	str	r3, [r4, #52]	; 0x34
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	2300      	movs	r3, #0
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f043 0308 	orr.w	r3, r3, #8
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	6923      	ldr	r3, [r4, #16]
 800a11a:	b94b      	cbnz	r3, 800a130 <__swsetup_r+0x7c>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a126:	d003      	beq.n	800a130 <__swsetup_r+0x7c>
 800a128:	4621      	mov	r1, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 f883 	bl	800a236 <__smakebuf_r>
 800a130:	89a0      	ldrh	r0, [r4, #12]
 800a132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a136:	f010 0301 	ands.w	r3, r0, #1
 800a13a:	d00a      	beq.n	800a152 <__swsetup_r+0x9e>
 800a13c:	2300      	movs	r3, #0
 800a13e:	60a3      	str	r3, [r4, #8]
 800a140:	6963      	ldr	r3, [r4, #20]
 800a142:	425b      	negs	r3, r3
 800a144:	61a3      	str	r3, [r4, #24]
 800a146:	6923      	ldr	r3, [r4, #16]
 800a148:	b943      	cbnz	r3, 800a15c <__swsetup_r+0xa8>
 800a14a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a14e:	d1c4      	bne.n	800a0da <__swsetup_r+0x26>
 800a150:	bd38      	pop	{r3, r4, r5, pc}
 800a152:	0781      	lsls	r1, r0, #30
 800a154:	bf58      	it	pl
 800a156:	6963      	ldrpl	r3, [r4, #20]
 800a158:	60a3      	str	r3, [r4, #8]
 800a15a:	e7f4      	b.n	800a146 <__swsetup_r+0x92>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e7f7      	b.n	800a150 <__swsetup_r+0x9c>
 800a160:	2000008c 	.word	0x2000008c

0800a164 <_raise_r>:
 800a164:	291f      	cmp	r1, #31
 800a166:	b538      	push	{r3, r4, r5, lr}
 800a168:	4604      	mov	r4, r0
 800a16a:	460d      	mov	r5, r1
 800a16c:	d904      	bls.n	800a178 <_raise_r+0x14>
 800a16e:	2316      	movs	r3, #22
 800a170:	6003      	str	r3, [r0, #0]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a17a:	b112      	cbz	r2, 800a182 <_raise_r+0x1e>
 800a17c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a180:	b94b      	cbnz	r3, 800a196 <_raise_r+0x32>
 800a182:	4620      	mov	r0, r4
 800a184:	f000 f830 	bl	800a1e8 <_getpid_r>
 800a188:	462a      	mov	r2, r5
 800a18a:	4601      	mov	r1, r0
 800a18c:	4620      	mov	r0, r4
 800a18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a192:	f000 b817 	b.w	800a1c4 <_kill_r>
 800a196:	2b01      	cmp	r3, #1
 800a198:	d00a      	beq.n	800a1b0 <_raise_r+0x4c>
 800a19a:	1c59      	adds	r1, r3, #1
 800a19c:	d103      	bne.n	800a1a6 <_raise_r+0x42>
 800a19e:	2316      	movs	r3, #22
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7e7      	b.n	800a176 <_raise_r+0x12>
 800a1a6:	2400      	movs	r4, #0
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1ae:	4798      	blx	r3
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7e0      	b.n	800a176 <_raise_r+0x12>

0800a1b4 <raise>:
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <raise+0xc>)
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f7ff bfd3 	b.w	800a164 <_raise_r>
 800a1be:	bf00      	nop
 800a1c0:	2000008c 	.word	0x2000008c

0800a1c4 <_kill_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4d06      	ldr	r5, [pc, #24]	; (800a1e4 <_kill_r+0x20>)
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	f7f9 fff8 	bl	80041c6 <_kill>
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	d102      	bne.n	800a1e0 <_kill_r+0x1c>
 800a1da:	682b      	ldr	r3, [r5, #0]
 800a1dc:	b103      	cbz	r3, 800a1e0 <_kill_r+0x1c>
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	bd38      	pop	{r3, r4, r5, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200010d8 	.word	0x200010d8

0800a1e8 <_getpid_r>:
 800a1e8:	f7f9 bfe6 	b.w	80041b8 <_getpid>

0800a1ec <__swhatbuf_r>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f4:	4615      	mov	r5, r2
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	461e      	mov	r6, r3
 800a1fa:	b096      	sub	sp, #88	; 0x58
 800a1fc:	da0c      	bge.n	800a218 <__swhatbuf_r+0x2c>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	2100      	movs	r1, #0
 800a202:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a206:	bf0c      	ite	eq
 800a208:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a20c:	2340      	movne	r3, #64	; 0x40
 800a20e:	2000      	movs	r0, #0
 800a210:	6031      	str	r1, [r6, #0]
 800a212:	602b      	str	r3, [r5, #0]
 800a214:	b016      	add	sp, #88	; 0x58
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	466a      	mov	r2, sp
 800a21a:	f000 f849 	bl	800a2b0 <_fstat_r>
 800a21e:	2800      	cmp	r0, #0
 800a220:	dbed      	blt.n	800a1fe <__swhatbuf_r+0x12>
 800a222:	9901      	ldr	r1, [sp, #4]
 800a224:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a228:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a22c:	4259      	negs	r1, r3
 800a22e:	4159      	adcs	r1, r3
 800a230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a234:	e7eb      	b.n	800a20e <__swhatbuf_r+0x22>

0800a236 <__smakebuf_r>:
 800a236:	898b      	ldrh	r3, [r1, #12]
 800a238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a23a:	079d      	lsls	r5, r3, #30
 800a23c:	4606      	mov	r6, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	d507      	bpl.n	800a252 <__smakebuf_r+0x1c>
 800a242:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	2301      	movs	r3, #1
 800a24c:	6163      	str	r3, [r4, #20]
 800a24e:	b002      	add	sp, #8
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	466a      	mov	r2, sp
 800a254:	ab01      	add	r3, sp, #4
 800a256:	f7ff ffc9 	bl	800a1ec <__swhatbuf_r>
 800a25a:	9900      	ldr	r1, [sp, #0]
 800a25c:	4605      	mov	r5, r0
 800a25e:	4630      	mov	r0, r6
 800a260:	f7fe fef2 	bl	8009048 <_malloc_r>
 800a264:	b948      	cbnz	r0, 800a27a <__smakebuf_r+0x44>
 800a266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26a:	059a      	lsls	r2, r3, #22
 800a26c:	d4ef      	bmi.n	800a24e <__smakebuf_r+0x18>
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	f043 0302 	orr.w	r3, r3, #2
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	e7e3      	b.n	800a242 <__smakebuf_r+0xc>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	6020      	str	r0, [r4, #0]
 800a27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	9b00      	ldr	r3, [sp, #0]
 800a286:	6120      	str	r0, [r4, #16]
 800a288:	6163      	str	r3, [r4, #20]
 800a28a:	9b01      	ldr	r3, [sp, #4]
 800a28c:	b15b      	cbz	r3, 800a2a6 <__smakebuf_r+0x70>
 800a28e:	4630      	mov	r0, r6
 800a290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a294:	f000 f81e 	bl	800a2d4 <_isatty_r>
 800a298:	b128      	cbz	r0, 800a2a6 <__smakebuf_r+0x70>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f023 0303 	bic.w	r3, r3, #3
 800a2a0:	f043 0301 	orr.w	r3, r3, #1
 800a2a4:	81a3      	strh	r3, [r4, #12]
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	431d      	orrs	r5, r3
 800a2aa:	81a5      	strh	r5, [r4, #12]
 800a2ac:	e7cf      	b.n	800a24e <__smakebuf_r+0x18>
	...

0800a2b0 <_fstat_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4d06      	ldr	r5, [pc, #24]	; (800a2d0 <_fstat_r+0x20>)
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	f7f9 ffe0 	bl	8004282 <_fstat>
 800a2c2:	1c43      	adds	r3, r0, #1
 800a2c4:	d102      	bne.n	800a2cc <_fstat_r+0x1c>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	b103      	cbz	r3, 800a2cc <_fstat_r+0x1c>
 800a2ca:	6023      	str	r3, [r4, #0]
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200010d8 	.word	0x200010d8

0800a2d4 <_isatty_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4d05      	ldr	r5, [pc, #20]	; (800a2f0 <_isatty_r+0x1c>)
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f9 ffde 	bl	80042a0 <_isatty>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_isatty_r+0x1a>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_isatty_r+0x1a>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	200010d8 	.word	0x200010d8

0800a2f4 <_init>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr

0800a300 <_fini>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	bf00      	nop
 800a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a306:	bc08      	pop	{r3}
 800a308:	469e      	mov	lr, r3
 800a30a:	4770      	bx	lr
